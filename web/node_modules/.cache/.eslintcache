[{"/home/appinventiv/Documents/Project/tickt/web/src/index.tsx":"1","/home/appinventiv/Documents/Project/tickt/web/src/reportWebVitals.ts":"2","/home/appinventiv/Documents/Project/tickt/web/src/serviceWorkerRegistration.ts":"3","/home/appinventiv/Documents/Project/tickt/web/src/App.tsx":"4","/home/appinventiv/Documents/Project/tickt/web/src/hoc/errorBoundary.tsx":"5","/home/appinventiv/Documents/Project/tickt/web/src/redux/rootReducer.ts":"6","/home/appinventiv/Documents/Project/tickt/web/src/redux/rootSaga.ts":"7","/home/appinventiv/Documents/Project/tickt/web/src/common/loader.tsx":"8","/home/appinventiv/Documents/Project/tickt/web/src/common/toast.tsx":"9","/home/appinventiv/Documents/Project/tickt/web/src/redux/common/reducers.ts":"10","/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/reducers.ts":"11","/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/sagas.ts":"12","/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/reducers.ts":"13","/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/reducers.ts":"14","/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/sagas.ts":"15","/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/reducers.ts":"16","/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/sagas.ts":"17","/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/sagas.ts":"18","/home/appinventiv/Documents/Project/tickt/web/src/routes/index.tsx":"19","/home/appinventiv/Documents/Project/tickt/web/src/redux/common/actions.ts":"20","/home/appinventiv/Documents/Project/tickt/web/src/redux/common/constants.ts":"21","/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/constants.ts":"22","/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/constants.ts":"23","/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/constants.ts":"24","/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/selectors.ts":"25","/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/constants.ts":"26","/home/appinventiv/Documents/Project/tickt/web/src/routes/routesData.ts":"27","/home/appinventiv/Documents/Project/tickt/web/src/network/NetworkOps.ts":"28","/home/appinventiv/Documents/Project/tickt/web/src/network/Urls.ts":"29","/home/appinventiv/Documents/Project/tickt/web/src/utils/storageService.ts":"30","/home/appinventiv/Documents/Project/tickt/web/src/common/header/index.ts":"31","/home/appinventiv/Documents/Project/tickt/web/src/common/scrollToTop.tsx":"32","/home/appinventiv/Documents/Project/tickt/web/src/common/customNotification.tsx":"33","/home/appinventiv/Documents/Project/tickt/web/src/routes/privateRoute.tsx":"34","/home/appinventiv/Documents/Project/tickt/web/src/utils/constants.ts":"35","/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/actions.ts":"36","/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/actions.ts":"37","/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/actions.ts":"38","/home/appinventiv/Documents/Project/tickt/web/src/pages/recommendedJobs/index.ts":"39","/home/appinventiv/Documents/Project/tickt/web/src/pages/savedJobs/index.ts":"40","/home/appinventiv/Documents/Project/tickt/web/src/pages/mostViewedJobs/index.ts":"41","/home/appinventiv/Documents/Project/tickt/web/src/pages/popularBuilders/index.ts":"42","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieSearchJobResult/index.ts":"43","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/index.ts":"44","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPageBuilder/index.ts":"45","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/sucess.tsx":"46","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieInfo/vouchers.tsx":"47","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/home.tsx":"48","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/guestHome.tsx":"49","/home/appinventiv/Documents/Project/tickt/web/src/pages/notFound/notFound.tsx":"50","/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/forgetPassword.tsx":"51","/home/appinventiv/Documents/Project/tickt/web/src/pages/login/login.tsx":"52","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/components/requestMonitored.tsx":"53","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/components/jobAppliedSuccess.tsx":"54","/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/tradieListData.tsx":"55","/home/appinventiv/Documents/Project/tickt/web/src/pages/searchTradieResult/index.tsx":"56","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/index.tsx":"57","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderInfo/index.tsx":"58","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderInfo/builderPostedJobs.tsx":"59","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/rateSuccess.tsx":"60","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/declineMilestoneSuccess.tsx":"61","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/lodgeDispute/success.tsx":"62","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/cancelJobs/success.tsx":"63","/home/appinventiv/Documents/Project/tickt/web/src/pages/chooseTheJob/success.tsx":"64","/home/appinventiv/Documents/Project/tickt/web/src/pages/chooseTheJob/index.tsx":"65","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/suceess.tsx":"66","/home/appinventiv/Documents/Project/tickt/web/src/pages/chooseJobToStartChat/chooseJobToStartChat.tsx":"67","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/editMilestones/sucess.tsx":"68","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/templateSavedSucess.tsx":"69","/home/appinventiv/Documents/Project/tickt/web/src/pages/adminAnnouncementPage/adminAnnouncementPage.tsx":"70","/home/appinventiv/Documents/Project/tickt/web/src/common/header/header.tsx":"71","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changePasswordSuccess.tsx":"72","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/supportChat.tsx":"73","/home/appinventiv/Documents/Project/tickt/web/src/utils/common.tsx":"74","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changeEmailModal/components/successPage.tsx":"75","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/components/commonViewAll.tsx":"76","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/reviewBuilder/builderReviewSubmitted.tsx":"77","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/index.ts":"78","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/index.ts":"79","/home/appinventiv/Documents/Project/tickt/web/src/pages/paymentHistory/index.ts":"80","/home/appinventiv/Documents/Project/tickt/web/src/services/firebase.js":"81","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/index.tsx":"82","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieInfo/index.tsx":"83","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/index.tsx":"84","/home/appinventiv/Documents/Project/tickt/web/src/common/tradieDetails/index.tsx":"85","/home/appinventiv/Documents/Project/tickt/web/src/pages/chat/index.tsx":"86","/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/actions.ts":"87","/home/appinventiv/Documents/Project/tickt/web/src/pages/mostViewedJobs/mostViewedJobs.tsx":"88","/home/appinventiv/Documents/Project/tickt/web/src/pages/savedJobs/savedJobs.tsx":"89","/home/appinventiv/Documents/Project/tickt/web/src/pages/recommendedJobs/recommendedJobs.tsx":"90","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieSearchJobResult/tradieSearchJobResult.tsx":"91","/home/appinventiv/Documents/Project/tickt/web/src/pages/popularBuilders/popularBuilders.tsx":"92","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPageBuilder/jobDetailsPage.tsx":"93","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/jobDetailsPage.tsx":"94","/home/appinventiv/Documents/Project/tickt/web/src/common/DocViewer.js":"95","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieInfo/voucherDetail.tsx":"96","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieInfo/addVoucher.tsx":"97","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/index.tsx":"98","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderInfo/builderInfo.tsx":"99","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/index.tsx":"100","/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/tradieBox.tsx":"101","/home/appinventiv/Documents/Project/tickt/web/src/common/auth/authModal.tsx":"102","/home/appinventiv/Documents/Project/tickt/web/src/utils/regex.ts":"103","/home/appinventiv/Documents/Project/tickt/web/src/common/tradieJobInfoBox.tsx":"104","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/jobDashboard.tsx":"105","/home/appinventiv/Documents/Project/tickt/web/src/pages/searchTradieResult/searchResultTradie.tsx":"106","/home/appinventiv/Documents/Project/tickt/web/src/common/auth/socialAuth.tsx":"107","/home/appinventiv/Documents/Project/tickt/web/src/common/auth/authParent.tsx":"108","/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/resetPassword.tsx":"109","/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/successPage.tsx":"110","/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/createPassword.tsx":"111","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/tradieEditProfile.tsx":"112","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/signup.tsx":"113","/home/appinventiv/Documents/Project/tickt/web/src/pages/paymentHistory/paymentHistory.tsx":"114","/home/appinventiv/Documents/Project/tickt/web/src/common/reviewInfoBox.tsx":"115","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/postJob.tsx":"116","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/jobDashboard.tsx":"117","/home/appinventiv/Documents/Project/tickt/web/src/common/tradieBannerSearch/index.ts":"118","/home/appinventiv/Documents/Project/tickt/web/src/pages/searchResultFilters/index.ts":"119","/home/appinventiv/Documents/Project/tickt/web/src/pages/chat/chat.tsx":"120","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieSearchJobResult/renderMap.tsx":"121","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/builderHome.tsx":"122","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/tradieHome.tsx":"123","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/openJobs.tsx":"124","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/newApplicants.tsx":"125","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/activeJobs.tsx":"126","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/pastJobs.tsx":"127","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/needApproval.tsx":"128","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/applicantsList.tsx":"129","/home/appinventiv/Documents/Project/tickt/web/src/pages/searchTradieResult/searchFilters.tsx":"130","/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/bannerSearchProps.tsx":"131","/home/appinventiv/Documents/Project/tickt/web/src/common/auth/authSlider.tsx":"132","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/privacyPolicy.tsx":"133","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/cardDetails.tsx":"134","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/settings.tsx":"135","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/bankingDetails.tsx":"136","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/termsOfUse.tsx":"137","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/personalInformation.tsx":"138","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/milestoneTemplates.tsx":"139","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/initialSignupPage.tsx":"140","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/phoneNumber.tsx":"141","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/verifyPhoneNumber.tsx":"142","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/selectYourSphere.tsx":"143","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/createPassword.tsx":"144","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/letsGo.tsx":"145","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/specialization.tsx":"146","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/createAccount.tsx":"147","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/addQualification.tsx":"148","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/addABN.tsx":"149","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/almostDone.tsx":"150","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieSearchJobResult/mapStyles.ts":"151","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobType.tsx":"152","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/postNewJob.tsx":"153","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/addLocation.tsx":"154","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/chooseTiming.tsx":"155","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/payment.tsx":"156","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/chooseTimingMileStone.tsx":"157","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/addMilestone.tsx":"158","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/saveTemplate.tsx":"159","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobPostedSuccess.tsx":"160","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobMilestones.tsx":"161","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/milestoneTemplates.tsx":"162","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/uploadMedia.tsx":"163","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobDetails.tsx":"164","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/editMileStone.tsx":"165","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/activeJobs.tsx":"166","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/appliedJobs.tsx":"167","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/newJobs.tsx":"168","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/approvedMilestones.tsx":"169","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/pastJobs.tsx":"170","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/reviewBuilder/reviewBuilder.tsx":"171","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/markMilestone.tsx":"172","/home/appinventiv/Documents/Project/tickt/web/src/common/tradieBannerSearch/tradieBannerSearch.tsx":"173","/home/appinventiv/Documents/Project/tickt/web/src/pages/searchResultFilters/searchResultFilters.tsx":"174","/home/appinventiv/Documents/Project/tickt/web/src/pages/chat/userMessages.tsx":"175","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/components/banner.tsx":"176","/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/tradieHome.tsx":"177","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/components/jobTypes.tsx":"178","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/homeBanner.tsx":"179","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/popularBuilders.tsx":"180","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/mostViewedJobs.tsx":"181","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/recommendedJobs.tsx":"182","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/savedJobs.tsx":"183","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/jobTypeList.tsx":"184","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/markMilestones.tsx":"185","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/ratethisJob/index.tsx":"186","/home/appinventiv/Documents/Project/tickt/web/src/common/thumbnail.js":"187","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/index.js":"188","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/confirmAndPay.tsx":"189","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/jobMilestones.tsx":"190","/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/bannerSearch.tsx":"191","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changeEmailModal/changeEmailModal.tsx":"192","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/cancelJobs/cancelJob.tsx":"193","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/lodgeDispute/lodgeDispute.tsx":"194","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/seeDetails.tsx":"195","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/editMilestones/index.tsx":"196","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/lodgeDispute/lodgeDispute.tsx":"197","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/cancelJobs/cancelJob.tsx":"198","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/milestoneApprove.tsx":"199","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/defaultRanges.js":"200","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/paymentDetails.tsx":"201","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/addEditMilestone.tsx":"202","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changeEmailModal/components/verifyNewEmail.tsx":"203","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changeEmailModal/components/newEmail.tsx":"204","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/editMilestones/addEditMile.tsx":"205","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/fixedRate.tsx":"206","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/declineMilestone.tsx":"207","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DateRangePicker/index.js":"208","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DefinedRange/index.js":"209","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DateRange/index.js":"210","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/Calendar/index.js":"211","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/chooseTimings.tsx":"212","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/styles.js":"213","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/accessibility/index.js":"214","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/utils.js":"215","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DateInput/index.js":"216","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/Month/index.js":"217","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DayCell/index.js":"218","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/InputRangeField/index.js":"219","/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/verifyPhoneNumber.tsx":"220","/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/DocViewer.tsx":"221","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/quoteJobCancel.tsx":"222","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/quoteSuccess.tsx":"223","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/idSuccess.tsx":"224","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/quoteJobs/success.tsx":"225","/home/appinventiv/Documents/Project/tickt/web/src/services/analyticsTools.js":"226","/home/appinventiv/Documents/Project/tickt/web/src/redux/quotes/actions.ts":"227","/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/EmailVerification.tsx":"228","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/viewQuote.tsx":"229","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/ListQuotes.tsx":"230","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/EmailVerification.tsx":"231","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/quoteJobs/quoteOuter.tsx":"232","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/activeQuoteJob/activeQuoteOuter.tsx":"233","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/digitalIdVerification.tsx":"234","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/quoteJobs/quoteMark.tsx":"235","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/activeQuoteJob/activeQuoteMark.tsx":"236","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/addBankDetails/approveMilestonePayment.jsx":"237","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/addBankDetails/paymentSetupForm.jsx":"238","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/addBankDetails/becsForm.jsx":"239"},{"size":1357,"mtime":1646311960203,"results":"240","hashOfConfig":"241"},{"size":425,"mtime":1646199572987,"results":"242","hashOfConfig":"241"},{"size":5256,"mtime":1646199572987,"results":"243","hashOfConfig":"241"},{"size":1371,"mtime":1652070514812,"results":"244","hashOfConfig":"241"},{"size":818,"mtime":1652075782925,"results":"245","hashOfConfig":"241"},{"size":657,"mtime":1646199572987,"results":"246","hashOfConfig":"241"},{"size":362,"mtime":1646199572987,"results":"247","hashOfConfig":"241"},{"size":497,"mtime":1646199572967,"results":"248","hashOfConfig":"241"},{"size":3174,"mtime":1652075571469,"results":"249","hashOfConfig":"241"},{"size":1190,"mtime":1650961565988,"results":"250","hashOfConfig":"241"},{"size":722,"mtime":1646199572987,"results":"251","hashOfConfig":"241"},{"size":1050,"mtime":1646311960231,"results":"252","hashOfConfig":"241"},{"size":2479,"mtime":1646311960231,"results":"253","hashOfConfig":"241"},{"size":5465,"mtime":1646199572987,"results":"254","hashOfConfig":"241"},{"size":4732,"mtime":1652161600808,"results":"255","hashOfConfig":"241"},{"size":2625,"mtime":1652161294602,"results":"256","hashOfConfig":"241"},{"size":11847,"mtime":1652161483080,"results":"257","hashOfConfig":"241"},{"size":9174,"mtime":1652161257722,"results":"258","hashOfConfig":"241"},{"size":1343,"mtime":1650627540905,"results":"259","hashOfConfig":"241"},{"size":832,"mtime":1650961565988,"results":"260","hashOfConfig":"241"},{"size":215,"mtime":1650961565988,"results":"261","hashOfConfig":"241"},{"size":1670,"mtime":1646311960231,"results":"262","hashOfConfig":"241"},{"size":381,"mtime":1646199572987,"results":"263","hashOfConfig":"241"},{"size":3205,"mtime":1646199572987,"results":"264","hashOfConfig":"241"},{"size":243,"mtime":1646199572987,"results":"265","hashOfConfig":"241"},{"size":1961,"mtime":1646199572987,"results":"266","hashOfConfig":"241"},{"size":14176,"mtime":1652161038239,"results":"267","hashOfConfig":"241"},{"size":5097,"mtime":1652075804033,"results":"268","hashOfConfig":"241"},{"size":12319,"mtime":1652075838161,"results":"269","hashOfConfig":"241"},{"size":1018,"mtime":1646199572987,"results":"270","hashOfConfig":"241"},{"size":1015,"mtime":1650961565984,"results":"271","hashOfConfig":"241"},{"size":257,"mtime":1646199572967,"results":"272","hashOfConfig":"241"},{"size":3192,"mtime":1652075288177,"results":"273","hashOfConfig":"241"},{"size":724,"mtime":1646199572987,"results":"274","hashOfConfig":"241"},{"size":5149,"mtime":1646311960235,"results":"275","hashOfConfig":"241"},{"size":7485,"mtime":1652161652880,"results":"276","hashOfConfig":"241"},{"size":7243,"mtime":1646311960231,"results":"277","hashOfConfig":"241"},{"size":9742,"mtime":1646311960231,"results":"278","hashOfConfig":"241"},{"size":363,"mtime":1646199572979,"results":"279","hashOfConfig":"241"},{"size":736,"mtime":1646199572979,"results":"280","hashOfConfig":"241"},{"size":358,"mtime":1646199572975,"results":"281","hashOfConfig":"241"},{"size":363,"mtime":1646199572979,"results":"282","hashOfConfig":"241"},{"size":1145,"mtime":1646199572983,"results":"283","hashOfConfig":"241"},{"size":693,"mtime":1646199572975,"results":"284","hashOfConfig":"241"},{"size":522,"mtime":1652084396026,"results":"285","hashOfConfig":"241"},{"size":1733,"mtime":1652094219221,"results":"286","hashOfConfig":"241"},{"size":9586,"mtime":1646311960231,"results":"287","hashOfConfig":"241"},{"size":2068,"mtime":1652081668114,"results":"288","hashOfConfig":"241"},{"size":849,"mtime":1652081635372,"results":"289","hashOfConfig":"241"},{"size":532,"mtime":1646311960219,"results":"290","hashOfConfig":"241"},{"size":2806,"mtime":1652080379822,"results":"291","hashOfConfig":"241"},{"size":6426,"mtime":1652086380067,"results":"292","hashOfConfig":"241"},{"size":2209,"mtime":1646311960219,"results":"293","hashOfConfig":"241"},{"size":1459,"mtime":1646311960219,"results":"294","hashOfConfig":"241"},{"size":1709,"mtime":1652096128589,"results":"295","hashOfConfig":"241"},{"size":1210,"mtime":1646199572979,"results":"296","hashOfConfig":"241"},{"size":1574,"mtime":1652079827637,"results":"297","hashOfConfig":"241"},{"size":867,"mtime":1652076191447,"results":"298","hashOfConfig":"241"},{"size":3658,"mtime":1646311960203,"results":"299","hashOfConfig":"241"},{"size":1035,"mtime":1646199572971,"results":"300","hashOfConfig":"241"},{"size":931,"mtime":1646199572971,"results":"301","hashOfConfig":"241"},{"size":1206,"mtime":1646199572971,"results":"302","hashOfConfig":"241"},{"size":1249,"mtime":1646199572971,"results":"303","hashOfConfig":"241"},{"size":1067,"mtime":1646311960211,"results":"304","hashOfConfig":"241"},{"size":6951,"mtime":1652080279788,"results":"305","hashOfConfig":"241"},{"size":2933,"mtime":1646311960207,"results":"306","hashOfConfig":"241"},{"size":7875,"mtime":1652080237480,"results":"307","hashOfConfig":"241"},{"size":1049,"mtime":1646199572971,"results":"308","hashOfConfig":"241"},{"size":2106,"mtime":1652089300416,"results":"309","hashOfConfig":"241"},{"size":4695,"mtime":1652075865341,"results":"310","hashOfConfig":"241"},{"size":34663,"mtime":1652075497181,"results":"311","hashOfConfig":"241"},{"size":1613,"mtime":1652099303615,"results":"312","hashOfConfig":"241"},{"size":3375,"mtime":1652100135949,"results":"313","hashOfConfig":"241"},{"size":16756,"mtime":1652160022220,"results":"314","hashOfConfig":"241"},{"size":1570,"mtime":1652099269184,"results":"315","hashOfConfig":"241"},{"size":8418,"mtime":1652081355842,"results":"316","hashOfConfig":"241"},{"size":1533,"mtime":1652083928977,"results":"317","hashOfConfig":"241"},{"size":1692,"mtime":1646199572983,"results":"318","hashOfConfig":"241"},{"size":503,"mtime":1646199572983,"results":"319","hashOfConfig":"241"},{"size":758,"mtime":1646199572979,"results":"320","hashOfConfig":"241"},{"size":15276,"mtime":1652160958581,"results":"321","hashOfConfig":"241"},{"size":1064,"mtime":1652089590029,"results":"322","hashOfConfig":"241"},{"size":70049,"mtime":1650627540905,"results":"323","hashOfConfig":"241"},{"size":1753,"mtime":1646199572975,"results":"324","hashOfConfig":"241"},{"size":205,"mtime":1651843439138,"results":"325","hashOfConfig":"241"},{"size":491,"mtime":1646199572971,"results":"326","hashOfConfig":"241"},{"size":30109,"mtime":1652161547099,"results":"327","hashOfConfig":"241"},{"size":3121,"mtime":1646199572979,"results":"328","hashOfConfig":"241"},{"size":2196,"mtime":1652094305354,"results":"329","hashOfConfig":"241"},{"size":3359,"mtime":1646199572979,"results":"330","hashOfConfig":"241"},{"size":22654,"mtime":1650627540905,"results":"331","hashOfConfig":"241"},{"size":5527,"mtime":1652086932152,"results":"332","hashOfConfig":"241"},{"size":61111,"mtime":1652086286910,"results":"333","hashOfConfig":"241"},{"size":77395,"mtime":1652084340878,"results":"334","hashOfConfig":"241"},{"size":918,"mtime":1652075101502,"results":"335","hashOfConfig":"241"},{"size":2363,"mtime":1646311960231,"results":"336","hashOfConfig":"241"},{"size":11057,"mtime":1650627540905,"results":"337","hashOfConfig":"241"},{"size":1404,"mtime":1652081615815,"results":"338","hashOfConfig":"241"},{"size":43122,"mtime":1652076118319,"results":"339","hashOfConfig":"241"},{"size":924,"mtime":1646199572975,"results":"340","hashOfConfig":"241"},{"size":3611,"mtime":1652096087252,"results":"341","hashOfConfig":"241"},{"size":2692,"mtime":1646199572967,"results":"342","hashOfConfig":"241"},{"size":815,"mtime":1646199572987,"results":"343","hashOfConfig":"241"},{"size":3470,"mtime":1651030006373,"results":"344","hashOfConfig":"241"},{"size":33436,"mtime":1652079945927,"results":"345","hashOfConfig":"241"},{"size":13616,"mtime":1652095455639,"results":"346","hashOfConfig":"241"},{"size":4331,"mtime":1652075276645,"results":"347","hashOfConfig":"241"},{"size":5573,"mtime":1652075133894,"results":"348","hashOfConfig":"241"},{"size":2739,"mtime":1652080325825,"results":"349","hashOfConfig":"241"},{"size":1801,"mtime":1652099251703,"results":"350","hashOfConfig":"241"},{"size":2636,"mtime":1646311960211,"results":"351","hashOfConfig":"241"},{"size":10645,"mtime":1652100194322,"results":"352","hashOfConfig":"241"},{"size":10454,"mtime":1652096900820,"results":"353","hashOfConfig":"241"},{"size":13655,"mtime":1652086847964,"results":"354","hashOfConfig":"241"},{"size":2844,"mtime":1652075531873,"results":"355","hashOfConfig":"241"},{"size":18206,"mtime":1652089695027,"results":"356","hashOfConfig":"241"},{"size":12265,"mtime":1652098800814,"results":"357","hashOfConfig":"241"},{"size":1000,"mtime":1646311960203,"results":"358","hashOfConfig":"241"},{"size":889,"mtime":1646199572979,"results":"359","hashOfConfig":"241"},{"size":15223,"mtime":1652080023868,"results":"360","hashOfConfig":"241"},{"size":5226,"mtime":1651844193679,"results":"361","hashOfConfig":"241"},{"size":8063,"mtime":1652080481176,"results":"362","hashOfConfig":"241"},{"size":2585,"mtime":1646199572975,"results":"363","hashOfConfig":"241"},{"size":9302,"mtime":1652079307805,"results":"364","hashOfConfig":"241"},{"size":5668,"mtime":1652079170683,"results":"365","hashOfConfig":"241"},{"size":10113,"mtime":1652076297245,"results":"366","hashOfConfig":"241"},{"size":9306,"mtime":1652079414247,"results":"367","hashOfConfig":"241"},{"size":9040,"mtime":1652079072490,"results":"368","hashOfConfig":"241"},{"size":5062,"mtime":1652076613057,"results":"369","hashOfConfig":"241"},{"size":17057,"mtime":1652095278736,"results":"370","hashOfConfig":"241"},{"size":36068,"mtime":1652096001471,"results":"371","hashOfConfig":"241"},{"size":2479,"mtime":1652075214392,"results":"372","hashOfConfig":"241"},{"size":807,"mtime":1652100098137,"results":"373","hashOfConfig":"241"},{"size":263,"mtime":1652096972013,"results":"374","hashOfConfig":"241"},{"size":3801,"mtime":1646311960227,"results":"375","hashOfConfig":"241"},{"size":10071,"mtime":1652096952028,"results":"376","hashOfConfig":"241"},{"size":784,"mtime":1652100156689,"results":"377","hashOfConfig":"241"},{"size":89526,"mtime":1652099942158,"results":"378","hashOfConfig":"241"},{"size":3237,"mtime":1652099188787,"results":"379","hashOfConfig":"241"},{"size":1748,"mtime":1652096700204,"results":"380","hashOfConfig":"241"},{"size":2747,"mtime":1652096769949,"results":"381","hashOfConfig":"241"},{"size":4151,"mtime":1646311960227,"results":"382","hashOfConfig":"241"},{"size":2046,"mtime":1652096787899,"results":"383","hashOfConfig":"241"},{"size":2558,"mtime":1646311960227,"results":"384","hashOfConfig":"241"},{"size":2220,"mtime":1652096730036,"results":"385","hashOfConfig":"241"},{"size":2119,"mtime":1646311960227,"results":"386","hashOfConfig":"241"},{"size":5484,"mtime":1652096459796,"results":"387","hashOfConfig":"241"},{"size":7268,"mtime":1646311960227,"results":"388","hashOfConfig":"241"},{"size":3252,"mtime":1646311960227,"results":"389","hashOfConfig":"241"},{"size":4337,"mtime":1651810296182,"results":"390","hashOfConfig":"241"},{"size":2936,"mtime":1646199572983,"results":"391","hashOfConfig":"241"},{"size":11175,"mtime":1652088917380,"results":"392","hashOfConfig":"241"},{"size":8401,"mtime":1652089176357,"results":"393","hashOfConfig":"241"},{"size":10885,"mtime":1652087051185,"results":"394","hashOfConfig":"241"},{"size":8839,"mtime":1652087364598,"results":"395","hashOfConfig":"241"},{"size":8670,"mtime":1652089114680,"results":"396","hashOfConfig":"241"},{"size":10332,"mtime":1652087444426,"results":"397","hashOfConfig":"241"},{"size":19672,"mtime":1652087302358,"results":"398","hashOfConfig":"241"},{"size":3534,"mtime":1652089251911,"results":"399","hashOfConfig":"241"},{"size":539,"mtime":1652088805705,"results":"400","hashOfConfig":"241"},{"size":23514,"mtime":1652088760079,"results":"401","hashOfConfig":"241"},{"size":3962,"mtime":1652089025162,"results":"402","hashOfConfig":"241"},{"size":25055,"mtime":1652089521944,"results":"403","hashOfConfig":"241"},{"size":21635,"mtime":1652088501603,"results":"404","hashOfConfig":"241"},{"size":17315,"mtime":1652088406795,"results":"405","hashOfConfig":"241"},{"size":7933,"mtime":1652098835344,"results":"406","hashOfConfig":"241"},{"size":7113,"mtime":1652098846364,"results":"407","hashOfConfig":"241"},{"size":5445,"mtime":1652098862515,"results":"408","hashOfConfig":"241"},{"size":7553,"mtime":1652098873394,"results":"409","hashOfConfig":"241"},{"size":6946,"mtime":1652098782379,"results":"410","hashOfConfig":"241"},{"size":6210,"mtime":1652084046766,"results":"411","hashOfConfig":"241"},{"size":40336,"mtime":1652082960993,"results":"412","hashOfConfig":"241"},{"size":30804,"mtime":1652075720716,"results":"413","hashOfConfig":"241"},{"size":22360,"mtime":1652095048261,"results":"414","hashOfConfig":"241"},{"size":22260,"mtime":1652080178687,"results":"415","hashOfConfig":"241"},{"size":1788,"mtime":1652081216970,"results":"416","hashOfConfig":"241"},{"size":2430,"mtime":1652096107148,"results":"417","hashOfConfig":"241"},{"size":3993,"mtime":1652081414855,"results":"418","hashOfConfig":"241"},{"size":1188,"mtime":1652081714918,"results":"419","hashOfConfig":"241"},{"size":2218,"mtime":1652081791194,"results":"420","hashOfConfig":"241"},{"size":1449,"mtime":1646199572975,"results":"421","hashOfConfig":"241"},{"size":1455,"mtime":1646199572975,"results":"422","hashOfConfig":"241"},{"size":1018,"mtime":1646199572975,"results":"423","hashOfConfig":"241"},{"size":1870,"mtime":1652081734180,"results":"424","hashOfConfig":"241"},{"size":18727,"mtime":1652077664091,"results":"425","hashOfConfig":"241"},{"size":8336,"mtime":1652079708487,"results":"426","hashOfConfig":"241"},{"size":974,"mtime":1646199572967,"results":"427","hashOfConfig":"241"},{"size":1543,"mtime":1646199572987,"results":"428","hashOfConfig":"241"},{"size":12460,"mtime":1652076736050,"results":"429","hashOfConfig":"241"},{"size":17697,"mtime":1652098582625,"results":"430","hashOfConfig":"241"},{"size":33678,"mtime":1652095684566,"results":"431","hashOfConfig":"241"},{"size":2812,"mtime":1652099218091,"results":"432","hashOfConfig":"241"},{"size":5874,"mtime":1652082543887,"results":"433","hashOfConfig":"241"},{"size":8686,"mtime":1652082399886,"results":"434","hashOfConfig":"241"},{"size":5017,"mtime":1652079769260,"results":"435","hashOfConfig":"241"},{"size":22170,"mtime":1652077378296,"results":"436","hashOfConfig":"241"},{"size":9157,"mtime":1652077442609,"results":"437","hashOfConfig":"241"},{"size":7785,"mtime":1652076661881,"results":"438","hashOfConfig":"241"},{"size":8715,"mtime":1652077705508,"results":"439","hashOfConfig":"241"},{"size":5538,"mtime":1646199572987,"results":"440","hashOfConfig":"241"},{"size":14239,"mtime":1652076805347,"results":"441","hashOfConfig":"241"},{"size":13400,"mtime":1652098262860,"results":"442","hashOfConfig":"241"},{"size":4997,"mtime":1652099292490,"results":"443","hashOfConfig":"241"},{"size":5327,"mtime":1646199572983,"results":"444","hashOfConfig":"241"},{"size":20239,"mtime":1652077194477,"results":"445","hashOfConfig":"241"},{"size":9883,"mtime":1646311960207,"results":"446","hashOfConfig":"241"},{"size":6368,"mtime":1652076893401,"results":"447","hashOfConfig":"241"},{"size":8154,"mtime":1646199572987,"results":"448","hashOfConfig":"241"},{"size":12033,"mtime":1646199572987,"results":"449","hashOfConfig":"241"},{"size":13725,"mtime":1646199572983,"results":"450","hashOfConfig":"241"},{"size":34922,"mtime":1646199572983,"results":"451","hashOfConfig":"241"},{"size":10868,"mtime":1652098422408,"results":"452","hashOfConfig":"241"},{"size":1957,"mtime":1646199572987,"results":"453","hashOfConfig":"241"},{"size":693,"mtime":1646199572983,"results":"454","hashOfConfig":"241"},{"size":3790,"mtime":1646199572987,"results":"455","hashOfConfig":"241"},{"size":9086,"mtime":1646199572983,"results":"456","hashOfConfig":"241"},{"size":12580,"mtime":1646199572987,"results":"457","hashOfConfig":"241"},{"size":16481,"mtime":1646199572987,"results":"458","hashOfConfig":"241"},{"size":7291,"mtime":1646199572987,"results":"459","hashOfConfig":"241"},{"size":3408,"mtime":1646199572971,"results":"460","hashOfConfig":"241"},{"size":593,"mtime":1652095482671,"results":"461","hashOfConfig":"241"},{"size":1782,"mtime":1646311960211,"results":"462","hashOfConfig":"241"},{"size":1121,"mtime":1652079580365,"results":"463","hashOfConfig":"241"},{"size":898,"mtime":1651121749562,"results":"464","hashOfConfig":"241"},{"size":1245,"mtime":1652083910977,"results":"465","hashOfConfig":"241"},{"size":788,"mtime":1646311960231,"results":"466","hashOfConfig":"241"},{"size":3412,"mtime":1652161217973,"results":"467","hashOfConfig":"241"},{"size":3526,"mtime":1650961565984,"results":"468","hashOfConfig":"241"},{"size":11992,"mtime":1652079658963,"results":"469","hashOfConfig":"241"},{"size":5574,"mtime":1651843771397,"results":"470","hashOfConfig":"241"},{"size":3880,"mtime":1652096172725,"results":"471","hashOfConfig":"241"},{"size":4044,"mtime":1652083860459,"results":"472","hashOfConfig":"241"},{"size":4973,"mtime":1646311960215,"results":"473","hashOfConfig":"241"},{"size":7007,"mtime":1652098102607,"results":"474","hashOfConfig":"241"},{"size":19704,"mtime":1652083772754,"results":"475","hashOfConfig":"241"},{"size":3143,"mtime":1652082008221,"results":"476","hashOfConfig":"241"},{"size":1652,"mtime":1652076348861,"results":"477","hashOfConfig":"241"},{"size":3673,"mtime":1652076389618,"results":"478","hashOfConfig":"241"},{"size":3302,"mtime":1652076374026,"results":"479","hashOfConfig":"241"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},"1yrnda1",{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"482"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"482"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"482"},{"filePath":"554","messages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"482"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"482"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"482"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"482"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"482"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"482"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"482"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"482"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"482"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675","usedDeprecatedRules":"482"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"482"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690","usedDeprecatedRules":"482"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701","usedDeprecatedRules":"482"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"482"},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"482"},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"482"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"482"},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"482"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725","usedDeprecatedRules":"482"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"482"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"743","messages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"482"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"482"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"753","messages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"755","messages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"482"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"482"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"767","messages":"768","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"769","usedDeprecatedRules":"482"},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"772","usedDeprecatedRules":"482"},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"775","usedDeprecatedRules":"482"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"782","usedDeprecatedRules":"482"},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789","usedDeprecatedRules":"482"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"792","usedDeprecatedRules":"482"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"482"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"482"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"482"},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"482"},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"813","usedDeprecatedRules":"482"},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816","usedDeprecatedRules":"482"},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"827","usedDeprecatedRules":"482"},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"830","usedDeprecatedRules":"482"},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"849","usedDeprecatedRules":"482"},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"852","messages":"853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"854","messages":"855","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"856","usedDeprecatedRules":"482"},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"859","usedDeprecatedRules":"482"},{"filePath":"860","messages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"862","usedDeprecatedRules":"482"},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"865","usedDeprecatedRules":"482"},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868","usedDeprecatedRules":"482"},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"873","usedDeprecatedRules":"482"},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"876","usedDeprecatedRules":"482"},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"879","usedDeprecatedRules":"482"},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"898","messages":"899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"902","usedDeprecatedRules":"482"},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"905","usedDeprecatedRules":"482"},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"914","usedDeprecatedRules":"482"},{"filePath":"915","messages":"916","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"917","usedDeprecatedRules":"482"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"922","usedDeprecatedRules":"482"},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"925","usedDeprecatedRules":"482"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"928","messages":"929","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"930","usedDeprecatedRules":"482"},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"933","usedDeprecatedRules":"482"},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"936","usedDeprecatedRules":"482"},{"filePath":"937","messages":"938","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"939","usedDeprecatedRules":"482"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"948","usedDeprecatedRules":"482"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"951","usedDeprecatedRules":"482"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"958","usedDeprecatedRules":"482"},{"filePath":"959","messages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"965","usedDeprecatedRules":"685"},{"filePath":"966","messages":"967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"968","messages":"969","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"970","usedDeprecatedRules":"482"},{"filePath":"971","messages":"972","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"973","messages":"974","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"975","messages":"976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"979","messages":"980","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"981","messages":"982","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"983","usedDeprecatedRules":"685"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"986","messages":"987","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"988","messages":"989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"992","messages":"993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"994","messages":"995","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"996","messages":"997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"998","messages":"999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"1000","messages":"1001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004","usedDeprecatedRules":"482"},{"filePath":"1005","messages":"1006","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"1007","messages":"1008","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"1009","messages":"1010","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1011","usedDeprecatedRules":"482"},{"filePath":"1012","messages":"1013","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"1014","messages":"1015","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1016","usedDeprecatedRules":"482"},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"1019","messages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"1021","messages":"1022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"482"},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"1025","messages":"1026","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"685"},{"filePath":"1027","messages":"1028","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1029","usedDeprecatedRules":"685"},"/home/appinventiv/Documents/Project/tickt/web/src/index.tsx",[],["1030","1031"],"/home/appinventiv/Documents/Project/tickt/web/src/reportWebVitals.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/serviceWorkerRegistration.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/App.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/hoc/errorBoundary.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/rootReducer.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/rootSaga.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/loader.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/toast.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/common/reducers.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/reducers.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/sagas.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/reducers.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/reducers.ts",["1032"],"import { getTradieReviewList } from './actions';\nimport * as actionTypes from './constants'\n\nconst initialState = {\n  editMilestoneId: null,\n  editMilestoneTiming: null,\n  editDetailPage: null,\n  builderHome: null,\n  testBuilderHome: null,\n  localChanges: false,\n  activeJobList: null,\n  appliedJobList: null,\n  pastJobList: null,\n  newJobList: null,\n  approvedMilestoneList: null,\n  milestoneList: [],\n  milestonesCount: 0,\n  newJobsCount: 0,\n  builderActionJobs: [],\n  builderOpenJobs: [],\n  builderPastJobs: [],\n  builderNewApplicants: [],\n  builderNewApplicantsList: [],\n  newApprovalList: [],\n  tradieReviewList: [],\n  tradieReviews: [],\n  tradieRequestStatus: false\n}\n\nconst reducer = (state = initialState, action: any) => {\n  console.log(action)\n  switch (action.type) {\n\n    case actionTypes.EDIT_MILESTONE_ID:\n      state.editMilestoneId = action.payload;\n      return { ...state }\n\n    case actionTypes.EDIT_MILESTONE_TIMINGS:\n      state.editMilestoneTiming = action.payload;\n      return { ...state }\n\n    case actionTypes.EDIT_DETAIL_SCREEN:\n      state.editDetailPage = action.payload;\n      return { ...state }\n\n    case actionTypes.FETCH_HOME_BUILDER:\n      state.builderHome = action.payload;\n      return { ...state }\n\n    case actionTypes.SET_FETCH_HOME_BUILDER:\n      return {\n        ...state,\n        testBuilderHome: action.payload\n      }\n\n    case actionTypes.SET_LOCAL_CHANGES:\n      return {\n        ...state,\n        localChanges: action.payload.data\n      }\n\n    case actionTypes.GET_ACTIVE_JOBS_END:\n      return {\n        ...state,\n        activeJobList: action.payload?.active,\n        milestonesCount: action.payload?.milestonesCount,\n        newJobsCount: action.payload?.newJobsCount,\n      };\n\n    case actionTypes.GET_APPLIED_JOBS_END:\n      return {\n        ...state,\n        appliedJobList: action.payload.applied,\n        milestonesCount: action.payload.milestonesCount,\n        newJobsCount: action.payload.newJobsCount,\n      };\n\n    case actionTypes.GET_PAST_JOBS_END:\n      return {\n        ...state,\n        pastJobList: action.payload.completed,\n        milestonesCount: action.payload.milestonesCount,\n        newJobsCount: action.payload.newJobsCount,\n      };\n\n    case actionTypes.GET_NEW_JOBS_END:\n      return {\n        ...state,\n        newJobList: action.payload,\n      };\n\n    case actionTypes.GET_APPROVED_MILESTONE_END:\n      return {\n        ...state,\n        approvedMilestoneList: action.payload,\n      };\n\n    case actionTypes.GET_MILESTONES_END:\n      return {\n        ...state,\n        milestoneList: action.payload,\n      };\n\n    case actionTypes.SET_BUILDER_ACTIVE_JOBS:\n      return {\n        ...state,\n        builderActionJobs: action.payload,\n        builderOpenJobs: null,\n        builderPastJobs: null,\n        builderNewApplicants: null,\n        builderNewApplicantsList: null,\n        newApprovalList: null,\n        tradieRequestStatus: false,\n      };\n\n    case actionTypes.SET_BUILDER_OPEN_JOBS:\n      return {\n        ...state,\n        builderOpenJobs: action.payload,\n        builderActionJobs: null,\n        builderPastJobs: null,\n        builderNewApplicants: null,\n        builderNewApplicantsList: null,\n        newApprovalList: null,\n        tradieRequestStatus: false,\n      };\n\n    case actionTypes.SET_BUILDER_PAST_JOBS:\n      return {\n        ...state,\n        builderPastJobs: action.payload,\n        builderActionJobs: null,\n        builderOpenJobs: null,\n        builderNewApplicants: null,\n        builderNewApplicantsList: null,\n        newApprovalList: null,\n        tradieRequestStatus: false,\n      };\n\n    case actionTypes.SET_BUILDER_NEW_APPLICANTS:\n      console.log('Here!!')\n      return {\n        ...state,\n        builderNewApplicants: action.payload,\n        builderActionJobs: null,\n        builderOpenJobs: null,\n        builderPastJobs: null,\n        builderNewApplicantsList: null,\n        newApprovalList: null,\n        tradieRequestStatus: false,\n      };\n\n    case actionTypes.SET_BUILDER_NEW_APPLICANTS_LIST:\n      console.log('Here!! --1 ')\n      return {\n        ...state,\n        tradieRequestStatus: false,\n        builderNewApplicantsList: action.payload,\n        builderActionJobs: null,\n        builderOpenJobs: null,\n        builderPastJobs: null,\n        builderNewApplicants: null,\n        newApprovalList: null,\n      };\n\n    // case actionTypes.SET_TRADIE_REVIEW_LIST:\n    //   return {\n    //     ...state,\n    //     tradieReviewList: action.payload,\n    //   };\n\n\n\n    case actionTypes.SET_TRADIE_REVIEWS_LIST_ON_BUILDER:\n      return {\n        ...state,\n        tradieReviews: action.payload,\n      };\n\n    case actionTypes.SET_ACCEPT_DECLINE_TRADIE_REQUEST:\n      return {\n        ...state,\n        tradieRequestStatus: action.payload,\n      };\n\n    case actionTypes.SET_BUILDER_NEW_APPROVAL_LIST:\n      return {\n        ...state,\n        newApprovalList: action.payload,\n        builderActionJobs: null,\n        builderOpenJobs: null,\n        builderPastJobs: null,\n        builderNewApplicants: null,\n        builderNewApplicantsList: null,\n      };\n\n\n    case actionTypes.SET_CLEAR_JOBS:\n      return {\n        ...state,\n        builderActionJobs: [],\n        builderOpenJobs: [],\n        builderPastJobs: [],\n        builderNewApplicants: [],\n        builderNewApplicantsList: [],\n        newApprovalList: [],\n        tradieReviewList: [],\n        tradieReviews: [],\n      }\n\n\n    default: return state;\n  }\n}\n\nexport default reducer","/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/sagas.ts",["1033","1034","1035"],"/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/reducers.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/sagas.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/sagas.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/routes/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/common/actions.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/common/constants.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/constants.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/constants.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/constants.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/selectors.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/constants.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/routes/routesData.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/network/NetworkOps.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/network/Urls.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/utils/storageService.ts",["1036"],"function getItem(key: string) {\n    try {\n        let value: string | null = localStorage.getItem(key);\n        if(value) {\n            return JSON.parse(value);\n        }\n        return null;\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n\nfunction setItem(key: string, value: any) {\n    let val: string = JSON.stringify(value);\n    try {\n        return localStorage.setItem(key, val);\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n\nfunction removeItem(key: string) {\n    try {\n        return localStorage.removeItem(key);\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n\nfunction clearAll() {\n    try {\n        // to prevent this value from getting cleared on logout\n        const firstLogin = localStorage.getItem('firstLogin');\n        localStorage.clear();\n\n        if (firstLogin) {\n          localStorage.setItem('firstLogin', firstLogin);\n        }\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n\nexport default {\n    getItem,\n    setItem,\n    removeItem,\n    clearAll\n}","/home/appinventiv/Documents/Project/tickt/web/src/common/header/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/scrollToTop.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/customNotification.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/routes/privateRoute.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/utils/constants.ts",["1037"],"// 1 --> tradie | 2 --> builder\nconst USER_TYPE = 2;\n\nconst OTP_TIMER = 60;\n\nconst errorStrings: any = {\n    fullNameEmpty: 'Full Name is required',\n    fullNameErr: 'Please enter a valid name',\n    fullNameShortErr: 'Name must have minimum 3 letters',\n    companyNameEmpty: 'Company Name is required',\n    companyNameErr: 'Please enter a valid company name',\n    businessNameEmpty: 'Business Name is required',\n    businessNameErr: 'Please enter a valid business name',\n    companyNameShortErr: 'Company Name must have minimum 3 letters',\n    positionNameEmpty: 'Position is required',\n    positionNameErr: 'Please enter a valid position',\n    positionNameShortErr: 'Position must have minimum 3 letters',\n    emailEmpty: 'Email Address is required',\n    emailExist: 'Email Address already in use',\n    emailErr: 'Please enter valid Email Address',\n    tncEmpty: 'Please accept privacy policy and terms & conditions',\n    phoneNumberEmpty: 'Phone Number is required',\n    phoneNumberErr: 'Please enter correct Phone Number',\n    phoneNumberExist: 'Phone Number already in use',\n    abnEmpty: 'ABN is required',\n    abnErr: 'Please enter correct ABN',\n    abnExist: 'ABN already in use',\n    password: 'Password is required',\n    oldPassword: 'Old Password is required',\n    passwordInvalid: 'Invalid password',\n    passwordError: 'Password must be 8 characters long and must include atleast one uppercase, one lowercase letter, one numeric and one special character',\n    confirmNewPassword: 'New Password and confirm New Password doesn\\'t match',\n    otpEmpty: 'OTP is required',\n    otpIncorrect: 'Please enter a valid OTP',\n    sphereEmpty: 'Please select your trade',\n    specializationEmpty: 'Please select your specialization',\n    pleaseEnter: 'Please enter ',\n    pleaseSelect: 'Please select',\n    bannerSearchJob: 'Please Select Job Type from the List',\n    bannerSearchJobError: 'Please search valid job name',\n    bannerSearchJobEmpty: 'Job Type is required',\n    bannerSearchLocation: 'Please select location from the list',\n    maxBudgetEmpty: 'Budget is required',\n    maxBudgetError: 'Budget have maximum two decimal values',\n    askQuestion: 'Question is required',\n    askReview: 'Review is required',\n    askReply: 'Reply is required',\n    JobName: 'Job Name is required',\n    JobDescription: 'Job Description is required',\n}\ninterface Types {\n    [key: string]: any | string;\n}\n\nconst SocialAuth: Types = {\n    GOOGLE_CLIENT_ID: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n    GOOGLE_SECRET_KEY: process.env.REACT_APP_GOOGLE_SECRET_KEY,\n    GOOGLE_GEOCODE_KEY: process.env.REACT_APP_GOOGLE_GEOCODE_KEY,\n}\n\nconst LinkedInAuth: Types = {\n    REDIRECT_URI: `${window.location.origin}/linkedin`,\n    CLIENT_ID: process.env.REACT_APP_CLIENT_ID,\n    CLIENT_SECRET: process.env.REACT_APP_CLIENT_SECRET,\n}\n\nconst BasicAuthorizationToken = process.env.REACT_APP_BASIC_AUTHORIZATION_TOKEN;\nconst FirebasePushServiceKey = process.env.REACT_APP_FIREBASE_PUSH_SERVICE_KEY;\nconst FcmHeaderAuthorizationKey = process.env.REACT_APP_FCM_AUTHORIZATION;\n\nconst qaStgFirebaseConfig: Types = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\n\nexport const MoEConstants: any = {\n    LOG_OUT: 'Log Out',\n    APP_OPEN: 'App Open',\n    SIGN_UP: 'Sign Up',\n    SEARCHED_FOR_TRADIES: 'Searched for tradies',\n    VIEWED_TRADIE_PROFILE: 'Viewed tradie profile',\n    POSTED_A_JOB: 'Posted a job',\n    VIEW_QUOTE: 'View Quote',\n    ACCEPT_QUOTE: 'Accept quote',\n    CANCEL_QUOTED_JOB: 'Cancel quoted job',\n    MILESTONE_CHECKED_AND_APPROVED: 'Milestone Checked and approved',\n    MADE_PAYMENT: 'Made Payment',\n    MILESTONE_DECLINED: 'Milestone declined',\n    SAVED_TRADIE:'Saved tradie',\n    CHAT: 'Chat',\n    VIEWED_REVIEWS: 'Viewed reviews',\n    LEFT_VOUCHER: 'Left voucher',\n    PAYMENT_SUCCESS: 'Payment success',\n    PAYMENT_FAILURE: 'Payment failure',\n    EDIT_MILESTONES: 'Edit milestones',\n    CANCEL_JOB: 'Cancel job',\n    REPUBLISHED_JOB: 'Republished job',\n    ADDED_INFO_ABOUT_COMPANY: 'Added info about company',\n    ADDED_PORTFOLIO: 'Added portfolio',\n    ADDED_PAYMENT_DETAILS: 'Added payment details',\n    SEARCHED_FOR_JOBS: 'Searched for jobs',\n    VIEWED_BUILDER_PROFILE: 'Viewed builder profile',\n    QUOTED_A_JOB: 'Quoted a job',\n    ASKED_A_QUESTION: 'Asked a question',\n    APPLIED_FOR_A_JOB: 'Applied for a job',\n    MILESTONE_COMPLETED: 'Milestone completed',\n    VIEWED_APPROVED_MILESTONE: 'Viewed approved milestone',\n    ADDED_REVIEW: 'Added review',\n    ACCEPT_CANCELLATION: 'Accept cancellation',\n    REJECT_CANCELLATION: 'Reject Cancellation',\n}\n\nexport default {\n    errorStrings,\n    OTP_TIMER,\n    USER_TYPE,\n    SocialAuth,\n    LinkedInAuth,\n    BasicAuthorizationToken,\n    FirebasePushServiceKey,\n    qaStgFirebaseConfig,\n    FcmHeaderAuthorizationKey,\n}","/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/actions.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/actions.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/actions.ts",["1038"],"import NetworkOps, { FetchResponse } from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading } from './../common/actions';\nimport storageService from '../../utils/storageService';\n\nimport {\n  callTradieProfileData as getProfileTradie,\n  getProfileBuilder\n} from '../profile/actions';\nimport { store } from '../../App';\n\nexport const callTradeList = () => ({ type: actionTypes.CALL_TRADE_LIST })\n\nexport const postSignup = async (data: any) => {\n  console.log(data);\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.signup, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": response.result?.email,\n      \"user_image\": response.result?.user_image,\n      \"user_type\": response.result?.user_type,\n      \"userName\": response.result?.firstName,\n      \"_id\": response.result?._id,\n      \"accountType\": response.result?.accountType,\n      \"deviceId\": uniqueToken\n    });\n    return { success: true, result: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const checkEmailId = async (email: string, hideToast?: boolean) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.checkEmailId + `?email=${email}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, isProfileCompleted: response.result.isProfileCompleted, message: response.message };\n  }\n  if (!hideToast) {\n    setShowToast(true, response.message);\n  }\n  return { success: false };\n};\n\nexport const checkMobileNumber = async (mobile: string | number) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.checkMobileNumber + `?mobileNumber=${mobile}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, isProfileCompleted: response.result.isProfileCompleted, message: response.message };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const verifyOtp = async (data: object) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.verifyOTP, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, message: response.message };\n  }\n  setShowToast(true, response.message);\n  return { success: false }\n};\n\n\nexport const verifyMobileOtp = async (data: object) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.verifyMobileOTP, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, message: response.message };\n  }\n  setShowToast(true, response.message);\n  return { success: false }\n};\n\n\nexport const createPassword = async (passwordInfo: object) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.createPassword, passwordInfo);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, message: response.message };\n  }\n  setShowToast(true, response.message);\n  return { success: false, message: response.message };\n};\n\n\nexport const callLogin = async (data: any) => {\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.login, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    const firstLogin = storageService.getItem('firstLogin');\n\n    if (!firstLogin) {\n      storageService.setItem('firstLogin', 'true');\n    } else if (firstLogin === 'true') {\n      storageService.setItem('firstLogin', 'false');\n    }\n\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": response.result?.email,\n      \"user_image\": response.result?.user_image,\n      \"user_type\": response.result?.user_type,\n      \"userName\": response.result?.userName,\n      \"_id\": response.result?._id,\n      \"accountType\": response.result?.accountType,\n      \"deviceId\": uniqueToken\n    });\n\n    if (response.result.user_type === 1) {\n      store.dispatch(getProfileTradie());\n    }\n\n    if (response.result.user_type === 2) {\n      store.dispatch(getProfileBuilder());\n    }\n    return { success: true, data: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const callForgotPassword = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.forgotPassword, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const checkSocialId = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.checkSocialId + `?socialId=${data.socialId}` + `&email=${data.email}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, isProfileCompleted: response.result.isProfileCompleted };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const socialSignupLogin = async (data: any) => {\n  console.log(data);\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.SocialAuth, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": response.result?.email,\n      \"user_image\": response.result?.user_image,\n      \"user_type\": response.result?.user_type,\n      \"userName\": response.result?.firstName || 'name',\n      \"_id\": response.result?._id,\n      \"deviceId\": uniqueToken\n    });\n    return { success: true, successToken: response.result.token, result: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const getLinkedinProfile = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.linkedInAuth + `?code=${data.code}&redirect_uri=${data.redirect_uri}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, result: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const onFileUpload = async (data: any) => {\n  setLoading(true);\n  const options = {\n    headerOverrides: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }\n  const response: FetchResponse = await NetworkOps.postRaw(Urls.upload, data, options);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, imgUrl: response.result.url[0] };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const addFCMNotifToken = async (data: object) => {\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.addFCMNotifToken, data);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  return { success: false };\n};\n\nexport const markNotifAsRead = async (data: any) => {\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.unReadNotification, data);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  return { success: false };\n};\n\nexport const resendOtp = async (data: any) => {\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.resendOtp, data);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const resendMobileOtp = async (data: any) => {\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.resendMobileOtp, data);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const getStripeClientSecretkey = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.getStripeClientSecretKey, data);\n  if (response.status_code === 200) {\n    return { success: true, stripeClientSecretkey: response.result?.clientSecret };\n  }\n  setLoading(false);\n  setShowToast(true, 'Something went wrong');\n  return { success: false };\n};\n\nexport const saveStripeTransaction = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.saveStripeTransaction, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  setShowToast(true, 'Something went wrong');\n  return { success: false };\n};\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/recommendedJobs/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/savedJobs/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/mostViewedJobs/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/popularBuilders/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieSearchJobResult/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPageBuilder/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/sucess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieInfo/vouchers.tsx",["1039","1040","1041","1042","1043"],"import React, { useState, useEffect } from 'react'\nimport dummy from '../../assets/images/u_placeholder.jpg';\nimport vouch from '../../assets/images/ic-template.png';\nimport { withRouter } from 'react-router-dom';\nimport {\n    getVouchers\n} from '../../redux/jobs/actions';\nimport storageService from '../../utils/storageService';\n\nimport AddVoucherModal from './addVoucher';\nimport VoucherDetailModal from './voucherDetail';\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\n\nconst Vouchers = (props: any) => {\n    const [stateData, setStateData] = useState<any>([]);\n    const [errors, setErrors] = useState({});\n    const [toggleRecommendation, setToggleRecommendation] = useState({ isTrue: false, item: {} });\n    const [jobsList, setJobsList] = useState([]);\n    const [toggle, setToggle] = useState(false);\n    const [selectedItem, setSelectedItem] = useState({});\n    const [currentPage, setCurrentPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n\n    let id = props?.location?.state?.id;\n    let path = props?.location?.state?.path;\n    let search: any = props?.location?.search || '';\n\n    if (search?.length) {\n        const urlParams = new URLSearchParams(search);\n        let tradieId: any = urlParams.get('tradieId');\n        if (tradieId?.length) {\n            id = tradieId;\n        }\n    }\n    const closeToggle = (isRecall?: string) => {\n        setToggleRecommendation({ isTrue: false, item: {} });\n        setSelectedItem({});\n        setToggle((prev: any) => false);\n        if (isRecall === 'isRecall') {\n            prefetch();\n        }\n    }\n\n\n\n    useEffect(() => {\n        prefetch();\n    }, [id, path])\n\n\n    const prefetch = async () => {\n        let res_profile: any = await getVouchers({ tradieId: id, page: 1 })\n        if (res_profile.success) {\n            let completeItems = res_profile?.data?.voucher || res_profile?.data;  //[]\n            setStateData(completeItems);\n        }\n    }\n\n\n    let state_data: any = stateData;\n\n    return (\n        <div className=\"app_wrapper\">\n            <div className=\"section_wrapper\">\n                <div className=\"custom_container\">\n\n                    <VoucherDetailModal\n                        toggleProps={toggleRecommendation.isTrue}\n                        item={toggleRecommendation.item}\n                        id={id}\n                        closeToggle={closeToggle}\n                    />\n                    {storageService.getItem('userType') === 2 &&\n                        <AddVoucherModal\n                            toggleProps={toggle}\n                            id={id}\n                            closeToggle={closeToggle}\n                        />}\n\n                    <div className=\"flex_row\">\n                        <div className=\"flex_col_sm_6\">\n                            <div className=\"relate\">\n                                <button\n                                    onClick={() => {\n                                        // let path: any = props.location.state.path;\n                                        if (!path) {\n                                            props.history.push('/');\n                                        } else {\n                                            props.history.push(`tradie-info${path}`);\n                                        }\n                                    }}\n                                    className=\"back\"></button>\n                                <span className=\"title\">\n                                    {`${stateData.length} ${stateData.length === 1 ? 'Vouch' : 'Vouches'}`}\n                                </span>\n                            </div>\n                        </div>\n                        {storageService.getItem('userType') === 2 && <div className=\"flex_col_sm_6 text-right\">\n                            <button\n                                onClick={() => { setToggle((prev: any) => true) }}\n                                className=\"fill_btn btn-effect add_vouch\">\n                                {'+ Leave a Vouch'}\n                            </button>\n                        </div>}\n                    </div>\n\n                    {state_data?.length ?\n                        <div className=\"section_wrapper\">\n                            <div className=\"custom_container\">\n                                <span className=\"sub_title\">\n                                    {'Vouches'}\n                                </span>\n\n                                <InfiniteScroll\n                                    dataLength={state_data?.length}\n                                    next={async () => {\n                                        console.log('Here!!!');\n                                        let cp: any = currentPage + 1;\n                                        setCurrentPage((prev: any) => prev + 1);\n                                        let response = await getVouchers({ tradieId: id, page: cp });\n                                        if (response.success) {\n                                            let completeItems = response?.data?.voucher || response?.data;  //[]\n                                            if (completeItems?.length) {\n                                                setStateData((prev: any) => ([...prev, ...completeItems]));\n                                            } else {\n                                                setHasMore(false);\n                                            }\n                                        }\n                                    }}\n                                    hasMore={hasMore}\n                                    loader={<></>}\n                                    className=\"flex_row\">\n                                    {state_data.map((item: any) => (\n                                        <div className=\"flex_col_sm_3\">\n                                            <div className=\"review_card vouchers\">\n                                                <div className=\"pic_shot_dtl\">\n                                                    <figure className=\"u_img\">\n                                                        <img\n                                                            src={item?.builderImage || dummy}\n                                                            alt=\"user-img\"\n                                                            onError={(e: any) => {\n                                                                if (e?.target?.onerror) {\n                                                                    e.target.onerror = null;\n                                                                }\n                                                                if (e?.target?.src) {\n                                                                    e.target.src = dummy;\n                                                                }\n                                                            }}\n                                                        />\n                                                    </figure>\n                                                    <div className=\"name_wrap\">\n                                                        <span className=\"user_name\" title={item?.builderName || ''}>\n                                                            {item?.builderName || ''}\n                                                        </span>\n                                                        <span className=\"date\">\n                                                            {item?.date}\n                                                        </span>\n                                                    </div>\n                                                </div>\n\n                                                <span className=\"xs_head\">\n                                                    {item?.jobName}\n                                                </span>\n\n                                                <p className=\"commn_para\" title=\"\">\n                                                    {item?.vouchDescription || ''}\n                                                </p>\n                                                <div className=\"vouch\">\n                                                    <figure className=\"vouch_icon\">\n                                                        <img src={vouch} alt=\"vouch\" />\n                                                    </figure>\n                                                    <span\n                                                        onClick={(e) => {\n                                                            e.preventDefault();\n                                                            setToggleRecommendation((prev: any) => ({ ...prev, ...{ isTrue: true, item: item } }));\n                                                        }}\n                                                        className=\"link\">\n                                                        {`Vouch for ${item?.tradieName}`}\n                                                    </span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </InfiniteScroll>\n\n                            </div>\n                        </div>\n                        : null}\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default withRouter(Vouchers);","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/home.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/guestHome.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/notFound/notFound.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/forgetPassword.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/login/login.tsx",["1044","1045","1046"],"import { useState, useEffect } from \"react\";\nimport { callLogin } from \"../../redux/auth/actions\";\nimport eyeIconClose from \"../../assets/images/icon-eye-closed.png\";\nimport eyeIconOpen from \"../../assets/images/icon-eye-open.png\";\nimport AuthParent from \"../../common/auth/authParent\";\nimport Constants, { MoEConstants } from \"../../utils/constants\";\nimport regex from \"../../utils/regex\";\nimport SocialAuth from \"../../common/auth/socialAuth\";\nimport { loginAnonymously } from \"../../services/firebase\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\n\ninterface Propstype {\n  history: any;\n  showModal?: boolean;\n  modalUpdateSteps: (data: any) => void;\n  setShowModal: (data: any) => void;\n  setSocialData: (data: any) => void;\n  modalLoginBackBtn?: string;\n}\n\nconst LoginPage = (props: Propstype) => {\n  const [errors, setErrors] = useState<any>({});\n  const [loginData, setLoginData] = useState<any>({\n    email: \"\",\n    password: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  let window_: any = window;\n  window_.Intercom(\"shutdown\");\n\n  const backButtonHandler = () => {\n    props?.history?.push(\"/signup\");\n  };\n\n  useEffect(() => {\n    if (window_?.Intercom) {\n      window_.Intercom(\"shutdown\");\n      window_.Intercom(\"hide\");\n      localStorage.clear();\n    }\n  }, []);\n\n  const changeHandler = (e: any) => {\n    setLoginData((prevData: any) => ({\n      ...prevData,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const validateForm = () => {\n    const newErrors: any = {};\n\n    if (!loginData.email) {\n      newErrors.email = Constants.errorStrings.emailEmpty;\n    } else {\n      const emailRegex = new RegExp(regex.email);\n      if (!emailRegex.test(loginData.email)) {\n        newErrors.email = Constants.errorStrings.emailErr;\n      }\n    }\n\n    if (!loginData.password) {\n      newErrors.password = Constants.errorStrings.password;\n    }\n\n    setErrors(newErrors);\n    return !Object.keys(newErrors).length;\n  };\n\n  const onNewAccount = (profileData: any, socialType: string) => {\n    console.log(\"profileData: \", profileData);\n    const newProfileData = {\n      firstName: profileData.name,\n      authType: \"signup\",\n      email: profileData.email,\n      accountType: socialType,\n      user_image: profileData?.imageUrl,\n      ...(socialType === \"google\" && { socialId: profileData.googleId }),\n      ...(socialType === \"linkedIn\" && { socialId: profileData.socialId }),\n    };\n    if (props.showModal) {\n      props.modalUpdateSteps(2);\n      props.setSocialData(newProfileData);\n      return;\n    }\n    props.history.push({\n      pathname: \"/signup\",\n      redirect: \"socialRedirectFromLogin\",\n      state: { profileData: newProfileData },\n    });\n  };\n\n  const forgetPasswordClicked = (e: any) => {\n    e.preventDefault();\n    if (props.showModal) {\n      props.modalUpdateSteps(1);\n      return;\n    }\n    props.history.push(\"/reset-password\");\n  };\n\n  const phoneViewHandler = (e: any) => {\n    e.preventDefault();\n    if (props.showModal) {\n      props.modalUpdateSteps(2);\n      return;\n    }\n    props.history.push(\"/signup\");\n  };\n\n  const onSubmit = async (e: any) => {\n    e.preventDefault();\n    let newData = { email: loginData.email, password: loginData.password };\n    if (validateForm()) {\n      const res: any = await callLogin(newData);\n      if (res.success) {\n        loginAnonymously();\n        if (props.showModal) {\n          props.setShowModal(!props.showModal);\n        }\n        moengage.moE_LoginEvent({\n          email: res.data?.email,\n          userName: res.data?.userName,\n          userId: res.data?._id,\n        });\n        moengage.moE_SendEvent(MoEConstants.APP_OPEN, { app_open: true });\n        mixPanel.mixP_SendEvent(MoEConstants.APP_OPEN, { app_open: true });\n        props?.history?.push(\"/\");\n      }\n    }\n  };\n\n  return (\n    <AuthParent\n      sliderType=\"signup\"\n      backButtonHandler={backButtonHandler}\n      header={{ title: \"Log In\" }}\n      history={props.history}\n      showModal={props.showModal}\n      modalUpdateSteps={props.modalUpdateSteps}\n      setSocialData={props.setSocialData}\n      modalLoginBackBtn={props.modalLoginBackBtn}\n    >\n      <div className=\"form_wrapper\">\n        <form onSubmit={onSubmit}>\n          <div className=\"form_field\">\n            <label className=\"form_label\">Email</label>\n            <div className=\"text_field\">\n              <input\n                type=\"text\"\n                placeholder=\"Enter Email\"\n                name=\"email\"\n                onChange={changeHandler}\n              />\n            </div>\n            {!!errors.email && (\n              <span className=\"error_msg\">{errors.email}</span>\n            )}\n          </div>\n          <div className=\"form_field\">\n            <label className=\"form_label\">Password</label>\n            <div className=\"text_field\">\n              <input\n                type={showPassword ? \"text\" : \"password\"}\n                className=\"detect_input\"\n                placeholder=\"Enter Password\"\n                name=\"password\"\n                onChange={changeHandler}\n              />\n              <span\n                className=\"detect_icon\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                <img src={showPassword ? eyeIconOpen : eyeIconClose} />\n              </span>\n            </div>\n            {!!errors.password && (\n              <span className=\"error_msg\">{errors.password}</span>\n            )}\n          </div>\n          <div className=\"form_field\">\n            <a className=\"link\" onClick={forgetPasswordClicked}>\n              Forgotten your password?\n            </a>\n          </div>\n          <div className=\"form_field\">\n            <button className=\"fill_btn btn-effect\">Log in</button>\n          </div>\n        </form>\n        <span className=\"show_label text-center\">or continue with</span>\n        <SocialAuth\n          onNewAccount={onNewAccount}\n          history={props.history}\n          showModal={props.showModal}\n          setShowModal={props.setShowModal}\n          modalUpdateSteps={props.modalUpdateSteps}\n        />\n        <div className=\"form_field hide text-center\">\n          <span className=\"reg\">\n            No account?{\" \"}\n            <a className=\"link\" onClick={phoneViewHandler}>\n              Signup\n            </a>\n          </span>\n        </div>\n      </div>\n    </AuthParent>\n  );\n};\n\nexport default LoginPage;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/components/requestMonitored.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/components/jobAppliedSuccess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/tradieListData.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/searchTradieResult/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderInfo/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderInfo/builderPostedJobs.tsx",["1047"],"import { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport TradieJobInfoBox from '../../common/tradieJobInfoBox';\nimport { getBuildersJob } from '../../redux/jobs/actions';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport noData from '../../assets/images/no-search-data.png';\nimport storageService from '../../utils/storageService';\nimport { getAllPostedJob } from '../../redux/profile/actions';\n\ninterface PropsType {\n    location: any,\n    history: any,\n    isLoading: boolean,\n}\n\nconst BuilderPostedJobs = (props: PropsType) => {\n    const params = new URLSearchParams(props.location?.search);\n    const builderId: any = params.get('bId');\n    const totalJobsCount: any = Number(params.get('jobCount'));\n    const userType = storageService.getItem('userType');\n\n    const [buildersJob, setBuildersJob] = useState<Array<any>>([]);\n    const [buildersJobPageNo, setBuildersJobPageNo] = useState<number>(1);\n    const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n\n    useEffect(() => {\n        callJobList();\n    }, []);\n\n    const callJobList = async () => {\n        if (buildersJob.length >= totalJobsCount) {\n            setHasMoreItems(false);\n            return;\n        }\n        const data = {\n            builderId: builderId,\n            page: buildersJobPageNo\n        }\n        const res1 = userType === 1 ? await getBuildersJob(data) : await getAllPostedJob(data.page);\n        if (res1.success) {\n            const allJobs = [...buildersJob, ...res1.data];\n            if (res1.data?.length < 10) {\n                setHasMoreItems(false);\n            }\n            setBuildersJob(allJobs);\n            setBuildersJobPageNo(buildersJobPageNo + 1);\n        }\n    }\n\n    const backButtonClicked = () => {\n        props.history?.goBack();\n    }\n    console.log(totalJobsCount, \"totalJobsCount\", buildersJob, \"buildersJob\", buildersJobPageNo, \"buildersJobPageNo\", hasMoreItems, \"hasMoreItems\")\n\n    return (\n        <InfiniteScroll\n            dataLength={buildersJob.length}\n            next={callJobList}\n            hasMore={hasMoreItems}\n            loader={<h4></h4>}\n        >\n            <div className={'app_wrapper'}>\n                <div className=\"section_wrapper\">\n                    <div className=\"custom_container\">\n                        <div className=\"relate\">\n                            <button className=\"back\" onClick={backButtonClicked}></button>\n                            <span className=\"title\">{`${totalJobsCount || 0} jobs`}</span>\n                        </div>\n                        <div className=\"flex_row tradies_row\">\n                            {(buildersJob?.length > 0 || props.isLoading) ?\n                                buildersJob?.map((jobData: any) => {\n                                    return <TradieJobInfoBox item={jobData} {...props} key={jobData.jobId} userType={storageService.getItem('userType')} />\n                                })\n                                :\n                                <div className=\"no_record\">\n                                    <figure className=\"no_img\">\n                                        <img src={noData} alt=\"data not found\" />\n                                    </figure>\n                                    <span>No Data Found</span>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </InfiniteScroll>\n    )\n}\n\nconst mapState = (state: any) => ({\n    isLoading: state.common.isLoading\n});\n\nexport default connect(mapState, null)(BuilderPostedJobs);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/rateSuccess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/declineMilestoneSuccess.tsx",["1048"],"import React from 'react';\nimport templateImage from '../../../assets/images/job-complete-bg.png';\nimport { withRouter } from 'react-router-dom';\n\nconst DeclineMilestoneSuccess = (props: any) => {\n    return (\n        <div className=\"img_text_wrap\">\n      <figure className=\"full_image\">\n        <img src={templateImage} alt=\"template-image\" />\n        <div className=\"short_info\">\n          <div className=\"content\">\n            <h1 className=\"title\">Got it!</h1>\n            <span className=\"show_label\">The tradesperson will review and get in touch with you. \n            </span>\n            <div className=\"btn_wrapr\">\n              <button\n              onClick={() => {\n                props?.history.push('/');\n              }}\n              className=\"fill_btn btn-effect\">OK</button>\n            </div>\n          </div>\n        </div>\n      </figure>\n    </div>\n    )\n}\n\nexport default withRouter(DeclineMilestoneSuccess);","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/lodgeDispute/success.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/cancelJobs/success.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/chooseTheJob/success.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/chooseTheJob/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/suceess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/chooseJobToStartChat/chooseJobToStartChat.tsx",["1049"],"import { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport storageService from '../../utils/storageService';\nimport { getJobsBWTradieBuilder } from '../../redux/jobs/actions';\nimport { renderTimeWithCustomFormat } from '../../utils/common';\n\nimport noData from '../../assets/images/no-search-data.png';\n\nconst ChooseJobToStartChat = (props: any) => {\n\n    const [editItem, setEditItems] = useState<{ [index: string]: any }>({});\n    const [jobId, setJobId] = useState('');\n    const [jobName, setJobName] = useState('');\n\n    const [jobList, setJobList] = useState<Array<any>>([]);\n    const [pageNo, setPageNo] = useState<number>(1);\n    const [totalCount, setTotalCount] = useState<number>(1);\n    const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n    const [oppUserId, setOppUserId] = useState<string | null>('');\n\n    const checkOnClick = (e: any, jobId: string, jobName: string) => {\n        if (editItem[jobId]) {\n            setEditItems({});\n            setJobId('');\n            setJobName('');\n            return;\n        }\n        setEditItems(() => ({ [jobId]: e.target.checked }));\n        setJobId(jobId);\n        setJobName(jobName);\n    }\n\n    useEffect(() => {\n        callJobList();\n    }, []);\n\n    const callJobList = async () => {\n        if (jobList.length >= totalCount) {\n            setHasMoreItems(false);\n            return;\n        }\n        console.log('props: ', props);\n        const oppUsrId = new URLSearchParams(props.history?.location?.state).get(storageService.getItem('userType') === 1 ? 'builderId' : 'tradieId');\n        console.log('oppUsrId: ', oppUsrId);\n        setOppUserId(oppUsrId);\n        const data = {\n            oppUserId: oppUsrId,\n            page: pageNo,\n            perPage: 10,\n            user_type: storageService.getItem('userType') === 1 ? 2 : 1\n        }\n        const res = await getJobsBWTradieBuilder(data);\n        if (res.success) {\n            const allJobs = [...jobList, ...res.result?.data];\n            if (res.result?.data?.length < 10) {\n                setHasMoreItems(false);\n            }\n            setJobList(allJobs);\n            setPageNo(pageNo + 1);\n            if (res.result?.totalCount !== totalCount) {\n                setTotalCount(res.result?.totalCount);\n            }\n        }\n    }\n\n    const handleSubmit = () => {\n        props.history.push({\n            pathname: `/chat`,\n            state: {\n                ...(storageService.getItem('userType') === 1 ? { tradieId: storageService.getItem('userInfo')?._id } : { builderId: storageService.getItem('userInfo')?._id }),\n                ...(storageService.getItem('userType') === 1 ? { builderId: oppUserId } : { tradieId: oppUserId }),\n                jobId: jobId,\n                jobName: jobName\n            }\n        })\n    }\n\n    return (\n        <InfiniteScroll\n            dataLength={jobList.length}\n            next={callJobList}\n            hasMore={hasMoreItems}\n            loader={<h4></h4>}\n        >\n            <div className=\"app_wrapper\">\n                <div className=\"section_wrapper\">\n                    <div className=\"custom_container\">\n                        <div className=\"form_field\">\n                            <div className=\"flex_row\">\n                                <div className=\"flex_col_sm_5\">\n                                    <div className=\"relate\">\n                                        <button\n                                            className=\"back\"\n                                            onClick={() => props.history.goBack()}\n                                        >\n                                        </button>\n                                        <span className=\"title\">\n                                            {'Choose the job'}\n                                        </span>\n                                    </div>\n                                </div>\n\n                                {!props.isLoading && jobList?.length === 0 && <div className=\"no_record\">\n                                    <figure className=\"no_img\">\n                                        <img src={noData} alt=\"data not found\" />\n                                    </figure>\n                                    <span>{`You must have worked on at least a single job with the ${storageService.getItem('userType') === 1 ? 'builder' : 'tradesperson'} to start conversation with them.`}</span>\n                                </div>}\n\n                            </div>\n                        </div>\n\n                        {jobList?.length > 0 && <div className=\"form_field\">\n                            <button onClick={handleSubmit} className={`fill_btn full_btn btn-effect ${(!Object.keys(editItem).length && !jobId && !jobName) ? 'disable_btn' : ''}`}>\n                                Start chat\n                            </button>\n                        </div>}\n\n                        <div className=\"flex_row\">\n                            <div className=\"flex_col_sm_5\">\n                                <ul className={`milestones`}>\n                                    {jobList?.length > 0 &&\n                                        jobList.map((i: any, index: any) => {\n                                            const item: any = i.jobData;\n                                            return (\n                                                <li key={index}>\n                                                    <div className=\"checkbox_wrap agree_check\">\n                                                        <input\n                                                            checked={editItem[item?._id] == true ? true : false}\n                                                            onChange={(e: any) => { checkOnClick(e, item?._id, item?.jobName) }}\n                                                            className=\"filter-type filled-in\"\n                                                            type=\"checkbox\"\n                                                            id={`milestone${index}`} />\n                                                        <label\n                                                            htmlFor={`milestone${index}`}>\n                                                            {`${item?.tradeName}`}\n                                                        </label>\n                                                        <div className=\"info\">\n                                                            <span>{item?.jobName}</span>\n                                                            <span>\n                                                                {renderTimeWithCustomFormat(\n                                                                    item?.from_date,\n                                                                    item?.to_date,\n                                                                    '',\n                                                                    ['DD MMM', 'DD MMM YY']\n                                                                )}\n                                                            </span>\n                                                        </div>\n                                                    </div>\n                                                </li>\n                                            )\n                                        })}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </InfiniteScroll>\n    )\n}\n\nconst mapStateToProps = (state: any) => ({\n    isLoading: state.common.isLoading\n});\n\nexport default connect(mapStateToProps, null)(ChooseJobToStartChat);\n\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/editMilestones/sucess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/templateSavedSucess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/adminAnnouncementPage/adminAnnouncementPage.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/header/header.tsx",["1050","1051","1052"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { useState, useEffect } from \"react\";\nimport { useLocation, withRouter, useHistory } from \"react-router-dom\";\nimport Joyride from \"react-joyride\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport storageService from \"../../utils/storageService\";\nimport AuthModal from \"../auth/authModal\";\nimport Urls, { urlFor } from \"../../network/Urls\";\nimport { useDispatch } from \"react-redux\";\nimport { setLoading, setShowNotification } from \"../../redux/common/actions\";\nimport {\n  messaging,\n  deleteToken,\n  signOut,\n  getFirebaseInboxDataForUnreadMsgCount,\n} from \"../../services/firebase\";\nimport {\n  onNotificationClick,\n  formatNotificationTime,\n} from \"../../utils/common\";\nimport { getNotificationList } from \"../../redux/homeSearch/actions\";\nimport { markNotifAsRead } from \"../../redux/auth/actions\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\nimport { MoEConstants } from \"../../utils/constants\";\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nimport colorLogo from \"../../assets/images/ic-logo-yellow.png\";\nimport menu from \"../../assets/images/menu-line-white.svg\";\nimport bell from \"../../assets/images/ic-notification.png\";\nimport cancel from \"../../assets/images/ic-cancel.png\";\nimport dummy from \"../../assets/images/u_placeholder.jpg\";\nimport profile from \"../../assets/images/ic-profile.png\";\nimport revenue from \"../../assets/images/ic-revenue.png\";\nimport guide from \"../../assets/images/ic-tutorial.png\";\nimport savedJobs from \"../../assets/images/ic-job.png\";\nimport notification from \"../../assets/images/notification.png\";\n\nimport noNotification from \"../../assets/images/no-notifications.png\";\n\nimport skipBtn from \"../../assets/images/skip.png\";\nimport backBtn from \"../../assets/images/back.png\";\nimport nextBtn from \"../../assets/images/next.png\";\nimport doneBtn from \"../../assets/images/check-mark.png\";\n\nconst DISABLE_HEADER = [\n  \"/signup\",\n  \"/login\",\n  \"/reset-password\",\n  \"/404\",\n  \"/email-updated-successfully\",\n  \"/change-password-success\",\n];\n\nconst Header = (props: any) => {\n  let window_: any = window;\n  const dispatch = useDispatch();\n  let { pathname } = useLocation();\n  let history = useHistory();\n\n  const [userType, setUserType] = useState(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorElNotif, setAnchorElNotif] = useState(null);\n  const [showModal, setShowModal] = useState<boolean>(false);\n  const [showHeader, setShowHeader] = useState<boolean>(false);\n  const [toggleMenu, setToggleMenu] = useState(false);\n  const [activeLink, setActiveLink] = useState(\"discover\");\n  const [notificationData, setNotificationData] = useState<any>({\n    count: 0,\n    list: [],\n    unreadCount: 0,\n  });\n  const [notificationPgNo, setNotificationPgNo] = useState<number>(1);\n  const [hasMoreNotif, setHasMoreNotif] = useState<boolean>(true);\n  const [isIntercom, setIntercom] = useState(false);\n  const [startTour, setStartTour] = useState(false);\n  const [isFalse, setIsFalse] = useState(false);\n  const forceUpdate = useForceUpdate();\n  const [activeTarget, setActiveTarget] = useState(\"\");\n  const [logoutClicked, setLogoutClicked] = useState(false);\n  const [profileData, setProfileData] = useState(\"\");\n  const [unreadMessages, setUnreadMessages] = useState<number>();\n\n  function useForceUpdate() {\n    const [value, setValue] = useState(0); // integer state\n\n    return () => setValue((val) => val + Math.random()); // update the state to force render\n  }\n\n  const onMessageListner = () => {\n    if (messaging) {\n      messaging.onMessage((payload: any) => {\n        const title = payload.data.title;\n        const options = {\n          body: payload.data.notificationText,\n        };\n        var notifications = new Notification(title, options);\n        notifications.onclick = function (event) {\n          console.log(\"event: \", event);\n          event.preventDefault(); // prevent the browser from focusing the Notification's tab\n          window.open(\"http://localhost:3000/active-jobs\", \"_self\");\n        };\n\n        setShowNotification(true, payload);\n        if (payload.data?.notificationType !== \"25\") {\n          setNotificationData((prevData: any) => {\n            let newPayLoad = { ...payload.data };\n            newPayLoad.read = 0;\n            let newPushList = [...prevData.list];\n            newPushList.unshift(newPayLoad);\n            return {\n              ...prevData,\n              unreadCount: prevData.unreadCount + 1,\n              list: newPushList,\n            };\n          });\n        }\n      });\n    }\n  };\n  const onUpdateofInbox = (res: any) => {\n    let unreadMessagesCount: any = 0;\n    res.map((item: any) => {\n      unreadMessagesCount = unreadMessagesCount + item.unreadMessages;\n    });\n    setUnreadMessages(unreadMessagesCount);\n  };\n  useEffect(() => {\n    getFirebaseInboxDataForUnreadMsgCount(onUpdateofInbox);\n  });\n\n  const callNotificationList = async (\n    resetUnreadNotif?: boolean,\n    isInit?: boolean\n  ) => {\n    if (\n      notificationData.list?.length > 0 &&\n      notificationData.list?.length > notificationData?.count\n    ) {\n      setHasMoreNotif(false);\n      return;\n    }\n    const res1 = await getNotificationList(\n      resetUnreadNotif ? 1 : notificationPgNo,\n      resetUnreadNotif && isInit ? false : resetUnreadNotif ? true : false\n    );\n    if (res1.success) {\n      const result = res1.data?.result;\n      if (result?.list?.length < 10) {\n        setHasMoreNotif(false);\n      }\n      const notifList: any =\n        resetUnreadNotif || isInit\n          ? result?.list\n          : [...notificationData.list, ...result?.list];\n\n      setNotificationData((prevData: any) => ({\n        ...prevData,\n        count: result?.count,\n        list: notifList,\n        unreadCount: result?.unreadCount,\n      }));\n      if (resetUnreadNotif) {\n        handleClose(\"notification\");\n        setNotificationPgNo(2);\n      } else {\n        setNotificationPgNo(notificationPgNo + 1);\n      }\n      if (props.recallHeaderNotif) {\n        props.recallHeaderNotification(false);\n      }\n    }\n  };\n  useEffect(() => {\n    onMessageListner();\n    setActiveLink(\"discover\");\n    setUserType(storageService.getItem(\"userType\"));\n    callOnPathChange();\n\n    const pushNotifId = new URLSearchParams(props.location?.search)?.get(\n      \"pushNotifId\"\n    );\n    if (pushNotifId) {\n      (async () => {\n        const res: any = await markNotifAsRead({ notificationId: pushNotifId });\n        if (res.success) {\n          callNotificationList(true, true);\n        }\n      })();\n    }\n  }, []);\n\n  const callOnPathChange = () => {\n    if (\n      userType &&\n      !DISABLE_HEADER.includes(pathname) &&\n      pathname !== \"guest-user\"\n    ) {\n      callNotificationList(true, true);\n      if (userType === 1) {\n        if (\n          !profileData ||\n          (profileData && !_.isEqual(props.tradieProfileData, profileData))\n        ) {\n          props.callTradieProfileData();\n        }\n      } else if (userType === 2) {\n        if (\n          !profileData ||\n          (profileData && !_.isEqual(props.builderProfile, profileData))\n        ) {\n          props.getProfileBuilder();\n        }\n      }\n    }\n    if (DISABLE_HEADER.includes(pathname)) {\n      setShowHeader(false);\n    } else {\n      setShowHeader(true);\n    }\n    setUserType(storageService.getItem(\"userType\"));\n    if (props.tradeListData?.length === 0) {\n      props.callTradeList();\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.tradieProfileData &&\n      Object.keys(props.tradieProfileData)?.length\n    ) {\n      setProfileData(props.tradieProfileData);\n    }\n    if (props.builderProfile && Object.keys(props.builderProfile)?.length) {\n      setProfileData(props.builderProfile);\n    }\n  }, [props.tradieProfileData, props.builderProfile]);\n\n  useEffect(() => {\n    if (\n      props?.builderProfile &&\n      Object.keys(props?.builderProfile).length &&\n      !isIntercom\n    ) {\n      setIntercom(true);\n      setHidden();\n    }\n    if (\n      props?.tradieProfileData &&\n      Object.keys(props?.tradieProfileData).length &&\n      !isIntercom\n    ) {\n      setIntercom(true);\n      setHidden();\n    }\n  }, [props]);\n\n  const setHidden = () => {\n    let data: any = storageService.getItem(\"userInfo\");\n    if (data) {\n      if (!Object.values(data).includes([\"\"])) {\n        if (window_.Intercom) {\n          window_.Intercom(\"update\", {\n            app_id: \"tvbm4bhr\",\n            name: data.userName,\n            email: data.email,\n            user_id: data._id,\n          });\n        }\n      } else {\n        forceUpdate();\n        setIsFalse(true);\n        callOnPathChange();\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (pathname === \"/\") {\n      setActiveLink(\"discover\");\n      setHidden();\n      if (props?.location?.state?.path === \"/signup\") {\n        setStartTour(true);\n        props.history.replace(\"/\");\n      }\n    }\n    if (\n      [\n        \"/jobs\",\n        \"/active-jobs\",\n        \"/applied-jobs\",\n        \"/past-jobs\",\n        \"/new-jobs\",\n        \"/approved-milestones\",\n        \"/mark-milestone\",\n        \"/review-builder\",\n      ].includes(pathname)\n    ) {\n      setActiveLink(\"jobs\");\n      setHidden();\n    }\n    if (pathname === \"/post-new-job\") {\n      setActiveLink(\"post\");\n      setHidden();\n    }\n    if (pathname === \"/chat\") {\n      setActiveLink(\"chat\");\n      setHidden();\n    }\n    if (\n      [\n        \"/builder-info\",\n        \"/saved-tradespeople\",\n        \"/search-tradie-results\",\n      ].includes(pathname)\n    ) {\n      setHidden();\n    }\n  }, [pathname]);\n\n  useEffect(() => {\n    callOnPathChange();\n  }, [pathname, userType, isFalse]);\n\n  useEffect(() => {\n    if (props.recallHeaderNotif) {\n      callOnPathChange();\n    }\n  }, [props.recallHeaderNotif]);\n\n  useEffect(() => {\n    if (startTour) {\n      document.body.classList.add(\"no-scroll\");\n    } else {\n      document.body.classList.remove(\"no-scroll\");\n    }\n  }, [startTour]);\n\n  const handleClick = (event: any, type: string) => {\n    if (type === \"notification\") {\n      setAnchorElNotif(event.currentTarget);\n    } else {\n      setAnchorEl(event.currentTarget);\n    }\n  };\n\n  const handleClose = (type: string) => {\n    if (type === \"notification\") {\n      setAnchorElNotif(null);\n    } else {\n      setAnchorEl(null);\n    }\n  };\n\n  const logoutHandler = async () => {\n    setLogoutClicked(false);\n    setLoading(true);\n    const response = await fetch(\n      urlFor(\n        `${Urls.logout}?deviceId=${\n          storageService.getItem(\"userInfo\")?.deviceId\n        }`\n      ),\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: storageService.getItem(\"jwtToken\"),\n          timezone: moment.tz.guess(),\n        },\n      }\n    );\n    const res = await response.json();\n    setLoading(false);\n    if (res.status_code === 200) {\n      moengage.moE_SendEvent(MoEConstants.LOG_OUT, {\n        success_status: true,\n        current_page: pathname,\n      });\n      mixPanel.mixP_SendEvent(MoEConstants.LOG_OUT, {\n        success_status: true,\n        current_page: pathname,\n      });\n      signOut();\n      deleteToken();\n      moengage.moE_LogoutEvent();\n    }\n    dispatch({ type: \"USER_LOGGED_OUT\" });\n    storageService.clearAll();\n    history.push(\"/login\");\n  };\n\n  const postClicked = () => {\n    setToggleMenu(false);\n    setActiveLink(\"post\");\n    history.push(\"/post-new-job\");\n  };\n\n  const chatClicked = () => {\n    setToggleMenu(false);\n    if (userType === 1 || userType === 2) {\n      setActiveLink(\"chat\");\n      history.push(\"/chat\");\n    }\n  };\n\n  const jobClick = () => {\n    setToggleMenu(false);\n    if (userType === 1) {\n      setActiveLink(\"jobs\");\n      history.push(\"/active-jobs\");\n    } else if (userType === 2) {\n      setActiveLink(\"jobs\");\n      history.push(\"/jobs\");\n    }\n  };\n\n  const renderByType = ({ name }: any) => {\n    if (userType === 1 || userType === 2) {\n      return profileData?.[name];\n    }\n  };\n\n  const handleCallback = (state: any) => {\n    const {\n      action,\n      step: { target },\n    } = state;\n    const width =\n      window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.body.clientWidth;\n\n    setActiveTarget(target);\n\n    if (action === \"reset\") {\n      setStartTour(false);\n    } else if (action === \"start\" && width <= 650) {\n      setToggleMenu(true);\n    }\n\n    if (target === \".tour-profile\" && toggleMenu) {\n      setToggleMenu(false);\n    }\n  };\n\n  const tradieTour = [\n    {\n      target: \".tour-discover a\",\n      content: `Hi ${renderByType({\n        name: \"userName\",\n      })}, here is your go-to for finding new jobs.`,\n      disableBeacon: true,\n    },\n    {\n      target: \".tour-jobs a\",\n      content:\n        \"Here you can find all your active jobs and keep on top of milestones!\",\n    },\n    {\n      target: \".tour-chat a\",\n      content: \"Chat with builders about job requirements\",\n    },\n    {\n      target: \".tour-profile\",\n      content: \"Manage your profile and settings\",\n    },\n    {\n      target: \".tour-notifications\",\n      content: \"Check notifications and stay on the front foot\",\n    },\n  ];\n\n  const builderTour = [\n    {\n      target: \".tour-discover a\",\n      content: `Hi ${renderByType({\n        name: \"userName\",\n      })}, here is your go-to for finding tradespeople.`,\n      disableBeacon: true,\n    },\n    {\n      target: \".tour-jobs a\",\n      content:\n        \"Here you can find all your active jobs and keep on top of milestones!\",\n    },\n    {\n      target: \".tour-post a\",\n      content: \"Here you can post a new job\",\n    },\n    {\n      target: \".tour-chat a\",\n      content: \"Your chats for job and tradespeople are here\",\n    },\n    {\n      target: \".tour-profile\",\n      content: \"Manage your profile and settings\",\n    },\n    {\n      target: \".tour-notifications\",\n      content: \"Check notifications and stay on the front foot\",\n    },\n  ];\n\n  return (\n    <>\n      <Joyride\n        run={startTour}\n        showProgress\n        continuous\n        showSkipButton\n        scrollToFirstStep\n        spotlightPadding={activeTarget === \".tour-notifications\" ? 12 : 0}\n        disableOverlayClose\n        disableCloseOnEsc\n        steps={userType === 1 ? tradieTour : builderTour}\n        styles={{\n          options: {\n            zIndex: 2000,\n          },\n          overlay: {\n            background: \"#00000099\",\n          },\n        }}\n        floaterProps={{\n          hideArrow: true,\n        }}\n        tooltipComponent={({\n          continuous,\n          index,\n          step,\n          backProps,\n          skipProps,\n          primaryProps,\n          tooltipProps,\n          isLastStep,\n          size,\n        }) => (\n          <div className=\"tour-tooltip\" {...tooltipProps}>\n            <div className=\"tour-tooltip-content\">{step.content}</div>\n            <div className=\"tour-tooltip-footer\">\n              <button className=\"\" {...skipProps} title=\"Skip\">\n                <img src={skipBtn} alt=\"skip\" className=\"skip\" />\n              </button>\n              {index > 0 && (\n                <button className=\"\" {...backProps} title=\"Back\">\n                  <img src={backBtn} alt=\"back\" />\n                </button>\n              )}\n              {continuous && (\n                <button\n                  className=\"\"\n                  {...primaryProps}\n                  title={isLastStep ? \"Done\" : \"Next\"}\n                >\n                  {isLastStep ? (\n                    <img src={doneBtn} alt=\"done\" />\n                  ) : (\n                    <img src={nextBtn} alt=\"next\" />\n                  )}\n                  <span>{step.showProgress && `(${index + 1}/${size})`}</span>\n                </button>\n              )}\n            </div>\n          </div>\n        )}\n        callback={handleCallback}\n      />\n      {showHeader && (\n        <header id=\"header\">\n          <div className=\"custom_container\">\n            <div className=\"flex_headrow\">\n              <div className=\"brand_wrap\">\n                <figure>\n                  <img\n                    onClick={() => {\n                      if (userType === 0) {\n                        return;\n                      }\n                      if (pathname === \"/\") {\n                        window.scrollTo({\n                          top: 0,\n                          left: 0,\n                          behavior: \"smooth\",\n                        });\n                        return;\n                      }\n                      setActiveLink(\"discover\");\n                      setToggleMenu(false);\n                      props.history.push(\"/\");\n                    }}\n                    src={colorLogo}\n                    alt=\"logo\"\n                  />\n                </figure>\n              </div>\n              <ul className={`center_nav ${toggleMenu ? \"active\" : \"\"}`}>\n                <li className=\"tour-discover\">\n                  <a\n                    onClick={() => {\n                      if (userType === 1 || userType === 2) {\n                        setActiveLink(\"discover\");\n                        history.push(\"/\");\n                      } else {\n                        return;\n                      }\n                    }}\n                    className={\n                      startTour\n                        ? activeTarget === \".tour-discover a\"\n                          ? \"active\"\n                          : \"\"\n                        : activeLink === \"discover\"\n                        ? \"active\"\n                        : \"\"\n                    }\n                  >\n                    {\"Discover\"}\n                  </a>\n                </li>\n                <li className=\"tour-jobs\">\n                  <a\n                    className={\n                      startTour\n                        ? activeTarget === \".tour-jobs a\"\n                          ? \"active\"\n                          : \"\"\n                        : activeLink === \"jobs\"\n                        ? \"active\"\n                        : \"\"\n                    }\n                    onClick={jobClick}\n                  >\n                    {\"Jobs\"}\n                  </a>\n                </li>\n\n                {userType === 2 && (\n                  <li className=\"tour-post\">\n                    <a\n                      className={\n                        startTour\n                          ? activeTarget === \".tour-post a\"\n                            ? \"active\"\n                            : \"\"\n                          : activeLink === \"post\"\n                          ? \"active\"\n                          : \"\"\n                      }\n                      onClick={postClicked}\n                    >\n                      {\"Post\"}\n                    </a>\n                  </li>\n                )}\n                <li className=\"tour-chat\">\n                  <a\n                    className={\n                      startTour\n                        ? activeTarget === \".tour-chat a\"\n                          ? \"active\"\n                          : \"\"\n                        : activeLink === \"chat\"\n                        ? \"active\"\n                        : \"\"\n                    }\n                    onClick={chatClicked}\n                  >\n                    {\"Chat\"}\n                    {unreadMessages !== 0 ? (\n                      <span\n                        className={`${\n                          unreadMessages ? \"unreadCountBadge\" : \"\"\n                        }`}\n                      >\n                        {unreadMessages}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </a>\n                </li>\n              </ul>\n              <ul className=\"side_nav\">\n                <li className=\"mob_nav\">\n                  <img\n                    src={menu}\n                    alt=\"menu\"\n                    onClick={() => {\n                      setToggleMenu(!toggleMenu);\n                    }}\n                  />\n                </li>\n                <div className=\"profile_notification\">\n                  {storageService.getItem(\"jwtToken\") && (\n                    <div\n                      className=\"notification_bell\"\n                      onClick={(event) => handleClick(event, \"notification\")}\n                    >\n                      <figure className=\"bell tour-notifications\">\n                        <span\n                          className={`${\n                            notificationData.unreadCount ? \"badge\" : \"\"\n                          }`}\n                        >\n                          {notificationData.unreadCount || \"\"}\n                        </span>\n                        <img src={bell} alt=\"notify\" />\n                      </figure>\n                    </div>\n                  )}\n                  <div className=\"user_profile\">\n                    {storageService.getItem(\"jwtToken\") && (\n                      <figure\n                        className=\"tour-profile\"\n                        aria-controls=\"simple-menu\"\n                        aria-haspopup=\"true\"\n                        onClick={(event) => handleClick(event, \"profile\")}\n                      >\n                        <img\n                          src={renderByType({ name: \"userImage\" }) || dummy}\n                          alt=\"profile-img\"\n                        />\n                      </figure>\n                    )}\n\n                    <Menu\n                      className=\"sub_menu\"\n                      id=\"simple-menu\"\n                      anchorEl={anchorEl}\n                      keepMounted\n                      open={Boolean(anchorEl)}\n                      onClose={() => handleClose(\"profile\")}\n                      elevation={0}\n                      getContentAnchorEl={null}\n                      anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\",\n                      }}\n                      transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                    >\n                      <span className=\"sub_title\">\n                        {renderByType({ name: \"userName\" })}\n                      </span>\n\n                      <MenuItem\n                        onClick={() => {\n                          handleClose(\"pofile\");\n                          history.push(\n                            `/${\n                              props.userType === 1 ? \"tradie\" : \"builder\"\n                            }-info?${\n                              props.userType === 1 ? \"trade\" : \"builder\"\n                            }Id=${renderByType({ name: \"userId\" })}`\n                          );\n                        }}\n                      >\n                        <span className=\"setting_icon\">\n                          <img src={profile} alt=\"profile\" />\n                          {\"My Profile\"}\n                        </span>\n                      </MenuItem>\n                      {[1, 2].includes(props.userType) && (\n                        <MenuItem\n                          onClick={() => {\n                            handleClose(\"profile\");\n                            history.push(\"/payment-history\");\n                          }}\n                        >\n                          <span className=\"setting_icon\">\n                            <img src={revenue} alt=\"revenue\" />\n                            {props.userType === 1\n                              ? \"Payment history\"\n                              : \"Transaction history\"}\n                          </span>\n                        </MenuItem>\n                      )}\n                      {[1, 2].includes(props.userType) && (\n                        <MenuItem\n                          onClick={() => {\n                            handleClose(\"profile\");\n                            history.push(\n                              props.userType === 1\n                                ? \"/saved-jobs\"\n                                : \"/saved-tradespeople\"\n                            );\n                          }}\n                        >\n                          <span className=\"setting_icon\">\n                            <img src={savedJobs} alt=\"savedJobs\" />\n                            {`Saved ${\n                              props.userType === 1 ? \"jobs\" : \"tradespeople\"\n                            }`}\n                          </span>\n                        </MenuItem>\n                      )}\n                      {[1, 2].includes(props.userType) && (\n                        <MenuItem\n                          onClick={() => {\n                            handleClose(\"profile\");\n                            setStartTour(true);\n                          }}\n                        >\n                          <span className=\"setting_icon\">\n                            <img src={guide} alt=\"guide\" />\n                            {\"App Guide\"}\n                          </span>\n                        </MenuItem>\n                      )}\n                      <MenuItem\n                        onClick={() => {\n                          handleClose(\"profile\");\n                          setLogoutClicked(true);\n                        }}\n                      >\n                        <span className=\"setting_icon logout\">Logout</span>\n                      </MenuItem>\n                    </Menu>\n\n                    {/* logout popup */}\n                    <Modal\n                      className=\"custom_modal\"\n                      open={logoutClicked}\n                      onClose={() => setLogoutClicked(false)}\n                      aria-labelledby=\"simple-modal-title\"\n                      aria-describedby=\"simple-modal-description\"\n                    >\n                      <div\n                        className=\"custom_wh confirmation\"\n                        data-aos=\"zoom-in\"\n                        data-aos-delay=\"30\"\n                        data-aos-duration=\"1000\"\n                      >\n                        <div className=\"heading\">\n                          <span className=\"xs_sub_title\">{`Logout Confirmation`}</span>\n                          <button\n                            className=\"close_btn\"\n                            onClick={() => setLogoutClicked(false)}\n                          >\n                            <img src={cancel} alt=\"cancel\" />\n                          </button>\n                        </div>\n                        <div className=\"modal_message\">\n                          <p>{`Are you sure you want to logout?`}</p>\n                        </div>\n                        <div className=\"dialog_actions\">\n                          <button\n                            className=\"fill_btn btn-effect\"\n                            onClick={logoutHandler}\n                          >\n                            Yes\n                          </button>\n                          <button\n                            className=\"fill_grey_btn btn-effect\"\n                            onClick={() => setLogoutClicked(false)}\n                          >\n                            No\n                          </button>\n                        </div>\n                      </div>\n                    </Modal>\n\n                    {/* Notification */}\n                    <Menu\n                      className=\"sub_menu notifications\"\n                      id=\"simple-menu\"\n                      anchorEl={anchorElNotif}\n                      keepMounted\n                      open={Boolean(anchorElNotif)}\n                      onClose={() => handleClose(\"notification\")}\n                      elevation={0}\n                      getContentAnchorEl={null}\n                      anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\",\n                      }}\n                      transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                    >\n                      <div>\n                        <span className=\"sub_title\">Notifications</span>\n                        <a\n                          href=\"javascript:void(0)\"\n                          className=\"link mark_all\"\n                          onClick={() => {\n                            if (notificationData.unreadCount === 0) {\n                              handleClose(\"notification\");\n                              return;\n                            }\n                            callNotificationList(true);\n                          }}\n                        >\n                          Mark all as read\n                        </a>\n                      </div>\n\n                      {notificationData.list?.length > 0 &&\n                        notificationData.list.map((item: any) => (\n                          <MenuItem\n                            className={`${item.read ? \"\" : \"unread\"}`}\n                            onClick={async () => {\n                              handleClose(\"notification\");\n                              const url1: string = onNotificationClick(item);\n                              const url2: string =\n                                history.location?.pathname +\n                                history.location?.search;\n                              if (item.read === 0) {\n                                const res: any =\n                                  item?.notificationType === 13 ||\n                                  (url1 === url2 &&\n                                    item?.notificationType === 9)\n                                    ? await markNotifAsRead({\n                                        notificationId: item?._id,\n                                      })\n                                    : markNotifAsRead({\n                                        notificationId: item?._id,\n                                      });\n                                if (\n                                  item?.notificationType === 13 &&\n                                  res?.success\n                                ) {\n                                  callNotificationList(true, true);\n                                }\n                              }\n                              if (\n                                (url1 === url2 && item.read === 0) ||\n                                (url1 === url2 && item?.notificationType == 9)\n                              ) {\n                                window.location?.reload();\n                                return;\n                              }\n                              props.history.push(url1);\n                            }}\n                          >\n                            <div className=\"notif\">\n                              <figure className=\"not_img\">\n                                <img src={item?.image || dummy} alt=\"img\" />\n                                <span\n                                  className={`${item.read ? \"\" : \"dot\"}`}\n                                ></span>\n                              </figure>\n                              <div className=\"info\">\n                                <span title={item.title} className=\"who line-1\">\n                                  {item.title}\n                                </span>\n                                <span\n                                  title={item.notificationText}\n                                  className=\"line-1\"\n                                >\n                                  {item.notificationText}\n                                </span>\n                              </div>\n                              <span className=\"time\">\n                                {formatNotificationTime(item?.updatedAt, \"day\")}\n                              </span>\n                            </div>\n                          </MenuItem>\n                        ))}\n                      {hasMoreNotif && notificationData.list?.length > 0 && (\n                        <div\n                          className=\"more_notif\"\n                          onClick={() => callNotificationList()}\n                        >\n                          <a className=\"link\">View more</a>\n                        </div>\n                      )}\n\n                      {notificationData?.list?.length === 0 && (\n                        <div className=\"no_notification\">\n                          <figure>\n                            <img src={noNotification} alt=\"no-notifications\" />\n                          </figure>\n                          <span>No Notifications</span>\n                        </div>\n\n                        // <div className=\"no_record\">\n                        //   <figure>\n                        //     <figure className=\"no_img\">\n                        //       <img src={notification} alt=\"data not found\" />\n                        //     </figure>\n                        //   </figure>\n\n                        //   <span className=\"empty_screen_text\">\n                        //     You don't have any notification yet.\n                        //   </span>\n                        //   <span className=\"notification_subtext\">\n                        //     Explore our local network\n                        //   </span>\n                        //   <button\n                        //     className=\"empty_screen_button\"\n                        //     onClick={() => history.push(\"/\")}\n                        //   >\n                        //     Search tradespeople\n                        //   </button>\n                        // </div>\n                      )}\n                    </Menu>\n                    {/* Notification close */}\n                  </div>\n                </div>\n                {!storageService.getItem(\"jwtToken\") && (\n                  <li>\n                    <a\n                      className=\"active\"\n                      onClick={() => setShowModal(!showModal)}\n                    >\n                      {\"Log in\"}\n                    </a>\n                  </li>\n                )}\n                <AuthModal\n                  showModal={showModal}\n                  setShowModal={setShowModal}\n                  history={props.history}\n                  firstTimePopup\n                >\n                  {props.children}\n                </AuthModal>\n              </ul>\n            </div>\n          </div>\n        </header>\n      )}\n    </>\n  );\n};\n\nexport default withRouter(Header);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changePasswordSuccess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/supportChat.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/utils/common.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changeEmailModal/components/successPage.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/components/commonViewAll.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/reviewBuilder/builderReviewSubmitted.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/paymentHistory/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/services/firebase.js",["1053","1054"],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieInfo/index.tsx",["1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  getBuilderProfile,\n  tradieReviewReply,\n  tradieUpdateReviewReply,\n  tradieRemoveReviewReply,\n  getTradieReviewListOnBuilder,\n  getAcceptDeclineTradie,\n  reviewReply,\n  updateReviewReply,\n  removeReviewReply,\n  getTradeReviews,\n  getTradeProfile,\n  HomeTradieProfile,\n  CancelInviteForJob,\n  updateReviewTradie,\n  deleteReviewTradie,\n} from \"../../redux/jobs/actions\";\nimport {\n  getTradieProfile,\n  getTradieProfileView,\n} from \"../../redux/profile/actions\";\nimport { setShowToast } from \"../../redux/common/actions\";\nimport { SaveTradie } from \"../../redux/jobs/actions\";\nimport storageService from \"../../utils/storageService\";\nimport { portfolio, portfolioModal } from \"../builderInfo/builderInfo\";\nimport VoucherDetail from \"./voucherDetail\";\nimport TradieJobInfoBox from \"../../common/tradieJobInfoBox\";\nimport Modal from \"@material-ui/core/Modal\";\nimport ReviewInfoBox from \"../../common/reviewInfoBox\";\n\nimport profilePlaceholder from \"../../assets/images/ic-placeholder-detail.png\";\nimport dummy from \"../../assets/images/u_placeholder.jpg\";\nimport portfolioPlaceholder from \"../../assets/images/portfolio-placeholder.jpg\";\nimport noData from \"../../assets/images/no-search-data.png\";\nimport menu from \"../../assets/images/menu-line-blue.png\";\nimport cancel from \"../../assets/images/ic-cancel.png\";\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\n//@ts-ignore\nimport Skeleton from \"react-loading-skeleton\";\n\nimport AddVoucherComponent from \"./addVoucher\";\nimport vouch from \"../../assets/images/ic-template.png\";\nimport _ from \"lodash\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\n\nimport noDataFound from \"../../assets/images/no-search-data.png\";\n\n//@ts-ignore\nimport ReactStars from \"react-rating-stars-component\";\nimport Rating from \"react-rating\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\nimport { MoEConstants } from \"../../utils/constants\";\ninterface Props {\n  tradieInfo: any;\n  tradieId: any;\n  jobId: any;\n  tradieReviews: any;\n  userType: number;\n  tradieProfileViewData: any;\n  getTradieProfile: (data: any) => void;\n  getTradieReviewListOnBuilder: (data: any) => void;\n  getAcceptDeclineTradie: (data: any) => void;\n  getTradieProfileView: () => void;\n}\n\ninterface State {\n  profilePictureLoading: boolean;\n  tradieInfo: any;\n  showError: boolean;\n  tradieReviews: any;\n  profileData: any;\n  portfolioData: {\n    portfolioImageClicked: boolean;\n    portfolioDetails: {\n      portfolioImage: any;\n      portfolioId: any;\n      jobDescription: any;\n    };\n  };\n  delete: any;\n  reviewsData: {\n    reviewReplyClicked: boolean;\n    showAllReviewsClicked: boolean;\n    submitReviewsClicked: boolean;\n    deleteReviewsClicked: boolean;\n    updateReviewsClicked: boolean;\n    reviewsClickedType: any;\n    confirmationClicked: boolean;\n    showReviewReplyButton: boolean;\n    reviewId: any;\n    reviewData: any;\n    showReviewReply: boolean;\n    replyShownHideList: any;\n  };\n  toggleVoucher: {\n    item: string;\n    isTrue: boolean;\n  };\n  toggleAddVoucher: boolean;\n  toggleSpecialisation: boolean;\n  hasMore: boolean;\n  isSendEvent: boolean;\n  currentReviewPage: number;\n}\n\nconst empty_star_rating_below = (\n  <span\n    className=\"\"\n    data-index=\"4\"\n    data-forhalf=\"★\"\n    style={{\n      position: \"relative\",\n      overflow: \"hidden\",\n      cursor: \"pointer\",\n      display: \"block\",\n      float: \"left\",\n      color: \"rgb(223, 229, 239)\",\n      fontSize: \"24px\",\n    }}\n  >\n    ★\n  </span>\n);\n\nconst full_star_rating_below = (\n  <span\n    className=\"\"\n    data-index=\"0\"\n    data-forhalf=\"★\"\n    style={{\n      position: \"relative\",\n      overflow: \"hidden\",\n      cursor: \"pointer\",\n      display: \"block\",\n      float: \"left\",\n      color: \"rgb(255, 215, 0)\",\n      fontSize: \"24px\",\n    }}\n  >\n    ★\n  </span>\n);\nclass TradieInfo extends Component<Props, State> {\n  state = {\n    toggleSpecialisation: true,\n    profilePictureLoading: true,\n    tradieInfo: \"\",\n    showError: false,\n    tradieReviews: null,\n    profileData: {},\n    delete: {\n      isToggle: false,\n      deleteId: \"\",\n    },\n    portfolioData: {\n      portfolioImageClicked: false,\n      portfolioDetails: {\n        portfolioImage: [],\n        portfolioId: \"\",\n        jobDescription: \"\",\n      },\n    },\n    reviewsData: {\n      reviewReplyClicked: false,\n      showAllReviewsClicked: false,\n      submitReviewsClicked: false,\n      deleteReviewsClicked: false,\n      updateReviewsClicked: false,\n      reviewsClickedType: \"\",\n      confirmationClicked: false,\n      showReviewReplyButton: true,\n      reviewId: \"\",\n      reviewData: \"\",\n      showReviewReply: false,\n      replyShownHideList: [],\n    },\n    tradieReviewList: [],\n    toggleVoucher: { item: \"\", isTrue: false },\n    toggleAddVoucher: false,\n    hasMore: true,\n    currentReviewPage: 1,\n    isSendEvent: false,\n  };\n\n  componentWillUnmount() {\n    this.setState({\n      toggleSpecialisation: true,\n      tradieInfo: null,\n      showError: false,\n      tradieReviews: null,\n      profileData: {},\n      portfolioData: {\n        portfolioImageClicked: false,\n        portfolioDetails: {\n          portfolioImage: [],\n          portfolioId: \"\",\n          jobDescription: \"\",\n        },\n      },\n      delete: {\n        isToggle: false,\n        deleteId: \"\",\n      },\n      reviewsData: {\n        reviewReplyClicked: false,\n        showAllReviewsClicked: false,\n        submitReviewsClicked: false,\n        deleteReviewsClicked: false,\n        updateReviewsClicked: false,\n        reviewsClickedType: \"\",\n        confirmationClicked: false,\n        showReviewReplyButton: true,\n        reviewId: \"\",\n        reviewData: \"\",\n        showReviewReply: false,\n        replyShownHideList: [],\n      },\n    });\n  }\n\n  getItemsFromLocation = () => {\n    let props: any = this.props;\n    const urlParams = new URLSearchParams(props.location.search);\n    let jobId = urlParams.get(\"jobId\");\n    let specializationId = urlParams.get(\"specializationId\");\n    let tradeId = urlParams.get(\"tradeId\");\n    let user_type = storageService.getItem(\"userType\");\n    let is_active = urlParams.get(\"active\");\n    return { jobId, specializationId, tradeId, user_type, is_active };\n  };\n\n  componentDidMount() {\n    this.setItems();\n  }\n\n  static getDerivedStateFromProps(nextProps: any, prevState: any) {\n    if (\n      nextProps.tradieProfileViewData &&\n      !_.isEqual(nextProps.tradieProfileViewData, prevState.tradieInfo)\n    ) {\n      return {\n        tradieInfo: nextProps.tradieProfileViewData,\n      };\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps: any, prevState: any) {\n    let props: any = this.props;\n    let tradeStatus: any = props.tradieRequestStatus;\n    let prevPath = `${prevProps?.location?.pathname}${prevProps?.location?.search}`;\n    let currentPath = `${props?.location?.pathname}${props?.location?.search}`;\n\n    if (prevPath !== currentPath) {\n      this.setItems();\n    }\n\n    if (tradeStatus) {\n      props.history.push(\"/jobs\");\n    }\n\n    if (\n      prevState.tradieInfo?.tradieName &&\n      !this.state.isSendEvent &&\n      storageService.getItem(\"userType\") == 2\n    ) {\n      const mData = {\n        name: prevState.tradieInfo?.tradieName,\n        category: props.tradeListData.find(\n          (i: any) => i._id === prevState.tradieInfo?.tradeId\n        )?.trade_name,\n      };\n      moengage.moE_SendEvent(MoEConstants.VIEWED_TRADIE_PROFILE, mData);\n      mixPanel.mixP_SendEvent(MoEConstants.VIEWED_TRADIE_PROFILE, mData);\n      this.setState({ isSendEvent: true });\n    }\n  }\n\n  portfolioImageHandler = (data: any) => {\n    this.setState({\n      portfolioData: { portfolioImageClicked: true, portfolioDetails: data },\n    });\n  };\n\n  modalCloseHandler = (modalType: string) => {\n    this.setState((prev: any) => ({\n      reviewsData: {\n        ...prev.reviewsData,\n        [modalType]: false,\n        deleteReviewsClicked: false,\n      },\n    }));\n  };\n\n  reviewHandler = (type: any, reviewId?: any, replyId?: any, reply?: any) => {\n    console.log({ type, reviewId });\n    if (type === \"reviewReplyClicked\") {\n      this.setState((prevData: any) => ({\n        reviewsData: {\n          ...prevData.reviewsData,\n          reviewReplyClicked: true,\n          showAllReviewsClicked: false,\n          // reviewsClickedType: type,\n          reviewId: reviewId,\n        },\n      }));\n    } else if (type === \"reviewReply\") {\n      this.setState((prevData: any) => ({\n        reviewsData: {\n          ...prevData.reviewsData,\n          submitReviewsClicked: true,\n          reviewsClickedType: type,\n          confirmationClicked: true,\n        },\n      }));\n    } else if (type === \"removeReviewReply\") {\n      this.setState((prevData: any) => ({\n        reviewsData: {\n          ...prevData.reviewsData,\n          confirmationClicked: true,\n          deleteReviewsClicked: true,\n          reviewId: reviewId,\n          replyId: replyId,\n          reviewsClickedType: type,\n        },\n      }));\n    } else if (type === \"updateReviewReply\") {\n      this.setState((prevData: any) => ({\n        reviewsData: {\n          ...prevData.reviewsData,\n          reviewReplyClicked: true,\n          updateReviewsClicked: true,\n          reviewId: reviewId,\n          replyId: replyId,\n          reviewsClickedType: type,\n          showAllReviewsClicked: false,\n          reviewData: reply,\n        },\n      }));\n    } else if (type === \"replyCancelBtnClicked\") {\n      this.setState((prevData: any) => ({\n        reviewsData: {\n          ...prevData.reviewsData,\n          reviewReplyClicked: false,\n          updateReviewsClicked: false,\n          deleteReviewsClicked: false,\n          showAllReviewsClicked: true,\n          reviewData: \"\",\n          reviewsClickedType: \"\",\n          reviewId: \"\",\n        },\n      }));\n    } else if (type === \"hideReviewClicked\") {\n      let item_: any = {};\n      let reply_id: any = replyId;\n      item_ = this.state.reviewsData?.replyShownHideList;\n      if (item_[reply_id] === undefined) {\n        item_[reply_id] = true;\n      } else {\n        item_[reply_id] = !item_[reply_id];\n      }\n\n      this.setState((prevData: any) => ({\n        reviewsData: { ...prevData.reviewsData, replyShownHideList: item_ },\n      }));\n    } else if (type === \"showReviewClicked\") {\n      let item_: any = {};\n      let reply_id: any = replyId;\n      item_ = this.state.reviewsData?.replyShownHideList;\n      if (item_[reply_id] === undefined) {\n        item_[reply_id] = true;\n      } else {\n        item_[reply_id] = !item_[reply_id];\n      }\n\n      this.setState((prevData: any) => ({\n        reviewsData: { ...prevData.reviewsData, replyShownHideList: item_ },\n      }));\n    } else if (type === \"editBuilderReview\") {\n      this.setState((prevData: any) => ({\n        reviewsData: {\n          ...prevData.reviewsData,\n          showAllReviewsClicked: false,\n          editBuilderReview: true,\n          reviewData: reply,\n          reviewsClickedType: \"\",\n          reviewId: reviewId,\n        },\n      }));\n    } else if (type === \"cancelBuilderReview\") {\n      this.setState((prevData: any) => ({\n        reviewsData: {\n          ...prevData.reviewsData,\n          showAllReviewsClicked: false,\n          editBuilderReview: false,\n          reviewData: \"\",\n          reviewsClickedType: \"\",\n          reviewId: \"\",\n        },\n      }));\n    }\n  };\n\n  handleChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n    type: string,\n    subtype?: string\n  ) => {\n    if (e.target.value.trim().length <= 250) {\n      if (subtype) {\n        this.setState((prevData: any) => {\n          console.log({ prevData });\n          return {\n            reviewsData: {\n              ...prevData.reviewsData,\n              reviewData: {\n                ...prevData?.reviewsData?.reviewData,\n                [subtype]: e.target.value,\n              },\n            },\n          };\n        });\n      } else {\n        this.setState((prevData: any) => ({\n          reviewsData: { ...prevData.reviewsData, [type]: e.target.value },\n        }));\n      }\n    }\n  };\n\n  submitReviewHandler = async (type: any) => {\n    let reviewsData: any = this.state.reviewsData;\n    let profileData: any = this.state.profileData;\n    if (\n      [\n        \"reviewReply\",\n        \"updateReviewReply\",\n        \"removeReviewReply\",\n        \"updateBuilderReview\",\n      ].includes(type)\n    ) {\n      var response;\n\n      if (type === \"reviewReply\") {\n        const data = {\n          reviewId: reviewsData.reviewId,\n          reply: reviewsData.reviewData,\n        };\n        // need to send reply id in response\n        response = await reviewReply(data);\n      }\n      if (type === \"updateReviewReply\") {\n        const data = {\n          reviewId: reviewsData.reviewId,\n          replyId: reviewsData?.replyId,\n          reply: reviewsData.reviewData,\n        };\n        response = await updateReviewReply(data);\n      }\n      if (type === \"removeReviewReply\") {\n        const data = {\n          reviewId: reviewsData.reviewId,\n          replyId: reviewsData.replyId,\n        };\n        response = await removeReviewReply(data);\n      }\n\n      if (type === \"updateBuilderReview\") {\n        const {\n          reviewData: { review, reviewId, rating },\n        } = reviewsData;\n        let data = {\n          review,\n          reviewId,\n          rating,\n        };\n\n        if (!data?.review?.length) {\n          delete data.review;\n        }\n\n        response = await updateReviewTradie(data);\n      }\n\n      if (response?.success) {\n        this.forceUpdate();\n        this.setItems();\n      }\n\n      this.setState((prevData: any) => ({\n        reviewsData: {\n          ...prevData.reviewsData,\n          submitReviewsClicked: false,\n          reviewReplyClicked: false,\n          editBuilderReview: false,\n          showAllReviewsClicked: true,\n          confirmationClicked: false,\n          reviewsClickedType: \"\",\n          deleteReviewsClicked: false,\n          updateReviewsClicked: false,\n          reviewId: \"\",\n          reviewData: \"\",\n          replyShownHideList: [],\n        },\n      }));\n    }\n  };\n\n  setItems = async () => {\n    const { jobId, tradeId, user_type } = this.getItemsFromLocation();\n\n    if (user_type == \"1\" || this.props.userType == 1) {\n      console.log(\n        user_type,\n        \"user_type\",\n        this.props.userType,\n        \"this.props.userType\"\n      );\n      this.props.getTradieProfileView();\n    } else if (jobId) {\n      let res_profile: any = await getTradeProfile({\n        tradieId: tradeId,\n        jobId: jobId,\n      });\n      console.log({ res_profile });\n      if (res_profile.success) {\n        this.setState({ tradieInfo: res_profile.data, showError: false });\n      } else {\n        if (res_profile?.status == 404) {\n          this.setState({ showError: true });\n        }\n      }\n    } else {\n      let res_profile: any = await HomeTradieProfile({ tradieId: tradeId });\n      console.log({ res_profile });\n      if (res_profile?.success) {\n        this.setState({ tradieInfo: res_profile.data, showError: false });\n      } else {\n        if (res_profile?.status == 404) {\n          this.setState({ showError: true });\n        }\n      }\n    }\n\n    let res_trade: any = await getTradeReviews({ tradieId: tradeId, page: 1 });\n    console.log({ res_trade });\n    if (res_trade?.success) {\n      let data_ = res_trade?.data?.list || res_trade?.data;\n      this.setState({ tradieReviews: data_ });\n    }\n  };\n\n  capitalize = (input: any) => {\n    console.log(input, \"inputttts\");\n    if (!input) return;\n    let words = input?.split(\" \");\n    let CapitalizedWords: any = [];\n    words.forEach((element: any) => {\n      CapitalizedWords.push(\n        element[0].toUpperCase() + element.slice(1, element.length)\n      );\n    });\n    return CapitalizedWords.join(\" \");\n  };\n  submitAcceptDeclineRequest = (status: any) => {\n    let props: any = this.props;\n    const { getAcceptDeclineTradie } = props;\n    const { jobId, tradeId } = this.getItemsFromLocation();\n    let data = {\n      jobId: jobId,\n      tradieId: tradeId,\n      status: status,\n    };\n    getAcceptDeclineTradie(data);\n  };\n\n  savedTradie = async ({ tradieInfo }: any) => {\n    let props: any = this.props;\n    let data = {\n      tradieId: tradieInfo?._id || tradieInfo?.tradieId,\n      isSave: tradieInfo?.isSaved ? false : true,\n    };\n    let response = await SaveTradie(data);\n    if (response.success) {\n      if (!tradieInfo?.isSaved) {\n        const mData = {\n          timeStamp: moengage.getCurrentTimeStamp(),\n          category: props.tradeListData.find(\n            (i: any) => i._id === tradieInfo?.tradeId\n          )?.trade_name,\n        };\n        moengage.moE_SendEvent(MoEConstants.SAVED_TRADIE, mData);\n        mixPanel.mixP_SendEvent(MoEConstants.SAVED_TRADIE, mData);\n      }\n      await this.setItems();\n    }\n  };\n\n  cancelInvite = async ({ invitationId, tradieId, jobId }: any) => {\n    if (jobId) {\n      let data = {\n        tradieId,\n        jobId,\n        invitationId,\n      };\n      let response: any = await CancelInviteForJob(data);\n      if (response.success) {\n        await this.setItems();\n      }\n    }\n  };\n\n  closeToggle = () => {\n    this.setState({\n      toggleVoucher: { item: \"\", isTrue: false },\n    });\n  };\n\n  renderBtn = ({ hideInvite }: any) => {\n    if (hideInvite) {\n    }\n  };\n\n  renderPopup = () => {};\n\n  closeAddVoucher = (isRecall?: any) => {\n    if (isRecall === \"isRecall\") {\n      this.setState(\n        {\n          toggleAddVoucher: false,\n        },\n        () => {\n          if (this.state.toggleAddVoucher === false) {\n            this.setItems();\n          }\n        }\n      );\n    }\n  };\n\n  render() {\n    const SVGIcon = (props: any) => (\n      <svg className={props.className} pointerEvents=\"none\">\n        <use xlinkHref={props.href} />\n      </svg>\n    );\n\n    let props: any = this.props;\n    console.log({\n      props,\n      path: props.location.pathname + props.location.search,\n    });\n    // let tradieInfo: any = props.tradieInfo;\n    const { user_type, is_active } = this.getItemsFromLocation();\n    let { portfolioData, toggleVoucher, showError } = this.state;\n    let reviewsData: any = this.state.reviewsData;\n    let tradieInfo: any = this.state.tradieInfo;\n    let userType: number = Number(user_type);\n    let tradieReviews: any = this.state.tradieReviews;\n    let isSkeletonLoading: boolean = props.isSkeletonLoading;\n\n    console.log(\n      tradieInfo,\n      \"tradieInfo\",\n      userType,\n      \"userType\",\n      is_active,\n      \"is_active\"\n    );\n\n    let profileData: any = tradieInfo;\n    let {\n      portfolioImageHandler,\n      modalCloseHandler,\n      reviewHandler,\n      submitReviewHandler,\n      handleChange,\n      submitAcceptDeclineRequest,\n    } = this;\n\n    const urlParams = new URLSearchParams(props.location.search);\n    let hideInvite: any = false;\n    let haveJobId: any = false;\n    let isActive = urlParams.get(\"active\") == \"true\" ? true : false;\n    if (urlParams.get(\"hideInvite\")) {\n      hideInvite = urlParams.get(\"hideInvite\") === \"false\" ? false : true;\n    }\n\n    haveJobId = urlParams.get(\"jobId\") == null ? false : true;\n    let toggleSpecialisation = this.state.toggleSpecialisation;\n\n    if (showError) {\n      return (\n        <div className=\"app_wrapper\">\n          <div className=\"custom_container\">\n            <div className=\"section_wrapper\">\n              <div className=\"vid_img_wrapper pt-20\">\n                <div className=\"flex_row\">\n                  <div className=\"flex_col_sm_3 relative\">\n                    <button\n                      className=\"back\"\n                      onClick={() => {\n                        // props.history.goBack();\n                        let url = props?.location?.state?.url;\n                        if (url && !url.indexOf(\"tradie-info\")) {\n                          props.history.push(props.location.state.url);\n                        }\n                        if (!isActive) {\n                          props.history.push(\"/jobs\");\n                        } else {\n                          props.history.push(\"/\");\n                        }\n                      }}\n                    ></button>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"no_record  m-t-vh\">\n                <figure className=\"no_img\">\n                  <img src={noDataFound} alt=\"data not found\" />\n                </figure>\n                <span>{\"This tradesperson is no longer available\"}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"app_wrapper\">\n        <div className=\"custom_container\">\n          <div className=\"section_wrapper\">\n            <VoucherDetail\n              toggleProps={toggleVoucher.isTrue}\n              item={toggleVoucher.item}\n              id={tradieInfo?.tradeId}\n              closeToggle={this.closeToggle}\n            />\n\n            <div className=\"vid_img_wrapper pt-20\">\n              <div className=\"flex_row\">\n                <div className=\"flex_col_sm_3 relative\">\n                  <button\n                    className=\"back\"\n                    onClick={() => {\n                      // props.history.goBack();\n                      let url = props?.location?.state?.url;\n                      if (url && !url.indexOf(\"tradie-info\")) {\n                        props.history.push();\n                      }\n                      if (isActive) {\n                        let url_: any = new URLSearchParams(\n                          props.location.search\n                        );\n                        let jobId: any = url_.get(\"jobId\");\n                        props.history.push(\n                          `/jobs?active=active&jobId=${jobId}&markMilestone=true`\n                        );\n                      } else {\n                        props.history.push(\"/\");\n                      }\n                    }}\n                  ></button>\n                </div>\n              </div>\n\n              <div className=\"flex_row\">\n                <div className=\"flex_col_sm_3\">\n                  <div className=\"upload_profile_pic\">\n                    <figure className=\"user_img\">\n                      {this.state.profilePictureLoading && (\n                        <Skeleton style={{ lineHeight: 2, height: 240 }} />\n                      )}\n                      {!isSkeletonLoading && (\n                        <img\n                          src={tradieInfo?.tradieImage || profilePlaceholder}\n                          alt=\"profile-pic\"\n                          onLoad={() =>\n                            this.setState({\n                              profilePictureLoading: false,\n                            })\n                          }\n                          onError={(e: any) => {\n                            let e_: any = e;\n                            e_.target.src = dummy;\n                          }}\n                          hidden={this.state.profilePictureLoading}\n                        />\n                      )}\n                    </figure>\n                  </div>\n                </div>\n                <div className=\"flex_col_sm_3 relative\">\n                  {props.isSkeletonLoading ? null : (\n                    <div className=\"text-right\">\n                      {storageService.getItem(\"userType\") === 2 && (\n                        <span\n                          className={`bookmark_icon ${\n                            tradieInfo?.isSaved ? \"active\" : \"\"\n                          }`}\n                          onClick={() => {\n                            this.savedTradie({ tradieInfo });\n                          }}\n                        ></span>\n                      )}\n                    </div>\n                  )}\n\n                  <div className=\"detail_card\">\n                    {props.isSkeletonLoading ? (\n                      <Skeleton count={5} height={25} />\n                    ) : (\n                      <>\n                        <span\n                          className=\"title line-1\"\n                          title={tradieInfo?.tradieName}\n                        >\n                          {tradieInfo?.tradieName || \"\"}\n                        </span>\n                        <span className=\"xs_sub_title\">\n                          {this.capitalize(tradieInfo?.businessName || \"\")}\n                        </span>\n                        <span className=\"tagg\">\n                          {tradieInfo?.areasOfSpecialization?.tradeData[0]\n                            ?.tradeName || \"\"}\n                        </span>\n                        <ul className=\"review_job\">\n                          <li>\n                            <span className=\"icon reviews\">\n                              {tradieInfo?.ratings || \"0\"}\n                            </span>\n                            <span className=\"review_count\">{`${\n                              tradieInfo?.reviewsCount || \"0\"\n                            } reviews`}</span>\n                          </li>\n                          <li>\n                            <span className=\"icon job\">\n                              {tradieInfo?.jobCompletedCount || \"0\"}\n                            </span>\n                            <span className=\"review_count\">\n                              {\" \"}\n                              jobs completed\n                            </span>\n                          </li>\n                        </ul>\n\n                        {userType !== 1 && is_active == \"true\" ? (\n                          <button\n                            className=\"fill_btn full_btn btn-effect\"\n                            onClick={() => {\n                              const tradieId = new URLSearchParams(\n                                props.history?.location?.search\n                              ).get(\"tradeId\");\n                              props.history.push({\n                                pathname: `/choose-job-to-start-chat`,\n                                state: {\n                                  tradieId: tradieId ? tradieId : \"\",\n                                },\n                              });\n                            }}\n                          >\n                            {\"Write a message\"}\n                          </button>\n                        ) : (\n                          \"\"\n                        )}\n\n                        {userType === 1 ? (\n                          <button\n                            className=\"fill_btn full_btn btn-effect\"\n                            onClick={() => {\n                              props.history.push(\"/update-user-info\");\n                            }}\n                          >\n                            Edit\n                          </button>\n                        ) : !tradieInfo?.isRequested && !hideInvite ? (\n                          <div className=\"form_field\">\n                            {tradieInfo?.isInvited ? (\n                              <>\n                                {/* bottom_btn */}\n                                {/* <span\n                                                                    onClick={() => {\n                                                                        this.savedTradie({ tradieInfo })\n                                                                    }}\n                                                                    className={`bookmark_icon ${tradieInfo?.isSaved ? 'active' : ''}`}></span> */}\n                                {haveJobId ? (\n                                  <button\n                                    onClick={() => {\n                                      console.log({ haveJobId, tradieInfo });\n                                      if (haveJobId) {\n                                        this.cancelInvite({\n                                          invitationId:\n                                            tradieInfo?.invitationId,\n                                          tradieId: tradieInfo?.tradieId,\n                                          jobId: urlParams.get(\"jobId\"),\n                                        });\n                                      } else {\n                                        props.history.push({\n                                          pathname: \"/cancel-the-job\",\n                                          state: {\n                                            tradieId:\n                                              tradieInfo?._id ||\n                                              tradieInfo?.tradieId,\n                                            path: props.location.search,\n                                            cancelJob: true,\n                                          },\n                                        });\n                                      }\n                                    }}\n                                    className=\"fill_btn full_btn btn-effect\"\n                                  >\n                                    {\"Cancel Invite\"}\n                                  </button>\n                                ) : (\n                                  <button\n                                    onClick={() => {\n                                      console.log({ tradieInfo });\n                                      props.history.push({\n                                        pathname: \"/choose-the-job\",\n                                        state: {\n                                          tradieId:\n                                            tradieInfo?._id ||\n                                            tradieInfo?.tradieId,\n                                          path: props.location.search,\n                                        },\n                                      });\n                                    }}\n                                    className=\"fill_btn full_btn btn-effect\"\n                                  >\n                                    {\"Invite for job\"}\n                                  </button>\n                                )}\n                              </>\n                            ) : (\n                              <button\n                                onClick={() => {\n                                  console.log(\n                                    { tradieInfo },\n                                    \"tradieInfo --><--\"\n                                  );\n                                  props.history.push({\n                                    pathname: \"/choose-the-job\",\n                                    state: {\n                                      tradieId:\n                                        tradieInfo?._id || tradieInfo?.tradieId,\n                                      path: props.location.search,\n                                    },\n                                  });\n                                }}\n                                className=\"fill_btn full_btn btn-effect\"\n                              >\n                                {\"Invite for job\"}\n                              </button>\n                            )}\n                          </div>\n                        ) : haveJobId && tradieInfo?.isRequested ? (\n                          <>\n                            <div className=\"form_field\">\n                              <button\n                                onClick={() => {\n                                  submitAcceptDeclineRequest(1);\n                                }}\n                                className=\"fill_btn full_btn btn-effect\"\n                              >\n                                Accept\n                              </button>\n                            </div>\n                            <div className=\"form_field\">\n                              <button\n                                onClick={() => {\n                                  submitAcceptDeclineRequest(2);\n                                }}\n                                className=\"fill_grey_btn full_btn btn-effect\"\n                              >\n                                Decline\n                              </button>\n                            </div>\n                          </>\n                        ) : null}\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex_row\">\n                <div className=\"flex_col_sm_8\">\n                  {props.isSkeletonLoading ? (\n                    <Skeleton count={2} />\n                  ) : tradieInfo?.about?.length > 0 ? (\n                    <div\n                      className={`description ${\n                        haveJobId && tradieInfo?.isRequested\n                          ? \"public_view_btn2\"\n                          : \"\"\n                      }`}\n                    >\n                      <span className=\"sub_title\">About</span>\n                      <p className=\"commn_para\">{tradieInfo?.about}</p>\n                    </div>\n                  ) : null}\n                </div>\n                {/* <div className=\"flex_col_sm_8\">\n                                    {props.isSkeletonLoading ? <Skeleton count={3} /> : userType === 1 ? (\n                                        <>\n                                            <div className=\"area\">\n                                                <span className=\"sub_title\">Areas of specialisation</span>\n                                                <div className={`tags_wrap ${toggleSpecialisation ? 'active' : ''}`}>\n                                                    <ul>\n                                                        {tradieInfo?.areasOfSpecialization?.tradeData[0]?.tradeName &&\n                                                            <li className=\"main\">\n                                                                {tradieInfo?.areasOfSpecialization?.tradeData[0]?.tradeName || ''}\n                                                            </li>}\n                                                        {tradieInfo?.areasOfSpecialization?.specializationData?.map((item: any, index: any) => {\n                                                            return toggleSpecialisation ? index <= 4 && <li key={item.specializationId}>{item.specializationName || ''}</li> : <li key={item.specializationId}>{item.specializationName || ''}</li>\n                                                        })}\n                                                    </ul>\n                                                    <span className=\"link show_more\"\n                                                        onClick={(e: any) => {\n                                                            e.preventDefault();\n                                                            this.setState({ toggleSpecialisation: !this.state.toggleSpecialisation })\n                                                        }}>\n                                                        {toggleSpecialisation ? 'Show more' : 'Show less'}\n                                                    </span>\n                                                </div>\n                                            </div>\n                                        </>\n                                    ) : (tradieInfo?.areasOfSpecialization?.length > 0 ? (\n                                        <>\n                                            <div className=\"area\">\n                                                <span className=\"sub_title\">Areas of specialisation</span>\n                                                <div className=\"tags_wrap\">\n                                                    <ul>\n                                                        {tradieInfo?.tradeName && <li className=\"main\">\n                                                            {tradieInfo?.tradeName || ''}\n                                                        </li>}\n                                                        {tradieInfo?.areasOfSpecialization?.map((item: any) => {\n                                                            return <li key={item.specializationId}>{item.specializationName}</li>\n                                                        })}\n                                                    </ul>\n                                                </div>\n                                            </div>\n                                        </>\n                                    ) : null)}\n                                </div> */}\n              </div>\n            </div>\n          </div>\n          {tradieInfo?.portfolio?.length ? (\n            <div className=\"section_wrapper\">\n              <span className=\"sub_title\">\n                {props.isSkeletonLoading ? <Skeleton /> : \"Portfolio\"}\n              </span>\n              <Carousel\n                responsive={portfolio}\n                showDots={false}\n                arrows={true}\n                infinite={true}\n                className=\"portfolio_wrappr\"\n                partialVisbile\n              >\n                {props.isSkeletonLoading ? (\n                  <Skeleton height={256} />\n                ) : tradieInfo?.portfolio?.length ? (\n                  tradieInfo?.portfolio?.map((item: any) => {\n                    return (\n                      <div\n                        className=\"media\"\n                        key={item.portfolioId}\n                        onClick={() => portfolioImageHandler(item)}\n                      >\n                        <figure className=\"portfolio_img\">\n                          <img\n                            src={\n                              item.portfolioImage?.length\n                                ? item.portfolioImage[0]\n                                : portfolioPlaceholder\n                            }\n                            alt=\"portfolio-images\"\n                          />\n                          <span className=\"xs_sub_title\">\n                            <p className=\"line-3\" title={item.jobName}>\n                              {item.jobName}\n                            </p>\n                          </span>\n                        </figure>\n                      </div>\n                    );\n                  })\n                ) : (\n                  <img alt=\"\" src={portfolioPlaceholder} />\n                )}\n              </Carousel>\n            </div>\n          ) : null}\n\n          {/* portfolio Image modal desc */}\n          {portfolioData?.portfolioImageClicked && (\n            <Modal\n              className=\"custom_modal\"\n              open={portfolioData.portfolioImageClicked}\n              onClose={() => {\n                this.setState((prev: any) => ({\n                  portfolioData: {\n                    ...prev.portfolioData,\n                    portfolioImageClicked: false,\n                  },\n                }));\n              }}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <div className=\"custom_wh portfolio_preview\">\n                <div className=\"heading\">\n                  <button\n                    onClick={() => {\n                      this.setState((prev: any) => ({\n                        portfolioData: {\n                          ...prev.portfolioData,\n                          portfolioImageClicked: false,\n                        },\n                      }));\n                    }}\n                    className=\"close_btn\"\n                  >\n                    <img src={cancel} alt=\"cancel\" />\n                  </button>\n                </div>\n                <div className=\"flex_row\">\n                  <div className=\"flex_col_sm_6\">\n                    <Carousel\n                      responsive={portfolioModal}\n                      showDots={true}\n                      infinite={true}\n                      autoPlay={true}\n                      arrows={false}\n                      className=\"portfolio_wrappr\"\n                    >\n                      {portfolioData?.portfolioDetails &&\n                      portfolioData?.portfolioDetails?.portfolioImage &&\n                      portfolioData?.portfolioDetails?.portfolioImage\n                        ?.length ? (\n                        portfolioData?.portfolioDetails?.portfolioImage?.map(\n                          (image: string) => {\n                            return (\n                              <div\n                                className=\"media\"\n                                key={\n                                  portfolioData?.portfolioDetails?.portfolioId\n                                }\n                              >\n                                <figure className=\"portfolio_img\">\n                                  <img\n                                    src={image ? image : portfolioPlaceholder}\n                                    alt=\"portfolio-images\"\n                                  />\n                                </figure>\n                              </div>\n                            );\n                          }\n                        )\n                      ) : (\n                        <img alt=\"\" src={portfolioPlaceholder} />\n                      )}\n                    </Carousel>\n                  </div>\n                  <div className=\"flex_col_sm_6\">\n                    <span className=\"xs_sub_title\">Job Description</span>\n                    <div className=\"job_content\">\n                      <p>{portfolioData?.portfolioDetails?.jobDescription}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Modal>\n          )}\n\n          <div className=\"section_wrapper\">\n            <span className=\"sub_title\">\n              {props.isSkeletonLoading ? <Skeleton /> : \"Reviews\"}\n            </span>\n            {props.isSkeletonLoading ? (\n              <Skeleton height={200} />\n            ) : (\n              <div className=\"flex_row review_parent\">\n                {tradieInfo?.reviewData?.length > 0 ? (\n                  tradieInfo?.reviewData?.slice(0, 8)?.map((jobData: any) => {\n                    return <ReviewInfoBox item={jobData} {...props} />;\n                  })\n                ) : (\n                  <div className=\"no_record\">\n                    <figure className=\"no_data_img\">\n                      <img src={noData} alt=\"data not found\" />\n                    </figure>\n                    <span>No Data Found</span>\n                  </div>\n                )}\n              </div>\n            )}\n            {props.isSkeletonLoading ? (\n              <Skeleton height={25} />\n            ) : (\n              <button\n                className={`fill_grey_btn full_btn view_more ${\n                  !tradieInfo?.reviewsCount ? \"disable_btn\" : \"\"\n                }`}\n                onClick={() => {\n                  this.setState((prevData: any) => ({\n                    reviewsData: {\n                      ...prevData.reviewsData,\n                      showAllReviewsClicked: true,\n                    },\n                  }));\n                  if (user_type == \"1\" || props.userType == 1) {\n                    const mData = {\n                      timeStamp: moengage.getCurrentTimeStamp(),\n                    };\n                    moengage.moE_SendEvent(MoEConstants.VIEWED_REVIEWS, mData);\n                    mixPanel.mixP_SendEvent(MoEConstants.VIEWED_REVIEWS, mData);\n                  }\n                }}\n              >\n                {`View all ${tradieInfo?.reviewsCount || 0} ${\n                  !!tradieInfo?.reviewsCount ? \"review\" : \"reviews\"\n                } `}\n              </button>\n            )}\n          </div>\n\n          {tradieInfo?.vouchesData?.length ? (\n            <div className=\"section_wrapper\">\n              <span className=\"sub_title\">Vouches</span>\n              <div className=\"flex_row\">\n                {tradieInfo?.vouchesData.slice(0, 8).map((item: any) => (\n                  <div className=\"flex_col_sm_3\">\n                    <div className=\"review_card vouchers\">\n                      <div className=\"pic_shot_dtl\">\n                        <figure className=\"u_img\">\n                          <img\n                            src={item?.builderImage || dummy}\n                            onError={(e: any) => {\n                              if (e?.target?.onerror) {\n                                e.target.onerror = null;\n                              }\n                              if (e?.target?.src) {\n                                e.target.src = dummy;\n                              }\n                            }}\n                            alt=\"user-img\"\n                          />\n                        </figure>\n                        <div className=\"name_wrap\">\n                          <span\n                            className=\"user_name\"\n                            title={item?.builderName || \"\"}\n                          >\n                            {item?.builderName || \"\"}\n                          </span>\n                          <span className=\"date\">{item?.date}</span>\n                        </div>\n                      </div>\n\n                      <span className=\"xs_head\">{item?.jobName}</span>\n\n                      <p className=\"commn_para\" title=\"\">\n                        {item?.vouchDescription || \"\"}\n                      </p>\n                      <div className=\"vouch\">\n                        <figure className=\"vouch_icon\">\n                          <img src={vouch} alt=\"vouch\" />\n                        </figure>\n                        <span\n                          onClick={() => {\n                            this.setState({\n                              toggleVoucher: { item: item, isTrue: true },\n                            });\n                          }}\n                          className=\"link\"\n                        >\n                          {`Vouch for ${item?.tradieName}`}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <button\n                className={`fill_grey_btn full_btn view_more ${\n                  !tradieInfo?.vouchesData?.length ? \"disable_btn\" : \"\"\n                }`}\n                onClick={() => {\n                  props.history.push({\n                    pathname: \"/tradie-vouchers\",\n                    state: {\n                      path: props.location.search,\n                      id: tradieInfo.tradieId,\n                    },\n                  });\n                }}\n              >\n                {`View ${tradieInfo?.vouchesData?.length === 1 ? \"\" : \"all\"} ${\n                  tradieInfo?.vouchesData?.length\n                } vouch${tradieInfo?.vouchesData?.length === 1 ? \"\" : \"es\"}`}\n              </button>\n            </div>\n          ) : storageService.getItem(\"userType\") === 2 ? (\n            <div className=\"section_wrapper\">\n              <div className=\"custom_container\">\n                <span className=\"sub_title\">Vouches</span>\n\n                <div className=\"flex_row review_parent\">\n                  <div className=\"no_record\">\n                    <figure className=\"no_data_img\">\n                      <img src={noData} alt=\"data not found\" />\n                    </figure>\n                    <span>No Data Found</span>\n                  </div>\n                </div>\n\n                <button\n                  className=\"fill_grey_btn full_btn\"\n                  onClick={() => {\n                    this.setState({\n                      toggleAddVoucher: !this.state.toggleAddVoucher,\n                    });\n                  }}\n                >\n                  {`Leave a Vouch`}\n                </button>\n              </div>\n            </div>\n          ) : null}\n\n          {storageService.getItem(\"userType\") === 2 && (\n            <AddVoucherComponent\n              toggleProps={this.state.toggleAddVoucher}\n              id={tradieInfo?.tradieId}\n              closeToggle={this.closeAddVoucher}\n            />\n          )}\n\n          {reviewsData.showAllReviewsClicked && tradieReviews?.length && (\n            <Modal\n              className=\"ques_ans_modal\"\n              open={reviewsData.showAllReviewsClicked}\n              onClose={() => modalCloseHandler(\"showAllReviewsClicked\")}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <div className=\"custom_wh\">\n                <div className=\"heading\">\n                  <span className=\"sub_title\">{`${tradieInfo.reviewsCount} ${\n                    tradieInfo?.reviewsCount === 1 ? \"review\" : \"reviews\"\n                  }`}</span>\n                  <button\n                    className=\"close_btn\"\n                    onClick={() => modalCloseHandler(\"showAllReviewsClicked\")}\n                  >\n                    <img src={cancel} alt=\"cancel\" />\n                  </button>\n                </div>\n                <div id=\"divScrollable\" className=\"inner_wrap\">\n                  <InfiniteScroll\n                    dataLength={tradieReviews?.length}\n                    next={async () => {\n                      const { tradeId } = this.getItemsFromLocation();\n                      let cp = this.state.currentReviewPage + 1;\n                      let prevValues = tradieReviews;\n                      this.setState({\n                        currentReviewPage: this.state.currentReviewPage + 1,\n                      });\n                      let res_trade: any = await getTradeReviews({\n                        tradieId: tradeId,\n                        page: cp,\n                      });\n                      if (res_trade?.success) {\n                        let data_ = res_trade?.data?.list || res_trade?.data;\n                        if (data_?.length) {\n                          this.setState({\n                            tradieReviews: [...prevValues, ...data_],\n                          });\n                        } else {\n                          this.setState({ hasMore: false });\n                        }\n                      }\n                    }}\n                    hasMore={this.state.hasMore}\n                    loader={<></>}\n                    scrollableTarget=\"divScrollable\"\n                  >\n                    {tradieReviews?.map((item: any) => {\n                      let reviewData: any = item.reviewData;\n                      let replyData: any = reviewData.replyData;\n                      let replyId: any = replyData.replyId;\n                      return (\n                        <>\n                          <div\n                            className=\"question_ans_card\"\n                            key={reviewData.reviewId}\n                          >\n                            <div className=\"user_detail\">\n                              <figure className=\"user_img\">\n                                <img\n                                  src={reviewData?.userImage || dummy}\n                                  alt=\"user-img\"\n                                />\n                              </figure>\n\n                              <div className=\"details\">\n                                <span className=\"user_name\">\n                                  {reviewData?.name}\n                                </span>\n                                <span className=\"date\">{reviewData?.date}</span>\n                                <span className=\"item-star\">\n                                  <Rating\n                                    fractions={2}\n                                    emptySymbol={empty_star_rating_below}\n                                    fullSymbol={full_star_rating_below}\n                                    initialRating={reviewData?.rating}\n                                    readonly={true}\n                                  />\n                                </span>\n                              </div>\n                            </div>\n                            <p>{reviewData?.review}</p>\n\n                            {storageService.getItem(\"userType\") === 2 &&\n                            item.reviewData.name ==\n                              storageService.getItem(\"userInfo\")?.userName ? (\n                              <span\n                                onClick={() => {\n                                  reviewHandler(\n                                    \"editBuilderReview\",\n                                    reviewData?.reviewId,\n                                    \"\",\n                                    reviewData\n                                  );\n                                }}\n                                className=\"action link\"\n                              >\n                                {\"Edit \"}\n                              </span>\n                            ) : null}\n                            {storageService.getItem(\"userType\") === 2 &&\n                            item.reviewData.name ==\n                              storageService.getItem(\"userInfo\")?.userName ? (\n                              <span\n                                onClick={() => {\n                                  this.setState({\n                                    delete: {\n                                      isToggle: true,\n                                      deleteId: reviewData?.reviewId,\n                                    },\n                                  });\n                                }}\n                                className=\"action link\"\n                              >\n                                {\"Delete \"}\n                              </span>\n                            ) : null}\n                            <br />\n                            <br />\n                            {Object.keys(reviewsData.replyShownHideList)\n                              .length &&\n                            reviewsData.replyShownHideList[\n                              item?.reviewData?.reviewId\n                            ] ? (\n                              <span\n                                className=\"action link\"\n                                onClick={() => {\n                                  reviewHandler(\n                                    \"hideReviewClicked\",\n                                    \"\",\n                                    item?.reviewData?.reviewId\n                                  );\n                                }}\n                              >\n                                {\"Hide reply\"}\n                              </span>\n                            ) : Object.keys(item?.reviewData?.replyData)\n                                .length ? (\n                              <span\n                                className=\"show_hide_ans link\"\n                                onClick={() => {\n                                  reviewHandler(\n                                    \"showReviewClicked\",\n                                    \"\",\n                                    item?.reviewData?.reviewId\n                                  );\n                                }}\n                              >\n                                {\"Show reply\"}\n                              </span>\n                            ) : storageService.getItem(\"userType\") === 1 ? (\n                              <span\n                                className=\"action link\"\n                                onClick={() => {\n                                  reviewHandler(\n                                    \"reviewReplyClicked\",\n                                    item?.reviewData?.reviewId\n                                  );\n                                }}\n                              >\n                                {\"Reply\"}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </div>\n                          {Object.keys(reviewsData.replyShownHideList).length &&\n                          reviewsData.replyShownHideList[\n                            item?.reviewData?.reviewId\n                          ] ? (\n                            <div className=\"question_ans_card answer\">\n                              <div className=\"user_detail\">\n                                <figure className=\"user_img\">\n                                  <img\n                                    src={\n                                      reviewData?.replyData?.userImage || dummy\n                                    }\n                                    alt=\"user-img\"\n                                  />\n                                </figure>\n                                <div className=\"details\">\n                                  <span className=\"user_name\">\n                                    {reviewData?.replyData?.userName}\n                                  </span>\n                                  <span className=\"date\">\n                                    {reviewData?.replyData?.date}\n                                  </span>\n                                </div>\n                              </div>\n                              <p>{reviewData?.replyData?.reply}</p>\n                              {reviewData?.replyData?.isModifiable && (\n                                <span\n                                  className=\"action link\"\n                                  onClick={() => {\n                                    reviewHandler(\n                                      \"updateReviewReply\",\n                                      item?.reviewData?.reviewId,\n                                      item?.reviewData?.replyData?.replyId,\n                                      reviewData?.replyData?.reply\n                                    );\n                                  }}\n                                >\n                                  {\"Edit\"}\n                                </span>\n                              )}\n                              {reviewData?.replyData?.isModifiable && (\n                                <span\n                                  className=\"action link\"\n                                  onClick={() => {\n                                    reviewHandler(\n                                      \"removeReviewReply\",\n                                      item?.reviewData?.reviewId,\n                                      item?.reviewData?.replyData?.replyId\n                                    );\n                                  }}\n                                >\n                                  {\"Delete\"}\n                                </span>\n                              )}\n                            </div>\n                          ) : null}\n                        </>\n                      );\n                    })}\n                  </InfiniteScroll>\n                </div>\n              </div>\n            </Modal>\n          )}\n          {/* post reply modal */}\n          {reviewsData.reviewReplyClicked && (\n            <Modal\n              className=\"ques_ans_modal\"\n              open={reviewsData.reviewReplyClicked}\n              onClose={() => {\n                modalCloseHandler(\"reviewReplyClicked\");\n              }}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <>\n                <div className=\"custom_wh ask_ques\">\n                  <div className=\"heading\">\n                    <span className=\"sub_title\">{`${\n                      reviewsData?.updateReviewsClicked ? \"Edit reply\" : \"Reply\"\n                    }`}</span>\n                    <button\n                      className=\"close_btn\"\n                      onClick={() => {\n                        modalCloseHandler(\"reviewReplyClicked\");\n                      }}\n                    >\n                      <img src={cancel} alt=\"cancel\" />\n                    </button>\n                  </div>\n                  <div className=\"form_field\">\n                    <label className=\"form_label\">Your reply</label>\n                    <div className=\"text_field\">\n                      <textarea\n                        placeholder=\"Text\"\n                        value={reviewsData.reviewData}\n                        onChange={(e) => {\n                          handleChange(e, \"reviewData\");\n                        }}\n                      ></textarea>\n                      <span className=\"char_count\">{`${\n                        reviewsData.reviewData?.length || \"0\"\n                      }/250`}</span>\n                    </div>\n                  </div>\n                  <div className=\"bottom_btn custom_btn\">\n                    {reviewsData.updateReviewsClicked ? (\n                      <button\n                        className=\"fill_btn full_btn btn-effect\"\n                        onClick={() => {\n                          submitReviewHandler(\"updateReviewReply\");\n                        }}\n                      >\n                        {\"Save\"}\n                      </button>\n                    ) : (\n                      <button\n                        className=\"fill_btn full_btn btn-effect\"\n                        onClick={() => {\n                          reviewHandler(\"reviewReply\");\n                        }}\n                      >\n                        {\"Send\"}\n                      </button>\n                    )}\n                    <button\n                      className=\"fill_grey_btn btn-effect\"\n                      onClick={() => {\n                        reviewHandler(\"replyCancelBtnClicked\");\n                      }}\n                    >\n                      {\"Cancel\"}\n                    </button>\n                  </div>\n                </div>\n              </>\n            </Modal>\n          )}\n          {/* send confirmation yes/no modal */}\n          {reviewsData.confirmationClicked && (\n            <Modal\n              className=\"custom_modal\"\n              open={reviewsData.confirmationClicked}\n              onClose={() => modalCloseHandler(\"confirmationClicked\")}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <>\n                <div className=\"custom_wh confirmation\">\n                  <div className=\"heading\">\n                    <span className=\"xs_sub_title\">{`${\n                      reviewsData.deleteReviewsClicked\n                        ? \"Delete\"\n                        : reviewsData.updateReviewsClicked\n                        ? \"Update\"\n                        : \"\"\n                    } Reply Confirmation`}</span>\n                    <button\n                      className=\"close_btn\"\n                      onClick={() => modalCloseHandler(\"confirmationClicked\")}\n                    >\n                      <img src={cancel} alt=\"cancel\" />\n                    </button>\n                  </div>\n                  <div className=\"modal_message\">\n                    <p>{`Are you sure you want to ${\n                      reviewsData.deleteReviewsClicked ? \"delete \" : \"\"\n                    }reply?`}</p>\n                  </div>\n                  <div className=\"dialog_actions\">\n                    <button\n                      className=\"fill_btn btn-effect\"\n                      onClick={() =>\n                        submitReviewHandler(reviewsData.reviewsClickedType)\n                      }\n                    >\n                      Yes\n                    </button>\n                    <button\n                      className=\"fill_grey_btn btn-effect\"\n                      onClick={() => modalCloseHandler(\"confirmationClicked\")}\n                    >\n                      No\n                    </button>\n                  </div>\n                </div>\n              </>\n            </Modal>\n          )}\n\n          {reviewsData.editBuilderReview && (\n            <Modal\n              className=\"ques_ans_modal\"\n              open={reviewsData.editBuilderReview}\n              onClose={() => {\n                modalCloseHandler(\"editBuilderReview\");\n              }}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <>\n                <div className=\"custom_wh ask_ques\">\n                  <div className=\"heading\">\n                    <span className=\"sub_title\">{\"Edit Review\"}</span>\n                    <button\n                      className=\"close_btn\"\n                      onClick={() => {\n                        modalCloseHandler(\"editBuilderReview\");\n                      }}\n                    >\n                      <img src={cancel} alt=\"cancel\" />\n                    </button>\n                  </div>\n                  <div className=\"form_field\">\n                    <label className=\"form_label\">Your Review</label>\n                    <ReactStars\n                      value={reviewsData?.reviewData?.rating}\n                      count={5}\n                      isHalf={true}\n                      onChange={(newRating: any) => {\n                        this.setState((prevData: any) => {\n                          console.log({ prevData });\n                          return {\n                            reviewsData: {\n                              ...prevData.reviewsData,\n                              reviewData: {\n                                ...prevData?.reviewsData?.reviewData,\n                                rating: newRating,\n                              },\n                            },\n                          };\n                        });\n                      }}\n                      size={40}\n                      activeColor=\"#ffd700\"\n                      color=\"#DFE5EF\"\n                    />\n                    <div className=\"text_field\">\n                      <textarea\n                        placeholder=\"Text\"\n                        value={reviewsData?.reviewData?.review}\n                        onChange={(e) => {\n                          handleChange(e, \"reviewData\", \"review\");\n                        }}\n                      ></textarea>\n                      <span className=\"char_count\">{`${\n                        reviewsData?.reviewData?.review?.length || \"0\"\n                      }/250`}</span>\n                    </div>\n                  </div>\n                  <div className=\"bottom_btn custom_btn\">\n                    <button\n                      className=\"fill_btn full_btn btn-effect\"\n                      onClick={() => {\n                        submitReviewHandler(\"updateBuilderReview\");\n                      }}\n                    >\n                      {\"Save\"}\n                    </button>\n                    <button\n                      className=\"fill_grey_btn btn-effect\"\n                      onClick={() => {\n                        reviewHandler(\"cancelBuilderReview\");\n                      }}\n                    >\n                      {\"Cancel\"}\n                    </button>\n                  </div>\n                </div>\n              </>\n            </Modal>\n          )}\n\n          <Dialog\n            open={this.state?.delete?.isToggle}\n            // onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle id=\"alert-dialog-title\">\n              {\"Do you want to delete this review ?\"}\n            </DialogTitle>\n            <DialogActions>\n              <Button\n                onClick={async () => {\n                  let response = await deleteReviewTradie({\n                    reviewId: this.state?.delete?.deleteId,\n                  });\n                  if (response?.success) {\n                    this.setState(\n                      {\n                        delete: {\n                          isToggle: false,\n                          deleteId: \"\",\n                        },\n                      },\n                      () => {\n                        this.setItems();\n                      }\n                    );\n                  }\n                }}\n                color=\"primary\"\n              >\n                {\"Yes\"}\n              </Button>\n              <Button\n                onClick={() => {\n                  this.setState({\n                    delete: {\n                      isToggle: false,\n                      deleteId: \"\",\n                    },\n                  });\n                }}\n                color=\"primary\"\n                autoFocus\n              >\n                {\"No\"}\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapState = (state: any) => ({\n  tradieInfo: state.profile.tradieInfo,\n  userType: state.profile.userType,\n  tradeListData: state.auth.tradeListData,\n  tradieReviews: state.jobs.tradieReviews,\n  tradieRequestStatus: state.jobs.tradieRequestStatus,\n  tradieProfileViewData: state.profile.tradieProfileViewData,\n  isSkeletonLoading: state.common.isSkeletonLoading,\n});\n\nconst mapProps = (dispatch: any) => {\n  return bindActionCreators(\n    {\n      getTradieProfile,\n      getTradieReviewListOnBuilder,\n      getAcceptDeclineTradie,\n      getTradieProfileView,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapState, mapProps)(TradieInfo);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/tradieDetails/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/chat/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/actions.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/mostViewedJobs/mostViewedJobs.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/savedJobs/savedJobs.tsx",["1069"],"import { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport TradieJobInfoBox from \"../../common/tradieJobInfoBox\";\nimport noData from \"../../assets/images/no-search-data.png\";\n\nconst SavedJobs = ({\n  getSavedJobList,\n  clearSavedJobList,\n  savedJobs,\n  isLoading,\n  ...props\n}: any) => {\n  const [page, setPage] = useState(1);\n  const [jobs, setJobs] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n\n  const backButtonClicked = () => {\n    props.history?.goBack();\n  };\n\n  useEffect(() => {\n    return clearSavedJobList;\n  }, [clearSavedJobList]);\n\n  useEffect(() => {\n    getSavedJobList(page);\n  }, [getSavedJobList, page]);\n\n  useEffect(() => {\n    setJobs((job) => (job || []).concat(savedJobs));\n    setHasMore(savedJobs.length === 10);\n  }, [savedJobs]);\n\n  const loadMoreJobs = () => {\n    setPage((pages) => pages + 1);\n  };\n\n  return (\n    <InfiniteScroll\n      dataLength={jobs.length}\n      next={loadMoreJobs}\n      hasMore={hasMore}\n      loader={<h4></h4>}\n    >\n      <div className={\"app_wrapper\"}>\n        <div className=\"section_wrapper\">\n          <div className=\"custom_container\">\n            <div className=\"relate\">\n              <button className=\"back\" onClick={backButtonClicked}></button>\n              <span className=\"title\">Saved jobs</span>\n            </div>\n            <div className=\"flex_row tradies_row\">\n              {jobs?.length > 0\n                ? jobs?.map((jobData: any) => {\n                    return (\n                      <TradieJobInfoBox\n                        item={jobData}\n                        {...props}\n                        key={jobData.jobId}\n                      />\n                    );\n                  })\n                : !isLoading && (\n                    <div className=\"no_record\">\n                      <figure className=\"no_img\">\n                        <img src={noData} alt=\"data not found\" />\n                      </figure>\n                      <span>No Data Found</span>\n                    </div>\n                  )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default SavedJobs;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/recommendedJobs/recommendedJobs.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieSearchJobResult/tradieSearchJobResult.tsx",["1070","1071","1072"],"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nimport BannerSearch from \"../../common/tradieBannerSearch/index\";\nimport TradieJobInfoBox from \"../../common/tradieJobInfoBox\";\nimport SearchResultFilters from \"../searchResultFilters/index\";\nimport RenderMap from \"./renderMap\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport mapIcon from \"../../assets/images/map.png\";\nimport noData from \"../../assets/images/no-search-data.png\";\nimport closeMap from \"../../assets/images/close-white.png\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\nimport { MoEConstants } from \"../../utils/constants\";\ninterface PropsType {\n  history: any;\n  location?: any;\n  isLoading: boolean;\n  tradeListData: Array<any>;\n  jobTypeListData: Array<any>;\n  viewNearByJobData: Array<any>;\n  homeSearchJobData: Array<any>;\n  getViewNearByJob: (data: any) => void;\n  postHomeSearchData: (data: any) => void;\n  resetHomeSearchJobData: () => void;\n  resetViewNearByJobData: () => void;\n}\n\nconst TradieSearchJobResult = (props: PropsType) => {\n  const [searchResultData, setSearchResultData] = useState({\n    page: 1,\n    searchByFilter: false,\n    cleanFiltersData: false,\n  });\n  const [mapData, setMapData] = useState<any>({\n    showMap: false,\n  });\n  const [paramsData, setParamsData] = useState<any>({});\n  const [isToggleModifySearch, setToggleModifySearch] =\n    useState<boolean>(false);\n  const [jobListData, setJobListData] = useState<Array<any>>([]);\n  const [apiRequestData, setApiRequestData] = useState<any>({});\n  const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n  const [isAllFilterSpecs, setIsAllFilterSpecs] = useState<boolean>(false);\n\n  useEffect(() => {\n    var queryParamsData = getQueryParamsData();\n    let data: any = {};\n\n    if (queryParamsData.jobResults === \"viewNearByJob\") {\n      data = {\n        page: 1,\n        long: queryParamsData.defaultLong,\n        lat: queryParamsData.defaultLat,\n      };\n      props.getViewNearByJob(data);\n    } else {\n      data = {\n        page: 1,\n        ...(queryParamsData.isFiltered\n          ? { isFiltered: true }\n          : { isFiltered: false }),\n        ...(queryParamsData.tradeId?.length && {\n          tradeId: queryParamsData.tradeId,\n        }),\n        ...(queryParamsData.jobTypes?.length && {\n          jobTypes: queryParamsData.jobTypes,\n        }),\n        ...(queryParamsData.specializationId?.length && {\n          specializationId: queryParamsData.specializationId,\n        }),\n        ...(queryParamsData.from_date && {\n          from_date: queryParamsData.from_date,\n        }),\n        ...(queryParamsData.to_date && { to_date: queryParamsData.to_date }),\n        ...(queryParamsData.min_budget >= 0 &&\n          queryParamsData.max_budget > 0 && {\n            pay_type: queryParamsData.pay_type,\n          }),\n        ...(queryParamsData.min_budget >= 0 &&\n          queryParamsData.max_budget > 0 && {\n            min_budget: queryParamsData.min_budget,\n          }),\n        ...(queryParamsData.min_budget >= 0 &&\n          queryParamsData.max_budget > 0 && {\n            max_budget: queryParamsData.max_budget,\n          }),\n        ...(queryParamsData.sortBy && { sortBy: queryParamsData.sortBy }),\n        ...((queryParamsData.addres || queryParamsData.sortBy === 2) && {\n          location: {\n            coordinates: [\n              queryParamsData.long\n                ? queryParamsData.long\n                : queryParamsData.defaultLong,\n              queryParamsData.lat\n                ? queryParamsData.lat\n                : queryParamsData.defaultLat,\n            ],\n          },\n        }),\n        ...(queryParamsData.addres &&\n          queryParamsData.address && { address: queryParamsData.address }),\n      };\n      props.postHomeSearchData(data);\n      const mData = {\n        timeStamp: moengage.getCurrentTimeStamp(),\n        category: props.tradeListData.find(\n          (i: any) => i._id === data?.tradeId?.[0]\n        )?.trade_name,\n        ...(data.address && {\n          location: `${JSON.parse(data.address)?.mainText} ${\n            JSON.parse(data.address)?.secondaryText\n          }`,\n        }),\n        ...(data?.max_budget && { \"Max budget\": data?.max_budget }),\n        ...(data?.from_date && { \"start date\": data?.from_date }),\n        ...(data?.to_date && { \"end date\": data?.to_date }),\n      };\n      moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_JOBS, mData);\n      mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_JOBS, mData);\n    }\n    setApiRequestData(data);\n\n    setIsAllFilterSpecs(\n      queryParamsData?.isAllFilterSpecs == true ? true : false\n    );\n    return () => {\n      props.resetViewNearByJobData();\n      props.resetHomeSearchJobData();\n    };\n  }, []);\n\n  const getQueryParamsData = () => {\n    const params = new URLSearchParams(props.history?.location?.search);\n    const specializationString = params.get(\"specializationId\");\n    const specializationArray = specializationString?.split(\",\");\n    const tradeIdArray = params.get(\"tradeId\") ? [params.get(\"tradeId\")] : null;\n    const jobTypesArray = params.get(\"jobTypes\")\n      ? [params.get(\"jobTypes\")]\n      : null;\n    const queryParamsData: any = {\n      page: Number(params.get(\"page\")),\n      isFiltered: params.get(\"isFiltered\") === \"true\",\n      isFilterOn: params.get(\"isFilterOn\"),\n      tradeId: tradeIdArray,\n      specializationId: specializationArray,\n      lat: Number(params.get(\"lat\")),\n      long: Number(params.get(\"long\")),\n      defaultLat: Number(params.get(\"defaultLat\")),\n      defaultLong: Number(params.get(\"defaultLong\")),\n      addres: params.get(\"addres\"),\n      address: params.get(\"address\"),\n      from_date: params.get(\"from_date\"),\n      to_date: params.get(\"to_date\"),\n      jobResults: params.get(\"jobResults\"),\n      heading: params.get(\"heading\"),\n      jobTypes: jobTypesArray,\n      searchJob: params.get(\"searchJob\")?.replaceAll(\"xxx\", \"&\"),\n      min_budget: Number(params.get(\"min_budget\")),\n      max_budget: Number(params.get(\"max_budget\")),\n      pay_type: params.get(\"pay_type\"),\n      sortBy: Number(params.get(\"sortBy\")),\n      isAllFilterSpecs:\n        params.get(\"isAllFilterSpecs\") === \"true\" ? true : false,\n    };\n    setParamsData(queryParamsData);\n    return queryParamsData;\n  };\n\n  console.log(\n    paramsData,\n    \"paramsData\",\n    jobListData,\n    \"jobListData\",\n    apiRequestData,\n    \"apiRequestData\",\n    hasMoreItems,\n    \"hasMoreItems\"\n  );\n\n  const callJobList = () => {\n    if (!hasMoreItems) {\n      return;\n    }\n    const data = { ...apiRequestData };\n    data.page = searchResultData.page;\n    if (paramsData.jobResults === \"viewNearByJob\") {\n      props.getViewNearByJob(data);\n    } else {\n      props.postHomeSearchData(data);\n    }\n  };\n  console.log(jobListData, \"@@@@@@@@@@@@@@@@@@@@@@@@\");\n  useEffect(() => {\n    const jobResultsParam = new URLSearchParams(\n      props.history?.location?.search\n    ).get(\"jobResults\");\n    if (searchResultData.searchByFilter && props.homeSearchJobData?.length) {\n      if (searchResultData.page === 1) {\n        setJobListData(props.homeSearchJobData);\n      } else {\n        setJobListData((prevData: any) => [\n          ...prevData,\n          ...props.homeSearchJobData,\n        ]);\n      }\n      setSearchResultData((prevData: any) => ({\n        ...prevData,\n        page: prevData.page + 1,\n      }));\n      if (props.homeSearchJobData?.length < 10) {\n        setHasMoreItems(false);\n      }\n      return;\n    }\n    if (\n      jobResultsParam === \"viewNearByJob\" &&\n      props.viewNearByJobData?.length\n    ) {\n      if (searchResultData.page === 1) {\n        setJobListData(props.viewNearByJobData);\n      } else {\n        setJobListData((prevData: any) => [\n          ...prevData,\n          ...props.viewNearByJobData,\n        ]);\n      }\n      setSearchResultData((prevData: any) => ({\n        ...prevData,\n        page: prevData.page + 1,\n      }));\n      if (props.viewNearByJobData?.length < 10) {\n        setHasMoreItems(false);\n      }\n      return;\n    } else if (props.homeSearchJobData?.length) {\n      if (searchResultData.page === 1) {\n        setJobListData(props.homeSearchJobData);\n      } else {\n        setJobListData((prevData: any) => [\n          ...prevData,\n          ...props.homeSearchJobData,\n        ]);\n      }\n      setSearchResultData((prevData: any) => ({\n        ...prevData,\n        page: prevData.page + 1,\n      }));\n      if (props.homeSearchJobData?.length < 10) {\n        setHasMoreItems(false);\n      }\n    }\n  }, [props.homeSearchJobData, props.viewNearByJobData]);\n\n  const searchByFilter = (allFiltersData: any) => {\n    const newParamsData = getQueryParamsData();\n    if (allFiltersData === \"callViewNearByJobApi\") {\n      const data = {\n        page: 1,\n        long: newParamsData.defaultLong,\n        lat: newParamsData.defaultLat,\n      };\n      props.getViewNearByJob(data);\n      props.history.replace(\n        `/search-job-results?jobResults=viewNearByJob&defaultLat=${newParamsData.defaultLat}&defaultLong=${newParamsData.defaultLong}`\n      );\n      getQueryParamsData();\n      setSearchResultData((prevData: any) => ({\n        ...prevData,\n        searchByFilter: false,\n        page: 1,\n      }));\n      return;\n    }\n    var headingType: string = \"\";\n    console.log(allFiltersData, \"allFiltersData\", newParamsData);\n\n    if (newParamsData.tradeId?.length) {\n      delete newParamsData.tradeId;\n    }\n    if (newParamsData.jobTypes?.length) {\n      delete newParamsData.jobTypes;\n    }\n    if (newParamsData.specializationId?.length) {\n      delete newParamsData.specializationId;\n    }\n    if (allFiltersData.jobTypes?.length && !allFiltersData.tradeId?.length) {\n      headingType = props.jobTypeListData?.find(\n        (i: any) => i._id === allFiltersData.jobTypes[0]\n      )?.name;\n      delete newParamsData.searchJob;\n    }\n    if (\n      allFiltersData.tradeId?.length &&\n      !allFiltersData.specializationId?.length\n    ) {\n      headingType = props.tradeListData?.find(\n        (i: any) => i._id === allFiltersData?.tradeId?.[0]\n      )?.trade_name;\n      delete newParamsData.searchJob;\n    }\n\n    var data = {\n      ...newParamsData,\n      isFilterOn: \"isFilterOn\",\n      jobResults: null,\n      isFiltered: true,\n      ...(allFiltersData.tradeId?.length && {\n        tradeId: allFiltersData.tradeId,\n      }),\n      ...(allFiltersData.jobTypes?.length && {\n        jobTypes: allFiltersData.jobTypes,\n      }),\n      ...(allFiltersData.jobTypes?.length &&\n        !allFiltersData.tradeId?.length && { jobResults: \"jobTypeList\" }),\n      ...(allFiltersData.jobTypes?.length &&\n        !allFiltersData.tradeId?.length && { heading: headingType }),\n      ...(allFiltersData.tradeId?.length &&\n        !allFiltersData.specializationId?.length && {\n          jobResults: \"jobTypeList\",\n        }),\n      ...(allFiltersData.tradeId?.length &&\n        !allFiltersData.specializationId?.length && { heading: headingType }),\n      ...(allFiltersData.specializationId?.length && {\n        specializationId: allFiltersData.specializationId,\n      }),\n      ...(allFiltersData.min_budget >= 0 &&\n        allFiltersData.max_budget > 0 && { pay_type: allFiltersData.pay_type }),\n      ...(allFiltersData.min_budget >= 0 &&\n        allFiltersData.max_budget > 0 && {\n          min_budget: allFiltersData.min_budget,\n        }),\n      ...(allFiltersData.min_budget >= 0 &&\n        allFiltersData.max_budget > 0 && {\n          max_budget: allFiltersData.max_budget,\n        }),\n      ...([1, 2, 3].includes(allFiltersData.sortBy) && {\n        sortBy: allFiltersData.sortBy,\n      }),\n    };\n\n    if (allFiltersData.sortBy === 400) {\n      delete data.sortBy;\n    }\n    if (data.searchJob) {\n      delete data.heading;\n      delete data.jobResults;\n    }\n    if (allFiltersData.max_budget === 0) {\n      delete data.min_budget;\n      delete data.max_budget;\n      delete data.pay_type;\n    }\n    if (\n      allFiltersData?.specializationId?.length &&\n      allFiltersData?.tradeId?.length\n    ) {\n      const specializationList = props.tradeListData?.find(\n        (i: any) => i._id === allFiltersData?.tradeId?.[0]\n      )?.specialisations;\n      const tradeName = props.tradeListData?.find(\n        (i: any) => i._id === allFiltersData?.tradeId?.[0]\n      )?.trade_name;\n      const specializationName = specializationList?.find(\n        (i: any) => i._id === allFiltersData?.specializationId?.[0]\n      )?.name;\n      if (specializationName) {\n        data = {\n          ...data,\n          // searchJob: specializationName\n          searchJob:\n            allFiltersData?.specializationId?.length ===\n            specializationList?.length\n              ? tradeName\n              : specializationName,\n          ...(allFiltersData?.specializationId?.length ===\n          specializationList?.length\n            ? { isAllFilterSpecs: true }\n            : { isAllFilterSpecs: false }),\n        };\n        setIsAllFilterSpecs(\n          specializationList?.length > 0 &&\n            allFiltersData?.specializationId?.length ===\n              specializationList?.length\n            ? true\n            : false\n        );\n      }\n    }\n\n    const newObjData = {\n      page: 1,\n      isFiltered: true,\n      ...(data.sortBy && { sortBy: data.sortBy }),\n      ...(data.tradeId && { tradeId: data.tradeId }),\n      ...(data.specializationId && { specializationId: data.specializationId }),\n      ...(data.from_date && { from_date: data.from_date }),\n      ...(data.to_date && { to_date: data.to_date }),\n      ...(data.jobTypes && { jobTypes: data.jobTypes }),\n      ...(data.min_budget >= 0 &&\n        data.max_budget > 0 && { pay_type: data.pay_type }),\n      ...(data.min_budget >= 0 &&\n        data.max_budget > 0 && { min_budget: data.min_budget }),\n      ...(data.min_budget >= 0 &&\n        data.max_budget > 0 && { max_budget: data.max_budget }),\n      ...((data.address || allFiltersData.sortBy === 2) && {\n        location: {\n          coordinates: [\n            data.long ? data.long : data.defaultLong,\n            data.lat ? data.lat : data.defaultLat,\n          ],\n        },\n      }),\n      // ...(data.addres && data.address && { address: data.address })\n    };\n    Object.keys(data).forEach(\n      (key) =>\n        (data[key] === undefined ||\n          data[key] === null ||\n          data[key] === 0 ||\n          data[key] === \"0\") &&\n        delete data[key]\n    );\n    var url = \"search-job-results?\";\n    for (let [key, value] of Object.entries(data)) {\n      console.log(key, value);\n      url += `${key}=${value}&`;\n    }\n    const newUrl = url.slice(0, url.length - 1);\n    props.postHomeSearchData(newObjData);\n    const mData = {\n      timeStamp: moengage.getCurrentTimeStamp(),\n      category: props.tradeListData?.find(\n        (i: any) => i._id === newObjData?.tradeId?.[0]\n      )?.trade_name,\n      ...(newObjData.address && {\n        location: `${JSON.parse(newObjData.address)?.mainText} ${\n          JSON.parse(newObjData.address)?.secondaryText\n        }`,\n      }),\n      ...(newObjData?.max_budget && { \"Max budget\": newObjData?.max_budget }),\n      ...(newObjData?.from_date && { \"start date\": newObjData?.from_date }),\n      ...(newObjData?.to_date && { \"end date\": newObjData?.to_date }),\n    };\n    moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_JOBS, mData);\n    mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_JOBS, mData);\n\n    props.history.replace(newUrl);\n    setJobListData([]);\n    setParamsData(data);\n    setApiRequestData(newObjData);\n    setSearchResultData((prevData: any) => ({\n      ...prevData,\n      page: 1,\n      searchByFilter: true,\n    }));\n    setHasMoreItems(true);\n    console.log(\n      newUrl,\n      \"newUrl\",\n      data,\n      \"data\",\n      newObjData,\n      \"newObjData\",\n      newParamsData\n    );\n  };\n\n  // const cleanFiltersHandler = (isFiltersClean: boolean) => {\n  //     setSearchResultData((prevData: any) => ({ ...prevData, cleanFiltersData: isFiltersClean }));\n  //     if (isFiltersClean) { getQueryParamsData(); }\n  // }\n\n  const refreshParams = (data: any) => {\n    setJobListData([]);\n    getQueryParamsData();\n    setApiRequestData(data);\n    setSearchResultData((prevData: any) => ({\n      ...prevData,\n      page: 1,\n      cleanFiltersData: true,\n    }));\n    setHasMoreItems(true);\n  };\n\n  const handleChangeToggle = (value: boolean) => {\n    setToggleModifySearch(value);\n  };\n\n  return (\n    <InfiniteScroll\n      dataLength={jobListData.length}\n      next={callJobList}\n      hasMore={true}\n      loader={<h4></h4>}\n    >\n      <div className=\"app_wrapper\">\n        <div className={`top_search ${isToggleModifySearch ? \"active\" : \"\"}`}>\n          <BannerSearch\n            {...props}\n            handleChangeToggle={handleChangeToggle}\n            paramsData={paramsData}\n            refreshParams={refreshParams}\n          />\n        </div>\n        <div className=\"search_result\">\n          <div className=\"section_wrapper\">\n            <div className=\"custom_container\">\n              <div className=\"flex_row mob_srch_option\">\n                <div className=\"flex_col_sm_6\"></div>\n                <div className=\"flex_col_sm_6 text-right\">\n                  <button\n                    onClick={() => {\n                      setToggleModifySearch(true);\n                    }}\n                    className=\"fill_grey_btn btn-effect\"\n                  >\n                    Modify Search\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"result_heading\">\n                <div className=\"flex_row\">\n                  <div className=\"flex_col_sm_8\">\n                    {/* <span className=\"title\">{paramsData.jobResults == 'viewNearByJob' ? 'All around me' : paramsData.jobResults == 'jobTypeList' ? paramsData.heading : paramsData.searchJob ? `${paramsData.searchJob}${paramsData.specializationId?.length == 2 ? ' + 1 other' : paramsData.specializationId?.length >= 3 ? ` + ${paramsData.specializationId?.length - 1} others` : ''}` : ''} */}\n                    <span className=\"title\">\n                      {paramsData?.tradeId?.length > 0 && !paramsData?.searchJob\n                        ? \"\"\n                        : paramsData.jobResults === \"viewNearByJob\"\n                        ? \"All around me\"\n                        : paramsData.jobResults === \"jobTypeList\"\n                        ? paramsData.heading\n                        : isAllFilterSpecs\n                        ? paramsData.searchJob\n                        : paramsData.searchJob\n                        ? `${paramsData.searchJob}${\n                            paramsData.specializationId?.length >= 2\n                              ? ` +${paramsData.specializationId?.length - 1}`\n                              : \"\"\n                          }`\n                        : \"\"}\n                      <span className=\"count\">{`${\n                        jobListData.length || 0\n                      } result(s)`}</span>\n                    </span>\n                    <SearchResultFilters\n                      searchByFilter={searchByFilter}\n                      cleanFiltersData={searchResultData.cleanFiltersData}\n                      history={props?.history}\n                    />\n                  </div>\n                  {jobListData.length > 0 && !mapData.showMap && (\n                    <div className=\"flex_col_sm_4 text-right\">\n                      <a\n                        className=\"map_btn\"\n                        onClick={() =>\n                          setMapData((prevData: any) => ({\n                            ...prevData,\n                            showMap: !prevData.showMap,\n                          }))\n                        }\n                      >\n                        <img src={mapIcon} alt=\"map\" /> Map\n                      </a>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex_row tradies_row\">\n                {/* If the map does not come, then this div not only class (card_col) will be hidden */}\n                {mapData.showMap ? (\n                  <div className=\"card_col\">\n                    {jobListData.length > 0 ? (\n                      jobListData.map((jobData: any) => {\n                        return (\n                          <TradieJobInfoBox\n                            item={jobData}\n                            {...props}\n                            key={jobData.jobId}\n                          />\n                        );\n                      })\n                    ) : (\n                      <div className=\"no_record\">\n                        <figure className=\"no_img\">\n                          <img src={noData} alt=\"data not found\" />\n                        </figure>\n                        <span>No Data Found</span>\n                      </div>\n                    )}\n                  </div>\n                ) : jobListData.length > 0 || props.isLoading ? (\n                  jobListData.map((jobData: any) => {\n                    return (\n                      <TradieJobInfoBox\n                        item={jobData}\n                        {...props}\n                        key={jobData.jobId}\n                      />\n                    );\n                  })\n                ) : (\n                  <div className=\"no_record\">\n                    <figure className=\"no_img\">\n                      <img src={noData} alt=\"data not found\" />\n                    </figure>\n                    <span>No Data Found</span>\n                  </div>\n                )}\n                {\n                  <div\n                    className=\"map_col\"\n                    style={!mapData.showMap ? { display: \"none\" } : {}}\n                  >\n                    <div className=\"map_stick\">\n                      <span\n                        className=\"close_map\"\n                        onClick={() =>\n                          setMapData((prevData: any) => ({\n                            ...prevData,\n                            showMap: !prevData.showMap,\n                          }))\n                        }\n                      >\n                        <img src={closeMap} alt=\"close-map\" />\n                      </span>\n                      <RenderMap\n                        {...props}\n                        searchByFilter={searchResultData.searchByFilter}\n                      />\n                    </div>\n                  </div>\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default TradieSearchJobResult;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/popularBuilders/popularBuilders.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPageBuilder/jobDetailsPage.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/jobDetailsPage.tsx",["1073"],"import { useState, useEffect } from \"react\";\nimport Constants, { MoEConstants } from \"../../utils/constants\";\nimport { renderTime, JobCancelReasons } from \"../../utils/common\";\nimport {\n  getHomeJobDetails,\n  getHomeSaveJob,\n  postHomeApplyJob,\n} from \"../../redux/homeSearch/actions\";\nimport {\n  getJobDetails,\n  getTradieQuestionList,\n  postAskQuestion,\n  askNestedQuestion,\n  updateAnswer,\n  deleteAnswer,\n  deleteQuestion,\n  updateQuestion,\n  replyCancellation,\n  replyChangeRequest,\n  acceptDeclineJobInvitation,\n} from \"../../redux/jobs/actions\";\nimport Modal from \"@material-ui/core/Modal\";\n\nimport cancel from \"../../assets/images/ic-cancel.png\";\nimport dummy from \"../../assets/images/u_placeholder.jpg\";\nimport jobDummyImage from \"../../assets/images/ic-placeholder-detail.png\";\nimport question from \"../../assets/images/ic-question.png\";\nimport leftIcon from \"../../assets/images/ic-back-arrow-line.png\";\nimport rightIcon from \"../../assets/images/ic-next-arrow-line.png\";\nimport noDataFound from \"../../assets/images/no-search-data.png\";\nimport editIconBlue from \"../../assets/images/ic-edit-blue.png\";\nimport pendingIcon from \"../../assets/images/exclamation-icon.png\";\nimport moment from \"moment\";\nimport OwlCarousel from \"react-owl-carousel\";\nimport \"owl.carousel/dist/assets/owl.carousel.css\";\nimport \"owl.carousel/dist/assets/owl.theme.default.css\";\n\n//@ts-ignore\nimport FsLightbox from \"fslightbox-react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport storageService from \"../../utils/storageService\";\n\nimport docThumbnail from \"../../assets/images/add-document.png\";\nimport { setShowToast } from \"../../redux/common/actions\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\n\ninterface PropsType {\n  history: any;\n  location: any;\n  tradieProfileData: any;\n  isSkeletonLoading: boolean;\n}\n\nconst options = {\n  items: 1,\n  nav: true,\n  navText: [\n    `<div class='nav-btn prev-slide'> <img src=\"${leftIcon}\"> </div>`,\n    `<div class='nav-btn next-slide'> <img src=\"${rightIcon}\"> </div>`,\n  ],\n  rewind: true,\n  autoplay: false,\n  slideBy: 1,\n  dots: true,\n  dotsEach: true,\n  dotData: true,\n  responsive: {\n    0: {\n      items: 1,\n    },\n    600: {\n      items: 1,\n    },\n    1000: {\n      items: 1,\n    },\n  },\n};\n\nconst JobDetailsPage = (props: PropsType) => {\n  const [errors, setErrors] = useState<any>({});\n  const [jobDetailsData, setJobDetailsData] = useState<any>(\"\");\n  const [redirectFrom, setRedirectFrom] = useState<string>(\"\");\n  const [jobInviteAction, setJobInviteAction] = useState<string>(\"\");\n  const [jobConfirmation, setJobConfirmation] = useState<any>({\n    isJobModalOpen: false,\n    tradieTradeId: \"\",\n    isJobModalAuthorized: false,\n  });\n  const [questionList, setQuestionList] = useState<Array<any>>([]);\n  const [questionListPageNo, setQuestionListPageNo] = useState<number>(1);\n  const [showMoreIndex, setShowMoreIndex] = useState<Array<any>>([]);\n  const [questionsData, setQuestionsData] = useState<any>({\n    askQuestionsClicked: false,\n    showAllQuestionsClicked: false,\n    submitQuestionsClicked: false,\n    deleteQuestionsClicked: false,\n    updateQuestionsClicked: false,\n    isNestedAction: false,\n    questionsClickedType: \"\",\n    confirmationClicked: false,\n    showAnswerButton: true,\n    questionId: \"\",\n    answerId: \"\",\n    questionData: \"\",\n    answerShownHideList: [],\n    questionIndex: null,\n  });\n\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n  const [jobActionState, setJobActionState] = useState({\n    isCancelRequestAcceptedClicked: false,\n    isCancelRequestRejectedClicked: false,\n    replyCancelReason: \"\",\n    isChangeRequestAcceptedClicked: false,\n    isChangeRequestRejectedClicked: false,\n    replyChangeRequestReason: \"\",\n  });\n  const [pendingRequestClicked, setPendingRequestClicked] =\n    useState<boolean>(false);\n  const [fsSlideListner, setFsSlideListner] = useState<any>({});\n\n  useEffect(() => {\n    console.log(\"143\");\n    const params = new URLSearchParams(props.location?.search);\n    const jobInviteAction: any = params.get(\"jobAction\");\n    setJobInviteAction(jobInviteAction);\n    (async () => {\n      const redirectFrom: any = params.get(\"redirect_from\");\n      setRedirectFrom(redirectFrom);\n      var data: any = {};\n      var res1: any;\n      if (redirectFrom) {\n        data.jobId = params.get(\"jobId\");\n        res1 = await getJobDetails(data.jobId);\n      } else {\n        console.log(params.get(\"specializationId\"), \"params.get\");\n        data.jobId = params.get(\"jobId\");\n        data.tradeId = params.get(\"tradeId\");\n        if (params.get(\"specializationId\")) {\n          console.log(\"160\");\n          data.specializationId = params.get(\"specializationId\");\n        }\n        res1 = await getHomeJobDetails(data);\n        console.log(res1, \"164\");\n      }\n      if (res1.success) {\n        setJobDetailsData(res1.data);\n      }\n      const questionData: any = {\n        jobId: params.get(\"jobId\"),\n        page: 1,\n      };\n      const res2 = await getTradieQuestionList(questionData);\n      if (res2.success) {\n        if (params.get(\"openQList\") === \"true\") {\n          setQuestionsData((prevData: any) => ({\n            ...prevData,\n            showAllQuestionsClicked: true,\n          }));\n        }\n        setQuestionList(res2.data);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (props.tradieProfileData?.trade?.length > 0) {\n      setJobConfirmation((prevData: any) => ({\n        ...prevData,\n        tradieTradeId: props.tradieProfileData?.trade[0],\n      }));\n    }\n  }, [props.tradieProfileData]);\n\n  useEffect(() => {\n    let fsSlideObj: any = {};\n    let slideCount = 1;\n\n    if (jobDetailsData?.photos?.length) {\n      jobDetailsData?.photos.forEach((item: any, index: number) => {\n        if (item?.mediaType === 1 || item?.mediaType === 2) {\n          fsSlideObj[`${index}`] = slideCount++;\n        }\n      });\n    }\n    if (Object.keys(fsSlideObj)?.length > 0) setFsSlideListner(fsSlideObj);\n  }, [jobDetailsData?.photos]);\n\n  const applyJobClicked = async () => {\n    var isValid = true;\n    if (\n      jobConfirmation.tradieTradeId !== jobDetailsData?.tradeId &&\n      !jobConfirmation.isJobModalAuthorized\n    ) {\n      setJobConfirmation((prevData: any) => ({\n        ...prevData,\n        isJobModalOpen: true,\n        isJobModalAuthorized: true,\n      }));\n      isValid = false;\n    } else if (jobDetailsData?.quoteJob) {\n      quoteBtnActions();\n      return;\n    }\n\n    if (isValid && !jobDetailsData?.quoteJob) {\n      const data: any = {\n        jobId: jobDetailsData?.jobId,\n        builderId: jobDetailsData?.postedBy?.builderId,\n        tradeId: jobDetailsData?.tradeId,\n      };\n      if (jobDetailsData?.specializationId) {\n        data.specializationId = jobDetailsData?.specializationId;\n      }\n      const res = await postHomeApplyJob(data);\n      if (res.success) {\n        const mData = {\n          timeStamp: moengage.getCurrentTimeStamp(),\n        };\n        moengage.moE_SendEvent(MoEConstants.APPLIED_FOR_A_JOB, mData);\n        mixPanel.mixP_SendEvent(MoEConstants.APPLIED_FOR_A_JOB, mData);\n        props.history.push(\"job-applied-successfully\");\n      }\n    }\n  };\n\n  const saveJobClicked = () => {\n    const data: any = {\n      jobId: jobDetailsData?.jobId,\n      tradeId: jobDetailsData?.tradeId,\n      isSave: !jobDetailsData?.isSaved,\n    };\n    if (jobDetailsData?.specializationId) {\n      data.specializationId = jobDetailsData?.specializationId;\n    }\n    getHomeSaveJob(data);\n    setJobDetailsData((prevData: any) => ({\n      ...prevData,\n      isSaved: !prevData.isSaved,\n    }));\n  };\n\n  const modalCloseHandler = (modalType: string) => {\n    setQuestionsData((prevData: any) => ({\n      ...prevData,\n      [modalType]: false,\n      deleteQuestionsClicked: false,\n      answerShownHideList: [],\n      questionData: \"\",\n    }));\n    setErrors({});\n    showMoreIndex && setShowMoreIndex([]);\n  };\n\n  const loadMoreQuestionHandler = async () => {\n    const data: any = {\n      jobId: jobDetailsData?.jobId,\n      page: questionListPageNo + 1,\n    };\n    const res = await getTradieQuestionList(data, true);\n    if (res.success) {\n      setQuestionList((prevData: any) => [...prevData, ...res.data]);\n      setQuestionListPageNo(data.page);\n    }\n  };\n\n  const validateForm = (type: string) => {\n    if (type === \"deleteQuestion\") return true;\n    const newErrors: any = {};\n    if (!questionsData.questionData.trim()?.length) {\n      newErrors.questionData = Constants.errorStrings.askQuestion;\n    }\n    setErrors(newErrors);\n    return !Object.keys(newErrors).length;\n  };\n\n  const submitQuestionHandler = async (type: any) => {\n    let isNestedAction = questionsData?.isNestedAction;\n\n    if ([\"askQuestion\", \"deleteQuestion\", \"updateQuestion\"].includes(type)) {\n      if (!validateForm(type)) {\n        return;\n      }\n      var response: any;\n      var data: any;\n      var data2: any;\n      if (type === \"askQuestion\") {\n        data = {\n          jobId: jobDetailsData?.jobId,\n          builderId: jobDetailsData?.postedBy?.builderId,\n          question: questionsData.questionData.trim(),\n          tradeId: jobDetailsData?.tradeId,\n          specializationId: jobDetailsData?.specializationId,\n        };\n\n        data2 = {\n          tradieId: questionList[0]?.tradieId,\n          builderId: questionList[0]?.builderId,\n          answer: questionsData.questionData.trim(),\n          questionId: questionsData.questionId,\n        };\n\n        response = isNestedAction\n          ? await askNestedQuestion(data2)\n          : await postAskQuestion(data);\n        if (response?.success) {\n          const mData = {\n            timeStamp: moengage.getCurrentTimeStamp(),\n          };\n          moengage.moE_SendEvent(MoEConstants.ASKED_A_QUESTION, mData);\n          mixPanel.mixP_SendEvent(MoEConstants.ASKED_A_QUESTION, mData);\n        }\n      } else if (type === \"deleteQuestion\") {\n        data = {\n          jobId: jobDetailsData?.jobId,\n          questionId: questionsData.questionId,\n        };\n\n        data2 = {\n          questionId: questionsData.questionId,\n          answerId: questionsData.answerId,\n        };\n        response = isNestedAction\n          ? await deleteAnswer(data2)\n          : await deleteQuestion(data);\n      } else if (type === \"updateQuestion\") {\n        data = {\n          questionId: questionsData.questionId,\n          question: questionsData.questionData.trim(),\n        };\n\n        data2 = {\n          questionId: questionsData.questionId,\n          answerId: questionsData.answerId,\n          answer: questionsData.questionData,\n        };\n        response = isNestedAction\n          ? await updateAnswer(data2)\n          : await updateQuestion(data);\n      }\n\n      if (isNestedAction && response?.success) {\n        const askData: any = {\n          jobId: jobDetailsData?.jobId,\n          page: 1,\n        };\n        const res = await getTradieQuestionList(askData, true);\n        if (res.success) {\n          setQuestionList(res.data);\n          setQuestionListPageNo(1);\n        }\n      } else if (response?.success) {\n        if (type === \"askQuestion\" && response.data?.questionData?.question) {\n          const askData: any = {\n            jobId: jobDetailsData?.jobId,\n            page: 1,\n          };\n          const res = await getTradieQuestionList(askData, true);\n          if (res.success) {\n            setJobDetailsData((prevData: any) => ({\n              ...prevData,\n              questionsCount: prevData.questionsCount + 1,\n            }));\n          }\n          setQuestionList(res.data);\n          setQuestionListPageNo(1);\n        }\n\n        if (type === \"updateQuestion\" && response.data?.question) {\n          let updatedQuestionList = [...questionList];\n          var newList = updatedQuestionList.find(\n            (item: any) => item._id == response.data?.questionId\n          );\n          newList.question = response.data?.question;\n          setQuestionList(updatedQuestionList);\n        }\n\n        if (type === \"deleteQuestion\") {\n          setJobDetailsData((prevData: any) => ({\n            ...prevData,\n            questionsCount: prevData.questionsCount - 1,\n          }));\n          let updatedQuestionList = [...questionList];\n          updatedQuestionList.splice(questionsData.questionIndex, 1);\n          setQuestionList(updatedQuestionList);\n        }\n      }\n\n      if (response?.success) {\n        setQuestionsData((prevData: any) => ({\n          ...prevData,\n          submitQuestionsClicked: false,\n          askQuestionsClicked: false,\n          showAllQuestionsClicked: true,\n          confirmationClicked: false,\n          questionsClickedType: \"\",\n          deleteQuestionsClicked: false,\n          updateQuestionsClicked: false,\n          isNestedAction: false,\n          questionId: \"\",\n          answerId: \"\",\n          questionData: \"\",\n          showQuestionAnswer: false,\n          questionIndex: null,\n        }));\n      }\n    }\n  };\n\n  const questionHandler = (\n    actionType: any,\n    questionId?: string,\n    question?: any,\n    questionIndex?: any,\n    answerId?: any\n  ) => {\n    let type = Array.isArray(actionType) ? actionType[0] : actionType;\n    let isNestedAction = Array.isArray(actionType) ? true : false;\n\n    if (type === \"submitAskQuestion\" && validateForm(\"askQuestion\")) {\n      setQuestionsData((prevData: any) => ({\n        ...prevData,\n        submitQuestionsClicked: true,\n        confirmationClicked: true,\n      }));\n    } else if (type === \"askQuestion\") {\n      setQuestionsData((prevData: any) => ({\n        ...prevData,\n        askQuestionsClicked: true,\n        showAllQuestionsClicked: false,\n        questionsClickedType: type,\n        ...(questionId && { questionId: questionId }),\n        ...(isNestedAction && { isNestedAction: true }),\n      }));\n    } else if (type === \"deleteQuestion\") {\n      setQuestionsData((prevData: any) => ({\n        ...prevData,\n        confirmationClicked: true,\n        deleteQuestionsClicked: true,\n        questionId: questionId,\n        answerId: answerId,\n        questionsClickedType: type,\n        questionIndex: questionIndex,\n        ...(isNestedAction && { isNestedAction: true }),\n      }));\n    } else if (type === \"updateQuestion\") {\n      setQuestionsData((prevData: any) => ({\n        ...prevData,\n        askQuestionsClicked: true,\n        updateQuestionsClicked: true,\n        questionId: questionId,\n        answerId: answerId,\n        questionsClickedType: type,\n        showAllQuestionsClicked: false,\n        questionData: question,\n        ...(isNestedAction && { isNestedAction: true }),\n      }));\n    } else if (type === \"questionCancelBtnClicked\") {\n      setQuestionsData((prevData: any) => ({\n        ...prevData,\n        askQuestionsClicked: false,\n        updateQuestionsClicked: false,\n        deleteQuestionsClicked: false,\n        showAllQuestionsClicked: true,\n        isNestedAction: false,\n        questionData: \"\",\n        questionsClickedType: \"\",\n        questionId: \"\",\n        answerId: \"\",\n      }));\n      setErrors({});\n    } else if (type === \"hideAnswerClicked\") {\n      const newData = [...questionsData.answerShownHideList].filter(\n        (id) => id !== questionId\n      );\n      setQuestionsData((prevData: any) => ({\n        ...prevData,\n        answerShownHideList: newData,\n      }));\n    } else if (type === \"showAnswerClicked\") {\n      const newData = [...questionsData.answerShownHideList];\n      newData.push(questionId);\n      setQuestionsData((prevData: any) => ({\n        ...prevData,\n        answerShownHideList: newData,\n      }));\n    }\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n    type: string\n  ) => {\n    if (e.target.value.trim().length <= 1000) {\n      setQuestionsData((prevData: any) => ({\n        ...prevData,\n        [type]: e.target.value,\n      }));\n    }\n  };\n\n  const closeApplyJobModal = () => {\n    setJobConfirmation((prevData: any) => ({\n      ...prevData,\n      isJobModalOpen: false,\n      isJobModalAuthorized: false,\n    }));\n  };\n\n  const replyCancellationHandler = async (type: string) => {\n    const data: any = {\n      jobId: jobDetailsData?.jobId,\n      status: type === \"acceptJobCancelRequest\" ? 1 : 2,\n      note:\n        type === \"acceptJobCancelRequest\"\n          ? \"job accepted\"\n          : jobActionState.replyCancelReason\n          ? jobActionState.replyCancelReason?.trim()\n          : \"job rejected\",\n    };\n    const res = await replyCancellation(data);\n    if (res.success) {\n      if (type === \"acceptJobCancelRequest\") {\n        const mData = {\n          timeStamp: moengage.getCurrentTimeStamp(),\n        };\n        moengage.moE_SendEvent(MoEConstants.ACCEPT_CANCELLATION, mData);\n        mixPanel.mixP_SendEvent(MoEConstants.ACCEPT_CANCELLATION, mData);\n        props.history.push(\"/request-monitored/ccr\");\n      } else {\n        const mData = {\n          timeStamp: moengage.getCurrentTimeStamp(),\n        };\n        moengage.moE_SendEvent(MoEConstants.REJECT_CANCELLATION, mData);\n        mixPanel.mixP_SendEvent(MoEConstants.REJECT_CANCELLATION, mData);\n        props.history.push(\"/request-monitored/cc\");\n      }\n      setJobActionState((prevData: any) => ({\n        ...prevData,\n        isCancelRequestAcceptedClicked: false,\n        isCancelRequestRejectedClicked: false,\n        replyCancelReason: \"\",\n      }));\n    }\n  };\n\n  const replyChangeRequestHandler = async (type: string) => {\n    const data: any = {\n      jobId: jobDetailsData?.jobId,\n      status: type === \"acceptChangeRequest\" ? 1 : 2,\n      note:\n        type === \"acceptChangeRequest\"\n          ? \"change request accepted\"\n          : jobActionState.replyCancelReason\n          ? jobActionState.replyCancelReason?.trim()\n          : \"change request rejected\",\n    };\n    const res = await replyChangeRequest(data);\n    if (res.success) {\n      if (type === \"acceptChangeRequest\") {\n        props.history.push(\"/request-monitored/cr\");\n      } else {\n        props.history.push(\"/request-monitored/cc\");\n      }\n      setJobActionState((prevData: any) => ({\n        ...prevData,\n        isChangeRequestAcceptedClicked: false,\n        isChangeRequestRejectedClicked: false,\n        replyCancelReason: \"\",\n      }));\n    }\n  };\n\n  const closeJobActionConfirmationModal = (name: string) => {\n    setJobActionState((prevData: any) => ({\n      ...prevData,\n      [name]: false,\n      isChangeRequestAcceptedClicked: false,\n      isChangeRequestRejectedClicked: false,\n    }));\n  };\n\n  const getPendingRequestCount = () => {\n    const a: number = jobDetailsData?.isCancelJobRequest ? 1 : 0;\n    const b: number = jobDetailsData?.isChangeRequest ? 1 : 0;\n    const c: number = jobDetailsData?.rejectReasonNoteForCancelJobRequest\n      ? 1\n      : 0;\n    return a + b + c;\n  };\n\n  const inviteJobActionHandler = async (type: number) => {\n    let data = {\n      jobId: jobDetailsData?.jobId,\n      builderId: jobDetailsData?.postedBy?.builderId,\n      isAccept: type === 1 ? true : false,\n    };\n    const res: any = await acceptDeclineJobInvitation(data);\n    if (res.success) {\n      setJobInviteAction(\"\");\n      props.history.replace(\n        `job-details-page?jobId=${jobDetailsData?.jobId}&redirect_from=jobs`\n      );\n      if (type === 2) {\n        setShowToast(true, res.msg);\n        if (!jobInviteAction) {\n          const newData = { ...jobDetailsData };\n          newData.isInvited = false;\n          delete newData.jobStatus;\n          setJobDetailsData(newData);\n        }\n      }\n\n      if (type === 1) {\n        props.history.push(\"/active-jobs\");\n      }\n    }\n  };\n\n  const quoteBtnActions = () => {\n    const path =\n      jobDetailsData?.jobStatus === \"\"\n        ? `/quote-job`\n        : jobDetailsData?.jobStatus === \"applied\"\n        ? `/quote-job`\n        : jobDetailsData?.jobStatus === \"active\"\n        ? `/active-quote-job`\n        : \"\";\n    const redirectFrom =\n      jobDetailsData?.jobStatus === \"\"\n        ? \"jobDetailPage\"\n        : jobDetailsData?.jobStatus === \"applied\"\n        ? \"appliedJobs\"\n        : \"\";\n    if (path) {\n      props.history.push({\n        pathname: path,\n        state: {\n          jobData: jobDetailsData,\n          ...(redirectFrom && { redirect_from: redirectFrom }),\n          base_redirect: \"jobDetailPage\",\n        },\n      });\n    }\n  };\n\n  const renderBuilderAvatar = (item: any) => {\n    let postedBy: any = jobDetailsData?.postedBy;\n    console.log({ jobDetailsData });\n    if (item === \"image\") {\n      if (\n        postedBy &&\n        Array.isArray(postedBy) &&\n        postedBy[0] &&\n        postedBy[0].builderImage\n      ) {\n        return (\n          <img\n            src={postedBy[0]?.builderImage || dummy}\n            onError={(e: any) => {\n              if (e?.target?.onerror) {\n                e.target.onerror = null;\n              }\n              if (e?.target?.src) {\n                e.target.src = dummy;\n              }\n            }}\n            alt=\"traide-img\"\n          />\n        );\n      } else {\n        return <img src={dummy} alt=\"traide-img\" />;\n      }\n    }\n    if (item === \"name\") {\n      if (\n        postedBy &&\n        Array.isArray(postedBy) &&\n        postedBy[0] &&\n        postedBy[0].firstName\n      ) {\n        return postedBy[0].firstName;\n      }\n    }\n  };\n\n  const renderFilteredItems = (itemsMedia: any) => {\n    let sources: any = [];\n    let types: any = [];\n\n    if (itemsMedia && Array.isArray(itemsMedia) && itemsMedia.length) {\n      itemsMedia.forEach((item: any) => {\n        if (item?.mediaType === 2) {\n          sources.push(item.link);\n          types.push(\"video\");\n        }\n        if (item?.mediaType === 1) {\n          sources.push(item.link);\n          types.push(\"image\");\n        }\n      });\n    }\n\n    return { sources, types };\n  };\n\n  let itemsMedia: any = [];\n  if (jobDetailsData?.photos?.length) {\n    itemsMedia = jobDetailsData.photos;\n  }\n  const { sources, types } = renderFilteredItems(itemsMedia);\n\n  const filterFileName = (link: any) => {\n    if (link?.length) {\n      let arrItems = link.split(\"/\");\n      return arrItems[arrItems?.length - 1];\n    }\n  };\n\n  const isPendingRequest = () => {\n    if (\n      !jobInviteAction &&\n      ((jobDetailsData?.isCancelJobRequest &&\n        jobDetailsData?.jobStatus === \"active\") ||\n        (jobDetailsData?.isChangeRequest &&\n          jobDetailsData?.jobStatus === \"active\") ||\n        jobDetailsData?.reasonNoteForCancelJobRequest?.length > 0 ||\n        jobDetailsData?.rejectReasonNoteForCancelJobRequest?.length > 0) &&\n      [\"active\", \"cancelled\"].includes(\n        redirectFrom === \"jobs\"\n          ? jobDetailsData?.jobStatus?.toLowerCase()\n          : jobDetailsData?.appliedStatus?.toLowerCase()\n      )\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const showNestedAnswersData = (\n    answers: Array<any>,\n    questionId: string,\n    indexP: number\n  ) => {\n    let val = answers\n      .slice(\n        0,\n        showMoreIndex?.length && indexP === showMoreIndex[0]\n          ? answers?.length\n          : 3\n      )\n      ?.map((item: any, indexC: number) => {\n        return (\n          <div\n            className={`question_ans_card answer ${\n              item?.sender_user_type === 1 ? \"tradie_ans\" : \"\"\n            }`}\n          >\n            <div className=\"user_detail\">\n              <figure className=\"user_img\">\n                <img\n                  src={`${\n                    item?.sender_user_type === 1\n                      ? item?.tradie?.[0]?.user_image\n                      : item?.builder?.[0]?.user_image\n                      ? item?.builder?.[0]?.user_image\n                      : dummy\n                  }`}\n                  alt=\"user-img\"\n                />\n              </figure>\n              <div className=\"details\">\n                <span className=\"user_name\">{`${\n                  item?.sender_user_type === 1\n                    ? item?.tradie?.[0]?.firstName\n                    : item?.builder?.[0]?.firstName\n                    ? item?.builder?.[0]?.firstName\n                    : \"\"\n                }`}</span>\n                <span className=\"date\">\n                  {moment(item?.updatedAt).format(\"Do MMMM YYYY\") || \"\"}\n                </span>\n              </div>\n            </div>\n            <p>{item?.answer}</p>\n            {indexC === answers?.length - 1 &&\n              answers?.length > 0 &&\n              answers?.[answers?.length - 1]?.sender_user_type === 1 && (\n                <>\n                  <span\n                    className=\"action link\"\n                    onClick={() =>\n                      questionHandler(\n                        [\"updateQuestion\"],\n                        questionId,\n                        answers?.[answers?.length - 1]?.answer,\n                        null,\n                        item?._id\n                      )\n                    }\n                  >\n                    Edit\n                  </span>\n                  <span\n                    className=\"action link\"\n                    onClick={() =>\n                      questionHandler(\n                        [\"deleteQuestion\"],\n                        questionId,\n                        \"\",\n                        answers?.length - 1,\n                        answers?.[answers?.length - 1]?._id\n                      )\n                    }\n                  >\n                    Delete\n                  </span>\n                </>\n              )}\n\n            {indexC === 2 &&\n              answers?.length > 3 &&\n              indexP !== showMoreIndex[0] && (\n                <span\n                  className=\"show_hide_ans link\"\n                  onClick={() => setShowMoreIndex([indexP])}\n                >\n                  Show more\n                </span>\n              )}\n\n            {indexC === answers?.length - 1 &&\n              answers?.length > 0 &&\n              answers?.[answers?.length - 1]?.sender_user_type === 2 && (\n                <span\n                  onClick={() => questionHandler([\"askQuestion\"], questionId)}\n                  className=\"show_hide_ans link\"\n                >\n                  {\"Reply\"}\n                </span>\n              )}\n          </div>\n        );\n      });\n    return val;\n  };\n  console.log(\n    jobDetailsData,\n    \"jobDetailsDatajobDetailsDatajobDetailsDatajobDetailsData\"\n  );\n  return (\n    <div className=\"app_wrapper\">\n      <div className=\"section_wrapper\">\n        <div className=\"custom_container\">\n          <FsLightbox\n            toggler={toggler}\n            slide={selectedSlide}\n            sources={sources}\n            types={types}\n          />\n\n          <div className=\"vid_img_wrapper pt-20\">\n            <div className=\"flex_row relative\">\n              {props.isSkeletonLoading ? (\n                <Skeleton />\n              ) : (\n                <div className=\"flex_col_sm_8\">\n                  <button\n                    className=\"back\"\n                    onClick={() => props.history?.goBack()}\n                  ></button>\n                </div>\n              )}\n              {!jobInviteAction &&\n              !jobDetailsData?.isCancelJobRequest &&\n              !jobDetailsData?.isChangeRequest &&\n              !jobDetailsData?.appliedStatus &&\n              !props.isSkeletonLoading &&\n              jobDetailsData.jobStatus === \"active\" ? (\n                <div className=\"flex_col_sm_4 text-right\">\n                  <span className=\"dot_menu\">\n                    <img src={editIconBlue} alt=\"edit\" />\n                    <div className=\"edit_menu\">\n                      <ul>\n                        <li\n                          className=\"icon lodge\"\n                          onClick={() =>\n                            props.history.push(\n                              `mark-milestone?jobId=${jobDetailsData?.jobId}&redirect_from=jobs&jobAction=dispute`\n                            )\n                          }\n                        >\n                          Lodge dispute\n                        </li>\n                        <li\n                          className=\"icon delete\"\n                          onClick={() =>\n                            props.history.push(\n                              `mark-milestone?jobId=${jobDetailsData?.jobId}&redirect_from=jobs&jobAction=cancel`\n                            )\n                          }\n                        >\n                          Cancel job\n                        </li>\n                      </ul>\n                    </div>\n                  </span>\n                  <span\n                    className={`bookmark_icon ${\n                      jobDetailsData?.isSaved ? \"active\" : \"\"\n                    }`}\n                    onClick={saveJobClicked}\n                  ></span>\n                </div>\n              ) : props.isSkeletonLoading ? (\n                <Skeleton />\n              ) : (\n                <span\n                  className={`bookmark_icon ${\n                    jobDetailsData?.isSaved ? \"active\" : \"\"\n                  }`}\n                  onClick={saveJobClicked}\n                ></span>\n              )}\n            </div>\n            <div className=\"flex_col_sm_4 relative\">\n              <div className=\"detail_card\">\n                <span className=\"title line-1\" title={jobDetailsData?.jobName}>\n                  {props.isSkeletonLoading ? (\n                    <Skeleton />\n                  ) : jobDetailsData?.jobName ? (\n                    jobDetailsData?.jobName\n                  ) : (\n                    \"\"\n                  )}\n                </span>\n                <span className=\"tagg\">\n                  {props.isSkeletonLoading ? <Skeleton /> : \"Job details\"}\n                </span>\n                <div className=\"job_info\">\n                  {props?.isSkeletonLoading ? (\n                    <Skeleton count={2} />\n                  ) : (\n                    <ul>\n                      <li\n                        className={`icon ${\n                          [\"completed\", \"cancelled\", \"expired\"].includes(\n                            jobDetailsData?.jobStatus?.toLowerCase()\n                          )\n                            ? \"calendar\"\n                            : \"clock\"\n                        }`}\n                      >\n                        {`${\n                          redirectFrom === \"jobs\"\n                            ? renderTime(\n                                jobDetailsData?.fromDate,\n                                jobDetailsData?.toDate\n                              )\n                            : jobDetailsData?.time || \"\"\n                        }`}\n                      </li>\n                      <li className=\"icon dollar\">\n                        {jobDetailsData?.amount || \"\"}\n                      </li>\n                      <li\n                        className=\"icon location line-1\"\n                        title={jobDetailsData?.locationName}\n                      >\n                        {jobDetailsData?.locationName || \"\"}\n                      </li>\n                      {[\"completed\", \"cancelled\", \"expired\"].includes(\n                        jobDetailsData?.jobStatus?.toLowerCase()\n                      ) ? (\n                        <li>\n                          <span className=\"job_status\">\n                            {jobDetailsData?.jobStatus?.toUpperCase()}\n                          </span>\n                        </li>\n                      ) : (\n                        <li className=\"icon calendar\">\n                          {jobDetailsData?.duration || \"\"}\n                        </li>\n                      )}\n                    </ul>\n                  )}\n                </div>\n                {props?.isSkeletonLoading ? (\n                  <Skeleton />\n                ) : jobDetailsData?.quoteJob ? null : ([\n                    \"cancelled\",\n                    \"expired\",\n                    \"completed\",\n                  ].includes(jobDetailsData?.jobStatus?.toLowerCase()) ||\n                    jobDetailsData?.jobStatus === \"\") &&\n                  jobDetailsData?.appliedStatus?.toUpperCase() === \"APPLY\" &&\n                  jobDetailsData?.applyButtonDisplay &&\n                  !jobDetailsData?.isInvited ? (\n                  <div className=\"pt-10\">\n                    <button\n                      className=\"fill_btn full_btn btn-effect\"\n                      onClick={applyJobClicked}\n                    >\n                      {jobDetailsData?.appliedStatus}\n                    </button>\n                  </div>\n                ) : !jobDetailsData?.applyButtonDisplay &&\n                  [\"APPLIED\", \"ACCEPTED\"].includes(\n                    jobDetailsData?.appliedStatus?.toUpperCase()\n                  ) &&\n                  (jobInviteAction === \"invite\" ||\n                    !jobDetailsData?.isInvited) ? (\n                  <div className=\"pt-10\">\n                    <button className=\"fill_btn full_btn btn-effect disable_btn\">\n                      {jobDetailsData?.appliedStatus?.toUpperCase()}\n                    </button>\n                  </div>\n                ) : null}\n                {isPendingRequest() ? (\n                  <button\n                    className=\"fill_grey_btn full_btn pending_info\"\n                    onClick={() => setPendingRequestClicked(true)}\n                  >\n                    <span>\n                      <img src={pendingIcon} alt=\"icon\" />\n                      {`View all request(s)`}\n                    </span>\n                  </button>\n                ) : null}\n                {props?.isSkeletonLoading ? (\n                  <Skeleton />\n                ) : (\n                  !(jobInviteAction === \"invite\") &&\n                  !jobDetailsData?.isInvited &&\n                  jobDetailsData?.quoteJob &&\n                  [\"\", \"active\", \"applied\"].includes(\n                    jobDetailsData?.jobStatus?.toLowerCase()\n                  ) && (\n                    <button\n                      className={`${\n                        jobDetailsData?.jobStatus === \"\"\n                          ? \"fill_btn\"\n                          : \"fill_grey_btn\"\n                      } full_btn btn-effect mt-sm`}\n                      onClick={\n                        jobDetailsData?.jobStatus === \"\"\n                          ? applyJobClicked\n                          : quoteBtnActions\n                      }\n                    >\n                      {jobDetailsData?.jobStatus === \"\"\n                        ? \"Quote\"\n                        : jobDetailsData?.jobStatus === \"applied\"\n                        ? \"Quote sent\"\n                        : jobDetailsData?.jobStatus === \"active\"\n                        ? \"View your quote\"\n                        : \"\"}\n                    </button>\n                  )\n                )}\n                {props.isSkeletonLoading ? (\n                  <Skeleton />\n                ) : (\n                  (jobInviteAction === \"invite\" || jobDetailsData?.isInvited) &&\n                  ![\n                    \"active\",\n                    \"applied\",\n                    \"accepted\",\n                    \"cancelled\",\n                    \"expired\",\n                    \"completed\",\n                  ].includes(jobDetailsData?.jobStatus?.toLowerCase()) && (\n                    <>\n                      <div className=\"form_field pt-10\">\n                        <button\n                          onClick={() => {\n                            if (jobDetailsData.quoteJob) {\n                              props.history.push({\n                                pathname: `/quote-job`,\n                                state: {\n                                  jobData: jobDetailsData,\n                                  redirect_from: \"jobDetailPage\",\n                                  base_redirect: \"newJobs\",\n                                },\n                              });\n                            } else {\n                              inviteJobActionHandler(1);\n                            }\n                          }}\n                          className=\"fill_btn full_btn btn-effect\"\n                        >\n                          Accept\n                        </button>\n                      </div>\n                      <div className=\"form_field\">\n                        <button\n                          onClick={() => {\n                            inviteJobActionHandler(2);\n                          }}\n                          className=\"fill_grey_btn full_btn btn-effect\"\n                        >\n                          Decline\n                        </button>\n                      </div>\n                    </>\n                  )\n                )}\n              </div>\n            </div>\n            <span className=\"sub_title\" style={{ marginTop: \"30px\" }}>\n              {props.isSkeletonLoading ? <Skeleton /> : \"Photos & Docs\"}\n            </span>\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_8\">\n                <figure className=\"\">\n                  {props.isSkeletonLoading ? (\n                    <Skeleton style={{ lineHeight: 2, height: 400 }} />\n                  ) : (\n                    <OwlCarousel {...options} className=\"customOwlCarousel\">\n                      {itemsMedia.length ? (\n                        itemsMedia.map((image: any, index: number) => {\n                          console.log({ image }, \"---?\");\n                          return image?.mediaType === 1 ? (\n                            <img\n                              key={`${image}${index}`}\n                              onClick={() => {\n                                setToggler((prev: any) => !prev);\n                                setSelectSlide(fsSlideListner[`${index}`]);\n                              }}\n                              title={filterFileName(image.link)}\n                              alt=\"\"\n                              src={image?.link ? image?.link : jobDummyImage}\n                            />\n                          ) : image?.mediaType === 2 ? (\n                            <video\n                              key={`${image}${index}`}\n                              onClick={() => {\n                                setToggler((prev: any) => !prev);\n                                setSelectSlide(fsSlideListner[`${index}`]);\n                              }}\n                              title={filterFileName(image.link)}\n                              src={image?.link}\n                              style={{ height: \"162px\", width: \"165px\" }}\n                            />\n                          ) : (\n                            <img\n                              key={`${image}${index}`}\n                              className=\"doc_icon\"\n                              onClick={() => {\n                                let url = `/doc-view?url=${image.link}`; //\n                                window.open(url, \"_blank\");\n                              }}\n                              title={filterFileName(image.link)}\n                              alt=\"\"\n                              src={docThumbnail}\n                            />\n                          );\n                        })\n                      ) : (\n                        <img alt=\"\" src={jobDummyImage} />\n                      )}\n                    </OwlCarousel>\n                  )}\n                </figure>\n              </div>\n            </div>\n\n            {/* view pending request modal */}\n            <Modal\n              className=\"ques_ans_modal\"\n              open={pendingRequestClicked}\n              onClose={() => setPendingRequestClicked(false)}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <div\n                className=\"custom_wh\"\n                data-aos=\"zoom-in\"\n                data-aos-delay=\"30\"\n                data-aos-duration=\"1000\"\n              >\n                <div className=\"heading\">\n                  {jobDetailsData?.jobStatus === \"active\" &&\n                    (jobDetailsData?.isCancelJobRequest ||\n                      jobDetailsData?.isChangeRequest) && (\n                      <span className=\"sub_title\">{`Pending Request(s)`}</span>\n                    )}\n                  <button\n                    className=\"close_btn\"\n                    onClick={() => setPendingRequestClicked(false)}\n                  >\n                    <img src={cancel} alt=\"cancel\" />\n                  </button>\n                </div>\n                {jobDetailsData?.jobStatus === \"active\" &&\n                  jobDetailsData?.isCancelJobRequest && (\n                    <div className=\"chang_req_card\">\n                      <span className=\"xs_sub_title\">\n                        Job cancellation request\n                      </span>\n                      <p className=\"commn_para line-2\">\n                        <li>\n                          {JobCancelReasons(\n                            jobDetailsData?.reasonForCancelJobRequest\n                          )}\n                        </li>\n                        <li>{jobDetailsData?.reasonNoteForCancelJobRequest}</li>\n                      </p>\n                      <button\n                        className=\"fill_btn btn-effect\"\n                        onClick={() =>\n                          setJobActionState((prevData: any) => ({\n                            ...prevData,\n                            isCancelRequestAcceptedClicked: true,\n                          }))\n                        }\n                      >\n                        Accept\n                      </button>\n                      <button\n                        className=\"fill_grey_btn btn-effect\"\n                        onClick={() => {\n                          setJobActionState((prevData: any) => ({\n                            ...prevData,\n                            isCancelRequestRejectedClicked: true,\n                          }));\n                          setPendingRequestClicked(false);\n                        }}\n                      >\n                        Reject\n                      </button>\n                    </div>\n                  )}\n                {jobDetailsData?.jobStatus === \"active\" &&\n                  jobDetailsData?.isChangeRequest && (\n                    <div className=\"chang_req_card\">\n                      <span className=\"xs_sub_title\">\n                        Change request details\n                      </span>\n                      <p className=\"commn_para line-2\">\n                        {jobDetailsData?.reasonForChangeRequest}\n                      </p>\n                      <button\n                        className=\"fill_btn btn-effect\"\n                        onClick={() => {\n                          setJobActionState((prevData: any) => ({\n                            ...prevData,\n                            isChangeRequestAcceptedClicked: true,\n                          }));\n                          setPendingRequestClicked(false);\n                        }}\n                      >\n                        Accept\n                      </button>\n                      <button\n                        className=\"fill_grey_btn btn-effect\"\n                        onClick={() => {\n                          setJobActionState((prevData: any) => ({\n                            ...prevData,\n                            isChangeRequestRejectedClicked: true,\n                          }));\n                          setPendingRequestClicked(false);\n                        }}\n                      >\n                        Reject\n                      </button>\n                    </div>\n                  )}\n                {jobDetailsData?.rejectReasonNoteForCancelJobRequest ? (\n                  <span className=\"sub_title\">{\"Reason(s)\"}</span>\n                ) : null}\n\n                {jobDetailsData?.rejectReasonNoteForCancelJobRequest &&\n                jobDetailsData?.jobStatus === \"active\" ? (\n                  <div className=\"chang_req_card\">\n                    <span className=\"xs_sub_title\">\n                      Job cancel rejected reason\n                    </span>\n                    <p className=\"commn_para line-2\">\n                      <li>\n                        {jobDetailsData?.rejectReasonNoteForCancelJobRequest}\n                      </li>\n                    </p>\n                  </div>\n                ) : null}\n\n                {jobDetailsData?.reasonForCancelJobRequest &&\n                jobDetailsData?.jobStatus !== \"active\" ? (\n                  <div className=\"chang_req_card\">\n                    <span className=\"xs_sub_title\">Job cancel reason</span>\n                    <p className=\"commn_para line-2\">\n                      {JobCancelReasons(\n                        jobDetailsData?.reasonForCancelJobRequest\n                      )}\n                    </p>\n                    <p className=\"commn_para line-2\">\n                      <li>\n                        {!jobDetailsData?.reasonNoteForCancelJobRequest?.length\n                          ? jobDetailsData?.rejectReasonNoteForCancelJobRequest\n                          : jobDetailsData?.reasonNoteForCancelJobRequest}\n                      </li>\n                    </p>\n                  </div>\n                ) : null}\n              </div>\n            </Modal>\n\n            <Modal\n              className=\"custom_modal\"\n              open={jobActionState.isChangeRequestAcceptedClicked}\n              onClose={() => {\n                closeJobActionConfirmationModal(\n                  \"isCancelRequestAcceptedClicked\"\n                );\n              }}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <div\n                className=\"custom_wh profile_modal\"\n                data-aos=\"zoom-in\"\n                data-aos-delay=\"30\"\n                data-aos-duration=\"1000\"\n              >\n                <div className=\"heading\">\n                  <span className=\"sub_title\">{`Change Request Details`}</span>\n                  <button\n                    className=\"close_btn\"\n                    onClick={() => {\n                      closeJobActionConfirmationModal(\n                        \"isCancelRequestAcceptedClicked\"\n                      );\n    \n                    }}\n                  >\n                    <img src={cancel} alt=\"cancel\" />\n                  </button>\n                </div>\n                <div className=\"inner_wrap change_req_detail\">\n                  {jobDetailsData?.changeRequestData?.map((item: any) => {\n                    return (\n                      <ul>\n                        <li>\n                          <span className=\"show_label\">New Milestone Name</span>\n                          <span className=\"inner_title\">\n                            {item?.milestone_name}\n                          </span>\n                        </li>\n                        <li>\n                          <span className=\"show_label\">New Duration</span>\n                          <span className=\"inner_title\">\n                            {renderTime(item?.from_date, item?.to_date)}\n                          </span>\n                        </li>\n                        <li>\n                          <span className=\"show_label\">\n                            New Recommended Hours\n                          </span>\n                          <span className=\"inner_title\">\n                            {item?.recommended_hours}\n                          </span>\n                        </li>\n                        {item?.isPhotoevidence && (\n                          <li>\n                            <span className=\"show_label\">\n                              Photo Evidence Required\n                            </span>\n                            <span className=\"inner_title\">\n                              {item?.isPhotoevidence ? \"Yes\" : \"No\"}\n                            </span>\n                          </li>\n                        )}\n                      </ul>\n                    );\n                  })}\n                </div>\n                <div className=\"bottom_btn custom_btn\">\n                  <button\n                    className=\"fill_btn full_btn btn-effect\"\n                    onClick={() =>\n                      replyChangeRequestHandler(\"acceptChangeRequest\")\n                    }\n                  >\n                    Accept\n                  </button>\n                </div>\n              </div>\n            </Modal>\n\n            <Modal\n              className=\"custom_modal\"\n              open={jobActionState.isCancelRequestAcceptedClicked}\n              onClose={() =>\n                closeJobActionConfirmationModal(\n                  \"isCancelRequestAcceptedClicked\"\n                )\n              }\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <div\n                className=\"custom_wh confirmation\"\n                data-aos=\"zoom-in\"\n                data-aos-delay=\"30\"\n                data-aos-duration=\"1000\"\n              >\n                <div className=\"heading\">\n                  <span className=\"xs_sub_title\">{`Accept Job Cancellation Request`}</span>\n                  <button\n                    className=\"close_btn\"\n                    onClick={() =>\n                      closeJobActionConfirmationModal(\n                        \"isCancelRequestAcceptedClicked\"\n                      )\n                    }\n                  >\n                    <img src={cancel} alt=\"cancel\" />\n                  </button>\n                </div>\n                <div className=\"modal_message\">\n                  <p>Are you sure you still want to proceed?</p>\n                </div>\n                <div className=\"dialog_actions\">\n                  <button\n                    className=\"fill_btn btn-effect\"\n                    onClick={() =>\n                      replyCancellationHandler(\"acceptJobCancelRequest\")\n                    }\n                  >\n                    Yes\n                  </button>\n                  <button\n                    className=\"fill_grey_btn btn-effect\"\n                    onClick={() =>\n                      closeJobActionConfirmationModal(\n                        \"isCancelRequestAcceptedClicked\"\n                      )\n                    }\n                  >\n                    No\n                  </button>\n                </div>\n              </div>\n            </Modal>\n\n            <Modal\n              className=\"custom_modal\"\n              open={\n                jobActionState.isCancelRequestRejectedClicked ||\n                jobActionState.isChangeRequestRejectedClicked\n              }\n              onClose={() => {\n                closeJobActionConfirmationModal(\n                  \"isCancelRequestRejectedClicked\"\n                );\n              }}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <div\n                className=\"custom_wh profile_modal\"\n                data-aos=\"zoom-in\"\n                data-aos-delay=\"30\"\n                data-aos-duration=\"1000\"\n              >\n                <div className=\"heading\">\n                  <span className=\"sub_title\">{`Your reply to job ${\n                    jobActionState.isCancelRequestRejectedClicked\n                      ? \"cancellation\"\n                      : \"change request\"\n                  }`}</span>\n                  <button\n                    className=\"close_btn\"\n                    onClick={() => {\n                      closeJobActionConfirmationModal(\n                        \"isCancelRequestRejectedClicked\"\n                      );\n                    }}\n                  >\n                    <img src={cancel} alt=\"cancel\" />\n                  </button>\n                </div>\n                <div className=\"form_field\">\n                  <label className=\"form_label\">{`Let the builder and Tickt know if you accept or reject ${\n                    jobActionState.isCancelRequestRejectedClicked\n                      ? \"cancelling\"\n                      : \"change request\"\n                  } for this job.`}</label>\n                  <div className=\"text_field\">\n                    <textarea\n                      placeholder={`I disagree with this ${\n                        jobActionState.isCancelRequestRejectedClicked\n                          ? \"cancelling\"\n                          : \"change request\"\n                      }`}\n                      maxLength={1000}\n                      value={jobActionState.replyCancelReason}\n                      onChange={({\n                        target: { value },\n                      }: {\n                        target: { value: string };\n                      }) =>\n                        setJobActionState((prevData: any) => ({\n                          ...prevData,\n                          replyCancelReason: value?.trimLeft(),\n                        }))\n                      }\n                    />\n                    <span className=\"char_count\">{`${jobActionState.replyCancelReason?.length}/1000`}</span>\n                  </div>\n                  {!!errors.replyCancelReason && (\n                    <span className=\"error_msg\">\n                      {errors.replyCancelReason}\n                    </span>\n                  )}\n                </div>\n                <div className=\"bottom_btn custom_btn\">\n                  {jobActionState.isCancelRequestRejectedClicked && (\n                    <button\n                      className={`fill_btn full_btn btn-effect ${\n                        jobActionState.replyCancelReason?.length > 0\n                          ? \"\"\n                          : \"disable_btn\"\n                      }`}\n                      onClick={() =>\n                        replyCancellationHandler(\"rejectJobCancelRequest\")\n                      }\n                    >\n                      Send\n                    </button>\n                  )}\n                  {jobActionState.isChangeRequestRejectedClicked && (\n                    <button\n                      className={`fill_btn full_btn btn-effect ${\n                        jobActionState.replyCancelReason?.length > 0\n                          ? \"\"\n                          : \"disable_btn\"\n                      }`}\n                      onClick={() =>\n                        replyChangeRequestHandler(\"rejectChangeRequest\")\n                      }\n                    >\n                      Send\n                    </button>\n                  )}\n                  <button\n                    className=\"fill_grey_btn btn-effect\"\n                    onClick={() => {\n                      closeJobActionConfirmationModal(\n                        \"isCancelRequestRejectedClicked\"\n                      );\n                    }}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </Modal>\n\n            <Modal\n              className=\"custom_modal\"\n              open={jobConfirmation.isJobModalOpen}\n              onClose={closeApplyJobModal}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              <div\n                className=\"custom_wh confirmation\"\n                data-aos=\"zoom-in\"\n                data-aos-delay=\"30\"\n                data-aos-duration=\"1000\"\n              >\n                <div className=\"heading\">\n                  <span className=\"xs_sub_title\">Apply Job Confirmation</span>\n                  <button className=\"close_btn\" onClick={closeApplyJobModal}>\n                    <img src={cancel} alt=\"cancel\" />\n                  </button>\n                </div>\n                <div className=\"modal_message\">\n                  <p>\n                    This job doesn't match your specialisations. Do you want to\n                    apply anyway?\n                  </p>\n                </div>\n                <div className=\"dialog_actions\">\n                  <button\n                    className=\"fill_btn btn-effect\"\n                    onClick={applyJobClicked}\n                  >\n                    Yes\n                  </button>\n                  <button\n                    className=\"fill_grey_btn btn-effect\"\n                    onClick={closeApplyJobModal}\n                  >\n                    No\n                  </button>\n                </div>\n              </div>\n            </Modal>\n\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_8\">\n                <div className=\"description\">\n                  <span className=\"sub_title\">\n                    {props.isSkeletonLoading ? <Skeleton /> : \"Job Description\"}\n                  </span>\n                  <p className=\"commn_para\">\n                    {props.isSkeletonLoading ? (\n                      <Skeleton />\n                    ) : jobDetailsData?.details ? (\n                      jobDetailsData?.details\n                    ) : (\n                      \"\"\n                    )}\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_4\">\n                <span className=\"sub_title\">\n                  {props.isSkeletonLoading ? <Skeleton /> : \"Job milestones\"}\n                </span>\n                <ul className=\"job_milestone\">\n                  {props.isSkeletonLoading ? (\n                    <Skeleton count={3} />\n                  ) : jobDetailsData ? (\n                    jobDetailsData?.jobMilestonesData?.map(\n                      (item: any, index: number) => {\n                        return (\n                          <li key={item.milestoneId}>\n                            <span>{`${index + 1}. ${\n                              item?.milestoneName || \"\"\n                            }`}</span>\n                            <span>\n                              {renderTime(item?.fromDate, item?.toDate)}\n                            </span>\n                          </li>\n                        );\n                      }\n                    )\n                  ) : null}\n                </ul>\n                {props.isSkeletonLoading ? (\n                  <Skeleton />\n                ) : (\n                  <button\n                    className=\"fill_grey_btn ques_btn btn-effect\"\n                    onClick={() =>\n                      setQuestionsData((prevData: any) => ({\n                        ...prevData,\n                        showAllQuestionsClicked: true,\n                      }))\n                    }\n                  >\n                    <img src={question} alt=\"question\" />\n                    {`${\n                      jobDetailsData?.questionsCount\n                        ? `${\n                            jobDetailsData?.questionsCount === 1\n                              ? `${jobDetailsData?.questionsCount} question`\n                              : `${jobDetailsData?.questionsCount} questions`\n                          }`\n                        : \"0 questions\"\n                    }`}\n                  </button>\n                )}\n              </div>\n\n              <Modal\n                className=\"ques_ans_modal\"\n                open={questionsData.showAllQuestionsClicked}\n                onClose={() => modalCloseHandler(\"showAllQuestionsClicked\")}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n              >\n                <div\n                  className=\"custom_wh\"\n                  data-aos=\"zoom-in\"\n                  data-aos-delay=\"30\"\n                  data-aos-duration=\"1000\"\n                >\n                  <div className=\"heading\">\n                    <span className=\"sub_title\">{`${\n                      jobDetailsData?.questionsCount === 1\n                        ? `${jobDetailsData?.questionsCount} question`\n                        : jobDetailsData?.questionsCount > 1\n                        ? `${jobDetailsData?.questionsCount} questions`\n                        : \"\"\n                    }`}</span>\n                    <button\n                      className=\"close_btn\"\n                      onClick={() =>\n                        modalCloseHandler(\"showAllQuestionsClicked\")\n                      }\n                    >\n                      <img src={cancel} alt=\"cancel\" />\n                    </button>\n                  </div>\n                  {!jobDetailsData?.questionsCount && (\n                    <div className=\"no_record align_centr\">\n                      <figure className=\"no_img\">\n                        <img src={noDataFound} alt=\"data not found\" />\n                      </figure>\n                      <span>No Questions Found</span>\n                    </div>\n                  )}\n                  <div className=\"inner_wrap\">\n                    {questionList?.map((item: any, index: number) => {\n                      const { tradieData } = item;\n                      return (\n                        <div key={item?._id}>\n                          <div className=\"question_ans_card\">\n                            <div className=\"user_detail\">\n                              <figure className=\"user_img\">\n                                <img\n                                  src={tradieData?.[0]?.user_image || dummy}\n                                  alt=\"user-img\"\n                                />\n                              </figure>\n                              <div className=\"details\">\n                                <span className=\"user_name\">\n                                  {tradieData?.[0]?.firstName || \"\"}\n                                </span>\n                                <span className=\"date\">\n                                  {moment(item?.updatedAt).format(\n                                    \"Do MMMM YYYY\"\n                                  ) || \"\"}\n                                </span>\n                              </div>\n                            </div>\n                            <p>{item?.question || \"\"}</p>\n                            {item?.answers?.length === 0 && (\n                              <span\n                                className=\"action link\"\n                                onClick={() =>\n                                  questionHandler(\n                                    \"updateQuestion\",\n                                    item?._id,\n                                    item?.question\n                                  )\n                                }\n                              >\n                                Edit\n                              </span>\n                            )}\n                            {item?.answers?.length === 0 && (\n                              <span\n                                className=\"action link\"\n                                onClick={() =>\n                                  questionHandler(\n                                    \"deleteQuestion\",\n                                    item?._id,\n                                    \"\",\n                                    index\n                                  )\n                                }\n                              >\n                                Delete\n                              </span>\n                            )}\n                          </div>\n                          {item?.answers?.length > 0 &&\n                            showNestedAnswersData(\n                              item?.answers,\n                              item?._id,\n                              index\n                            )}\n                        </div>\n                      );\n                    })}\n                    {jobDetailsData?.questionsCount > questionList.length && (\n                      <div className=\"text-center\">\n                        <button\n                          className=\"fill_grey_btn load_more\"\n                          onClick={loadMoreQuestionHandler}\n                        >\n                          View more\n                        </button>\n                      </div>\n                    )}\n                  </div>\n\n                  {\n                    <div className=\"bottom_btn custom_btn\">\n                      <button\n                        className=\"fill_grey_btn full_btn btn-effect\"\n                        onClick={() => questionHandler(\"askQuestion\")}\n                      >\n                        {\"Ask question\"}\n                      </button>\n                    </div>\n                  }\n                </div>\n              </Modal>\n\n              <Modal\n                className=\"ques_ans_modal\"\n                open={questionsData.askQuestionsClicked}\n                onClose={() => modalCloseHandler(\"askQuestionsClicked\")}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n              >\n                <div\n                  className=\"custom_wh ask_ques\"\n                  data-aos=\"zoom-in\"\n                  data-aos-delay=\"30\"\n                  data-aos-duration=\"1000\"\n                >\n                  <div className=\"heading\">\n                    <span className=\"sub_title\">{`${\n                      questionsData.updateQuestionsClicked\n                        ? questionsData?.isNestedAction\n                          ? \"Edit Reply\"\n                          : \"Edit Question\"\n                        : `Ask ${jobDetailsData?.postedBy?.builderName || \"\"} ${\n                            questionsData?.isNestedAction ? \"\" : \"Question\"\n                          }`\n                    }`}</span>\n                    <button\n                      className=\"close_btn\"\n                      onClick={() => modalCloseHandler(\"askQuestionsClicked\")}\n                    >\n                      <img src={cancel} alt=\"cancel\" />\n                    </button>\n                  </div>\n                  <div className=\"form_field\">\n                    <label className=\"form_label\">{`Your ${\n                      questionsData?.isNestedAction ? \"Reply\" : \"Question\"\n                    }`}</label>\n                    <div className=\"text_field\">\n                      <textarea\n                        placeholder={`${\n                          questionsData.updateQuestionsClicked\n                            ? \"Text\"\n                            : `Ask ${\n                                jobDetailsData?.postedBy?.builderName || \"\"\n                              } what do you want to know`\n                        }`}\n                        maxLength={1000}\n                        value={questionsData.questionData}\n                        onChange={(e) => handleChange(e, \"questionData\")}\n                      ></textarea>\n                      <span className=\"char_count\">{`${questionsData.questionData?.length}/1000`}</span>\n                    </div>\n                    {!!errors.questionData && (\n                      <span className=\"error_msg\">{errors.questionData}</span>\n                    )}\n                  </div>\n                  <div className=\"bottom_btn custom_btn\">\n                    {questionsData.updateQuestionsClicked ? (\n                      <button\n                        className=\"fill_btn full_btn btn-effect\"\n                        onClick={() => submitQuestionHandler(\"updateQuestion\")}\n                      >\n                        Save\n                      </button>\n                    ) : (\n                      <button\n                        className=\"fill_btn full_btn btn-effect\"\n                        onClick={() => questionHandler(\"submitAskQuestion\")}\n                      >\n                        Send\n                      </button>\n                    )}\n                    <button\n                      className=\"fill_grey_btn btn-effect\"\n                      onClick={() =>\n                        questionHandler(\"questionCancelBtnClicked\")\n                      }\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              </Modal>\n\n              <Modal\n                className=\"custom_modal\"\n                open={questionsData.confirmationClicked}\n                onClose={() => modalCloseHandler(\"confirmationClicked\")}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n              >\n                <div\n                  className=\"custom_wh confirmation\"\n                  data-aos=\"zoom-in\"\n                  data-aos-delay=\"30\"\n                  data-aos-duration=\"1000\"\n                >\n                  <div className=\"heading\">\n                    <span className=\"xs_sub_title\">{`${\n                      questionsData.deleteQuestionsClicked\n                        ? \"Delete\"\n                        : questionsData?.isNestedAction\n                        ? \"\"\n                        : \"Ask\"\n                    } ${\n                      questionsData?.isNestedAction ? \"Reply\" : \"Question\"\n                    } Confirmation`}</span>\n                    <button\n                      className=\"close_btn\"\n                      onClick={() => modalCloseHandler(\"confirmationClicked\")}\n                    >\n                      <img src={cancel} alt=\"cancel\" />\n                    </button>\n                  </div>\n                  <div className=\"modal_message\">\n                    <p>{`Are you sure you want to ${\n                      questionsData.deleteQuestionsClicked\n                        ? \"delete\"\n                        : questionsData?.isNestedAction\n                        ? \"\"\n                        : \"ask\"\n                    } ${\n                      questionsData?.isNestedAction ? \"reply\" : \"question\"\n                    }?`}</p>\n                  </div>\n                  <div className=\"dialog_actions\">\n                    <button\n                      className=\"fill_btn btn-effect\"\n                      onClick={() =>\n                        submitQuestionHandler(\n                          questionsData.questionsClickedType\n                        )\n                      }\n                    >\n                      Yes\n                    </button>\n                    <button\n                      className=\"fill_grey_btn btn-effect\"\n                      onClick={() =>\n                        setQuestionsData((prevData: any) => ({\n                          ...prevData,\n                          confirmationClicked: false,\n                        }))\n                      }\n                    >\n                      No\n                    </button>\n                  </div>\n                </div>\n              </Modal>\n\n              <div className=\"flex_col_sm_8\">\n                <div className=\"flex_row\">\n                  <div className=\"flex_col_sm_12\">\n                    <span className=\"sub_title\">\n                      {props.isSkeletonLoading ? <Skeleton /> : \"Job type\"}\n                    </span>\n                    <ul className=\"job_categories\">\n                      {props.isSkeletonLoading ? (\n                        <Skeleton />\n                      ) : (\n                        <li>\n                          <figure className=\"type_icon\">\n                            <img\n                              alt=\"\"\n                              src={jobDetailsData?.jobType?.jobTypeImage}\n                            />\n                          </figure>\n                          <span className=\"name\">\n                            {jobDetailsData?.jobType?.jobTypeName || \"\"}\n                          </span>\n                        </li>\n                      )}\n                    </ul>\n                  </div>\n                </div>\n                <div className=\"flex_row\">\n                  <div className=\"flex_col_sm_12\">\n                    {props.isSkeletonLoading ? (\n                      <Skeleton />\n                    ) : (\n                      <span className=\"sub_title\">\n                        {\"Specialisations needed\"}\n                      </span>\n                    )}\n                    <div className=\"tags_wrap\">\n                      {props.isSkeletonLoading ? (\n                        <Skeleton />\n                      ) : (\n                        <ul>\n                          {jobDetailsData?.specializationData?.map(\n                            (item: any) => {\n                              return (\n                                <li key={item.specializationId}>\n                                  {item.specializationName || \"\"}\n                                </li>\n                              );\n                            }\n                          )}\n                        </ul>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"section_wrapper\">\n              <span className=\"sub_title\">\n                {props.isSkeletonLoading ? <Skeleton /> : \"Posted by\"}\n              </span>\n              <div className=\"flex_row\">\n                <div className=\"flex_col_sm_3\">\n                  {props.isSkeletonLoading ? (\n                    <Skeleton />\n                  ) : (\n                    <div className=\"tradie_card posted_by \">\n                      {jobDetailsData.jobStatus === \"active\" && (\n                        <span\n                          className=\"chat circle\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            props.history.push({\n                              pathname: `/chat`,\n                              state: {\n                                tradieId:\n                                  storageService.getItem(\"userInfo\")?._id,\n                                builderId: jobDetailsData?.postedBy?.builderId,\n                                jobId: jobDetailsData?.jobId,\n                                jobName: jobDetailsData?.jobName,\n                              },\n                            });\n                          }}\n                        />\n                      )}\n                      <div\n                        className=\"user_wrap\"\n                        onClick={() => {\n                          if (jobDetailsData?.postedBy?.builderName) {\n                            props?.history?.push(\n                              `/builder-info?builderId=${jobDetailsData?.postedBy?.builderId}`\n                            );\n                          }\n                        }}\n                      >\n                        <figure className=\"u_img\">\n                          {console.log({\n                            image: jobDetailsData?.postedBy?.builderImage,\n                          })}\n                          {jobDetailsData?.postedBy?.hasOwnProperty(\n                            \"builderImage\"\n                          ) ? (\n                            <img\n                              src={\n                                jobDetailsData?.postedBy?.builderImage || dummy\n                              }\n                              alt=\"traide-img\"\n                              onError={(e: any) => {\n                                if (e?.target?.onerror) {\n                                  e.target.onerror = null;\n                                }\n                                if (e?.target?.src) {\n                                  e.target.src = dummy;\n                                }\n                              }}\n                            />\n                          ) : Array.isArray(jobDetailsData?.postedBy) ? (\n                            renderBuilderAvatar(\"image\")\n                          ) : (\n                            <img src={dummy} alt=\"traide-img\" />\n                          )}\n                        </figure>\n                        <div className=\"details\">\n                          <span className=\"name\">\n                            {jobDetailsData?.postedBy?.builderName ||\n                              renderBuilderAvatar(\"name\")}\n                          </span>\n                          <span className=\"rating\">\n                            {`${jobDetailsData?.postedBy?.ratings || \"0\"} | ${\n                              jobDetailsData?.postedBy?.reviews\n                                ? `${\n                                    jobDetailsData?.postedBy?.reviews === 1\n                                      ? `${jobDetailsData?.postedBy?.reviews} review`\n                                      : `${jobDetailsData?.postedBy?.reviews} reviews`\n                                  }`\n                                : \"0 reviews\"\n                            }`}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default JobDetailsPage;\n","/home/appinventiv/Documents/Project/tickt/web/src/common/DocViewer.js",[],["1074","1075"],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieInfo/voucherDetail.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieInfo/addVoucher.tsx",["1076","1077","1078"],"import React, { useState, useEffect } from \"react\";\nimport cancel from \"../../assets/images/ic-cancel.png\";\nimport addMedia from \"../../assets/images/add-image.png\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { setShowToast } from \"../../redux/common/actions\";\n\nimport close from \"../../assets/images/icon-close-1.png\";\nimport { onFileUpload } from \"../../redux/auth/actions\";\nimport { AddVoucher, fetchVouchesJobs } from \"../../redux/jobs/actions\";\nimport docThumbnail from \"../../assets/images/add-document.png\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\nimport { MoEConstants } from \"../../utils/constants\";\nimport Select, { components } from \"react-select\";\nconst docformats: Array<any> = [\"pdf\", \"doc\", \"docx\", \"msword\"];\n\nconst AddVoucherComponent = (props: any) => {\n  const { toggleProps, closeToggle } = props;\n  const [toggle, setToggle] = useState(false);\n  const [jobsList, setJobsList] = useState([]);\n  const [reactSelect, setReactSelect] = useState({ label: \"\", value: \"\" });\n  const [jobDescription, setJobDesciption] = useState(\"\");\n\n  const [errorData, setErrorData] = useState({\n    name: \"\",\n    detail: \"\",\n    upload: \"\",\n  });\n  const [filesUrl, setFilesUrl] = useState([] as any);\n  const [localFiles, setLocalFiles] = useState({});\n\n  const [update, forceUpdate] = useState({});\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n\n  useEffect(() => {\n    prefetch();\n  }, []);\n\n  useEffect(() => {\n    console.log({\n      toggleProps,\n    });\n    setToggle(toggleProps);\n  }, [toggleProps]);\n\n  useEffect(() => {\n    setErrorData((prev: any) => ({\n      ...prev,\n      detail:\n        jobDescription?.length > 1000\n          ? \"Maximum 1000 characters are allowed\"\n          : \"\",\n    }));\n  }, [jobDescription]);\n\n  // useEffect(() => {\n  //     setErrorData((prev: any) => ({ ...prev, upload: filesUrl?.length ? '' : 'Document file is required' }));\n  // }, [filesUrl]);\n\n  useEffect(() => {\n    console.log({ toggle });\n    if (!toggle) {\n      closeToggle(\"isRecall\");\n      setReactSelect((prev: any) => ({ ...prev, label: \"\", value: \"\" }));\n      setJobDesciption(\"\");\n      setFilesUrl([]);\n      setErrorData((prev: any) => ({\n        ...prev,\n        name: \"\",\n        detail: \"\",\n        upload: \"\",\n      }));\n    } else {\n      prefetch();\n    }\n  }, [toggle]);\n\n  const prefetch = async () => {\n    if (props?.id) {\n      let res_jobs: any = await fetchVouchesJobs({\n        page: 1,\n        tradieId: props.id,\n      });\n      if (res_jobs?.success) {\n        let list_data: any = res_jobs.data;\n        if (list_data?.length) {\n          // let item = list_data[0];\n          // item?.jobId\n          setReactSelect({ label: \"Please select  a job\", value: \"\" });\n        }\n        setJobsList(list_data);\n      }\n    }\n  };\n\n  const setItemToggle = (index: any) => {\n    setToggler((prev: boolean) => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const removeFromItem = (index: any) => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async (e: any) => {\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    var fileType = newFile?.type?.split(\"/\")[1]?.toLowerCase();\n    var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n    if (docformats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (docformats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    formData.append(\"file\", newFile);\n    const res = await onFileUpload(formData);\n    if (res.success) {\n      let link: string = res.imgUrl;\n\n      setFilesUrl((prev: Array<any>) => [\n        ...prev,\n        {\n          mediaType: [\"doc\", \"docx\", \"msword\"].includes(fileType) ? 3 : 4,\n          link: link,\n        },\n      ]);\n      setLocalFiles((prev: any) => ({\n        ...prev,\n        [filesUrl?.length]: URL.createObjectURL(newFile),\n      }));\n    }\n  };\n\n  const renderbyFileFormat = (item: any, index: any) => {\n    let split_item_format = item.split(\".\");\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n    let split_item_name = item.split(\"/\");\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render: any = null;\n    if (get_split_fromat) {\n      if (docformats.includes(get_split_fromat)) {\n        image_render = (\n          <img\n            onClick={() => {\n              setItemToggle(index);\n            }}\n            title={get_split_name}\n            src={docThumbnail}\n            alt=\"media\"\n          />\n        );\n      }\n      return (\n        <figure className=\"img_video\">\n          {image_render}\n          <img\n            onClick={() => {\n              removeFromItem(index);\n            }}\n            src={close}\n            alt=\"remove\"\n            className=\"remove\"\n          />\n          {/* <span style={{ fontSize: '10px' }}>{get_split_name}</span> */}\n        </figure>\n      );\n    }\n  };\n\n  const handleSubmit = async () => {\n    let data = {\n      jobId: reactSelect?.value,\n      jobName: reactSelect?.label,\n      tradieId: props.id,\n      photos: [filesUrl[0].link],\n      vouchDescription: jobDescription,\n      recommendation: filesUrl[0].link,\n    };\n    let response = await AddVoucher(data);\n    if (response?.success) {\n      moengage.moE_SendEvent(MoEConstants.LEFT_VOUCHER, {\n        timeStamp: moengage.getCurrentTimeStamp(),\n      });\n      mixPanel.mixP_SendEvent(MoEConstants.LEFT_VOUCHER, {\n        timeStamp: moengage.getCurrentTimeStamp(),\n      });\n      setToggle((prev: any) => !prev);\n      await prefetch();\n    }\n  };\n\n  let JobSelectOptions: any = [];\n  if (jobsList?.length) {\n    JobSelectOptions = jobsList.map((item: any) => ({\n      label: item?.jobName,\n      value: item?.jobId,\n    }));\n    JobSelectOptions.unshift({ label: \"Please select a job\", value: \"\" });\n  }\n\n  const NoOptionsMessage = (props: any) => {\n    return (\n      <components.NoOptionsMessage {...props}>\n        <span className=\"custom-css-class\">\n          {\"No completed jobs with this tradesperson\"}\n        </span>\n      </components.NoOptionsMessage>\n    );\n  };\n\n  return (\n    <Modal\n      className=\"custom_modal\"\n      open={toggle}\n      onClose={() => {\n        closeToggle(\"isRecall\");\n        setToggle((prev: any) => !prev);\n      }}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      <div\n        className=\"custom_wh profile_modal vouch_modal\"\n        data-aos=\"zoom-in\"\n        data-aos-delay=\"30\"\n        data-aos-duration=\"1000\"\n      >\n        <div className=\"heading\">\n          <span className=\"sub_title\">{\"Leave a Vouch\"}</span>\n          <span className=\"info_note\">\n            {\"Upload the vouch and write the description.\"}\n          </span>\n          <button\n            onClick={() => {\n              closeToggle(\"isRecall\");\n              setToggle((prev: any) => !prev);\n            }}\n            className=\"close_btn\"\n          >\n            <img src={cancel} alt=\"cancel\" />\n          </button>\n        </div>\n        <div className=\"inner_wrap\">\n          <div className=\"inner_wrappr\">\n            <div className=\"form_field\">\n              <label className=\"form_label\">Job</label>\n              <div className=\"text_field\">\n                <Select\n                  className=\"select_menu\"\n                  value={reactSelect}\n                  options={JobSelectOptions}\n                  components={{ NoOptionsMessage }}\n                  // options={jobsList.map((item: any) => ({ label: item?.jobName, value: item?.jobId }))}\n                  onChange={(item: any) => {\n                    setReactSelect(item);\n                    setErrorData((prev: any) => ({ ...prev, name: \"\" }));\n                  }}\n                />\n              </div>\n              <span className=\"error_msg\">{errorData?.name}</span>\n            </div>\n            <div className=\"form_field\">\n              <label className=\"form_label\">{\"Job Description\"}</label>\n              <div className=\"text_field\">\n                <textarea\n                  onChange={(e) => {\n                    setJobDesciption(e.target.value.trimLeft());\n                  }}\n                  value={jobDescription}\n                  placeholder=\"Enter Description...\"\n                ></textarea>\n                {jobDescription.length ? (\n                  <span className=\"char_count\">\n                    {`character length : ${jobDescription.length} / 1000`}\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </div>\n              <span className=\"error_msg\">{errorData?.detail}</span>\n            </div>\n            <div className=\"upload_img_video\">\n              {filesUrl?.length\n                ? filesUrl.map((item: any, index: number) =>\n                    renderbyFileFormat(item.link, index)\n                  )\n                : null}\n\n              {filesUrl?.length < 1 ? (\n                <React.Fragment>\n                  <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                    <img src={addMedia} alt=\"\" />\n                  </label>\n                  <input\n                    onChange={onFileChange}\n                    type=\"file\"\n                    accept=\"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"\n                    style={{ display: \"none\" }}\n                    id=\"upload_img_video\"\n                  />\n                </React.Fragment>\n              ) : null}\n            </div>\n            <span className=\"error_msg\">{errorData?.upload}</span>\n          </div>\n        </div>\n        <div className=\"bottom_btn custom_btn\">\n          <button\n            onClick={() => {\n              if (!filesUrl?.length || !jobDescription?.length) {\n                if (!filesUrl?.length) {\n                  setErrorData((prev: any) => ({\n                    ...prev,\n                    upload: \"Document file is required.\",\n                  }));\n                }\n\n                if (!jobDescription?.length) {\n                  setErrorData((prev: any) => ({\n                    ...prev,\n                    detail: \"Job Description is required\",\n                  }));\n                }\n\n                if (!reactSelect?.value?.length) {\n                  setErrorData((prev: any) => ({\n                    ...prev,\n                    name: \"Job Name is required\",\n                  }));\n                }\n              } else {\n                handleSubmit();\n              }\n            }}\n            className={`fill_btn full_btn btn-effect`}\n          >\n            {\"Save changes\"}\n          </button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default AddVoucherComponent;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderInfo/builderInfo.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/index.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/tradieBox.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/auth/authModal.tsx",["1079","1080","1081"],"import React, { useState } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Login from '../../pages/login/login';\nimport ForgetPassword from '../../pages/forgetPassword/forgetPassword';\nimport Signup from '../../pages/signup/index';\n\nimport cancel from \"../../assets/images/ic-cancel.png\";\n\nconst AuthModal = (props: any) => {\n    const [modalSteps, setModalSteps] = useState(0);\n    const [socialData, setSocialData] = useState<any>('')\n\n    const modalUpdateSteps = (step: any) => {\n        setModalSteps(step);\n    }\n\n    const onCloseModal = () => {\n        props.setShowModal(!props.showModal)\n        setModalSteps(0)\n    }\n\n    // const useStyles = makeStyles((theme: Theme) =>\n    //     createStyles({\n    //         paper: {\n    //             position: 'absolute',\n    //             width: 400,\n    //             backgroundColor: '#fff',\n    //             border: '2px solid #000',\n    //             boxShadow: theme.shadows[5],\n    //             padding: theme.spacing(2, 4, 3),\n    //         },\n    //     }),\n    // );\n\n    // const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n\n    const renderGuestPopup = () => {\n        switch (modalSteps) {\n            case 0:\n                return <Login history={props.history} showModal={props.showModal} setShowModal={props.setShowModal} modalUpdateSteps={modalUpdateSteps} setSocialData={setSocialData} modalLoginBackBtn=\"modalLoginBackBtn\" />\n            case 1:\n                return <ForgetPassword history={props.history} showModal={props.showModal} setShowModal={props.setShowModal} modalUpdateSteps={modalUpdateSteps} />\n            case 2:\n                return <Signup history={props.history} showModal={props.showModal} setShowModal={props.setShowModal} modalUpdateSteps={modalUpdateSteps} socialData={socialData} />\n            default:\n                return null;\n        }\n    }\n\n    return (\n        <React.Fragment>\n            {props.showModal && <Modal className=\"custom_modal \"\n                open={props.showModal}\n                onClose={onCloseModal}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                <div className=\"custom_wh onboard_modal\">\n                    <button className=\"close_btn\" onClick={onCloseModal}>\n                        <img src={cancel} alt=\"cancel\" />\n                    </button>\n                    {renderGuestPopup()}\n                </div>\n            </Modal>}\n        </React.Fragment>\n    )\n}\n\nexport default AuthModal","/home/appinventiv/Documents/Project/tickt/web/src/utils/regex.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/tradieJobInfoBox.tsx",["1082","1083","1084"],"import dummy from '../assets/images/u_placeholder.jpg';\nimport storageService from '../utils/storageService';\n\nconst TradieJobInfoBox = (props: any) => {\n    const jobClickHandler = (item: any) => {\n        if (storageService.getItem('userType') === 1) {\n            let string_redirect: any = `/job-details-page?jobId=${item.jobId}`;\n            if (item?.tradeId) { string_redirect += `&tradeId=${item.tradeId}` }\n            if (item?.specializationId) { string_redirect += `&specializationId=${item.specializationId}` }\n            if (item?.jobStatus) { string_redirect += `&jobStatus=${item.jobStatus}` }\n            console.log({ item, string_redirect })\n            props.history.push(string_redirect);\n        } else {\n            let status = '';\n            if (item?.jobStatus) {\n                status = (item?.jobStatus).toLowerCase();\n            }\n\n            let string_item = `?jobId=${item?.jobId}&status=${status}&edit=true`\n            if (['expired', 'completed'].includes(status)) {\n                string_item += `&job=past`\n            }\n            console.log({\n                string_item,\n                status,\n                jobStatus: item?.jobStatus\n            })\n            let urlEncode: any = string_item;\n            props.history.push(`/job-detail?${urlEncode}`);\n        }\n    }\n\n    const { item } = props;\n    return (\n        <div className=\"flex_col_sm_6\">\n            <div className=\"tradie_card\" data-aos=\"fade-in\" data-aos-delay=\"250\" data-aos-duration=\"1000\">\n                <a href=\"javascript:void(0)\" className=\"more_detail circle\" onClick={() => jobClickHandler(item)} />\n                <div className=\"user_wrap\">\n                    <figure className={`u_img ${props.userType === 2 ? 'icon' : ''}`}>\n                        <img\n                            src={props.userType === 2 ? item.tradeSelectedUrl : (item.builderImage || dummy)}\n                            alt=\"\"\n                            onError={(e: any) => {\n                                if (e?.target?.onerror) {\n                                    e.target.onerror = null;\n                                }\n                                if (e?.target?.src) {\n                                    e.target.src = dummy;\n                                }\n                            }}\n                        />\n                    </figure>\n                    <div className=\"details\">\n                        <span className=\"name\">{props.userType === 2 ? item.tradeName : item.jobName}</span>\n                        <span className=\"prof\">{props.userType === 2 ? item.jobName : item.builderName}</span>\n                    </div>\n                </div>\n                <div className=\"job_info\">\n                    <ul>\n                        <li className=\"icon clock\">{item.time}</li>\n                        <li className=\"icon dollar\">{item.amount}</li>\n                        <li className=\"icon location line-1\">{item.locationName}</li>\n                        <li className=\"icon calendar\">{item.durations}</li>\n                    </ul>\n                </div>\n                <p className=\"commn_para line-3\">{item.jobDescription}</p>\n                <ul className=\"count_wrap\">\n                    <li className=\"icon view\">{item.viewersCount}</li>\n                    <li className=\"icon comment\">{item.questionsCount}</li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default TradieJobInfoBox;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/jobDashboard.tsx",["1085"],"import { Component } from 'react'\nimport menu from '../../assets/images/menu-line-blue.png';\nimport close from '../../assets/images/ic-cancel-blue.png';\n\nimport ActiveJobsComponent from './components/activeJobs';\nimport OpenJobsComponent from './components/openJobs';\nimport PastJobsComponent from './components/pastJobs';\nimport NewApplicantComponent from './components/newApplicants';\nimport NeedApproval from './components/needApproval';\nimport ApplicantsList from './components/applicantsList';\n//@ts-ignore\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\n\nimport ViewQuote from './components/quoteJobs/viewQuote';\nimport ListQuotes from './components/quoteJobs/ListQuotes';\n\ninterface Props {\n    getActiveJobsBuilder: (page: number) => void,\n    getPastJobsBuilder: (page: number) => void,\n    getNewApplicantsBuilder: (page: number) => void,\n    getOpenJobsBuilder: (page: number) => void,\n    getnewJobApplicationListBuilder: (item: any) => void,\n    getNewApprovalList: (page: number) => void,\n    recallHeaderNotification: (data: boolean) => void,\n    getClearJobs: () => void,\n    activeJobs: any,\n    pastJobs: any,\n    openJobs: any\n    applicantJobs: any,\n    approvalJobs: any,\n    applicantsListJobs: any,\n    history: any,\n    isLoading: any\n}\ninterface State {\n    isToggleSidebar: any,\n    selectedItem: any,\n    count: any,\n    currentPage: any,\n    activeType: any,\n    activeJobs: any,\n    pastJobs: any,\n    openJobs: any\n    applicantJobs: any,\n    approvalJobs: any,\n    applicantsListJobs: any,\n    enableEditMilestone: any,\n    enableLodgeDispute: any,\n    enableCancelJob: any,\n    enableMakMilestone: any,\n    globalJobId: string,\n    hasLoad: boolean,\n    actualLoad: boolean,\n    toggleClearActiveChecks: boolean\n}\nclass JobDashboard extends Component<Props, State> {\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            currentPage: 1,\n            isToggleSidebar: false,\n            activeType: 'active',\n            selectedItem: { jobtype: 'active', jobid: null, sortby: 1, specializationId: '' },\n            count: { applicantCount: 0, approveCount: 0 },\n            activeJobs: [],\n            pastJobs: [],\n            openJobs: [],\n            applicantJobs: [],\n            approvalJobs: [],\n            applicantsListJobs: [],\n            enableEditMilestone: false,\n            enableLodgeDispute: false,\n            enableCancelJob: false,\n            enableMakMilestone: false,\n            globalJobId: '',\n            hasLoad: true,\n            actualLoad: false,\n            toggleClearActiveChecks: false\n        }\n    }\n\n    componentDidMount() {\n        let { activeType, selectedItem: { jobtype }} = this.state;\n        let nextProps: any = this.props;\n        if (nextProps?.location?.search) {\n\n            let urlParams = new URLSearchParams(nextProps?.location?.search);\n            let activeType_ = urlParams.get('active');\n            let ListQuote = urlParams.get('quotes');\n            let viewQuotes = urlParams.get('viewQuotes');\n\n            let activeTypeByUrl: any = activeType_;\n            if (ListQuote === \"true\") {\n                activeTypeByUrl = 'listQuote'\n            }\n\n            if (viewQuotes === \"true\") {\n                activeTypeByUrl = 'quotes'\n            }\n\n            if (activeTypeByUrl) {\n                if (activeTypeByUrl !== activeType) {\n                    this.setState({\n                        activeType: activeTypeByUrl,\n                        selectedItem: {\n                            jobtype: activeTypeByUrl,\n                            jobid: null,\n                            sortby: 1,\n                            specializationId: '',\n                        },\n                    }, () => {\n                        this.setAfterItems({\n                            jobtype: activeTypeByUrl,\n                            currentPage: 1,\n                            dataItemsAddons: { page: 1, jobId: null, sortBy: 1 }\n                        })\n                    })\n                } else {\n                    this.props.getActiveJobsBuilder(1);\n                }\n            }\n        } else {\n            this.props.getActiveJobsBuilder(1);\n        }\n    }\n\n\n    checkAndUpdateCount = ({\n        needApprovalCount,\n        newApplicantsCount\n    }: any) => {\n        let { approveCount, applicantCount } = this.state?.count\n        if (needApprovalCount !== approveCount ||\n            newApplicantsCount !== applicantCount) {\n            this.setState({\n                count: {\n                    approveCount: needApprovalCount,\n                    applicantCount: newApplicantsCount\n                },\n            })\n        }\n    }\n\n    // milestone dates should be lie betwwn job details\n    componentDidUpdate(prevProps: any) {\n        let nextProps: any = this.props;\n        let { activeJobs, pastJobs, openJobs, applicantsListJobs, applicantJobs, approvalJobs } = nextProps;\n        let { selectedItem: { jobtype }, currentPage, hasLoad } = this.state;\n       \n\n        let urlParams = new URLSearchParams(nextProps?.location?.search);\n        let jobId_ = urlParams.get('jobId');\n        let editMilestone_ = urlParams.get('editMilestone');\n        let lodgeDispute_ = urlParams.get('lodgeDispute');\n        let cancelJob_ = urlParams.get('cancelJob');\n        let markMilestone_ = urlParams.get('markMilestone');\n\n        let stateActive = this.state.activeJobs;\n\n        console.log({\n            activeJobs, pastJobs, openJobs, applicantsListJobs, applicantJobs, approvalJobs,\n            1: jobtype === 'active',\n            2: !activeJobs?.active?.length ? true : JSON.stringify(activeJobs?.active) !== JSON.stringify(this.state?.activeJobs),\n            3: (stateActive?.length < currentPage * 10),\n            stateActive: stateActive,\n            currentPage\n        })\n\n        if (\n            jobtype === 'active' &&\n                !activeJobs?.active?.length ? true : JSON.stringify(activeJobs?.active) !== JSON.stringify(this.state?.activeJobs) &&\n            (this.state?.activeJobs?.length < currentPage * 10 || this.state?.activeJobs?.length === currentPage * 10)\n        ) {\n            if (activeJobs?.active) {\n\n                let { active, needApprovalCount, newApplicantsCount } = activeJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(active) && active?.length) {\n                    page_get = active[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.activeJobs) && this.state?.activeJobs?.length) {\n                    prevValues = this.state?.activeJobs;\n                }\n\n                if (hasLoad && !active?.length && page_get === 0 && this.state?.activeJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && active?.length && page_get === currentPage) {\n                    let result = [];\n                    if (JSON.stringify(prevValues) === JSON.stringify(active) && page_get === currentPage) {\n                        // same data items here!\n                    } else {\n                        let concatedItems: any = prevValues;\n                        let firstItem: any = null;\n\n                        if (Array.isArray(active) && active?.length) {\n                            firstItem = active[0];\n                        }\n\n                        if (firstItem?.jobId) {\n                            let ifMatch = prevValues.find((item: any) => item.jobId === firstItem?.jobId);\n                            if (!ifMatch) {\n                                concatedItems = [...prevValues, ...active]\n                            }\n                        }\n\n                        result = page_get > 0 && page_get === currentPage ?\n                            page_get == 1 && currentPage == 1 ? active : concatedItems\n                            : active;\n                    }\n\n                    let globalJobId = jobId_ && jobId_?.length ? jobId_ : ''\n                    let enableEditMilestone = editMilestone_ === \"true\" ? true : false;\n                    let enableLodgeDispute = lodgeDispute_ === \"true\" ? true : false;\n                    let enableCancelJob = cancelJob_ === \"true\" ? true : false;\n                    let enableMakMilestone = markMilestone_ === \"true\" ? true : false;\n                    let { approveCount, applicantCount } = this.state?.count;\n\n                    let randomState = this.state.activeJobs && Array.isArray(this.state.activeJobs) && this.state.activeJobs[0] && this.state.activeJobs[0].mathrandom ? this.state.activeJobs[0].mathrandom : ''\n\n                    let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n                    if (needApprovalCount !== approveCount ||\n                        newApplicantsCount !== applicantCount ||\n                        this.state.globalJobId !== globalJobId ||\n                        this.state.enableEditMilestone !== enableEditMilestone ||\n                        this.state.enableLodgeDispute !== enableLodgeDispute ||\n                        this.state.enableCancelJob !== enableCancelJob ||\n                        this.state.enableCancelJob !== enableCancelJob ||\n                        this.state.enableMakMilestone !== enableMakMilestone ||\n                        this.state.activeJobs?.length !== result?.length ||\n                        randomState !== randomResult\n                    ) {\n                        this.setState({\n                            globalJobId: jobId_ && jobId_?.length ? jobId_ : '',\n                            enableEditMilestone: editMilestone_ === \"true\" ? true : false,\n                            enableLodgeDispute: lodgeDispute_ === \"true\" ? true : false,\n                            enableCancelJob: cancelJob_ === \"true\" ? true : false,\n                            enableMakMilestone: markMilestone_ === \"true\" ? true : false,\n                            activeJobs: result,\n                            count: {\n                                approveCount: needApprovalCount,\n                                applicantCount: newApplicantsCount\n                            },\n                            actualLoad: true\n                        });\n                    }\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n            }\n        }\n\n        if (\n            jobtype === 'open' &&\n                !openJobs?.open?.length ? true : JSON.stringify(openJobs?.open) !== JSON.stringify(this.state?.openJobs) &&\n            (this.state?.openJobs?.length < currentPage * 10)\n        ) {\n            if (openJobs?.open) {\n                let { open, needApprovalCount, newApplicantsCount } = openJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(open) && open?.length) {\n                    page_get = open[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.openJobs) && this.state?.openJobs?.length) {\n                    prevValues = this.state?.openJobs;\n                }\n\n\n                if (hasLoad && !open?.length && page_get === 0 && this.state?.openJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && open?.length && page_get === currentPage) {\n                    let result = [];\n                    if (JSON.stringify(prevValues) === JSON.stringify(open) && page_get === currentPage) {\n                        // same data items here!\n                        alert('Ok!')\n                    } else {\n                        let concatedItems: any = prevValues;\n                        let firstItem: any = null;\n\n                        if (Array.isArray(open) && open?.length) {\n                            firstItem = open[0];\n                        }\n\n                        if (firstItem?.jobId) {\n                            let ifMatch = prevValues.find((item: any) => item.jobId === firstItem?.jobId);\n                            if (!ifMatch) {\n                                concatedItems = [...prevValues, ...open]\n                            }\n                        }\n\n                        result = page_get > 0 && page_get === currentPage ?\n                            page_get == 1 && currentPage == 1 ? open : concatedItems\n                            : open;\n                    }\n\n                    let randomState = this.state.openJobs && Array.isArray(this.state.openJobs) && this.state.openJobs[0] && this.state.openJobs[0].mathrandom ? this.state.openJobs[0].mathrandom : ''\n\n                    let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n\n                    if (this.state.count.approveCount !== needApprovalCount ||\n                        this.state.count.applicantCount !== newApplicantsCount ||\n                        this.state.openJobs?.length !== result?.length ||\n                        randomState !== randomResult\n                    ) {\n                        this.setState({\n                            openJobs: result,\n                            count: {\n                                approveCount: needApprovalCount,\n                                applicantCount: newApplicantsCount\n                            },\n                            actualLoad: true\n                        });\n                    }\n\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n\n            }\n        }\n\n        if (\n            jobtype === 'past' &&\n                !pastJobs?.past?.length ? true : JSON.stringify(pastJobs?.past) !== JSON.stringify(this.state?.pastJobs) &&\n            (this.state?.pastJobs?.length < currentPage * 10)\n        ) {\n\n            if (pastJobs?.past) {\n\n                let { past, needApprovalCount, newApplicantsCount } = pastJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(past) && past?.length) {\n                    page_get = past[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.pastJobs) && this.state?.pastJobs?.length) {\n                    prevValues = this.state?.pastJobs;\n                }\n\n\n                if (hasLoad && !past?.length && page_get === 0 && this.state?.pastJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && past?.length && page_get === currentPage) {\n                    let result = [];\n                    let concatedItems: any = prevValues;\n                    let firstItem: any = null;\n\n                    if (Array.isArray(past) && past?.length) {\n                        firstItem = past[0];\n                    }\n\n                    if (firstItem?.jobId) {\n                        let ifMatch = prevValues.find((item: any) => item.jobId === firstItem?.jobId);\n                        if (!ifMatch) {\n                            concatedItems = [...prevValues, ...past]\n                        }\n                    }\n\n                    result = page_get > 0 && page_get === currentPage ?\n                        page_get == 1 && currentPage == 1 ? past : concatedItems\n                        : past;\n\n                    let randomState = this.state.pastJobs && Array.isArray(this.state.pastJobs) && this.state.pastJobs[0] && this.state.pastJobs[0].mathrandom ? this.state.pastJobs[0].mathrandom : ''\n                    let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n\n                    if (this.state.count.approveCount !== needApprovalCount ||\n                        this.state.count.applicantCount !== newApplicantsCount ||\n                        this.state.pastJobs?.length !== result?.length ||\n                        randomState !== randomResult\n                    ) {\n                        this.setState({\n                            pastJobs: result,\n                            count: {\n                                approveCount: needApprovalCount,\n                                applicantCount: newApplicantsCount\n                            },\n                            actualLoad: true\n                        });\n                    }\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n            }\n        }\n\n        if (jobtype === 'applicantList' && JSON.stringify(applicantsListJobs) !== JSON.stringify(this.state.applicantsListJobs)) {\n            this.setState({ applicantsListJobs });\n        }\n\n        if (\n            jobtype === 'applicant' &&\n            JSON.stringify(applicantJobs) !== JSON.stringify(this.state?.applicantJobs) &&\n            (this.state?.applicantJobs?.length < currentPage * 10)\n        ) {\n            let page_get = 0;\n            let prevValues = [];\n\n            if (Array.isArray(applicantJobs) && applicantJobs?.length) {\n                page_get = applicantJobs[0]?.page;\n            }\n\n            if (Array.isArray(this.state?.applicantJobs) && this.state?.applicantJobs?.length) {\n                prevValues = this.state?.applicantJobs;\n            }\n            if (hasLoad && !applicantJobs?.length && page_get === 0 && this.state?.applicantJobs?.length !== 0) {\n                if (this.state.hasLoad !== false) {\n                    this.setState({ hasLoad: false });\n                }\n            } else {\n                if (hasLoad && applicantJobs?.length && page_get === currentPage) {\n                    this.setState({\n                        applicantJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...applicantJobs] : applicantJobs,\n                        actualLoad: true\n                    });\n                }\n            }\n        }\n\n\n        if (\n            jobtype === 'approval' &&\n            JSON.stringify(approvalJobs) !== JSON.stringify(this.state?.approvalJobs) &&\n            (this.state?.approvalJobs?.length < currentPage * 10)\n        ) {\n            let page_get = 0;\n            let prevValues = [];\n\n            if (Array.isArray(approvalJobs) && approvalJobs?.length) {\n                page_get = approvalJobs[0]?.page;\n            }\n\n            if (Array.isArray(this.state?.approvalJobs) && this.state?.approvalJobs?.length) {\n                prevValues = this.state?.approvalJobs;\n            }\n\n\n            if (hasLoad && !approvalJobs?.length && page_get === 0 && this.state?.approvalJobs?.length !== 0) {\n                if (this.state.hasLoad !== false) {\n                    this.setState({ hasLoad: false });\n                }\n            } else {\n                if (hasLoad && approvalJobs?.length && page_get === currentPage) {\n                    this.setState({\n                        approvalJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...approvalJobs] : approvalJobs,\n                        actualLoad: true\n                    });\n                }\n            }\n        }\n    }\n\n    toggleSidebar = () => this.setState({ isToggleSidebar: !this.state.isToggleSidebar });\n    setSelected = (jobtype: any, jobid?: any, sortby?: any, specializationId?: any) => {\n\n        let { currentPage } = this.state;\n        let item_position: any = localStorage.getItem('position');\n        let locationLocal: any = JSON.parse(item_position);\n\n        let dataItemsAddons: any = { page: currentPage, jobId: jobid, sortBy: sortby };\n        if (sortby === 2) {\n            dataItemsAddons['location'] = {\n                \"type\": \"Point\",\n                \"coordinates\": [\n                    locationLocal[1],\n                    locationLocal[0]\n                ]\n            };\n        }\n\n        if (['active', 'past', 'open', 'applicant', 'approval'].includes(jobtype)) {\n            this.setState({\n                activeType: jobtype,\n                currentPage: 1,\n                hasLoad: true,\n                activeJobs: [],\n                pastJobs: [],\n                openJobs: [],\n                applicantJobs: [],\n                approvalJobs: [],\n                applicantsListJobs: [],\n                actualLoad: false,\n                selectedItem: { jobtype, jobid, sortby, specializationId },\n            }, () => {\n                this.props.getClearJobs();\n                this.props.history.push(`/jobs?active=${jobtype}`);\n                window.scrollTo(0, 0);\n\n                this.setAfterItems({ jobtype, currentPage: this.state.currentPage, dataItemsAddons });\n            })\n        } else {\n            this.setState({\n                selectedItem: { jobtype, jobid, sortby, specializationId },\n                applicantsListJobs: [],\n            }, () => {\n                this.props.getClearJobs();\n                this.setAfterItems({ jobtype, currentPage: this.state.currentPage, dataItemsAddons });\n            });\n        }\n    }\n\n    setAfterItems = ({ jobtype, currentPage, dataItemsAddons }: any) => {\n        const { getActiveJobsBuilder, getPastJobsBuilder, getOpenJobsBuilder, getNewApplicantsBuilder, getnewJobApplicationListBuilder, getNewApprovalList } = this.props;\n\n        if (jobtype === 'active') { getActiveJobsBuilder(currentPage); }\n        if (jobtype === 'past') { getPastJobsBuilder(currentPage); }\n        if (jobtype === 'open') { getOpenJobsBuilder(currentPage); }\n        if (jobtype === 'applicant') { getNewApplicantsBuilder(currentPage); }\n        if (jobtype === 'approval') { getNewApprovalList(currentPage); }\n        if (jobtype === 'applicantList') { getnewJobApplicationListBuilder(dataItemsAddons); }\n    }\n\n    setToggleActiveToFalse = () => {\n        this.setState({ toggleClearActiveChecks: false });\n    }\n\n    render() {\n        let {\n            hasLoad,\n            enableEditMilestone,\n            enableLodgeDispute,\n            enableCancelJob,\n            enableMakMilestone,\n            globalJobId,\n            isToggleSidebar,\n            activeType,\n            selectedItem: { jobtype, jobid, specializationId },\n            count: { applicantCount, approveCount },\n            activeJobs, pastJobs, openJobs, applicantJobs, applicantsListJobs, approvalJobs\n        } = this.state;\n        const { toggleSidebar, setSelected } = this;\n        let props: any = this.props;\n        let isLoading: any = props.isLoading;\n        let totalCount: any = 0;\n\n        if (jobtype === 'active') {\n            totalCount = activeJobs?.length;\n        }\n\n        if (jobtype === 'past') {\n            totalCount = pastJobs?.length;\n        }\n\n        if (jobtype === 'open') {\n            totalCount = openJobs?.length;\n        }\n\n        if (jobtype === 'applicant') {\n            totalCount = applicantJobs?.length;\n        }\n\n        if (jobtype === 'approval') {\n            totalCount = approvalJobs?.length;\n        }\n\n        if (jobtype === 'applicantList') {\n            totalCount = applicantsListJobs?.length;\n        }\n\n        return (\n          <div className=\"app_wrapper\">\n            <div className=\"custom_container\">\n              <span\n                className=\"mob_side_nav\"\n                onClick={() => {\n                  toggleSidebar();\n                }}\n              >\n                <img src={menu} alt=\"mob-side-nav\" />\n              </span>\n              <div className=\"f_row h-100\">\n                <div\n                  className={`side_nav_col${isToggleSidebar ? \" active\" : \"\"}`}\n                >\n                  <button\n                    className=\"close_nav\"\n                    onClick={() => {\n                      toggleSidebar();\n                    }}\n                  >\n                    <img src={close} alt=\"close\" />\n                  </button>\n                  <div className=\"stick\">\n                    <span className=\"title\">Job Dashboard</span>\n                    <ul className=\"dashboard_menu\">\n                      <li>\n                        <span\n                          className={`icon star ${\n                            activeType === \"active\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              console.log(\"Here!!!!\");\n                              // setResetItem(true);\n                              setSelected(\"active\");\n                              this.setState({ toggleClearActiveChecks: true });\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            Active\n                          </span>\n                        </span>\n                      </li>\n                      <li>\n                        <span\n                          className={`icon open ${\n                            activeType === \"open\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              setSelected(\"open\");\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            Open\n                          </span>\n                        </span>\n                      </li>\n                      <li>\n                        <span\n                          className={`icon past ${\n                            activeType === \"past\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              setSelected(\"past\");\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            Past\n                          </span>\n                        </span>\n                      </li>\n                      {/* <hr></hr> */}\n                      <li>\n                        <span\n                          className={`icon applicants ${\n                            activeType === \"applicant\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              setSelected(\"applicant\");\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            {\"New applicants\"}\n                            {!!applicantCount && (\n                              <span className=\"badge_count\">\n                                {applicantCount > 9 ? \"9+\" : applicantCount}\n                              </span>\n                            )}\n                          </span>\n                        </span>\n                      </li>\n                      <li>\n                        {/* <span className=\"icon approved\"> */}\n                        <span\n                          className={`icon approved ${\n                            activeType === \"approval\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              setSelected(\"approval\");\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            {\"Need approval\"}\n                            {!!approveCount && (\n                              <span className=\"badge_count\">\n                                {approveCount > 9 ? \"9+\" : approveCount}\n                              </span>\n                            )}\n                          </span>\n                        </span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n\n                <InfiniteScroll\n                  dataLength={totalCount}\n                  next={() => {\n                    if (totalCount == this.state.currentPage * 10) {\n                      this.setState(\n                        { currentPage: this.state.currentPage + 1 },\n                        () => {\n                          let cp: any = this.state.currentPage;\n\n                          if (jobtype === \"active\") {\n                            this.props.getActiveJobsBuilder(cp);\n                          }\n\n                          if (jobtype === \"past\") {\n                            this.props.getPastJobsBuilder(cp);\n                          }\n\n                          if (jobtype === \"open\") {\n                            this.props.getOpenJobsBuilder(cp);\n                          }\n\n                          if (jobtype === \"applicant\") {\n                            this.props.getNewApplicantsBuilder(cp);\n                          }\n\n                          if (jobtype === \"approval\") {\n                            this.props.getNewApprovalList(cp);\n                          }\n                        }\n                      );\n                    } else {\n                      // this.setState({ hasLoad: false })\n                    }\n                  }}\n                  hasMore={hasLoad}\n                  loader={<></>}\n                  style={{ overflowX: \"hidden\" }}\n                  className={`detail_col element-side-scroll hide_scroll`}\n                >\n                  {jobtype === \"past\" && (\n                    <PastJobsComponent\n                      isLoading={isLoading}\n                      dataItems={pastJobs}\n                      jobType={jobtype}\n                      activeType={activeType}\n                      history={props.history}\n                      getPastJobsBuilder={props?.getPastJobsBuilder}\n                    />\n                  )}\n                  {jobtype === \"active\" && (\n                    <ActiveJobsComponent\n                      isLoading={isLoading}\n                      dataItems={activeJobs}\n                      jobType={jobtype}\n                      activeType={activeType}\n                      setJobLabel={setSelected}\n                      setToggleActiveToFalse={this.setToggleActiveToFalse}\n                      recallHeaderNotification={\n                        this.props.recallHeaderNotification\n                      }\n                      toggleClearActiveChecks={\n                        this.state.toggleClearActiveChecks\n                      }\n                      history={props.history}\n                      globalJobId={globalJobId}\n                      enableEditMilestone={enableEditMilestone}\n                      enableLodgeDispute={enableLodgeDispute}\n                      enableCancelJob={enableCancelJob}\n                      enableMakMilestone={enableMakMilestone}\n                    />\n                  )}\n                  {jobtype === \"open\" && (\n                    <OpenJobsComponent\n                      isLoading={isLoading}\n                      dataItems={openJobs}\n                      jobType={jobtype}\n                      setJobLabel={setSelected}\n                      activeType={activeType}\n                      history={props.history}\n                    />\n                  )}\n                  {jobtype === \"applicant\" && (\n                    <NewApplicantComponent\n                      isLoading={isLoading}\n                      dataItems={applicantJobs}\n                      jobType={jobtype}\n                      setJobLabel={setSelected}\n                      history={props.history}\n                    />\n                  )}\n                  {jobtype === \"approval\" && (\n                    <NeedApproval\n                      isLoading={isLoading}\n                      dataItems={approvalJobs}\n                      jobType={jobtype}\n                      setJobLabel={setSelected}\n                      activeType={activeType}\n                      history={props.history}\n                    />\n                  )}\n                  {jobtype === \"applicantList\" && (\n                    <ApplicantsList\n                      isLoading={isLoading}\n                      items={applicantsListJobs}\n                      jobid={jobid}\n                      specializationId={specializationId}\n                      setJobLabel={setSelected}\n                      activeType={activeType}\n                      history={props.history}\n                    />\n                  )}\n                  {jobtype === \"listQuote\" && (\n                    <ListQuotes {...props} setJobLabel={setSelected} />\n                  )}\n                  {jobtype === \"quotes\" && (\n                    <ViewQuote {...props} setJobLabel={setSelected} />\n                  )}\n                </InfiniteScroll>\n              </div>\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default JobDashboard;","/home/appinventiv/Documents/Project/tickt/web/src/pages/searchTradieResult/searchResultTradie.tsx",["1086"],"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport SearchFilters from \"./searchFilters\";\nimport noData from \"../../assets/images/no-search-data.png\";\nimport BannerSearchProps from \"../shared/bannerSearchProps\";\nimport TradieBox from \"../shared/tradieBox\";\nimport moment from \"moment\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\nimport { MoEConstants } from \"../../utils/constants\";\n\nconst SearchResultTradie = (props: any) => {\n  const location: any = useLocation();\n\n  const [stateData, setStateData] = useState(location.state);\n  const [specialiZationName, setSpecialiZationName] = useState<any>([]);\n  const [isToggle, setToggleSearch] = useState(false);\n  const [localInfo, setLocalInfo] = useState({}); // localInfo\n\n  const [localData, setLocalData] = useState<any>([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [sortByFilter, setSortByFilter] = useState<any>({\n    sortByFilterClicked: false,\n    tradeId: [],\n    sortChanged: false,\n    specializationId: [],\n    specializationName: [],\n    allSpecializationClicked: false,\n  });\n\n  const { homeSearchJobData } = props; // props here.\n\n  useEffect(() => {\n    props.getRecentSearchList();\n\n    let data: any = {\n      page: 1,\n      isFiltered: false,\n    };\n\n    if (stateData?.tradeId) {\n      data[\"tradeId\"] = stateData?.tradeId;\n    }\n\n    if (stateData?.specializations) {\n      data[\"specializationId\"] = stateData?.specializations;\n      data[\"specializationId\"] = specialiZationName;\n    }\n\n    if (stateData?.location) {\n      data[\"location\"] = stateData?.location;\n    }\n\n    if (props?.location?.state?.suggestionSelected) {\n      data[\"address\"] = JSON.stringify(\n        props?.location?.state?.suggestionSelected\n      );\n    }\n\n    if (stateData?.calender?.startDate) {\n      data[\"from_date\"] = moment(stateData?.calender?.startDate).format(\n        \"YYYY-MM-DD\"\n      );\n    }\n    if (stateData?.calender?.endDate) {\n      data[\"to_date\"] = moment(stateData?.calender?.endDate).format(\n        \"YYYY-MM-DD\"\n      );\n    }\n \n    if (!data?.address || !data?.address?.length) {\n      delete data.address;\n    }\n\n    setLocalInfo({\n      name: stateData?.name,\n      count: 0,\n      tradeId: data.tradeId,\n      specializationId: data.specializationId,\n      specializationName: data.specialiZationName,\n      location: data.location,\n      doingLocalChanges: false,\n      suggestionSelected: stateData?.suggestionSelected,\n    });\n\n    if (data?.address) {\n      return;\n    }\n    props.postHomeSearchData(data);\n    const mData = {\n      timeStamp: moengage.getCurrentTimeStamp(),\n      category: props?.tradeListData.find(\n        (i: any) => i._id === data?.tradeId[0]\n      )?.trade_name,\n      ...(data.address && {\n        location: `${JSON.parse(data.address)?.mainText} ${\n          JSON.parse(data.address)?.secondaryText\n        }`,\n      }),\n      //'length of hire': '',\n      ...(data?.from_date && { \"start date\": data?.from_date }),\n      ...(data?.to_date && { \"end date\": data?.to_date }),\n    };\n    moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n    mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n  }, []);\n\n  const getTitleInfo = (info: any) => {\n    setLocalInfo(info);\n  };\n\n  const checkIfExist = (data: any) => {\n    if (data && Array.isArray(data) && data?.length) {\n      let element_id = data[0].tradieId;\n      let response = localData.find(\n        (item: any) => item.tradieId === element_id\n      );\n      if (response) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  };\n  const filterChangeHandler = (id: any, name: string, newName?: string) => {\n    if (name === \"jobTypes\") {\n      if (sortByFilter.jobTypes[0] == id) {\n        setSortByFilter((prevData: any) => ({ ...prevData, jobTypes: [] }));\n      } else {\n        setSortByFilter((prevData: any) => ({ ...prevData, jobTypes: [id] }));\n      }\n    } else if (name === \"specializationId\") {\n      setSortByFilter((prevData: any) => {\n        var newData: any = [];\n        var newNameData: any = [];\n        if (\n          Array.isArray(prevData.specializationId) &&\n          prevData?.specializationId?.length\n        ) {\n          newData = [...prevData.specializationId];\n          newNameData = [...prevData.specializationName];\n        }\n        if (sortByFilter.allSpecializationClicked) {\n          newData = [];\n          newNameData = [];\n        }\n        const itemIndex = newData.indexOf(id);\n\n        if (newData.indexOf(id) < 0) {\n          newData.push(id);\n          newNameData.push(newName);\n        } else {\n          newData.splice(itemIndex, 1);\n          newNameData.splice(itemIndex, 1);\n        }\n\n        setSpecialiZationName(newNameData);\n        return {\n          ...prevData,\n          specializationId: newData,\n          specializationName: newNameData,\n          allSpecializationClicked: false,\n        };\n      });\n    } else if (name == \"categories\") {\n      if (sortByFilter.tradeId.length && sortByFilter.tradeId[0] == id) {\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          tradeId: [],\n          specializationId: [],\n          allSpecializationClicked: false,\n        }));\n      } else {\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          tradeId: [id],\n          specializationId: [],\n          specializationName: [],\n          allSpecializationClicked: false,\n        }));\n      }\n    } else if (name == \"All Clicked\") {\n      setSpecialiZationName([]);\n      if (sortByFilter.allSpecializationClicked) {\n        setSpecialiZationName([]);\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          allSpecializationClicked: false,\n          specializationId: [],\n          specializationName: [],\n        }));\n      } else {\n        const newSpecialization = id.map(({ _id }: { _id: string }) => {\n          return _id;\n        });\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          allSpecializationClicked: true,\n          specializationId: newSpecialization,\n        }));\n      }\n    } else if (name == \"Clear All\") {\n      setSortByFilter((prevData: any) => ({\n        ...prevData,\n        allSpecializationClicked: false,\n        jobTypes: [],\n        specializationId: [],\n        specializationName: [],\n        tradeId: [],\n      }));\n    }\n  };\n  useEffect(() => {\n    let newProps = homeSearchJobData;\n    let propsPage = 1;\n    let propsTradeId = \"\";\n    let localTradeId = \"\";\n    let local_info: any = localInfo;\n    let local_info_tradeId = \"\";\n    if (\n      local_info?.tradeId &&\n      Array.isArray(local_info?.tradeId) &&\n      local_info?.tradeId?.length\n    ) {\n      local_info_tradeId = local_info?.tradeId[0];\n    }\n\n    if (!hasMore) {\n      setHasMore((prev: any) => !prev);\n    }\n\n    if (\n      homeSearchJobData &&\n      Array.isArray(homeSearchJobData) &&\n      homeSearchJobData?.length\n    ) {\n      propsTradeId = homeSearchJobData[0]?.tradeData[0]?.tradeId;\n      propsPage = homeSearchJobData[0]?.page;\n    }\n\n    if (localData && Array.isArray(localData) && localData?.length) {\n      localTradeId = localData[0]?.tradeData[0]?.tradeId;\n    }\n\n\n    if (!local_info_tradeId?.length && localTradeId?.length) {\n      getTitleInfo({\n        name: \"\",\n        count: 0,\n        tradeId: [],\n        specializationId: [],\n        location: null,\n        doingLocalChanges: false,\n        suggestionSelected: \"\",\n      });\n    }\n\n    if (propsPage) {\n      if (local_info_tradeId?.length && localTradeId?.length) {\n        if (!propsTradeId?.length && local_info_tradeId === localTradeId) {\n          return;\n        }\n      }\n\n      if (propsPage === 1 && currentPage === 1) {\n        setLocalData(newProps);\n        setCurrentPage(propsPage);\n      } else if (\n        propsPage > 1 &&\n        currentPage > 1 &&\n        currentPage === propsPage\n      ) {\n        if (!checkIfExist(newProps)) {\n          setLocalData((prev: any) => [...prev, ...newProps]);\n        }\n      } else if (propsPage === 1 && currentPage > 1) {\n        setLocalData(newProps);\n        setCurrentPage(propsPage);\n      } else {\n        if (\n          !local_info_tradeId?.length &&\n          localTradeId?.length &&\n          propsTradeId?.length\n        ) {\n          if (localTradeId === propsTradeId) {\n            setLocalData(newProps);\n            setCurrentPage(propsPage);\n          }\n        }\n      }\n    }\n  }, [homeSearchJobData]);\n\n  const handleChangeToggle = (value: any) => {\n    setToggleSearch(value);\n  };\n\n  let local_info: any = localInfo;\n  let isLoading: any = props.isLoading;\n\n  return (\n    <div className=\"app_wrapper\">\n      <div className={`top_search ${isToggle ? \"active\" : \"\"}`}>\n        <BannerSearchProps\n          {...props}\n          tradeListData={props.tradeListData}\n          showOnlyTradeName={props.history?.location?.state?.showOnlyTradeName}\n          getTitleInfo={getTitleInfo}\n          localInfo={localInfo}\n          handleChangeToggle={handleChangeToggle}\n        />\n      </div>\n      <div className=\"search_result\">\n        <div className=\"section_wrapper\">\n          <div className=\"custom_container\">\n            <div className=\"flex_row mob_srch_option\">\n              <div className=\"flex_col_sm_6\"></div>\n              <div className=\"flex_col_sm_6 text-right\">\n                <button\n                  onClick={() => {\n                    setToggleSearch(true);\n                  }}\n                  className=\"fill_grey_btn btn-effect\"\n                >\n                  Modify Search\n                </button>\n              </div>\n            </div>\n\n            <div className=\"result_heading\">\n              <div className=\"flex_row\">\n                <div className=\"flex_col_sm_8\">\n                  <span className=\"title\">\n                    {console.log(\n                      specialiZationName.length,\n                      \"specialiZationName.length\"\n                    )}\n                    {specialiZationName.length\n                      ? `${specialiZationName[0]} ${\n                          local_info?.count > 1\n                            ? `+${local_info?.count - 1}`\n                            : \"\"\n                        }`\n                      : local_info?.name || \"\"}\n                    <span className=\"count\">\n                      {`${localData?.length || 0} result(s)`}\n                    </span>\n                  </span>\n                  <SearchFilters\n                    {...props}\n                    localInfo={localInfo}\n                    getTitleInfo={getTitleInfo}\n                    filterChangeHandler={filterChangeHandler}\n                    sortByFilter={sortByFilter}\n                    setSortByFilter={setSortByFilter}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <InfiniteScroll\n              dataLength={localData?.length}\n              next={() => {\n                if (localData?.length < currentPage * 10) {\n                } else {\n                  let cp = currentPage + 1;\n                  setCurrentPage((prev: any) => prev + 1);\n                  let local_info: any = localInfo;\n\n                  let data: any = {\n                    page: cp,\n                    isFiltered: false,\n                  };\n\n                  if (local_info?.location) {\n                    data[\"location\"] = local_info?.location;\n                  }\n\n                  if (local_info?.tradeId?.length) {\n                    data[\"tradeId\"] = local_info?.tradeId;\n                  }\n\n                  if (local_info?.specializationId?.length) {\n                    data[\"specializationId\"] = local_info?.specializationId;\n                  }\n\n                  if (\n                    props?.location?.state?.suggestionSelected &&\n                    props?.location?.state?.suggestionSelected !== \"{}\"\n                  ) {\n                    data[\"address\"] = JSON.stringify(\n                      props?.location?.state?.suggestionSelected\n                    );\n                  }\n\n                  if (local_info?.from_date) {\n                    data[\"from_date\"] = local_info?.from_date;\n                  }\n\n                  if (local_info?.to_date) {\n                    data[\"to_date\"] = local_info?.to_date;\n                  }\n\n                  if (local_info?.sortBy > 0) {\n                    data[\"sortBy\"] = local_info?.sortBy;\n                  }\n\n                  if (!data?.hasOwnProperty(\"specializationId\")) {\n                    data[\"isFiltered\"] = true;\n                  }\n\n                  props.postHomeSearchData(data);\n                }\n              }}\n              hasMore={hasMore}\n              loader={<></>}\n              className=\"flex_row tradies_row\"\n            >\n              {localData?.length ? (\n                localData.map((item: any, index: number) => (\n                  <TradieBox item={item} index={index} />\n                ))\n              ) : !isLoading && !localData?.length ? (\n                <div className=\"no_record\">\n                  <figure className=\"no_img\">\n                    <img src={noData} alt=\"data not found\" />\n                  </figure>\n                  <span>{\"No Data Found\"}</span>\n                </div>\n              ) : null}\n            </InfiniteScroll>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchResultTradie;\n","/home/appinventiv/Documents/Project/tickt/web/src/common/auth/socialAuth.tsx",["1087","1088"],"import Constants from '../../utils/constants';\nimport gmail from '../../assets/images/ic-google.png';\nimport linkedin from '../../assets/images/ic-linkedin.png';\nimport { checkSocialId, getLinkedinProfile, socialSignupLogin } from '../../redux/auth/actions';\n// @ts-ignore\nimport { GoogleLogin } from 'react-google-login';\n// @ts-ignore\nimport { LinkedIn } from 'react-linkedin-login-oauth2';\n// @ts-ignore\n//import AppleLogin from 'react-apple-login';\nimport { loginAnonymously } from '../../services/firebase';\n\ninterface Propstype {\n    onNewAccount: Function,\n    history: any,\n    userType?: number,\n    showModal?: boolean,\n    modalUpdateSteps: (data: any) => void,\n    setShowModal: (data: any) => void,\n}\n\nconst SocialAuth = (props: Propstype) => {\n\n    const onFailure = (error: any) => {\n        console.log(error);\n    };\n\n    const googleResponse = async (response: any) => {\n        const res = await checkSocialId({ socialId: response.googleId, email: response.profileObj.email })\n        if (res.success) {\n            if (res.isProfileCompleted) {\n                //in case of existing social account\n                let data: any = {\n                    authType: \"login\",\n                    email: response.profileObj?.email,\n                    socialId: response.profileObj?.googleId,\n                    accountType: \"google\",\n                    ...(props.userType && { user_type: props.userType })\n                }\n                const res = await socialSignupLogin(data)\n                if (res.success) {\n                    loginAnonymously();\n                    if (props.showModal) {\n                        props.setShowModal(!props.showModal);\n                    }\n                    props.history.push('/');\n                }\n            } else {\n                //in case of new social account\n                props.onNewAccount(response.profileObj, 'google');\n            }\n        }\n    };\n\n    const linkedInResponse = async (response: any) => {\n        const resSocial = await getLinkedinProfile({ code: response.code, redirect_uri: Constants.LinkedInAuth.REDIRECT_URI })\n        const resCheckId = await checkSocialId({ socialId: resSocial.result.id, email: resSocial.result.email })\n        if (resCheckId.success) {\n            if (resCheckId.isProfileCompleted) {\n                //in case of existing social account\n                let data: any = {\n                    authType: \"login\",\n                    email: resSocial.result?.email,\n                    accountType: \"linkedIn\",\n                    socialId: resSocial.result?.id,\n                    ...(props.userType && { user_type: props.userType })\n                }\n                const resAuth = await socialSignupLogin(data)\n                console.log('resAuth: ', resAuth);\n                if (resAuth.success) {\n                    loginAnonymously();\n                    if (props.showModal) {\n                        props.setShowModal(!props.showModal);\n                    }\n                    props.history.push('/');\n                }\n            } else {\n                //in case of new social account\n                props.onNewAccount({ name: resSocial.result.firstName, email: resSocial.result.email, socialId: resSocial.result.id }, 'linkedIn');\n            }\n        }\n    }\n\n    return (\n        <div className=\"continue_with\">\n            <GoogleLogin\n                clientId={Constants.SocialAuth.GOOGLE_CLIENT_ID}\n                onSuccess={googleResponse}\n                onFailure={onFailure}\n                render={(renderProps: any) => (<a className=\"hvr-ripple-out\" onClick={renderProps.onClick}>\n                    <img src={gmail} alt=\"google\" />\n                </a>)}\n            />\n            <LinkedIn\n                clientId={Constants.LinkedInAuth.CLIENT_ID}\n                onSuccess={linkedInResponse}\n                onFailure={onFailure}\n                scope=\"r_liteprofile r_emailaddress\"\n                state=\"gjhcbf355ESDE\"\n                redirectUri={Constants.LinkedInAuth.REDIRECT_URI}\n                renderElement={(renderProps: any) => (<a className=\"hvr-ripple-out\" onClick={renderProps.onClick} >\n                    <img src={linkedin} alt=\"linkedin\" />\n                </a>\n                )}\n            />\n        </div>\n    )\n}\n\nexport default SocialAuth\n","/home/appinventiv/Documents/Project/tickt/web/src/common/auth/authParent.tsx",["1089","1090"],"import colorLogo from \"../../assets/images/ic-logo-yellow.png\";\nimport AuthSlider from \"./authSlider\";\n\ninterface Props {\n  backButtonHandler?: () => void;\n  steps?: number;\n  header: any;\n  children: any;\n  sliderType?: string;\n  hideProgres?: boolean;\n  userType?: number;\n  showModal?: boolean;\n  history?: any;\n  setShowModal: (data: any) => void;\n  modalUpdateSteps: (data: any) => void;\n  setSocialData: (data: any) => void;\n  modalLoginBackBtn?: string;\n  socialId?: string;\n}\n\nconst builderEnableSteps = [\n  {\n    2: false,\n  },\n];\nconst AuthParent = (props: any) => {\n  const handleSteps = ({ step, index, type }: any) => {\n    console.log({ step, index, type });\n    if (type == 2 && props.socialId) {\n      if (index == 0) {\n        return step > 3 ? \"active\" : \"\";\n      }\n      if (index == 1) {\n        return step > 4 ? \"active\" : \"\";\n      }\n      if (index == 2) {\n        return step > 5 ? \"active\" : \"\";\n      }\n      if (index == 3) {\n        return step > 8 ? \"active\" : \"\";\n      }\n      if (index == 4) {\n        return step > 9 ? \"active\" : \"\";\n      }\n    } else if (type == 2) {\n      if (index == 0) {\n        return step === 3 || step > 3 ? \"active\" : \"\";\n      }\n      if (index == 1) {\n        return step === 4 || step > 4 ? \"active\" : \"\";\n      }\n      if (index == 2) {\n        return step === 5 || step > 5 ? \"active\" : \"\";\n      }\n      if (index == 3) {\n        return step === 8 || step > 8 ? \"active\" : \"\";\n      }\n      if (index == 4) {\n        return step === 9 || step > 9 ? \"active\" : \"\";\n      }\n    } else if (type == 1 && props.socialId) {\n      if (index == 0) {\n        return step > 3 ? \"active\" : \"\";\n      }\n      if (index == 1) {\n        return step > 4 ? \"active\" : \"\";\n      }\n      if (index == 2) {\n        return step > 5 ? \"active\" : \"\";\n      }\n      if (index == 3) {\n        return step > 6 ? \"active\" : \"\";\n      }\n      if (index == 4) {\n        return step > 7 ? \"active\" : \"\";\n      }\n      if (index == 5) {\n        return step > 8 ? \"active\" : \"\";\n      }\n      if (index == 6) {\n        return step > 9 ? \"active\" : \"\";\n      }\n    } else if (type == 1) {\n      if (index == 0) {\n        return step === 3 || step > 3 ? \"active\" : \"\";\n      }\n      if (index == 1) {\n        return step === 4 || step > 4 ? \"active\" : \"\";\n      }\n      if (index == 2) {\n        return step === 5 || step > 5 ? \"active\" : \"\";\n      }\n      if (index == 3) {\n        return step === 6 || step > 6 ? \"active\" : \"\";\n      }\n      if (index == 4) {\n        return step === 7 || step > 7 ? \"active\" : \"\";\n      }\n      if (index == 5) {\n        return step === 8 || step > 8 ? \"active\" : \"\";\n      }\n      if (index == 6) {\n        return step === 9 || step > 9 ? \"active\" : \"\";\n      }\n    }\n    return \"\";\n  };\n\n  const tradieStepsLength = props?.socialId ? 7 : 8;\n  const builderStepsLength = props?.socialId ? 4 : 5;\n  let step_ = props.steps;\n  let type = props.userType;\n  return (\n    <div className=\"onboard_wrapper\">\n      <div className=\"f_row h-100\">\n        <div className={props.steps === 0 ? \"left_col\" : \"left_col_hide\"}>\n          <AuthSlider\n            type={props.sliderType}\n            history={props.history}\n            showModal={props.showModal}\n            setShowModal={props.setShowModal}\n            modalUpdateSteps={props.modalUpdateSteps}\n            setSocialData={props.setSocialData}\n          />\n        </div>\n        <div className=\"right_col\">\n          <figure\n            className={props.steps === 0 ? \"mob_logo\" : \"mob_logo left_logo\"}\n          >\n            <img src={colorLogo} alt=\"Tickt-logo\" />\n          </figure>\n          <div className=\"onboarding_head\">\n            {props.steps !== 0 ? (\n              <div className=\"text-left\">\n                {(!!props.steps || props.sliderType === \"signup\") &&\n                  !props.modalLoginBackBtn && (\n                    <button\n                      className=\"back_btn\"\n                      onClick={props.backButtonHandler}\n                    />\n                  )}\n                <h1>\n                  {props.userType === 1 && props.header.tradieTitle\n                    ? props.header.tradieTitle\n                    : props.header.title}\n                </h1>\n                {props.header.subTitle && (\n                  <span className=\"show_label\">{props.header.subTitle}</span>\n                )}\n              </div>\n            ) : (\n              <div className=\"initial_head\"></div>\n            )}\n\n            {!!props.steps && props.steps > 1 && !props.hideProgres && (\n              <ul className=\"custom_steppr\">\n                {/* <div style={{fontSize:30, color:'#fff'}}>\n                                    {props.userType === 1 ? 'true' : 'false'}\n                                    {` -- ${step_}`}\n                                </div> */}\n                {/* <span style={{color:'#fff', marginRight:'20px'}}>{step_}</span> */}\n                {Array.from(\n                  Array(\n                    type === 1 ? tradieStepsLength : builderStepsLength\n                  ).keys()\n                ).map((i) => {\n                  return (\n                    <li\n                      key={i}\n                      className={handleSteps({ step: step_, index: i, type })}\n                      // className={props.steps !== undefined && i + 1 < props.steps ? 'active' : ''}\n                    />\n                  );\n                })}\n              </ul>\n            )}\n          </div>\n          {props.children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthParent;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/resetPassword.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/successPage.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/createPassword.tsx",["1091","1092"],"import { useState } from 'react';\nimport eyeIconClose from '../../../assets/images/icon-eye-closed.png';\nimport eyeIconOpen from '../../../assets/images/icon-eye-open.png';\nimport Constants from '../../../utils/constants';\nimport regex from '../../../utils/regex'\n\n\ninterface Propstype {\n    onResetPassword: (data: any) => void\n}\n\nconst CreatePassword = (props: Propstype) => {\n    const [errors, setErrors] = useState<any>({});\n    const [password, setPassword] = useState<any>('')\n    const [showPassword, setShowPassword] = useState(false)\n\n    const changeHandler = (e: any) => {\n        setPassword(e.target.value)\n    }\n\n    const validateForm = () => {\n        const newErrors: any = {};\n        if (!password) {\n            newErrors.password = Constants.errorStrings.password;\n        } else {\n            const passwordRegex = new RegExp(regex.password);\n            if (!passwordRegex.test(password.trim())) {\n                newErrors.password = Constants.errorStrings.passwordError;\n            }\n        }\n        setErrors(newErrors);\n        return !Object.keys(newErrors).length;\n    }\n\n    const onSubmit = async (e: any) => {\n        e.preventDefault();\n        if (validateForm()) {\n            props.onResetPassword({ password })\n        }\n    }\n\n    return (\n        <div className=\"form_wrapper\">\n            <form onSubmit={onSubmit}>\n                <div className=\"form_field\">\n                    <label className=\"form_label\">Password</label>\n                    <div className=\"text_field\">\n                        <input type={showPassword ? 'text' : 'password'} className=\"detect_input\" value={password} placeholder=\"Enter Password\" onChange={changeHandler} />\n                        <span className=\"detect_icon\" onClick={() => setShowPassword(!showPassword)}><img src={showPassword ? eyeIconOpen : eyeIconClose} /></span>\n                    </div>\n                    {!!errors.password && <span className=\"error_msg\">{errors.password}</span>}\n                </div>\n                <div className=\"form_field\">\n                    <span className=\"show_label\">Please ensure your password is at least 8 characters long and contains a special character &amp; an uppercase letter or number.</span>\n                </div>\n                <div className=\"form_field\">\n                    <button className=\"fill_btn btn-effect\">Next</button>\n                </div>\n            </form>\n            <div className=\"form_field hide text-center\">\n                <span className=\"reg\">No account? <a className=\"link\">Signup</a></span>\n            </div>\n        </div>\n    )\n}\n\nexport default CreatePassword\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/tradieEditProfile.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/signup.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/paymentHistory/paymentHistory.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/common/reviewInfoBox.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/postJob.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/jobDashboard.tsx",["1093","1094","1095"],"import { useState } from 'react';\nimport { NavLink, Route, Switch, useHistory, useLocation } from 'react-router-dom';\n\nimport ActiveJobsPage from './components/activeJobs';\nimport AppliedJobsPage from './components/appliedJobs';\nimport PastJobsPage from './components/pastJobs';\nimport NewJobsPage from './components/newJobs';\nimport ApprovedMilestonesPage from './components/approvedMilestones';\nimport MarkMilestonePage from './components/markMilestone';\nimport ReviewBuilder from './components/reviewBuilder/reviewBuilder';\nimport QuoteOuter from './components/quoteJobs/quoteOuter';\nimport ActiveQuoteOuter from './components/activeQuoteJob/activeQuoteOuter';\n\nimport menu from '../../assets/images/menu-line-blue.png';\nimport close from '../../assets/images/ic-cancel-blue.png';\nimport templateImage from '../../assets/images/job-complete-bg.png';\nimport tickIcon from '../../assets/images/tick.svg';\ninterface Proptypes {\n  loading: boolean,\n  getActiveJobList: (page: number) => void;\n  activeJobList: Array<any>;\n  getAppliedJobList: (page: number) => void;\n  appliedJobList: Array<any>;\n  getPastJobList: (page: number) => void;\n  pastJobList: Array<any>;\n  getNewJobList: (page: number) => void;\n  newJobList: Array<any>;\n  getApprovedMilestoneList: (page: number) => void;\n  approvedMilestoneList: Array<any>;\n  getMilestoneList: (jobId: string) => void;\n  milestoneList: any;\n  milestonesCount: number;\n  newJobsCount?: number;\n  addBankDetails: (data: any) => void;\n  updateBankDetails: (data: any) => void;\n  getBankDetails: () => void;\n  removeBankDetails: () => void;\n  markMilestoneComplete: (data: any, callback: (jobCompletedCount: number) => void) => void;\n  bankDetails: any;\n  resetActiveJobList: () => void;\n  resetAppliedJobList: () => void;\n  resetPastJobList: () => void;\n  resetNewJobList: () => void;\n  resetApprovedMilestoneList: () => void;\n}\n\nconst JobDashboard = ({\n  loading,\n  getActiveJobList,\n  activeJobList,\n  getAppliedJobList,\n  appliedJobList,\n  getPastJobList,\n  pastJobList,\n  getNewJobList,\n  newJobList,\n  getApprovedMilestoneList,\n  approvedMilestoneList,\n  getMilestoneList,\n  milestoneList,\n  milestonesCount,\n  newJobsCount,\n  addBankDetails,\n  updateBankDetails,\n  getBankDetails,\n  removeBankDetails,\n  markMilestoneComplete,\n  bankDetails,\n  resetActiveJobList,\n  resetAppliedJobList,\n  resetPastJobList,\n  resetNewJobList,\n  resetApprovedMilestoneList,\n}: Proptypes) => {\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  let params: any = new URLSearchParams(history.location?.search);\n  params = {\n    jobId: params.get('jobId'),\n    tradeId: params.get('tradeId'),\n    specializationId: params.get('specializationId'),\n  };\n\n  const [openSidebar, setOpenSidebar] = useState(false);\n  const [milestoneComplete, setMilestoneComplete] = useState(false);\n  const [jobComplete, setJobComplete] = useState<boolean | number>(false);\n\n  const jobCompleteCount = jobComplete && `${jobComplete}${`${jobComplete}`.endsWith('1') ? 'st' : `${jobComplete}`.endsWith('2') ? 'nd' : `${jobComplete}`.endsWith('3') ? 'rd' : 'th'}`;\n\n  return milestoneComplete ? (\n    <div className=\"img_text_wrap\">\n      <figure className=\"full_image\">\n        <img src={templateImage} alt=\"template-image\" />\n        <div className=\"short_info\">\n          <div className=\"content\">\n            <h1 className=\"title\">Milestone is completed!</h1>\n            <span className=\"show_label\">\n              Nice one! The builder will review any required photos and approve\n              your milestone shortly.\n            </span>\n            <img className=\"tick_img\" src={tickIcon} />\n            <div className=\"btn_wrapr\">\n              <button\n                className=\"fill_btn btn-effect\"\n                onClick={() => {\n                  history.push(\n                    `/mark-milestone?jobId=${params.jobId}&redirect_from=jobs`\n                  );\n                  setMilestoneComplete(false);\n                }}\n              >\n                OK\n              </button>\n            </div>\n          </div>\n        </div>\n      </figure>\n    </div>\n  ) : !!jobComplete ? (\n    <div className=\"img_text_wrap\">\n      <figure className=\"full_image\">\n        <img src={templateImage} alt=\"template-image\" />\n        <div className=\"short_info\">\n          <div className=\"content\">\n            <h1 className=\"title\">Your {jobCompleteCount} job is completed!</h1>\n            <span className=\"show_label\">\n              You have completed your {jobCompleteCount} Job using Tickt! Click\n              here to view your completed jobs or leave a review. You will be\n              paid as soon as the builder signs off.\n            </span>\n            {/* <img className=\"tick_img\" src={tickIcon} /> */}\n            <div className=\"btn_wrapr\">\n              <button\n                className=\"fill_btn btn-effect\"\n                onClick={() => {\n                  history.push(\n                    `/mark-milestone?jobId=${params.jobId}&redirect_from=jobs`\n                  );\n                  setJobComplete(false);\n                }}\n              >\n                OK\n              </button>\n              <button\n                className=\"fill_btn white_btn\"\n                onClick={() => {\n                  history.push(\"/past-jobs\");\n                  setJobComplete(false);\n                }}\n              >\n                See completed jobs\n              </button>\n            </div>\n          </div>\n        </div>\n      </figure>\n    </div>\n  ) : (\n    <div className=\"app_wrapper\">\n      <div className=\"custom_container\">\n        <span\n          className=\"mob_side_nav\"\n          onClick={() => setOpenSidebar(!openSidebar)}\n        >\n          <img src={menu} alt=\"mob-side-nav\" />\n        </span>\n        <div className=\"f_row h-100\">\n          <div className={`side_nav_col${openSidebar ? \" active\" : \"\"}`}>\n            <button className=\"close_nav\" onClick={() => setOpenSidebar(false)}>\n              <img src={close} alt=\"close\" />\n            </button>\n            <div className=\"stick\">\n              <span className=\"title\">Job Dashboard</span>\n              <ul className=\"dashboard_menu\">\n                <li>\n                  <NavLink\n                    className=\"icon star\"\n                    to=\"/active-jobs\"\n                    isActive={() =>\n                      [\n                        \"/active-jobs\",\n                        \"/mark-milestone\",\n                        \"/active-quote-job\",\n                      ].includes(pathname)\n                    }\n                  >\n                    <span className=\"menu_txt\">Active</span>\n                  </NavLink>\n                </li>\n                <li>\n                  <NavLink\n                    className=\"icon applied\"\n                    to=\"/applied-jobs\"\n                    isActive={() =>\n                      [\"/applied-jobs\", \"/quote-job\"].includes(pathname)\n                    }\n                  >\n                    <span className=\"menu_txt\">Applied</span>\n                  </NavLink>\n                </li>\n                <li>\n                  <NavLink className=\"icon past\" to=\"/past-jobs\">\n                    <span className=\"menu_txt\">Past</span>\n                  </NavLink>\n                </li>\n                {/* <hr></hr> */}\n                <li>\n                  <NavLink className=\"icon new\" to=\"/new-jobs\">\n                    <span className=\"menu_txt\">\n                      New\n                      {!!newJobsCount && (\n                        <span className=\"badge_count\">\n                          {newJobsCount > 9 ? \"9+\" : newJobsCount}\n                        </span>\n                      )}\n                    </span>\n                  </NavLink>\n                </li>\n                <li>\n                  <NavLink className=\"icon approved\" to=\"/approved-milestones\">\n                    <span className=\"menu_txt\">\n                      Approved Milestones\n                      {!!milestonesCount && (\n                        <span className=\"badge_count\">\n                          {milestonesCount > 9 ? \"9+\" : milestonesCount}\n                        </span>\n                      )}\n                    </span>\n                  </NavLink>\n                </li>\n              </ul>\n            </div>\n          </div>\n          {/* <div className=\"detail_col\"> */}\n          <>\n            <Switch>\n              <Route\n                path=\"/active-jobs\"\n                render={(props) => (\n                  <ActiveJobsPage\n                    {...props}\n                    key={props.location.key}\n                    loading={loading}\n                    getActiveJobList={getActiveJobList}\n                    resetActiveJobList={resetActiveJobList}\n                    activeJobList={activeJobList}\n                  />\n                )}\n              />\n              <Route\n                path=\"/applied-jobs\"\n                render={(props) => (\n                  <AppliedJobsPage\n                    {...props}\n                    key={props.location.key}\n                    loading={loading}\n                    appliedJobList={appliedJobList}\n                    getAppliedJobList={getAppliedJobList}\n                    resetAppliedJobList={resetAppliedJobList}\n                  />\n                )}\n              />\n              <Route\n                path=\"/past-jobs\"\n                render={(props) => (\n                  <PastJobsPage\n                    {...props}\n                    key={props.location.key}\n                    loading={loading}\n                    pastJobList={pastJobList}\n                    getPastJobList={getPastJobList}\n                    resetPastJobList={resetPastJobList}\n                  />\n                )}\n              />\n              <Route\n                path=\"/new-jobs\"\n                render={(props) => (\n                  <NewJobsPage\n                    {...props}\n                    key={props.location.key}\n                    loading={loading}\n                    newJobList={newJobList}\n                    getNewJobList={getNewJobList}\n                    resetNewJobList={resetNewJobList}\n                  />\n                )}\n              />\n              <Route\n                path=\"/approved-milestones\"\n                render={(props) => (\n                  <ApprovedMilestonesPage\n                    {...props}\n                    key={props.location.key}\n                    loading={loading}\n                    approvedMilestoneList={approvedMilestoneList}\n                    getApprovedMilestoneList={getApprovedMilestoneList}\n                    resetApprovedMilestoneList={resetApprovedMilestoneList}\n                  />\n                )}\n              />\n              <Route\n                path=\"/mark-milestone\"\n                render={(props) => (\n                  <MarkMilestonePage\n                    getMilestoneList={getMilestoneList}\n                    milestoneList={milestoneList}\n                    showMilestoneCompletePage={() => setMilestoneComplete(true)}\n                    showJobCompletePage={(jobCompletedCount) =>\n                      setJobComplete(jobCompletedCount)\n                    }\n                    getBankDetails={getBankDetails}\n                    addBankDetails={addBankDetails}\n                    updateBankDetails={updateBankDetails}\n                    removeBankDetails={removeBankDetails}\n                    markMilestoneComplete={markMilestoneComplete}\n                    bankDetails={bankDetails}\n                    {...props}\n                  />\n                )}\n              />\n              <Route\n                path=\"/quote-job\"\n                render={(props) => <QuoteOuter {...props} />}\n              />\n              <Route\n                path=\"/active-quote-job\"\n                render={(props) => <ActiveQuoteOuter {...props} />}\n              />\n              <Route\n                path=\"/review-builder\"\n                render={(props) => (\n                  <ReviewBuilder {...props} history={history} />\n                )}\n              />\n            </Switch>\n          </>\n          {/* </div> */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default JobDashboard;\n","/home/appinventiv/Documents/Project/tickt/web/src/common/tradieBannerSearch/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/searchResultFilters/index.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/chat/chat.tsx",["1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106"],"import React, { useState, useEffect } from \"react\";\n\nimport dummy from \"../../assets/images/u_placeholder.jpg\";\nimport chatSearch from \"../../assets/images/search-chat.png\";\nimport menu from \"../../assets/images/menu-line-blue.png\";\nimport close from \"../../assets/images/ic-cancel-blue.png\";\n\nimport { setLoading } from \"../../redux/common/actions\";\nimport { formatDateTime } from \"../../utils/common\";\nimport noData from \"../../assets/images/no-search-data.png\";\nimport emptyChat from \"../../assets/images/emptyChat.png\";\n\nimport {\n  auth,\n  createRoom,\n  checkRoomExist,\n  getFirebaseInboxData,\n  stopListeningOfRoom,\n  resetUnreadCounter,\n} from \"../../services/firebase\";\n\nimport UserMessages from \"./userMessages\";\n\ninterface PropTypes {\n  builderProfile: any;\n  tradieProfileData: any;\n  isLoading: boolean;\n  history: any;\n}\n\nlet selectedRoomID = \"\";\nlet isFreshChatRoute: boolean = false;\n\nconst Chat = (props: PropTypes) => {\n  const [initializing, setInitializing] = useState<boolean>(true);\n  // firebase authenticated user details\n  const [user, setUser] = useState<any>(() => auth.currentUser);\n  const [inBoxData, setInBoxData] = useState<any>([]);\n  const [filterInBoxData, setFilterInBoxData] = useState<any>([]);\n  const [isNoRecords, setIsNoRecords] = useState<boolean>(false);\n  const [roomData, setRoomData] = useState<any>({});\n  const [roomId, setRoomId] = useState<string>(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchActive, setSearchActive] = useState(false);\n  const [isInitialLoader, setIsInitialLoader] = useState(true);\n  const [isMobInbox, setIsMobInbox] = useState<boolean>(false);\n\n  const { tradieId, builderId, jobName, jobId } = props.history?.location?.state\n    ? props.history?.location?.state\n    : { tradieId: \"\", builderId: \"\", jobName: \"\", jobId: \"\" };\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      if (tradieId && builderId && jobName && jobId) {\n        await setInitialItems();\n      } else {\n        isFreshChatRoute = true;\n      }\n      await getFirebaseInboxData(onUpdateofInbox);\n    })();\n\n    return () => {\n      stopListeningOfRoom(selectedRoomID);\n      selectedRoomID = \"\";\n    };\n  }, []);\n\n  const setInitialItems = async () => {\n    const roomID: string = `${jobId}_${tradieId}_${builderId}`;\n    selectedRoomID = roomID;\n    if (await checkRoomExist(roomID)) {\n      return;\n    } else {\n      await createRoom(jobId, tradieId, builderId, jobName);\n    }\n  };\n\n  const onUpdateofInbox = async (res: any) => {\n    let selectedRoomInfo: any = \"\";\n    const sortedRes = res.filter((item: any, index: number) => {\n      if (item.hasOwnProperty(\"lastMsg\") || item.roomId === selectedRoomID) {\n        if (item.roomId === selectedRoomID && !isFreshChatRoute) {\n          selectedRoomInfo = item;\n        } else {\n          return item;\n        }\n      }\n    });\n\n    sortedRes?.sort(function (x: any, y: any) {\n      return y.lastMsg?.messageTimestamp - x.lastMsg?.messageTimestamp;\n    });\n\n    if (sortedRes.length === 0 && !selectedRoomInfo) {\n      setIsNoRecords(true);\n      if (isInitialLoader) {\n        setIsInitialLoader(false);\n        setLoading(false);\n      }\n      return;\n    }\n    setIsNoRecords(false);\n\n    let ress: any;\n    if (selectedRoomInfo) {\n      ress = [...sortedRes];\n      ress.unshift(selectedRoomInfo);\n    }\n    const newRes = Array.isArray(ress) && selectedRoomInfo ? ress : sortedRes;\n    setInBoxData(newRes.length === 0 ? [{ firstKey: \"emptyRes\" }] : newRes);\n    if (newRes.length > 0 && selectedRoomID === \"\") {\n      selectedRoomID = newRes[0].roomId;\n      setRoomId(newRes[0].roomId);\n      if (newRes[0] && newRes[0]?.unreadMessages > 0) {\n        newRes[0].unreadMessages = 0;\n        resetUnreadCounter(newRes[0].roomId);\n      }\n      setRoomData(newRes[0]);\n      return;\n    }\n\n    if (newRes.length > 0) {\n      let itemObj = newRes.find((x: any) => x.roomId == selectedRoomID);\n\n      if (itemObj && itemObj?.unreadMessages > 0) {\n        itemObj.unreadMessages = 0;\n        resetUnreadCounter(itemObj.roomId);\n      }\n      setRoomData(itemObj);\n    }\n  };\n\n  useEffect(() => {\n    let unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user);\n        setIsMobInbox(false);\n      } else {\n        setUser(false);\n        setIsMobInbox(true);\n        setLoading(false);\n        setIsInitialLoader(false);\n      }\n      if (initializing) {\n        setInitializing(false);\n      }\n    });\n\n    return unsubscribe;\n  }, [initializing]);\n\n\n  const getRoomDetails = async (item: any) => {\n    stopListeningOfRoom(selectedRoomID);\n    selectedRoomID = item.roomId;\n    setRoomId(item.roomId);\n    setRoomData(item);\n    resetUnreadCounter(item.roomId);\n  };\n\n  useEffect(() => {\n    if (searchQuery) {\n      let filteredVal = inBoxData.filter((item: any) =>\n        item.oppUserInfo?.name\n          ?.toLowerCase()\n          ?.includes(searchQuery.toLowerCase())\n      );\n      setFilterInBoxData(filteredVal);\n    }\n    if (\n      (inBoxData.length || inBoxData[0]?.[\"firstKey\"] === \"emptyRes\") &&\n      isInitialLoader\n    ) {\n      if (inBoxData[0]?.[\"firstKey\"] === \"emptyRes\") setInBoxData([]);\n      setLoading(false);\n      setIsInitialLoader(false);\n    }\n  }, [searchQuery, inBoxData]);\n\n  return (\n    <div className=\"app_wrapper\">\n      <div className=\"custom_container\">\n        <span className=\"mob_side_nav\" onClick={() => setIsMobInbox(true)}>\n          <img src={menu} alt=\"mob-side-nav\" />\n        </span>\n        <div className=\"f_row chat_wrapr h-100\">\n          <div className={`side_nav_col ${isMobInbox ? \"active\" : \"\"}`}>\n            <button className=\"close_nav\" onClick={() => setIsMobInbox(false)}>\n              <img src={close} alt=\"close\" />\n            </button>\n            <div className=\"stick\">\n              <span className=\"title\" style={{ marginLeft: \"50px\" }}>\n                Chat\n              </span>\n\n              <div\n                className={`search_bar ${searchActive ? \"active\" : \"\"}`}\n                onClick={() => {\n                  setSearchActive(true);\n                }}\n              >\n                <input\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  value={searchQuery}\n                  onChange={(e: any) =>\n                    setSearchQuery(e.target.value.trimLeft())\n                  }\n                />\n                <span className=\"detect_icon_ltr\">\n                  <img src={chatSearch} alt=\"search\" />\n                </span>\n              </div>\n              <ul className=\"chat_list\">\n                {searchQuery ? (\n                  filterInBoxData.length === 0 ? (\n                    <li>\n                      <a href=\"javascript:void(0)\" className=\"chat\">\n                        <div className=\"detail\">\n                          <span className=\"inner_title line-1\">\n                            No Record Found\n                          </span>\n                        </div>\n                      </a>\n                    </li>\n                  ) : (\n                    filterInBoxData.map((item: any) => {\n                      return (\n                        <li\n                          onClick={() => {\n                            getRoomDetails(item);\n                          }}\n                        >\n                          <a\n                            href=\"javascript:void(0)\"\n                            className={`chat ${\n                              selectedRoomID === item.roomId ? \"active\" : \"\"\n                            }`}\n                          >\n                            <figure className=\"u_img\">\n                              <img\n                                src={item.oppUserInfo?.image || dummy}\n                                alt=\"img\"\n                                onError={(e: any) => {\n                                  if (e?.target?.onerror) {\n                                    e.target.onerror = null;\n                                  }\n                                  if (e?.target?.src) {\n                                    e.target.src = dummy;\n                                  }\n                                }}\n                              />\n                            </figure>\n                            <div className=\"detail\">\n                              <span className=\"inner_title line-1\">\n                                {item.oppUserInfo?.name}\n                              </span>\n                              <span className=\"inner_title job line-1\">\n                                {item.jobName}\n                              </span>\n                              <p className=\"commn_para line-1\">\n                                {item.lastMsg?.messageText}\n                              </p>\n                              {item.lastMsg?.messageTimestamp && (\n                                <span className=\"date_time\">\n                                  {formatDateTime(\n                                    item.lastMsg?.messageTimestamp,\n                                    \"inboxTime\"\n                                  )}\n                                </span>\n                              )}\n\n                              {selectedRoomID ===\n                              item.roomId ? null : item.unreadMessages ===\n                                0 ? null : (\n                                <span className=\"count\">\n                                  {item.unreadMessages}\n                                </span>\n                              )}\n                            </div>\n                          </a>\n                        </li>\n                      );\n                    })\n                  )\n                ) : inBoxData?.length > 0 ? (\n                  inBoxData.map((item: any) => {\n                    return (\n                      <li\n                        onClick={() => {\n                          getRoomDetails(item);\n                        }}\n                      >\n                        <a\n                          href=\"javascript:void(0)\"\n                          className={`chat ${\n                            selectedRoomID === item.roomId ? \"active\" : \"\"\n                          }`}\n                        >\n                          <figure className=\"u_img\">\n                            <img\n                              src={item.oppUserInfo?.image || dummy}\n                              alt=\"img\"\n                              onError={(e: any) => {\n                                if (e?.target?.onerror) {\n                                  e.target.onerror = null;\n                                }\n                                if (e?.target?.src) {\n                                  e.target.src = dummy;\n                                }\n                              }}\n                            />\n                          </figure>\n                          <div className=\"detail\">\n                            <span className=\"inner_title line-1\">\n                              {item.oppUserInfo?.name}\n                            </span>\n                            <span className=\"inner_title job line-1\">\n                              {item.jobName}\n                            </span>\n                            <p className=\"commn_para line-1\">\n                              {item.lastMsg?.messageType === \"text\" ? (\n                                item.lastMsg?.messageText\n                              ) : item.lastMsg?.messageType === \"image\" ? (\n                                <i style={{ color: \"#929292\" }}>Photo</i>\n                              ) : item.lastMsg?.messageType === \"video\" ? (\n                                <i style={{ color: \"#929292\" }}>Video</i>\n                              ) : (\n                                \"\"\n                              )}\n                            </p>\n                            {item.lastMsg?.messageTimestamp && (\n                              <span className=\"date_time\">\n                                {formatDateTime(\n                                  item.lastMsg?.messageTimestamp,\n                                  \"inboxTime\"\n                                )}\n                              </span>\n                            )}\n                            {selectedRoomID ===\n                            item.roomId ? null : item.unreadMessages ===\n                              0 ? null : (\n                              <span className=\"count\">\n                                {item.unreadMessages}\n                              </span>\n                            )}\n                          </div>\n                        </a>\n                      </li>\n                    );\n                  })\n                ) : props.isLoading ? null : (\n                  <li>\n                    <a href=\"javascript:void(0)\" className=\"chat\">\n                      <div className=\"detail\">\n                        <span className=\"inner_title line-1\">\n                          No Record Found\n                        </span>\n                      </div>\n\n                      {/* <div className=\"detail\">\n                        <span className=\"no_record\">\n                          <figure>\n                            <figure className=\"no_img\">\n                              <img src={emptyChat} alt=\"data not found\" />\n                            </figure>\n                          </figure>\n\n                          <span className=\"empty_screen_text\">\n                            You don't have any chat messages yet.\n                          </span>\n                          <span className=\"empty_screen_subtext\">\n                            Connect to your local network\n                          </span>\n                          <button\n                            className=\"empty_screen_button\"\n                            onClick={() => props.history.push(\"/\")}\n                          >\n                            View Recommended tradespeople\n                          </button>\n                        </span>\n                      </div> */}\n                    </a>\n                  </li>\n                )}\n              </ul>\n            </div>\n          </div>\n          {/* {(isInitialLoader || inBoxData?.length === 0) ? null : */}\n          {isInitialLoader ? null : !isInitialLoader &&\n            inBoxData?.length === 0 ? (\n            <div className=\"detail_col\">\n              <div className=\"flex_row tradies_row\">\n                <div className=\"no_record\">\n                  <figure className=\"no_img\">\n                    <img src={noData} alt=\"data not found\" />\n                  </figure>\n                  <span>No Data Found</span>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <UserMessages\n              roomId={selectedRoomID}\n              roomData={roomData}\n              isNoRecords={isNoRecords}\n              history={props.history}\n              isLoading={props.isLoading}\n              inBoxData={inBoxData}\n              setInBoxData={setInBoxData}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieSearchJobResult/renderMap.tsx",["1107","1108","1109","1110","1111","1112","1113"],"import { useState, useCallback, useRef } from \"react\";\n// @ts-ignore\nimport { GoogleMap, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport mapStyles from \"./mapStyles\";\n\nimport jobIconDemo from \"../../assets/images/jobicon.png\";\n\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"100vh\",\n};\n\nconst options: any = {\n  styles: mapStyles[0],\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nconst RenderMap = (props: any) => {\n  const [center, setCenter] = useState<any>(\"\");\n  const [markers, setMarkers] = useState<Array<any>>([]);\n  const [selected, setSelected] = useState<any>(null);\n  const mapRef = useRef(null);\n\n  const setMapCenter = () => {\n    var mapCenterCoordinates;\n    const jobResultsParam = new URLSearchParams(props.location?.search).get(\n      \"jobResults\"\n    );\n    if (props.searchByFilter) {\n      mapCenterCoordinates = props.homeSearchJobData?.slice(0, 1);\n    } else if (jobResultsParam == \"viewNearByJob\") {\n      mapCenterCoordinates = props.viewNearByJobData?.slice(0, 1);\n    } else {\n      mapCenterCoordinates = props.homeSearchJobData?.slice(0, 1);\n    }\n    console.log(mapCenterCoordinates, \"mapCenterCoordinates\");\n    const newCenter = {\n      lat:\n        mapCenterCoordinates?.length > 0\n          ? mapCenterCoordinates[0]?.location?.coordinates[1]\n          : -37.8136, //lat\n      lng:\n        mapCenterCoordinates?.length > 0\n          ? mapCenterCoordinates[0]?.location?.coordinates[0]\n          : 144.9631, //lng\n    };\n    if (JSON.stringify(center) == JSON.stringify(newCenter)) {\n      return;\n    } else {\n      setCenter(newCenter);\n    }\n  };\n\n  console.log(props, \"props renderMap\", mapRef, \"mapRef\");\n\n  const renderJobsData = () => {\n    setMapCenter();\n    var jobsData;\n    const jobResultsParam = new URLSearchParams(props.location?.search).get(\n      \"jobResults\"\n    );\n    if (props.searchByFilter) {\n      jobsData = props.homeSearchJobData;\n      return jobsData;\n    }\n    if (jobResultsParam == \"viewNearByJob\") {\n      jobsData = props.viewNearByJobData;\n      return jobsData;\n    } else {\n      jobsData = props.homeSearchJobData;\n      return jobsData;\n    }\n  };\n\n  const jobClickHandler = (item: any) => {\n    props.history.push(\n      `/job-details-page?jobId=${item.jobId}&tradeId=${item.tradeId}&specializationId=${item.specializationId}`\n    );\n  };\n\n  const onMapClick = useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const onMapLoad = useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const onUnmount = useCallback(function callback(map) {\n    mapRef.current = null;\n  }, []);\n\n  return (\n    <GoogleMap\n      mapContainerStyle={mapContainerStyle}\n      zoom={13}\n      center={center}\n      options={options}\n      // onClick={onMapClick}\n      onLoad={onMapLoad}\n      onUnmount={onUnmount}\n    >\n      {renderJobsData()?.map((item: any) => (\n        <Marker\n          key={item.jobId}\n          position={{\n            lat: item.location?.coordinates[1],\n            lng: item.location?.coordinates[0],\n          }}\n          icon={{\n            url: jobIconDemo,\n            scaledSize: new window.google.maps.Size(45, 45),\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(20, 20),\n          }}\n          onClick={() => {\n            const lat = item.location.coordinates[1];\n            const lng = item.location.coordinates[0];\n            setSelected(item);\n          }}\n        />\n      ))}\n      {selected ? (\n        <InfoWindow\n          position={{\n            lat: selected.location.coordinates[1],\n            lng: selected.location.coordinates[0],\n          }}\n          onCloseClick={() => setSelected(null)}\n        >\n          <div className=\"preview_card\">\n            <div className=\"tradie_card\">\n              <a\n                href=\"javascript:void(0)\"\n                className=\"more_detail circle\"\n                onClick={() => jobClickHandler(selected)}\n              ></a>\n              <div className=\"user_wrap\">\n                <figure className=\"u_img\">\n                  <img\n                    src={\n                      selected.tradeSelectedUrl ? selected.tradeSelectedUrl : \"\"\n                    }\n                    alt=\"tradie-img\"\n                  />\n                </figure>\n                <div className=\"details\">\n                  <span className=\"name\">{selected.tradeName}</span>\n                  <span className=\"prof\">{selected.jobName}</span>\n                </div>\n              </div>\n              <div className=\"job_info\">\n                <ul>\n                  <li className=\"icon clock\">{selected.time}</li>\n                  <li className=\"icon dollar\">{selected.amount}</li>\n                  <li className=\"icon location line-1\">\n                    {selected.locationName}\n                  </li>\n                  <li className=\"icon calendar\">{selected.durations}</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </InfoWindow>\n      ) : null}\n    </GoogleMap>\n  );\n};\n\nexport default RenderMap;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/builderHome.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/tradieHome.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/openJobs.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/newApplicants.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/activeJobs.tsx",["1114"],"import React, { useState, useEffect } from \"react\";\nimport approved from \"../../../assets/images/approved.png\";\nimport waiting from \"../../../assets/images/exclamation.png\";\nimport MarkMilestones from \"./markMilestones\";\nimport { withRouter } from \"react-router-dom\";\nimport activeJobs from \"../../../assets/images/activeJobs.png\";\nimport jobTypePlaceholder from \"../../../assets/images/job-type-placeholder.png\";\nimport { renderTime } from \"../../../utils/common\";\nimport noDataFound from \"../../../assets/images/no-search-data.png\";\ninterface Active {\n  amount: any;\n  durations: any;\n  jobId: any;\n  jobName: any;\n  fromDate: any;\n  toDate: any;\n  milestoneNumber: any;\n  specializationId: any;\n  specializationName: any;\n  status: any;\n  timeLeft: any;\n  locationName: any;\n  total: any;\n  quote: any;\n  totalmem: any;\n  totalMilestones: any;\n  tradieListData: any;\n  tradeName: any;\n  location: any;\n  tradieId: any;\n  tradieImage: any;\n  tradeSelectedUrl: any;\n  activeType: any;\n  setJobLabel: (item: any) => void;\n  enableEditMilestone: boolean;\n  enableLodgeDispute: boolean;\n  enableCancelJob: boolean;\n  globalJobId: string;\n  mathrandom?: any;\n  setToggleActiveToFalse: any;\n  toggleClearActiveChecks: () => void;\n}\n\nconst ActiveJobs = ({\n  setJobLabel,\n  activeType,\n  history,\n  dataItems,\n  jobType,\n  isLoading,\n  enableEditMilestone,\n  enableLodgeDispute,\n  enableMakMilestone,\n  enableCancelJob,\n  globalJobId,\n  setToggleActiveToFalse,\n  toggleClearActiveChecks,\n  recallHeaderNotification,\n}: any) => {\n  let listData: any = dataItems;\n  const [selectedIndex, setSelectedIndex] = useState<any>(null);\n  const [localState, setLocalState] = useState(false);\n\n  const resetStateLocal = (isTrue: boolean) => {\n    setJobLabel(activeType);\n    setLocalState(false);\n    if (isTrue) {\n      history.push(\"/decline-milestone-success\");\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"here!\");\n  }, [jobType]);\n\n  useEffect(() => {\n    if (toggleClearActiveChecks === true) {\n      setSelectedIndex(null);\n      setLocalState(false);\n      setToggleActiveToFalse();\n    }\n  }, [toggleClearActiveChecks]);\n\n  useEffect(() => {\n    let filteredItem: any = {};\n    listData.forEach((item_: any, index: any) => {\n      if (item_.jobId === globalJobId) {\n        filteredItem = {\n          ...item_,\n          index,\n        };\n      }\n    });\n\n    if (Object.keys(filteredItem)?.length) {\n      setSelectedIndex(filteredItem?.index);\n      setLocalState(true);\n    }\n  }, [\n    enableEditMilestone,\n    enableLodgeDispute,\n    enableCancelJob,\n    enableMakMilestone,\n  ]);\n\n  if (localState && selectedIndex !== null) {\n    console.log({ localState, selectedIndex, listData });\n    return (\n      <MarkMilestones\n        resetStateLocal={resetStateLocal}\n        selectedIndex={selectedIndex}\n        listData={listData}\n        enableEditMilestone={enableEditMilestone}\n        enableLodgeDispute={enableLodgeDispute}\n        enableCancelJob={enableCancelJob}\n        recallHeaderNotification={recallHeaderNotification}\n      />\n    );\n  }\n\n  if (isLoading || listData == undefined) {\n    return null;\n  }\n\n  console.log({ listData, isLoading });\n  return (\n    <React.Fragment>\n      <span className=\"sub_title\">\n        {jobType.charAt(0).toUpperCase() + jobType.slice(1)} Jobs\n      </span>\n      <div className=\"flex_row tradies_row\">\n        {listData?.length\n          ? listData.map(\n              (\n                {\n                  amount,\n                  jobId,\n                  jobName,\n                  fromDate,\n                  toDate,\n                  milestoneNumber,\n                  status,\n                  timeLeft,\n                  total,\n                  quote,\n                  totalMilestones,\n                  tradeName,\n                  tradeSelectedUrl,\n                }: Active,\n                index: number\n              ) => (\n                <div className=\"flex_col_sm_6\">\n                  <div\n                    className=\"tradie_card\"\n                    data-aos=\"fade-in\"\n                    data-aos-delay=\"250\"\n                    data-aos-duration=\"1000\"\n                  >\n                    <span\n                      className=\"more_detail circle\"\n                      onClick={() => {\n                        setLocalState(true);\n                        setSelectedIndex(index);\n                      }}\n                    ></span>\n                    <div className=\"user_wrap\">\n                      <figure className=\"u_img icon\">\n                        <img\n                          src={tradeSelectedUrl || jobTypePlaceholder}\n                          onError={(e: any) => {\n                            if (e?.target?.onerror) {\n                              e.target.onerror = null;\n                            }\n                            if (e?.target?.src) {\n                              e.target.src = jobTypePlaceholder;\n                            }\n                          }}\n                          alt=\"traide-img\"\n                        />\n                      </figure>\n                      <div className=\"details\">\n                        <span className=\"name\">{tradeName}</span>\n                        <p className=\"commn_para\">{jobName}</p>\n                      </div>\n                    </div>\n                    <div className=\"job_info\">\n                      <ul>\n                        <li className=\"icon dollar\">{amount}</li>\n                        <li className=\"\">\n                          {total.toUpperCase() == \"VIEW QUOTE\" ? (\n                            <span\n                              className=\"view_quote\"\n                              onClick={() => {\n                                let quoteId = null;\n                                if (quote && quote[0] && quote[0]._id) {\n                                  quoteId = quote[0]._id;\n                                  history.push(\n                                    `/jobs?active=active&viewQuotes=true&jobId=${jobId}&id=${quoteId}`\n                                  );\n                                  setJobLabel(\"quotes\");\n                                }\n                              }}\n                            >\n                              {total}\n                            </span>\n                          ) : (\n                            <span>{total}</span>\n                          )}\n                        </li>\n                        <li className=\"icon calendar\">\n                          {/* {durations} */}\n                          {renderTime(fromDate, toDate)}\n                        </li>\n                        <li className=\"\">\n                          <span>{timeLeft}</span>\n                        </li>\n                      </ul>\n                    </div>\n                    <div className=\"job_progress_wrap\" id=\"scroll-progress-bar\">\n                      <div className=\"progress_wrapper\">\n                        <span className=\"completed-digit\" id=\"digit-progress\">\n                          <b>{`Job Milestones ${milestoneNumber} `}</b>\n                          {`of ${totalMilestones}`}\n                        </span>\n                        <span className=\"approval_info\">\n                          {status.toUpperCase() === \"APPROVED\" && (\n                            <img src={approved} alt=\"icon\" />\n                          )}\n                          {[\n                            \"QUOTE REQUEST ACCEPTED\",\n                            \"QUOTE ACCEPTED\",\n                          ].includes(status.toUpperCase()) && (\n                            <img src={approved} alt=\"icon\" />\n                          )}\n                          {(status.toUpperCase() === \"NEEDS APPROVAL\" ||\n                            status.toUpperCase() === \"NEED APPROVAL\") && (\n                            <img src={waiting} alt=\"icon\" />\n                          )}\n                          {status}\n                        </span>\n                        <span className=\"progress_bar\">\n                          <input\n                            className=\"done_progress\"\n                            id=\"progress-bar\"\n                            type=\"range\"\n                            min=\"0\"\n                            value={(milestoneNumber / totalMilestones) * 100}\n                          />\n                        </span>\n                      </div>\n                      {(status === \"NEEDS APPROVAL\" ||\n                        status === \"NEED APPROVAL\" ||\n                        status === \"need approval\") && (\n                        <button\n                          onClick={() => {\n                            setLocalState(true);\n                            setSelectedIndex(index);\n                          }}\n                          className=\"fill_grey_btn full_btn btn-effect\"\n                        >\n                          {\"Approve\"}\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )\n            )\n          : !isLoading && (\n              <div className=\"no_record  m-t-vh\">\n                <figure className=\"no_img\">\n                  <img src={noDataFound} alt=\"data not found\" />\n                </figure>\n                <span>{\"No Data Found\"}</span>\n              </div>\n\n              // <div className=\"no_record  m-t-vh\">\n              //   <figure>\n              //     <figure className=\"no_img\">\n              //       <img src={activeJobs} alt=\"data not found\" />\n              //     </figure>\n              //   </figure>\n\n              //   <span className=\"empty_screen_text\">\n              //     You don't have any active job yet\n              //   </span>\n              //   <button\n              //     className=\"empty_screen_button\"\n              //     onClick={() => history.push(\"/post-new-job\")}\n              //   >\n              //     Post a job\n              //   </button>\n              // </div>\n            )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(ActiveJobs);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/pastJobs.tsx",["1115"],"import React, {  useState, useEffect } from \"react\";\nimport rateStar from \"../../../assets/images/ic-star-fill.png\";\nimport pastJobs from \"../../../assets/images/pastJobs.png\";\nimport jobTypePlaceholder from \"../../../assets/images/job-type-placeholder.png\";\nimport noDataFound from \"../../../assets/images/no-search-data.png\";\nimport RateThisJob from \"./ratethisJob/index\";\n\nimport { useLocation } from \"react-router-dom\";\n\nimport { renderTime } from \"../../../utils/common\";\ninterface Post {\n  amount: any;\n  fromDate: any;\n  jobData: any;\n  jobId: any;\n  isRated: any;\n  jobName: any;\n  locationName: any;\n  milestoneNumber: any;\n  specializationId: any;\n  specializationName: any;\n  status: any;\n  toDate: any;\n  totalMilestones: any;\n  isPublishedAgain: boolean;\n  tradeId: any;\n  tradieId: any;\n  tradeName: any;\n  tradeSelectedUrl: any;\n  isLoading: any;\n  tradieData: any;\n}\n\nconst PastJobs = (props: any) => {\n  const { dataItems, jobType, isLoading } = props;\n  let listData: any = dataItems;\n  const [enableRateJob, setRateJob] = useState({ data: {}, isTrue: false }); // toggle-rate-job\n  let [isEnable, setEnable] = useState<any>(false);\n\n  const location = useLocation();\n\n  const redirectToInfo = ({ jobId, status }: any) => {\n    if (jobId?.length && status?.length) {\n      let urlEncode: any = `?jobId=${jobId}&status=${status}&job=past&activeType=${props?.activeType}`;\n      props.history.push(`/job-detail?${urlEncode}`);\n    }\n  };\n\n  const backToScreen = () => {\n    props.history.replace(\"/jobs?active=past\");\n    setRateJob((prev: any) => ({\n      data: {},\n      isTrue: !prev.isTrue,\n    }));\n  };\n\n  useEffect(() => {\n    const urlSearchParams = new URLSearchParams(location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n\n    if (params?.jobId) {\n      let jobId_ = params?.jobId;\n      if (listData?.length) {\n        let result = listData.find((item: any) => item?.jobId === jobId_);\n        if (result) {\n          setRateJob({\n            data: result,\n            isTrue: true,\n          });\n        }\n      }\n    }\n  }, [props]);\n\n  useEffect(() => {\n    if (isLoading === false) {\n      setEnable(true);\n    }\n  }, [isLoading]);\n\n  if (enableRateJob?.isTrue) {\n    return (\n      <RateThisJob\n        backToScreen={backToScreen}\n        data={enableRateJob.data}\n        history={null}\n        location={null}\n      />\n    );\n  }\n\n  if (!isEnable) {\n    return null;\n  }\n  return (\n    <React.Fragment>\n      <span className=\"sub_title\">\n        {jobType.charAt(0).toUpperCase() + jobType.slice(1)} Jobs\n      </span>\n      <div className=\"flex_row tradies_row\">\n        {listData?.length\n          ? listData.map(\n              ({\n                amount,\n                fromDate,\n                jobData,\n                jobId,\n                isRated,\n                jobName,\n                locationName,\n                isPublishedAgain,\n                milestoneNumber,\n                specializationId,\n                specializationName,\n                status,\n                toDate,\n                totalMilestones,\n                tradeId,\n                tradieId,\n                tradeName,\n                tradeSelectedUrl,\n                tradieData,\n              }: Post) => (\n                <div className=\"flex_col_sm_6\">\n                  <div\n                    className=\"tradie_card\"\n                    data-aos=\"fade-in\"\n                    data-aos-delay=\"250\"\n                    data-aos-duration=\"1000\"\n                  >\n                    <span\n                      onClick={() => {\n                        redirectToInfo({ jobId, status });\n                      }}\n                      className=\"more_detail circle\"\n                    ></span>\n                    <div className=\"user_wrap\">\n                      <figure className=\"u_img icon\">\n                        <img\n                          src={jobData?.tradeSelectedUrl || jobTypePlaceholder}\n                          alt=\"traide-img\"\n                          onError={(e: any) => {\n                            if (e?.target?.onerror) {\n                              e.target.onerror = null;\n                            }\n                            if (e?.target?.src) {\n                              e.target.src = jobTypePlaceholder;\n                            }\n                          }}\n                        />\n                      </figure>\n                      <div className=\"details\">\n                        <span className=\"name\">{tradeName}</span>\n                        <p className=\"commn_para\">{jobName}</p>\n                      </div>\n                    </div>\n                    <div className=\"job_info\">\n                      <ul>\n                        <li className=\"icon calendar\">\n                          {renderTime(fromDate, toDate)}\n                        </li>\n                        <li className=\"icon dollar\">{amount}</li>\n                        <li className=\"icon location line-1\">{locationName}</li>\n                        <li className=\"job_status\">{status}</li>\n                      </ul>\n                    </div>\n                    <div className=\"job_progress_wrap\" id=\"scroll-progress-bar\">\n                      <div className=\"progress_wrapper\">\n                        <span className=\"completed-digit\" id=\"digit-progress\">\n                          <b>{`Job Milestones ${milestoneNumber} `}</b>\n                          {`of ${totalMilestones}`}\n                        </span>\n                        <span className=\"progress_bar\">\n                          <input\n                            className=\"done_progress\"\n                            id=\"progress-bar\"\n                            type=\"range\"\n                            min=\"0\"\n                            value={\n                              milestoneNumber / totalMilestones > 0\n                                ? (milestoneNumber / totalMilestones) * 100\n                                : 0\n                            }\n                          />\n                        </span>\n                      </div>\n                      {status === \"COMPLETED\"\n                        ? !isRated && (\n                            <button\n                              onClick={() => {\n                                setRateJob((prev: any) => ({\n                                  data: {\n                                    amount,\n                                    fromDate,\n                                    jobData,\n                                    jobId,\n                                    jobName,\n                                    locationName,\n                                    milestoneNumber,\n                                    specializationId,\n                                    specializationName,\n                                    status,\n                                    toDate,\n                                    totalMilestones,\n                                    tradeId,\n                                    tradieId,\n                                    tradeName,\n                                    tradeSelectedUrl,\n                                    tradieData,\n                                  },\n                                  isTrue: !prev.isTrue,\n                                }));\n                              }}\n                              className=\"fill_grey_btn full_btn\"\n                            >\n                              <React.Fragment>\n                                <img src={rateStar} alt=\"rating-star\" />\n                                {\"Rate this tradesperson\"}\n                              </React.Fragment>\n                            </button>\n                          )\n                        : status === \"EXPIRED\" &&\n                          !isPublishedAgain && (\n                            <button\n                              className=\"fill_grey_btn full_btn\"\n                              onClick={() => redirectToInfo({ jobId, status })}\n                            >\n                              {\"Publish again\"}\n                            </button>\n                          )}\n                    </div>\n                  </div>\n                </div>\n              )\n            )\n          : !isLoading && (\n              <div className=\"no_record  m-t-vh\">\n                <figure className=\"no_img\">\n                  <img src={noDataFound} alt=\"data not found\" />\n                </figure>\n                <span>{\"No Data Found\"}</span>\n              </div>\n              // <div className=\"no_record  m-t-vh\">\n              //   <figure>\n              //     <figure className=\"no_img\">\n              //       <img src={pastJobs} alt=\"data not found\" />\n              //     </figure>\n              //   </figure>\n\n              //   <span className=\"empty_screen_text\">\n              //     You don't have any past job yet\n              //   </span>\n              //   <button\n              //     className=\"empty_screen_button\"\n              //     onClick={() => props.history.push(\"/post-new-job\")}\n              //   >\n              //     Post a job\n              //   </button>\n              // </div>\n            )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PastJobs;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/needApproval.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/applicantsList.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/searchTradieResult/searchFilters.tsx",["1116","1117"],"/* eslint-disable eqeqeq */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { callTradeList } from \"./../../redux/auth/actions\";\nimport {\n  getJobWithJobTypeLatLong,\n  getJobTypeList,\n} from \"../../redux/homeSearch/actions\";\n\nimport { useState, useEffect } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Modal from \"@material-ui/core/Modal\";\n\n\nimport filterUnselected from \"../../assets/images/ic-filter-unselected.png\";\nimport filterSelected from \"../../assets/images/ic-filter-selected.png\";\nimport cancel from \"../../assets/images/ic-cancel.png\";\nimport spherePlaceholder from \"../../assets/images/ic_categories_placeholder.svg\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\nimport { MoEConstants } from \"../../utils/constants\";\n\nconst SearchFilter = (props: any) => {\n  const { setSortByFilter, sortByFilter, filterChangeHandler } = props;\n \n  const [filterAnchorEl, setFilterAnchorEl] = useState(null);\n  const [sortingAnchorEl, setSortingAnchorEl] = useState(null);\n\n\n  const [filterEnable, setFilterEnable] = useState(false);\n\n  const [prevLocal, setPrevLocal] = useState(null);\n\n\n\n  const [sortBySorting, setSortBySorting] = useState<any>({\n    sortBySorting: false,\n    sortBy: 0,\n  });\n\n  useEffect(() => {\n    if (props.jobTypeListData?.length === 0) props.getJobTypeList();\n    if (props.tradeListData?.length === 0) props.callTradeList();\n    setPrevLocal(props.localInfo);\n  }, []);\n\n \n\n  const sortByFilterClick = (event: any) => {\n    setFilterAnchorEl(event.currentTarget);\n    setSortByFilter((prevData: any) => ({\n      ...prevData,\n      sortByFilterClicked: true,\n      sortChanged: true,\n    }));\n  };\n\n  const sortByFilterClose = () => {\n    setFilterAnchorEl(null);\n    setSortByFilter((prevData: any) => ({\n      ...prevData,\n      sortByFilterClicked: false,\n    }));\n  };\n\n  const sortBySortingClick = (event: any) => {\n    setSortingAnchorEl(event.currentTarget);\n    setSortBySorting((prevData: any) => ({ ...prevData, sortBySorting: true }));\n  };\n\n  const sortBySortingClose = () => {\n    setSortingAnchorEl(null);\n    setSortBySorting((prevData: any) => ({\n      ...prevData,\n      sortBySorting: false,\n    }));\n  };\n\n  const sortByButtonClicked = (num: number) => {\n    setSortBySorting((prevData: any) => ({ ...prevData, sortBy: num }));\n    sortBySortingClose();\n    updateOnChange(num);\n  };\n\n  const setSameOnClick = () => {\n    setSortBySorting((prevData: any) => ({ ...prevData, sortBy: 0 }));\n    sortBySortingClose();\n    updateOnChange(0);\n  };\n\n\n  const renderFilterButtons = () => (\n    <ul className=\"filters_row\">\n      <li>\n        <a className={filterEnable ? \"active\" : \"\"} onClick={sortByFilterClick}>\n          <img\n            src={filterEnable ? filterSelected : filterUnselected}\n            alt=\"filter\"\n          />\n          {\"Filter\"}\n        </a>\n      </li>\n      <li>\n        <a\n          className={sortBySorting.sortBy > 0 ? \"active\" : \"\"}\n          onClick={sortBySortingClick}\n        >\n          {`Sorting`}\n        </a>\n      </li>\n    </ul>\n  );\n\n  const showResultSearch = () => {\n    if (!sortByFilter?.tradeId?.length) {\n      updateOnChange(sortBySorting.sortBy);\n      sortByFilterClose();\n      setFilterEnable(false);\n      return;\n    }\n\n    updateOnChange(sortBySorting.sortBy);\n    sortByFilterClose();\n    setFilterEnable(true);\n  };\n\n  const updateOnChange = (sort?: any) => {\n    let local_info: any = props.localInfo;\n    let sort_: any = sort;\n    const tradeInfo = props.tradeListData?.find(\n      (item: any) => item._id === sortByFilter.tradeId?.[0]\n    );\n    const specializationList = props.tradeListData?.find(\n      ({ _id }: { _id: string }) => _id === sortByFilter.tradeId?.[0]\n    )?.specialisations;\n\n    const { specializationId, tradeId, specializationName } = sortByFilter;\n\n    console.log({ specializationId, sortByFilter, props });\n    let filteredItem: any = [];\n    if (specializationList?.length) {\n      filteredItem = specializationList.filter((item: any) => {\n        if (Array.isArray(specializationId) && specializationId?.length) {\n          if (specializationId.includes(item._id)) {\n            return item;\n          }\n        }\n      });\n    }\n    let name = \"\";\n\n    if (\n      Array.isArray(filteredItem) &&\n      filteredItem?.length &&\n      filteredItem[0].name\n    ) {\n      name = filteredItem[0].name;\n    }\n\n    let data: any = {\n      page: 1,\n      isFiltered: true,\n    };\n\n    if (sort_) {\n      data[\"sortBy\"] = sort_;\n    }\n\n    if (\n      (Array.isArray(tradeId) && tradeId?.length) ||\n      (!Array.isArray(tradeId) && tradeId?.length)\n    ) {\n      data[\"tradeId\"] = Array.isArray(tradeId) ? tradeId : [tradeId];\n    }\n\n    if (Array.isArray(specializationId) && specializationId?.length) {\n      data[\"specializationId\"] = specializationId;\n    }\n    if (Array.isArray(specializationName) && specializationName?.length) {\n      data[\"specializationName\"] = specializationName;\n    }\n    let get_position: any = localStorage.getItem(\"position\");\n    if (sort_ === 2) {\n      let item_coord: any = !local_info?.location?.coordinates?.length\n        ? JSON.parse(get_position).reverse()\n        : local_info?.location?.coordinates;\n      if (item_coord?.length) {\n        data[\"location\"] = {\n          coordinates: item_coord,\n        };\n      }\n    } else {\n      if (local_info?.location) {\n        data[\"location\"] = local_info?.location;\n      } else {\n        delete data.location;\n      }\n    }\n\n    if (local_info?.from_date) {\n      data[\"from_date\"] = local_info?.from_date;\n    }\n\n    if (local_info?.to_date) {\n      data[\"to_date\"] = local_info?.to_date;\n    }\n\n    if (local_info?.suggestionSelected) {\n      data[\"address\"] = JSON.stringify(local_info?.suggestionSelected);\n      if (data?.address === \"{}\") {\n        delete data.address;\n      }\n    }\n\n    if (!data?.address || !data?.address?.length) {\n      delete data.address;\n    }\n\n    props.postHomeSearchData(data);\n\n    const mData = {\n      timeStamp: moengage.getCurrentTimeStamp(),\n      category: props?.tradeListData.find(\n        (i: any) => i._id === data?.tradeId[0]\n      )?.trade_name,\n      ...(data.address && {\n        location: `${JSON.parse(data.address)?.mainText} ${\n          JSON.parse(data.address)?.secondaryText\n        }`,\n      }),\n      //'length of hire': '',\n      ...(data?.from_date && { \"start date\": data?.from_date }),\n      ...(data?.to_date && { \"end date\": data?.to_date }),\n    };\n    moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n    mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n    let trade_name: any = tradeInfo?.trade_name;\n    let local_info_name: any = local_info?.name;\n    let local_info_count: any = local_info?.count;\n    let case_1 = name ? name : trade_name;\n    let case_2 = `${local_info_name} ${\n      local_info_count > 1 ? `+${local_info_count - 1}` : \"\"\n    }`;\n    let name_: any = case_1 ? trade_name : local_info_name ? case_2 : \"\";\n    props.getTitleInfo({\n      name: name_,\n      isTradeName: tradeInfo?.trade_name ? true : false,\n      count: specializationId?.length || 0,\n      tradeId: data.tradeId,\n      specializationId: data.specializationId || [],\n      sortBy: data.sortBy || 0,\n      to_date: local_info?.to_date || \"\",\n      from_date: local_info?.from_date || \"\",\n      doingLocalChanges: false,\n    });\n  };\n\n  const specializationList = props.tradeListData?.find(\n    ({ _id }: { _id: string }) => _id === sortByFilter.tradeId?.[0]\n  )?.specialisations;\n  let checkIfAllSelected = false;\n  if (specializationList) {\n    checkIfAllSelected =\n      sortByFilter.specializationId?.length === specializationList?.length;\n  }\n\n  const sortOnChange = (num: number) => {\n    if (sortBySorting.sortBy !== num) {\n      sortByButtonClicked(num);\n    }\n  };\n\n  const sortOnClick = (num: number) => {\n    if (sortBySorting.sortBy == num) {\n      setSameOnClick();\n    }\n  };\n\n  const checksForActive = ({ checkIfAllSelected, sortByFilter }: any) => {\n    if (sortByFilter?.allSpecializationClicked) {\n      return true;\n    }\n\n    if (sortByFilter?.specializationId?.length) {\n      return false;\n    }\n\n    if (checkIfAllSelected || sortByFilter?.tradeId?.length) {\n      return true;\n    }\n  };\n\n  return (\n    <div className=\"filters_wrapr\">\n      {renderFilterButtons()}\n\n      {sortByFilter.sortByFilterClicked && (\n        <Modal\n          className=\"custom_modal\"\n          open={sortByFilter.sortByFilterClicked}\n          onClose={sortByFilterClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <>\n            <div\n              className=\"custom_wh filter_modal\"\n              data-aos=\"zoom-in\"\n              data-aos-delay=\"30\"\n              data-aos-duration=\"1000\"\n            >\n              <div className=\"heading\">\n                <span className=\"sub_title\">Filter</span>\n                <button className=\"close_btn\" onClick={sortByFilterClose}>\n                  <img src={cancel} alt=\"cancel\" />\n                </button>\n              </div>\n\n              <div className=\"inner_wrap\">\n                <div className=\"form_field\">\n                  <span className=\"xs_sub_title\">{\"Categories\"}</span>\n                </div>\n                <div className=\"select_sphere\">\n                  <ul>\n                    {props.tradeListData?.map(\n                      ({\n                        _id,\n                        trade_name,\n                        selected_url,\n                        specialisations,\n                      }: {\n                        _id: string;\n                        trade_name: string;\n                        selected_url: string;\n                        specialisations: [];\n                      }) => {\n                        const active = sortByFilter.tradeId?.[0] === _id;\n                        return (\n                          <li\n                            key={_id}\n                            className={active ? \"active\" : \"\"}\n                            onClick={() =>\n                              filterChangeHandler(_id, \"categories\")\n                            }\n                          >\n                            <figure>\n                              <img\n                                alt=\"\"\n                                src={\n                                  selected_url\n                                    ? selected_url\n                                    : spherePlaceholder\n                                }\n                              />\n                            </figure>\n                            <span className=\"name\">{trade_name}</span>\n                          </li>\n                        );\n                      }\n                    )}\n                  </ul>\n                </div>\n\n                <div className=\"form_field\">\n                  <span className=\"xs_sub_title\">Specialisation</span>\n                </div>\n                <div className=\"tags_wrap\">\n                  <ul>\n                    {console.log({\n                      specializationList,\n                      checkIfAllSelected,\n                      sortByFilter: sortByFilter.allSpecializationClicked,\n                    })}\n                    {specializationList?.length > 0 && (\n                      <li\n                        className={\n                          checksForActive({ checkIfAllSelected, sortByFilter })\n                            ? \"selected\"\n                            : \"\"\n                        }\n                        onClick={() => {\n                          let items: any = props.tradeListData.find(\n                            (dt: any) => dt._id == sortByFilter.tradeId\n                          );\n                          if (items) {\n                            filterChangeHandler(\n                              items?.specialisations,\n                              \"All Clicked\"\n                            );\n                          }\n                        }}\n                      >\n                        {\"All\"}\n                      </li>\n                    )}\n                    {specializationList?.map(\n                      ({ _id, name }: { _id: string; name: string }) => {    let active = false;\n                        if (\n                          specializationList?.length !==\n                          sortByFilter.specializationId?.length\n                        ) {\n                          active = false;\n                          if (\n                            Array.isArray(sortByFilter.specializationId) &&\n                            sortByFilter.specializationId?.length\n                          ) {\n                            active =\n                              sortByFilter.specializationId.includes(_id);\n                          }\n                        }\n                        return (\n                          <li\n                            key={_id}\n                            className={active ? \"selected\" : \"\"}\n                            onClick={() => {\n                              if (checkIfAllSelected) {\n                                let sort_by_spec: any = sortByFilter;\n                                sort_by_spec[\"specializationId\"] = [];\n                                setSortByFilter(sort_by_spec);\n                              }\n                              filterChangeHandler(\n                                _id,\n                                \"specializationId\",\n                                name\n                              );\n                            }}\n                          >\n                            {name}\n                          </li>\n                        );\n                      }\n                    )}\n                  </ul>\n                </div>\n              </div>\n              <div className=\"filter_btn\">\n                <a\n                  className=\"link\"\n                  onClick={() =>\n                    filterChangeHandler(\"Clear All\", \"Clear All\", \"\")\n                  }\n                >\n                  Clear All\n                </a>\n                <button\n                  className=\"fill_btn full_btn btn-effect\"\n                  onClick={showResultSearch}\n                >\n                  Show Results\n                </button>\n              </div>\n            </div>\n          </>\n        </Modal>\n      )}\n\n      {sortBySorting.sortBySorting && (\n        <Menu\n          className=\"fsp_modal range\"\n          anchorEl={sortingAnchorEl}\n          keepMounted\n          open={Boolean(sortingAnchorEl)}\n          onClose={sortBySortingClose}\n        >\n          <span className=\"close_btn\" onClick={sortBySortingClose}>\n            <img src={cancel} alt=\"cancel\" />\n          </span>\n          <span className=\"sub_title\">{\"Sort by\"}</span>\n\n          <div className=\"radio_wrap agree_check\">\n            <input\n              className=\"filter-type filled-in\"\n              type=\"radio\"\n              id=\"highestRated\"\n              value=\"Highest rated\"\n              checked={sortBySorting.sortBy === 1}\n              onClick={() => {\n                sortOnClick(1);\n              }}\n              onChange={() => {\n                sortOnChange(1);\n              }}\n            />\n            <label htmlFor=\"highestRated\">Highest rated</label>\n          </div>\n          <div className=\"radio_wrap agree_check\">\n            <input\n              className=\"filter-type filled-in\"\n              type=\"radio\"\n              id=\"closest\"\n              value=\"Closest to me\"\n              checked={sortBySorting.sortBy === 2}\n              onClick={() => {\n                sortOnClick(2);\n              }}\n              onChange={() => {\n                sortOnChange(2);\n              }}\n            />\n            <label htmlFor=\"closest\">Closest to me</label>\n          </div>\n          <div className=\"radio_wrap agree_check\">\n            <input\n              className=\"filter-type filled-in\"\n              type=\"radio\"\n              id=\"mostJob\"\n              value=\"Most jobs completed\"\n              checked={sortBySorting.sortBy === 3}\n              onClick={() => {\n                sortOnClick(3);\n              }}\n              onChange={() => {\n                sortOnChange(3);\n              }}\n            />\n            <label htmlFor=\"mostJob\">{\"Most jobs completed\"}</label>\n          </div>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    jobDataWithJobTypeLatLong: state.homeSearch.jobDataWithJobTypeLatLong,\n    jobTypeListData: state.homeSearch.jobTypeListData,\n    tradeListData: state.auth.tradeListData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators(\n    {\n      getJobWithJobTypeLatLong,\n      getJobTypeList,\n      callTradeList,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchFilter);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/bannerSearchProps.tsx",["1118","1119","1120","1121","1122"],"import React, { useState, useEffect } from \"react\";\nimport Constants,{ MoEConstants }  from \"../../utils/constants\";\n// @ts-ignore\nimport PlacesAutocomplete from \"react-places-autocomplete\";\n// @ts-ignore\nimport { DateRange } from \"react-date-range\";\nimport \"react-date-range/dist/styles.css\"; // main style file\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\n\nimport Searchicon from \"../../assets/images/main-search.png\";\nimport search from \"../../assets/images/ic-search.png\";\nimport Location from \"../../assets/images/ic-location.png\";\nimport cross from \"../../assets/images/close-black.png\";\nimport icgps from \"../../assets/images/ic-gps.png\";\nimport residential from \"../../assets/images/ic-residential.png\";\nimport close from \"../../assets/images/icon-close-1.png\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  getSearchJobList,\n  getRecentSearchList,\n  postHomeSearchData,\n  getRecentLocationList,\n} from \"../../redux/homeSearch/actions\";\nimport { isHandleChanges } from \"../../redux/jobs/actions\";\n// @ts-ignore\nimport { useDetectClickOutside } from \"react-detect-click-outside\";\nimport moment from \"moment\";\nimport Geocode from \"react-geocode\";\nimport { setShowToast } from \"../../redux/common/actions\";\nimport { deleteRecentSearch } from \"../../redux/homeSearch/actions\";\n\nimport { renderTimeWithCustomFormat } from \"../../utils/common\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\n\nGeocode.setApiKey(Constants.SocialAuth.GOOGLE_GEOCODE_KEY);\nGeocode.setLanguage(\"en\");\n\ninterface PropsType {\n  history: any;\n  location?: any;\n  bannerData: any;\n  selectedItem: any;\n  selectedTrade: any;\n  current_address: any;\n  getTitleInfo: any;\n  searchText: any;\n  stateData: any;\n  addressText: any;\n  selectedAddress: any;\n  isHandleChanges: (item: any) => void;\n  localChanges: boolean;\n  searchJobListData: Array<object>;\n  recentSearchJobData: Array<object>;\n  homeSearchJobData: Array<object>;\n  setBannerData: (data: any) => void;\n  getSearchJobList: (data: any) => void;\n  postHomeSearchData: (data: any) => void;\n  handleChangeToggle?: (data: any) => void;\n  getRecentSearchList?: () => void;\n  getRecentLocationList: () => void;\n  localInfo: any;\n  recentLocationData: Array<any>;\n  tradeListData: Array<any>;\n  showOnlyTradeName: boolean;\n}\n\nconst example_calender = { startDate: \"\", endDate: \"\", key: \"selection1\" };\n\nexport function useStateFromProp(initialValue: any) {\n  const [value, setValue] = useState(initialValue);\n\n  useEffect(() => setValue(initialValue), [initialValue]);\n\n  return [value, setValue];\n}\n\nconst BannerSearch = (props: PropsType) => {\n\n  const {\n    isHandleChanges,\n    getRecentSearchList,\n    getRecentLocationList,\n  } = props;\n\n  const [checkOnChange, setOnChange] = useState(false);\n  const [showOnlyTradeName, setShowOnlyTradeName] = useState(false);\n\n  const [locationStatus, setLocationStatus] = useState(null);\n  const [stateData, setStateData] = useState<any>(null);\n  const [searchText, setSearchText] = useState(\"\");\n  const [addressText, setAddressText] = useState<any>(null);\n  const [recentLocation, setRecentLocation] = useState<any>([]); // recentLocation\n  const [selectedAddress, setSelectedAddress] = useState({});\n  const [enableCurrentLocation, setCurrentLocations] = useState<boolean>(false);\n  const [errors, setErrors] = useState<any>({});\n  const [selectedTrade, setSelectedTrade] = useState({});\n\n  const [inputFocus1, setInputFocus1] = useState<boolean>(false);\n  const [inputFocus2, setInputFocus2] = useState<boolean>(false);\n  const [inputFocus3, setInputFocus3] = useState<boolean>(false);\n\n  const [calenderRange1, setCalenderRange1] = useState<any>(example_calender);\n\n  const [suggestionSelected, setSuggestion] = useState({});\n\n  const handleOnOutsideSearch = () => {\n    setOnChange(false);\n    setInputFocus1(false);\n  };\n  const handleOnOutsideLocation = () => setInputFocus2(false);\n  const handleOnOutsideCalender = () => setInputFocus3(false);\n\n  const searchRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideSearch,\n  });\n  const locationRef = useDetectClickOutside({\n    onTriggered: () => {\n      handleOnOutsideLocation();\n    },\n  });\n\n  const calenderRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideCalender,\n  });\n\n  const [sortBy, setSortBy] = useState(0);\n\n  const handleCalenderRange = (item: any) => {\n    setCalenderRange1(item.selection1);\n    console.log({\n      localInfo: props.localInfo,\n    });\n    props.getTitleInfo({\n      ...props.localInfo,\n      from_date: moment(item.selection1?.startDate).format(\"YYYY-MM-DD\"),\n      to_date: moment(item.selection1?.endDate).format(\"YYYY-MM-DD\"),\n    });\n  };\n\n  const [checkRender, setRender] = useState(false);\n\n  useEffect(() => {\n    console.log({ selectedAddress }, \"!!@\");\n  }, [selectedAddress]);\n\n  useEffect(() => {\n    let state = props.location.state;\n    let local_info: any = props.localInfo;\n\n    if (!searchText?.length && !checkRender) {\n      setSearchText(state.name);\n      setStateData({\n        createdAt: null,\n        image: null,\n        name: state?.name,\n        specializationsId: state?.specializations,\n        trade_name: state?.name,\n        _id: state?.tradeId,\n      });\n\n      if (state.calender && Object.keys(state.calender).length) {\n        setCalenderRange1(state.calender);\n      }\n\n      if (state?.location && state?.location?.coordinates?.length) {\n        let coordinates = state.location.coordinates;\n        let valueItem = {\n          lat: coordinates[1],\n          lng: coordinates[0],\n        };\n        setSelectedAddress(valueItem);\n      }\n\n      if (state?.address) {\n        setAddressText(state.address);\n      }\n      setRender(true);\n    }\n    // doingLocalChanges\n    // when this option true it the props will set.\n    if (Object.keys(local_info).length && !local_info?.doingLocalChanges) {\n      if (searchText?.length !== local_info?.name) {\n        if (local_info?.sortBy) {\n          setSortBy(local_info?.sortBy);\n        }\n\n        if (!local_info?.isTradeName) {\n          setSearchText(local_info.name);\n        } else {\n          setSearchText(\"\");\n        }\n\n        setStateData({\n          createdAt: null,\n          image: null,\n          name: local_info?.name,\n          specializationsId: local_info?.specializationId,\n          trade_name: null,\n          _id: local_info?.tradeId,\n        });\n      }\n    }\n  }, [props]);\n\n  useEffect(() => {\n    if ((!addressText || !addressText?.length) && inputFocus2) {\n      setSelectedAddress({});\n      setSelectedTrade({});\n    }\n\n    if (!addressText?.length) {\n      fetchItemsSearchWithLocation(1);\n    }\n  }, [addressText]);\n\n  useEffect(() => {\n    fetchItemsSearchWithLocation();\n    setShowOnlyTradeName(props.showOnlyTradeName);\n  }, []);\n\n  const fetchItemsSearchWithLocation = (fetch?: any) => {\n    if (getRecentSearchList && fetch !== 1) {\n      getRecentSearchList();\n    }\n    if (getRecentLocationList) {\n      getRecentLocationList();\n    }\n  };\n\n\n  const updateGetTitleInfo = () => {\n    props?.getTitleInfo({\n      ...props?.localInfo,\n      doingLocalChanges: true,\n    });\n  };\n\n  useEffect(() => {\n    updateGetTitleInfo();\n    if (searchText?.length > 2) {\n      props.getSearchJobList(searchText);\n    }\n    if (!searchText?.length) {\n      setSelectedTrade({});\n    }\n  }, [searchText]);\n\n  useEffect(() => {}, [selectedAddress]);\n\n\n  const checkIfExist = (_id: any) => {\n    if (selectedTrade) {\n      let isLength = Object.keys(selectedTrade).length;\n      if (isLength) {\n        let item: any = selectedTrade;\n        if (item?._id === _id) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  const cleanRecentSearch = async (event: any, recentSearchId: string) => {\n    event.stopPropagation();\n    const data = {\n      id: recentSearchId,\n      status: 0,\n    };\n    const res = await deleteRecentSearch(data);\n    if (res.success) {\n      if (getRecentSearchList) {\n        getRecentSearchList();\n      }\n    }\n  };\n\n  const recentJobSearches = () => {\n    let props_Clone: any = props;\n    let tradeListData = props_Clone.tradeListData;\n    return (\n      <>\n        <div className=\"custom_autosuggestion\" id=\"recent-job-search-div\">\n          {props?.recentSearchJobData?.length ? (\n            <React.Fragment>\n              <span className=\"sub_title\">Recent searches</span>\n              <div className=\"flex_row recent_search\">\n                {props.recentSearchJobData?.length > 0 &&\n                  props.recentSearchJobData?.slice(0, 2).map((item: any) => {\n                    return (\n                      <div\n                        className=\"flex_col_sm_3\"\n                        onClick={() => {\n                          setItemSearch({\n                            createdAt: item?.createdAt,\n                            image: item.image,\n                            name: item.name,\n                            specializationsId: [item.specializationsId],\n                            trade_name: item.trade_name,\n                            _id: item._id,\n                          });\n                          setSelectedTrade({});\n                        }}\n                      >\n                        <div className=\"card ico_txt_wrap\">\n                          <figure className=\"ico\">\n                            <img src={item?.image || residential} alt=\"icon\" />\n                          </figure>\n                          <div className=\"f_column\">\n                            <span>{item.name}</span>\n                            <span className=\"name\">{item.trade_name}</span>\n                          </div>\n                          <span\n                            className=\"remove_card\"\n                            onClick={(event) => {\n                              cleanRecentSearch(event, item.recentSearchId);\n                            }}\n                          >\n                            <img src={close} alt=\"remove\" />\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n            </React.Fragment>\n          ) : null}\n\n          <div className=\"select_sphere recent_search\">\n            <span className=\"sub_title\">{\"Categories\"}</span>\n            <ul>\n              {tradeListData?.map(\n                ({\n                  _id,\n                  trade_name,\n                  selected_url,\n                  specialisations,\n                }: {\n                  _id: string;\n                  trade_name: string;\n                  selected_url: string;\n                  specialisations: [];\n                }) => (\n                  <li\n                    onClick={() => {\n                      let item_spec: any = specialisations;\n                      if (item_spec?.length) {\n                        let getItem = item_spec[0];\n                        if (getItem) {\n                          setStateData({\n                            image: selected_url,\n                            name: getItem?.name,\n                            specializationsId: specialisations.map(\n                              (sp: any) => sp._id\n                            ),\n                            trade_name: trade_name,\n                            _id: _id,\n                          });\n                          setSearchText(trade_name);\n                        }\n                        setShowOnlyTradeName(true);\n                        setSelectedTrade({\n                          _id,\n                          trade_name,\n                          selected_url,\n                          specialisations,\n                        });\n                      }\n                    }}\n                    className={checkIfExist(_id) ? \"active\" : \"\"}\n                  >\n                    <figure>\n                      <img src={selected_url} alt=\"\" />\n                    </figure>\n                    <span className=\"name\">{trade_name}</span>\n                  </li>\n                )\n              )}\n            </ul>\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  const renderJobResult = () => {\n    if (props?.searchJobListData?.length) {\n      return (\n        <div\n          className=\"custom_autosuggestion\"\n          id=\"fetched-custom-job-category-div\"\n        >\n          <div className=\"recent_search\">\n            <ul className=\"drop_data\">\n              {props.searchJobListData?.map((item: any) => {\n                return (\n                  <li\n                    onClick={() => {\n                      setItemSearch(item);\n                    }}\n                  >\n                    <figure className=\"category\">\n                      <img\n                        src={item.image ? item.image : residential}\n                        alt=\"icon\"\n                      />\n                    </figure>\n                    <div className=\"details\">\n                      <span className=\"name\">{item.name || \"\"}</span>\n                      <span className=\"prof\">{item.trade_name || \"\"}</span>\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const onError = (status: string, clearSuggestions: Function) => {\n    console.log(\"Google Maps API returned error with status: \", status);\n    clearSuggestions();\n  };\n\n  const validateForm = () => {\n    return true;\n  };\n\n  const setItemSearch = (item: any) => {\n    setStateData(item);\n    setSelectedTrade({});\n    setSearchText(item?.name || \"\");\n  };\n\n  const bannerSearchClicked = () => {\n    let selected_address: any = selectedAddress;\n    let selected_item: any = props?.selectedItem;\n    let props_trade: any = selected_item?.selectedTrade;\n    let local_info: any = props?.localInfo;\n\n    let suggestion_selected: any = local_info?.suggestionSelected;\n\n    if (suggestion_selected) {\n      suggestion_selected = JSON.stringify(local_info?.suggestionSelected);\n    }\n\n    if (suggestionSelected && Object.keys(suggestionSelected).length) {\n      if (\n        JSON.stringify(local_info?.suggestionSelected) !==\n        JSON.stringify(suggestionSelected)\n      ) {\n        suggestion_selected = JSON.stringify(suggestionSelected);\n      }\n    }\n\n    let tradeId: any = null;\n    let specializationId: any = null;\n\n    if (!local_info?.doingLocalChanges) {\n      tradeId = Array.isArray(local_info?.tradeId)\n        ? local_info?.tradeId\n        : [local_info?.tradeId];\n      specializationId = Array.isArray(local_info?.specializationId)\n        ? local_info?.specializationId\n        : [local_info?.specializationId];\n    } else {\n      if (Object.keys(stateData).length) {\n        tradeId = Array.isArray(stateData._id)\n          ? stateData._id\n          : [stateData._id];\n        specializationId = Array.isArray(stateData.specializationsId)\n          ? stateData.specializationsId\n          : [stateData.specializationsId];\n      }\n    }\n\n    if (!stateData?._id && !props_trade?._id) {\n      setShowToast(true, \"Please enter the valid search text\");\n      return;\n    }\n\n    if (validateForm()) {\n      let data: any = {\n        page: 1,\n        isFiltered: true,\n        tradeId: tradeId,\n        specializationId: specializationId,\n      };\n\n      if (!tradeId?.length) {\n        setShowToast(true, \"Please enter the valid search text\");\n        return;\n      }\n\n      if (!specializationId?.length) {\n        delete data.specializationId;\n      }\n\n      if (sortBy > 0) {\n        data[\"sortBy\"] = sortBy;\n      }\n\n      if (Object.keys(selectedAddress).length) {\n        data[\"location\"] = {\n          coordinates: [\n            parseFloat(selected_address?.lng),\n            parseFloat(selected_address?.lat),\n          ],\n        };\n\n        if (suggestion_selected) {\n          if (addressText) {\n            data[\"address\"] = suggestion_selected;\n          }\n        }\n      } else {\n        delete data.location;\n      }\n\n      if (moment(calenderRange1?.startDate).isValid()) {\n        data[\"from_date\"] = moment(calenderRange1?.startDate).format(\n          \"YYYY-MM-DD\"\n        );\n      } else {\n        delete data.from_date;\n      }\n\n      if (moment(calenderRange1?.endDate).isValid()) {\n        data[\"to_date\"] = moment(calenderRange1?.endDate).format(\"YYYY-MM-DD\");\n      } else {\n        delete data.to_date;\n      }\n\n      if (sortBy === 2) {\n        if (Object.keys(selected_address)?.length) {\n          data[\"location\"] = {\n            coordinates: [\n              parseFloat(selected_address?.lng),\n              parseFloat(selected_address?.lat),\n            ],\n          };\n        }\n        if (suggestion_selected) {\n          if (addressText) {\n            let case_1 =\n              typeof suggestion_selected == \"string\"\n                ? suggestion_selected\n                : JSON.stringify(suggestion_selected);\n            data[\"address\"] = addressText && suggestion_selected ? case_1 : \"\";\n          }\n        }\n      }\n\n      props.getTitleInfo({\n        name: searchText,\n        isTradeName: false,\n        count: 0,\n        tradeId: data.tradeId,\n        specializationId: data.specializationId,\n        location: data.location,\n        from_date: data?.from_date,\n        to_date: data?.to_date,\n        doingLocalChanges: true,\n        address: data?.address,\n        suggestionSelected: suggestion_selected\n          ? JSON.parse(suggestion_selected)\n          : null,\n      });\n      props.postHomeSearchData(data);\n      const mData = {\n        timeStamp: moengage.getCurrentTimeStamp(),\n        category: props?.tradeListData.find(\n          (i: any) => i._id === data?.tradeId[0]\n        )?.trade_name,\n        ...(data.address && {\n          location: `${JSON.parse(data.address)?.mainText} ${\n            JSON.parse(data.address)?.secondaryText\n          }`,\n        }),\n        //'length of hire': '',\n        ...(data?.from_date && { \"start date\": data?.from_date }),\n        ...(data?.to_date && { \"end date\": data?.to_date }),\n      };\n      moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n      mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n    }\n  };\n\n  const filterFromAddress = (response: any) => {\n    let city,\n      state,\n      country = null;\n    for (let i = 0; i < response.results[0].address_components.length; i++) {\n      for (\n        let j = 0;\n        j < response.results[0].address_components[i].types.length;\n        j++\n      ) {\n        switch (response.results[0].address_components[i].types[j]) {\n          case \"locality\":\n            city = response.results[0].address_components[i].long_name;\n            break;\n          case \"administrative_area_level_1\":\n            state = response.results[0].address_components[i].long_name;\n            break;\n          case \"country\":\n            country = response.results[0].address_components[i].long_name;\n            break;\n        }\n      }\n    }\n    return { city, state, country: country.toLowerCase() };\n  };\n\n  const getCurrentLocation = async () => {\n    let itemToggle: any = await navigator?.permissions?.query({\n      name: \"geolocation\",\n    });\n    setLocationStatus(itemToggle.state);\n    let local_position: any = localStorage.getItem(\"position\");\n    let position: any = JSON.parse(local_position);\n\n    if (position?.length) {\n      let lng = position[0].toString();\n      let lat = position[1].toString();\n      let response: any = await Geocode.fromLatLng(lat, lng);\n      const { country } = filterFromAddress(response);\n\n      if (response && [\"australia\", \"au\"].includes(country)) {\n        if (\n          response?.results &&\n          Array.isArray(response.results) &&\n          response?.results?.length\n        ) {\n          const address = response.results[0].formatted_address;\n          setSelectedAddress({ lat, lng });\n          setAddressText(address);\n          setInputFocus2(true);\n          setInputFocus1(false);\n          setInputFocus3(false);\n          setCurrentLocations(true);\n        }\n      } else {\n        if (itemToggle?.state !== \"denied\") {\n          setShowToast(\n            true,\n            \"Uh Oh! We don't provide service currently in your location\"\n          );\n        }\n      }\n    }\n  };\n\n  const checkPlaceholder = (calenderRange1: any) => {\n    let fromDate: any = calenderRange1?.startDate;\n    let toDate: any = calenderRange1?.endDate;\n    let result = renderTimeWithCustomFormat(\n      fromDate,\n      toDate,\n      \"\",\n      [\"DD MMM\", \"DD MMM YYYY\"],\n      \"When?\"\n    );\n\n    if (!result) {\n      return \"When?\";\n    }\n\n    return result;\n  };\n\n  let state_data: any = stateData;\n  let length_spec = 0;\n  if (\n    state_data?.specializationsId?.length &&\n    Array.isArray(state_data?.specializationsId)\n  ) {\n    length_spec = state_data?.specializationsId?.length;\n  }\n\n  let custom_name = searchText;\n  if (!checkOnChange) {\n    if (length_spec > 1 && custom_name?.length) {\n      custom_name = `${custom_name} +${length_spec - 1}`;\n    }\n  }\n\n  return (\n    <div className=\"home_search\">\n      <button\n        onClick={() => {\n          if (props?.handleChangeToggle) {\n            props.handleChangeToggle(false);\n          }\n        }}\n        className=\"modal_srch_close\"\n      >\n        <img src={close} alt=\"close\" />\n      </button>\n      <form className=\"search_wrapr\">\n        <ul>\n          <li className=\"categ_box\">\n            <div className=\"text_field\" id=\"text-field-div\">\n              <input\n                type=\"text\"\n                ref={searchRef}\n                placeholder=\"What jobs are you after?\"\n                value={showOnlyTradeName ? searchText : custom_name}\n                onChange={(e) => {\n                  isHandleChanges(true);\n                  setOnChange(true);\n                  setSearchText(e.target.value.trimLeft());\n                }}\n                onFocus={() => {\n                  setInputFocus1(true);\n                  setInputFocus2(false);\n                  setInputFocus3(false);\n                }}\n              />\n              <div className=\"border_eff\"></div>\n              <span className=\"detect_icon_ltr\">\n                <img src={Searchicon} alt=\"search\" />\n              </span>\n              {searchText?.length && inputFocus1 ? (\n                <span className=\"detect_icon\">\n                  <img\n                    src={cross}\n                    alt=\"cross\"\n                    onClick={() => {\n                      // clear here\n                      setStateData({});\n                      setSelectedTrade({});\n                      isHandleChanges(true);\n                      setSearchText(\"\");\n                      setOnChange(false);\n                    }}\n                  />\n                </span>\n              ) : null}\n            </div>\n            {!!errors.searchedJob && (\n              <span className=\"error_msg\">{errors.searchedJob}</span>\n            )}\n          </li>\n          {!searchText?.length && inputFocus1 ? recentJobSearches() : null}\n          {searchText?.length > 2 && inputFocus1 ? renderJobResult() : null}\n\n          {/* {'location search start here!'} */}\n          <li className=\"loc_box\">\n            <div id=\"location-text-field-div\">\n              <div>\n                <PlacesAutocomplete\n                  value={addressText}\n                  searchOptions={{\n                    componentRestrictions: {\n                      country: \"au\",\n                    },\n                    types: [\"(cities)\"],\n                  }}\n                  shouldFetchSuggestions={addressText?.length > 2}\n                  onChange={(item: any) => {\n                    setAddressText(item);\n                  }}\n                  onSelect={async (\n                    address: string,\n                    placeId?: any,\n                    suggestion?: any\n                  ) => {\n                    let selected_address: any = address;\n                    if (address.indexOf(\",\")) {\n                      selected_address = address.split(\",\")[0];\n                    }\n\n                    setSuggestion(suggestion?.formattedSuggestion);\n                    setAddressText(suggestion?.formattedSuggestion?.mainText);\n                    let response = await Geocode.fromAddress(address);\n                    if (response?.results?.length) {\n                      const { lat, lng } =\n                        response.results[0].geometry.location;\n                      setSelectedAddress({ lat, lng });\n                      setInputFocus2(false);\n                    }\n                  }}\n                  highlightFirstSuggestion={true}\n                  onError={onError}\n                  debounce={0}\n                >\n                  {({\n                    getInputProps,\n                    suggestions,\n                    getSuggestionItemProps,\n                    loading,\n                  }: any) => (\n                    <div>\n                      <div className={`text_field`}>\n                        <input\n                          {...getInputProps({\n                            placeholder: \"Where?\",\n                            className: \"line-1\",\n                          })}\n                          id=\"location-input-tag\"\n                          autoComplete=\"off\"\n                          ref={locationRef}\n                          onFocus={() => {\n                            setInputFocus2(true);\n                            setInputFocus1(false);\n                            setInputFocus3(false);\n                          }}\n                        />\n                        <span className=\"detect_icon_ltr\">\n                          <img src={Location} alt=\"location\" />\n                        </span>\n                        {inputFocus2 && addressText?.length > 2 ? (\n                          <span className=\"detect_icon\">\n                            <img\n                              src={cross}\n                              alt=\"cross\"\n                              onClick={() => {\n                                setAddressText(\"\");\n                                setSelectedAddress({});\n                              }}\n                            />\n                          </span>\n                        ) : null}\n                      </div>\n                      {suggestions?.length &&\n                      inputFocus2 &&\n                      addressText?.length ? (\n                        <div\n                          className=\"custom_autosuggestion location\"\n                          id=\"autocomplete-dropdown-container\"\n                        >\n                          <div className=\"flex_row recent_search auto_loc\">\n                            <div className=\"flex_col_sm_4\">\n                              {!!errors.selectedMapLocation && (\n                                <span className=\"error_msg\">\n                                  {errors.selectedMapLocation}\n                                </span>\n                              )}\n                              {loading && <div>Loading...</div>}\n                              {suggestions.map((suggestion: any) => {\n                                const className =\n                                  \"autosuggestion_icon card loc name\";\n                                const style = suggestion.active\n                                  ? {\n                                      backgroundColor: \"#fafafa\",\n                                      cursor: \"pointer\",\n                                    }\n                                  : {\n                                      backgroundColor: \"#ffffff\",\n                                      cursor: \"pointer\",\n                                    };\n                                return (\n                                  <div\n                                    {...getSuggestionItemProps(suggestion, {\n                                      className,\n                                      style,\n                                    })}\n                                  >\n                                    <span>\n                                      {suggestion.formattedSuggestion.mainText}\n                                    </span>\n                                    <span className=\"name\">\n                                      {\n                                        suggestion.formattedSuggestion\n                                          .secondaryText\n                                      }\n                                    </span>\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          </div>\n                        </div>\n                      ) : null}\n                      {inputFocus2 &&\n                      !suggestions?.length &&\n                      !Object.keys(selectedAddress).length ? (\n                        <div\n                          style={{ minHeight: \"50px\" }}\n                          className=\"custom_autosuggestion location\"\n                          id=\"autocomplete-dropdown-container\"\n                        >\n                          <div className=\"flex_row recent_search auto_loc\">\n                            <div className=\"flex_col_sm_4\">\n                              <div className=\"loc_suggestions\">\n                                {\"No Result Found.\"}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ) : null}\n                    </div>\n                  )}\n                </PlacesAutocomplete>\n              </div>\n            </div>\n            {!!errors.selectedMapLocation && (\n              <span className=\"error_msg\">{errors.selectedMapLocation}</span>\n            )}\n          </li>\n\n          {/* {'location search end here!'} */}\n          {!addressText?.length && inputFocus2 ? (\n            <div\n              className=\"custom_autosuggestion location\"\n              id=\"current-location-search-div\"\n            >\n              <span className=\"location-btn\" onClick={getCurrentLocation}>\n                <span className=\"gps_icon\">\n                  <img src={icgps} alt=\"\" />\n                </span>{\" \"}\n                Use my current location\n              </span>\n              {locationStatus === \"denied\" && (\n                <span className=\"blocked_note\">\n                  You have blocked your location. To use this, change your\n                  location settings in browser.\n                </span>\n              )}\n              {props?.recentLocationData?.length > 0 && (\n                <span className=\"sub_title\">{\"Recent searches\"}</span>\n              )}\n              <div className=\"flex_row recent_search auto_loc\">\n                {props?.recentLocationData?.map((item: any) => {\n                  return (\n                    item?.address?.length > 0 && (\n                      <div\n                        className=\"flex_col_sm_4\"\n                        onClick={() => {\n                          setAddressText(JSON.parse(item?.address)?.mainText);\n                          setSelectedAddress({\n                            lat: item?.location?.coordinates[1],\n                            lng: item?.location?.coordinates[0],\n                          });\n                          setSuggestion(JSON.parse(item?.address));\n                        }}\n                      >\n                        <div className=\"autosuggestion_icon card loc name\">\n                          <span>{JSON.parse(item?.address)?.mainText}</span>\n                          <span className=\"name\">\n                            {JSON.parse(item?.address)?.secondaryText}\n                          </span>\n                        </div>\n                      </div>\n                    )\n                  );\n                })}\n              </div>\n            </div>\n          ) : null}\n          <li\n            className={`date_box ${\n              calenderRange1?.startDate ? \"date_value\" : \"\"\n            }`}\n          >\n            <div\n              ref={calenderRef}\n              className=\"custom_date_range\"\n              id=\"date-range-div\"\n            >\n              <div className=\"text_field\">\n                <span className=\"detect_icon_ltr calendar\"></span>\n                <input\n                  type=\"text\"\n                  placeholder={checkPlaceholder(calenderRange1)}\n                  onFocus={() => {\n                    setInputFocus3(true);\n                    setInputFocus1(false);\n                    setInputFocus2(false);\n                  }}\n                />\n                {calenderRange1?.startDate && inputFocus3 && (\n                  <span className=\"detect_icon\">\n                    <img\n                      src={cross}\n                      alt=\"cross\"\n                      onClick={() => {\n                        setCalenderRange1({\n                          startDate: \"\",\n                          endDate: \"\",\n                          key: \"selection1\",\n                        });\n                        console.log({ localInfo: props.localInfo });\n                        props.getTitleInfo({\n                          ...props.localInfo,\n                          from_date: \"\",\n                          to_date: \"\",\n                        });\n                      }}\n                    />\n                  </span>\n                )}\n              </div>\n              {/* {inputFocus3 && */}\n              {inputFocus3 ? (\n                <div\n                  className=\"custom_autosuggestion\"\n                  id=\"custom-date-range-div\"\n                >\n                  <DateRange\n                    onChange={handleCalenderRange}\n                    ranges={\n                      !moment(calenderRange1?.startDate).isValid()\n                        ? [\n                            {\n                              startDate: new Date(),\n                              endDate: new Date(),\n                              key: \"selection1\",\n                            },\n                          ]\n                        : [calenderRange1]\n                    }\n                    moveRangeOnFirstSelection={false}\n                    rangeColors={[\"#fee600\", \"#b5b5b5\"]}\n                    showDateDisplay={false}\n                    showSelectionPreview={true}\n                    months={2}\n                    showPreview={true}\n                    minDate={new Date()}\n                    maxDate={moment().add(2, \"years\").toDate()}\n                    direction=\"horizontal\"\n                    fixedHeight={true}\n                  />\n                </div>\n              ) : null}\n            </div>\n          </li>\n          <div className=\"search_btn\">\n            <button\n              type=\"button\"\n              className=\"fill_btn btn-effect\"\n              onClick={bannerSearchClicked}\n            >\n              <img src={search} alt=\"search\" />\n            </button>\n          </div>\n        </ul>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    searchJobListData: state.homeSearch.searchJobListData,\n    recentSearchJobData: state.homeSearch.recentSearchJobData,\n    homeSearchJobData: state.homeSearch.homeSearchJobData,\n    tradeListData: state.auth.tradeListData,\n    localChanges: state.jobs.localChanges,\n    recentLocationData: state.homeSearch.recentLocationData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators(\n    {\n      getSearchJobList,\n      getRecentSearchList,\n      postHomeSearchData,\n      isHandleChanges,\n      getRecentLocationList,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BannerSearch);\n\n/**\n!loading &&\naddressText?.length > 2 &&\n!suggestions?.length &&\n!enableCurrentLocation &&\n!Object.keys(selectedAddress).length\n**/\n","/home/appinventiv/Documents/Project/tickt/web/src/common/auth/authSlider.tsx",["1123"],"import \"react-multi-carousel/lib/styles.css\";\nimport Carousel from \"react-multi-carousel\";\nimport bannerimage1 from \"../../assets/images/onboarding-banner-1.jpg\";\nimport bannerimage2 from \"../../assets/images/onboarding-banner-2.jpg\";\nimport bannerimage3 from \"../../assets/images/onboarding-banner-3.jpg\";\n\nimport bannerimage11 from \"../../assets/images/modal-slider-bg-1.png\";\nimport bannerimage22 from \"../../assets/images/modal-slider-bg-2.png\";\nimport bannerimage33 from \"../../assets/images/modal-slider-bg-3.png\";\n\ninterface Props {\n  type: string;\n  history: any;\n  showModal: boolean | undefined;\n  modalUpdateSteps: (data: any) => void;\n  setShowModal: (data: any) => void;\n  setSocialData: (data: any) => void;\n}\n\nconst DATA: any = {\n  login: {\n    title: \"Have an account? \",\n    button: \"Log In\",\n    nav: \"login\",\n  },\n  signup: {\n    title: \"Don’t have an account?\",\n    button: \"Sign up\",\n    nav: \"signup\",\n  },\n};\n\nconst AuthSlider = (props: Props) => {\n  const SLIDER_DATA = [\n    {\n      image: props.showModal ? bannerimage11 : bannerimage1,\n      imageText: \"Find quality work and grow your reputation\",\n    },\n    {\n      image: props.showModal ? bannerimage22 : bannerimage2,\n      imageText: \"Choose work that suits your location, price, schedule\",\n    },\n    {\n      image: props.showModal ? bannerimage33 : bannerimage3,\n      imageText: \"Make yourself on what you do best\",\n    },\n  ];\n\n  const responsive = {\n    desktop: {\n      breakpoint: { max: 3000, min: 1024 },\n      items: 1,\n      slidesToSlide: 1, // optional, default to 1.\n    },\n  };\n  const data = DATA[props.type];\n\n\n  return (\n    <Carousel\n      responsive={responsive}\n      autoPlay={true}\n      showDots={true}\n      arrows={false}\n      infinite={true}\n    >\n      {SLIDER_DATA.map((item: any, i: number) => {\n        return (\n          <div key={i}>\n            <figure className=\"banner_img\">\n              <img src={item.image} alt=\"banner-img\" />\n              <div className=\"slider_txt\">\n                <span>{item.imageText}</span>\n              </div>\n              {/* <div className=\"bottom_txt\">\n                                <span className=\"reg\">{data.title}\n                                    <a className=\"link\" onClick={onLoginSignupClicked}>{` ${data.button}`}</a>\n                                </span>\n                            </div> */}\n            </figure>\n          </div>\n        );\n      })}\n    </Carousel>\n  );\n};\n\nexport default AuthSlider;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/privacyPolicy.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/cardDetails.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/settings.tsx",["1124"],"import { useEffect, useState } from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport storageService from '../../../utils/storageService';\nimport { updateChatUserDetails } from '../../../services/firebase';\ninterface Setting {\n  pushNotificationCategory: []\n}\n\ninterface Props {\n  getSettings: () => void;\n  updateSettings: (settings: any) => void;\n  settings: Setting;\n}\n\nconst NOTIFICATION_CATEGORY = { //for api reference\n  CHAT: 1,\n  PAYMENT: 2,\n  ADMIN_UPDATE: 3,\n  MILESTONE_UPDATE: 4,\n  REVIEW: 5,\n  VOUCH: 6,\n  CHANGE_REQUEST: 7,\n  CANCELATION: 8,\n  DISPUTE: 9,\n  QUESTION: 10\n}\n\nconst USER_TRADIE_NOTIF = [\n  { value: 'Chat', number: 1 },\n  { value: 'Payment', number: 2 },\n  { value: 'New updates from admin', number: 3 },\n  { value: 'Milestone updates', number: 4 },\n  { value: 'Job review updates', number: 5 },\n  { value: 'Vouches updates', number: 6 },\n  { value: 'Change request updates', number: 7 },\n  { value: 'Cancelation updates', number: 8 },\n  { value: 'Dispute updates', number: 9 },\n  { value: 'Job answers updates', number: 10 }\n];\nconst USER_BUILDER_NOTIF = [\n  { value: 'Chat', number: 1 },\n  { value: 'Payment', number: 2 },\n  { value: 'New updates from admin', number: 3 },\n  { value: 'Milestone updates', number: 4 },\n  { value: 'Job review updates', number: 5 },\n  { value: 'Change request updates', number: 7 },\n  { value: 'Cancelation updates', number: 8 },\n  { value: 'Dispute updates', number: 9 },\n  { value: 'Job queries updates', number: 10 }\n];\n\nconst Settings = ({ getSettings, updateSettings, settings }: Props) => {\n  const [pushCategory, setPushCategory] = useState<Array<number>>([]);\n  const [updatedSettingNo, setUpdatedSettingNo] = useState<number>(0);\n\n  useEffect(() => {\n    getSettings();\n  }, [getSettings]);\n\n  useEffect(() => {\n    if (Array.isArray(settings?.pushNotificationCategory)) {\n      setPushCategory(settings?.pushNotificationCategory);\n    }\n  }, [settings]);\n\n  useEffect(() => {\n    if (pushCategory.length > 0 && updatedSettingNo) {\n      const val: boolean = pushCategory.includes(1) ? true : false;\n      updateChatUserDetails('isNotification', val);\n      setUpdatedSettingNo(0);\n    }\n  }, [pushCategory]);\n\n  const handleChange = (val: number, isValExist: boolean) => {\n    if (val === 1) setUpdatedSettingNo(val);\n    let updatedPushNotif: any;\n    if (isValExist) {\n      updatedPushNotif = [...pushCategory].filter(i => i !== val);\n    } else {\n      const category = [...pushCategory];\n      category.push(val);\n      updatedPushNotif = category;\n    }\n    updateSettings({ pushNotificationCategory: updatedPushNotif });\n  };\n\n  const PUSH_NOTIF_ARRAY = storageService.getItem('userType') === 1 ? USER_TRADIE_NOTIF : USER_BUILDER_NOTIF;\n\n  return (\n    <div className=\"flex_row p_settings\">\n      <div className=\"flex_col_sm_7\">\n        <span className=\"sub_title mb50\">Settings</span>\n        <div className=\"form_field\">\n          <span className=\"inner_title\">Push Notifications</span>\n          <span className=\"info_note\">\n            Receive notifications from users, including notifications about new jobs\n          </span>\n        </div>\n        {PUSH_NOTIF_ARRAY.map(({ value, number }: { value: string, number: number }) => {\n          const isValExist = pushCategory?.includes(number);\n          return (\n            < div className=\"f_spacebw form_field\">\n              <span className=\"form_label\">{value}</span>\n              <div className=\"toggle_btn\">\n                <Switch\n                  checked={isValExist}\n                  onClick={() => handleChange(number, isValExist)}\n                  inputProps={{ 'aria-label': 'secondary checkbox' }}\n                />\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/bankingDetails.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/termsOfUse.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/personalInformation.tsx",["1125","1126","1127","1128","1129","1130","1131","1132","1133","1134"],"import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport Modal from \"@material-ui/core/Modal\";\nimport NumberFormat from \"react-number-format\";\nimport Constants, { MoEConstants } from \"../../../../utils/constants\";\nimport regex from \"../../../../utils/regex\";\nimport { portfolioModal } from \"../../../builderInfo/builderInfo\";\nimport ChangeEmailModal from \"./changeEmailModal/changeEmailModal\";\nimport {\n  tradieUpdateProfileDetails,\n  tradieUpdateBasicDetails,\n  tradieUpdatePassword,\n  tradieAddPortfolioJob,\n  tradieUpdatePortfolioJob,\n  tradieDeletePortfolioJob,\n  tradieChangeEmail,\n} from \"../../../../redux/profile/actions\";\nimport { onFileUpload } from \"../../../../redux/auth/actions\";\nimport { setShowToast } from \"../../../../redux/common/actions\";\n\nimport portfolioPlaceholder from \"../../../../assets/images/portfolio-placeholder.jpg\";\nimport dotMenu from \"../../../../assets/images/menu-dot.png\";\nimport dummy from \"../../../../assets/images/u_placeholder.jpg\";\nimport cameraBlack from \"../../../../assets/images/camera-black.png\";\nimport editIconBlue from \"../../../../assets/images/ic-edit-blue.png\";\nimport profilePlaceholder from \"../../../../assets/images/ic-placeholder-detail.png\";\nimport cancel from \"../../../../assets/images/ic-cancel.png\";\nimport remove from \"../../../../assets/images/icon-close-1.png\";\nimport addMedia from \"../../../../assets/images/add-image.png\";\nimport addMediaLrg from \"../../../../assets/images/add-image-lg.png\";\nimport spherePlaceholder from \"../../../../assets/images/ic_categories_placeholder.svg\";\nimport eyeIconClose from \"../../../../assets/images/icon-eye-closed.png\";\nimport eyeIconOpen from \"../../../../assets/images/icon-eye-open.png\";\nimport removeFile from \"../../../../assets/images/icon-close-1.png\";\nimport jpegFile from \"../../../../assets/images/jpeg.png\";\nimport jpgFile from \"../../../../assets/images/jpg.png\";\nimport pngFile from \"../../../../assets/images/png.png\";\nimport pdfFile from \"../../../../assets/images/pdf.png\";\nimport docFile from \"../../../../assets/images/doc.png\";\nimport viewProfile from \"../../../../assets/images/view.png\";\n\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport storageService from \"../../../../utils/storageService\";\nimport { validateABN } from \"../../../../utils/common\";\n//@ts-ignore\nimport Skeleton from \"react-loading-skeleton\";\nimport { updateChatUserDetails } from \"../../../../services/firebase\";\nimport { moengage, mixPanel } from \"../../../../services/analyticsTools\";\n\ninterface Props {\n  history: any;\n  tradieProfileData: any;\n  builderProfile: any;\n  tradieProfileViewData: any;\n  tradieBasicDetailsData: any;\n  tradeListData: any;\n  isLoading: boolean;\n  getTradieProfileView: () => void;\n  getTradieBasicDetails: () => void;\n  callTradeList: () => void;\n  callTradieProfileData: () => void;\n  getProfileBuilder: () => void;\n  cleanTradieBasicDetails: () => void;\n  cleanTradieProfileViewData: () => void;\n}\n\ninterface State {\n  errors: any;\n  isToggleSidebar: boolean;\n  profileModalClicked: boolean;\n  areasOfSpecsModalClicked: boolean;\n  aboutModalClicked: boolean;\n  isAddEditPortfolioModal: boolean;\n  portfolioJobClicked: boolean;\n  passwordModalClicked: boolean;\n  basicDetailsData: any;\n  trade: Array<any>;\n  specialization: Array<any>;\n  allSpecializationSelected: boolean;\n  about: string;\n  userImage: string;\n  password: string;\n  showPassword: boolean;\n  newPassword: string;\n  showNewPassword: boolean;\n  confirmNewPassword: string;\n  showConfirmNewPassword: boolean;\n  formData: any;\n  profileViewData: any;\n  localProfileView: any;\n  tradeData: Array<any>;\n  specializationData: Array<any>;\n  portfolioJobDetail: any;\n  addPortfolioJob: boolean;\n  editPortfolioJob: boolean;\n  deletePortfolioJob: boolean;\n  portfolioJobIndex: number | null;\n  confirmationModalClicked: boolean;\n  changeEmailModalClicked: boolean;\n  newEmail: string;\n  addQualificationClicked: boolean;\n  isProfileViewDataChanged: boolean;\n  isEditProfileModalChanged: boolean;\n  localQualificationDoc: any;\n  remainingQualificationDoc: any;\n}\n\nexport class PersonalInformation extends Component<Props, State> {\n  private userType: any;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      errors: {},\n      isToggleSidebar: false,\n      profileModalClicked: false,\n      areasOfSpecsModalClicked: false,\n      aboutModalClicked: false,\n      portfolioJobClicked: false,\n      isAddEditPortfolioModal: false,\n      passwordModalClicked: false,\n      trade: [],\n      tradeData: [],\n      specialization: [],\n      specializationData: [],\n      allSpecializationSelected: false,\n      about: \"\",\n      userImage: \"\",\n      password: \"\",\n      showPassword: false,\n      newPassword: \"\",\n      showNewPassword: false,\n      confirmNewPassword: \"\",\n      showConfirmNewPassword: false,\n      formData: null,\n      basicDetailsData: {},\n      profileViewData: {},\n      localProfileView: \"\",\n      portfolioJobDetail: \"\",\n      addPortfolioJob: false,\n      editPortfolioJob: false,\n      deletePortfolioJob: false,\n      portfolioJobIndex: null,\n      confirmationModalClicked: false,\n      changeEmailModalClicked: false,\n      isProfileViewDataChanged: false,\n      isEditProfileModalChanged: false,\n      newEmail: \"\",\n      addQualificationClicked: false,\n      localQualificationDoc: [],\n      remainingQualificationDoc: [],\n    };\n\n    this.userType = storageService.getItem(\"userType\");\n  }\n\n  componentDidMount() {\n    this.props.getTradieProfileView();\n    this.props.getTradieBasicDetails();\n    if (!this.props.tradeListData.length) {\n      this.props.callTradeList();\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanTradieProfileViewData();\n    this.props.cleanTradieBasicDetails();\n  }\n\n  static getDerivedStateFromProps(nextProps: any, prevState: any) {\n    if (\n      nextProps.tradieProfileViewData &&\n      Object.keys(prevState.profileViewData).length === 0 &&\n      !_.isEqual(nextProps.tradieProfileViewData, prevState.profileViewData)\n    ) {\n      return {\n        profileViewData: nextProps.tradieProfileViewData,\n        userImage:\n          nextProps.tradieProfileViewData?.tradieImage ||\n          nextProps.tradieProfileViewData?.builderImage,\n      };\n    }\n    if (\n      nextProps.tradieBasicDetailsData &&\n      Object.keys(prevState.basicDetailsData).length === 0 &&\n      !_.isEqual(nextProps.tradieBasicDetailsData, prevState.basicDetailsData)\n    ) {\n      return {\n        basicDetailsData: nextProps.tradieBasicDetailsData,\n      };\n    }\n    if (\n      storageService.getItem(\"userType\") === 1 &&\n      nextProps.tradeListData &&\n      (!prevState.localQualificationDoc?.length ||\n        !prevState.remainingQualificationDoc?.length) &&\n      nextProps.tradieBasicDetailsData\n    ) {\n      const data = [...nextProps.tradeListData][0]?.qualifications?.map(\n        (item: any) => item.name?.length && { _id: item._id, name: item.name }\n      );\n      const alreadyFilledQualificationDoc: Array<any> =\n        nextProps.tradieBasicDetailsData?.qualificationDoc?.map(\n          ({ qualification_id }: { qualification_id: string }) =>\n            qualification_id?.length && qualification_id\n        );\n      const remainingQualificationDoc = data?.filter(\n        ({ _id }: { _id: string }) =>\n          !alreadyFilledQualificationDoc?.includes(_id)\n      );\n      return {\n        localQualificationDoc: data ? data : [],\n        remainingQualificationDoc: remainingQualificationDoc\n          ? remainingQualificationDoc\n          : [],\n      };\n    }\n    return null;\n  }\n\n  toggleSidebar = () =>\n    this.setState({ isToggleSidebar: !this.state.isToggleSidebar });\n\n  tradeHandler = (item: any, name: string) => {\n    const id = item?._id;\n    if (name === \"trade\") {\n      if (this.state.trade.length && this.state.trade[0] == id) {\n        this.setState({\n          trade: [],\n          tradeData: [],\n          specialization: [],\n          allSpecializationSelected: false,\n        });\n      } else {\n        this.setState({\n          trade: [id],\n          tradeData: [\n            {\n              tradeId: id,\n              tradeName: item?.trade_name,\n              tradeSelectedUrl: item?.selected_url,\n            },\n          ],\n          specialization: [],\n          allSpecializationSelected: false,\n        });\n      }\n    } else if (name === \"specializationId\") {\n      this.setState((state: any) => {\n        var newData = [...state.specialization];\n        var newSpecsData = [...state.specializationData];\n        if (state.allSpecializationSelected) {\n          newData = [];\n          newSpecsData = [];\n        }\n        const itemIndex = newData.indexOf(id);\n        if (newData.indexOf(id) < 0) {\n          newData.push(id);\n          newSpecsData.push({\n            specializationId: id,\n            specializationName: item?.name,\n          });\n        } else {\n          newData.splice(itemIndex, 1);\n          newSpecsData.splice(itemIndex, 1);\n        }\n        return {\n          specialization: newData,\n          specializationData: newSpecsData,\n          allSpecializationSelected: false,\n        };\n      });\n    } else if (name === \"All Clicked\") {\n      if (this.state.allSpecializationSelected) {\n        this.setState({\n          allSpecializationSelected: false,\n          specialization: [],\n          specializationData: [],\n        });\n      } else {\n        const newSpecialization = item.map(({ _id }: { _id: string }) => _id);\n        const newSpecializationData = item.map(\n          ({ _id, name }: { _id: string; name: string }) => {\n            return {\n              specializationId: _id,\n              specializationName: name,\n            };\n          }\n        );\n        this.setState({\n          allSpecializationSelected: true,\n          specialization: newSpecialization,\n          specializationData: newSpecializationData,\n        });\n      }\n    } else if (name === \"Clear All\") {\n      this.setState({\n        allSpecializationSelected: false,\n        trade: [],\n        tradeData: [],\n        specialization: [],\n        specializationData: [],\n      });\n    }\n  };\n\n  submitAreasOfTrade = () => {\n    const newData = { ...this.state.profileViewData };\n    newData.areasOfSpecialization.tradeData = this.state.tradeData;\n    newData.areasOfSpecialization.specializationData =\n      this.state.specializationData;\n    this.setState({\n      profileViewData: newData,\n      areasOfSpecsModalClicked: false,\n      isProfileViewDataChanged: true,\n    });\n  };\n\n  onFileChange = async (e: any, type?: string, id?: string) => {\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n    var uploadFileName = newFile?.name?.split(\".\");\n    uploadFileName?.pop();\n    uploadFileName = uploadFileName?.join(\".\");\n    var fileType = newFile?.type?.split(\"/\")[1]?.toLowerCase();\n    const docTypes: Array<any> = [\n      \"jpeg\",\n      \"jpg\",\n      \"png\",\n      \"pdf\",\n      \"msword\",\n      \"doc\",\n      \"docx\",\n      \"vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    ];\n    const docTypes2: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\n    var selectedFileSize = newFile?.size / 1024 / 1024;\n    if (type === \"profileImage\" || type === \"addJobPhotos\") {\n      if (docTypes2.indexOf(fileType) < 0 || selectedFileSize > 10) {\n        alert(\"The file must be in proper format or size\");\n        return;\n      }\n    } else if (docTypes.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      alert(\"The file must be in proper format or size\");\n      return;\n    }\n    formData.append(\"file\", newFile);\n    if (type === \"profileImage\") {\n      this.setState({\n        userImage: URL.createObjectURL(newFile),\n        formData: formData,\n        isProfileViewDataChanged: true,\n      });\n    }\n    if (type === \"addJobPhotos\") {\n      const res = await onFileUpload(formData);\n      if (res.success) {\n        const data: any = { ...this.state.portfolioJobDetail };\n        data?.portfolioImage?.push(res.imgUrl);\n        this.setState({ portfolioJobDetail: data });\n      }\n    }\n    if (type === \"filledQualification\") {\n      const res = await onFileUpload(formData);\n      if (res.success) {\n        const newBasicData: any = { ...this.state.basicDetailsData };\n        const newqualificationDoc: Array<any> = newBasicData?.qualificationDoc;\n        const item = newqualificationDoc?.find(\n          (i) => i.qualification_id === id\n        );\n        item.url = res.imgUrl;\n        item.fileName = uploadFileName;\n        this.setState({\n          basicDetailsData: newBasicData,\n          isEditProfileModalChanged: true,\n        });\n      }\n    }\n    if (type === \"remainingQualification\") {\n      const res = await onFileUpload(formData);\n      if (res.success) {\n        const data: Array<any> = [...this.state.remainingQualificationDoc];\n        const item = data?.find((i) => i._id === id);\n        item.url = res.imgUrl;\n        item.fileName = uploadFileName;\n        this.setState({\n          remainingQualificationDoc: data,\n          isEditProfileModalChanged: true,\n        });\n      }\n    }\n  };\n\n  validateBasicDetailsForm = () => {\n    const newErrors: any = {};\n    if (!this.state.basicDetailsData?.fullName) {\n      newErrors.fullName = Constants.errorStrings.fullNameEmpty;\n    } else if (this.state.basicDetailsData?.fullName.trim()?.length > 50) {\n      newErrors.fullName = \"Maximum 50 characters are allowed.\";\n    } else {\n      const nameRegex = new RegExp(regex.fullname);\n      if (!nameRegex.test(this.state.basicDetailsData?.fullName.trim())) {\n        newErrors.fullName = Constants.errorStrings.fullNameErr;\n      }\n    }\n\n    if (!this.state.basicDetailsData?.mobileNumber) {\n      newErrors.mobileNumber = Constants.errorStrings.phoneNumberEmpty;\n    } else {\n      const phoneRegex = new RegExp(regex.mobile);\n      if (!phoneRegex.test(this.state.basicDetailsData?.mobileNumber)) {\n        newErrors.mobileNumber = Constants.errorStrings.phoneNumberErr;\n      }\n    }\n\n    if (!this.state.basicDetailsData?.abn) {\n      newErrors.abn = Constants.errorStrings.abnEmpty;\n    } else {\n      const abnRegex = new RegExp(regex.abn);\n      if (!abnRegex.test(this.state.basicDetailsData.abn.replaceAll(\" \", \"\"))) {\n        newErrors.abn = Constants.errorStrings.abnErr;\n      }\n      if (!validateABN(this.state.basicDetailsData.abn.replaceAll(\" \", \"\"))) {\n        newErrors.abn = Constants.errorStrings.abnErr;\n      }\n    }\n\n    if (this.userType === 1) {\n      const newQualificationDoc =\n        this.state.basicDetailsData?.qualificationDoc?.find(\n          ({ url, isSelected }: { url: string; isSelected: string }) =>\n            !url?.length && !isSelected?.length\n        );\n      if (\n        !!newQualificationDoc &&\n        Object.keys(newQualificationDoc)?.length > 0\n      ) {\n        setShowToast(true, \"Please upload all selected documents\");\n        return;\n      }\n\n      const newRemainingDoc = this.state.remainingQualificationDoc?.find(\n        ({ url, isSelected }: { url: string; isSelected: string }) =>\n          !url?.length && isSelected?.length\n      );\n      console.log(newRemainingDoc, \"newRemainingDoc validation\");\n      if (!!newRemainingDoc && Object.keys(newRemainingDoc)?.length > 0) {\n        setShowToast(true, \"Please upload all selected documents\");\n        return;\n      }\n    } else {\n      if (!this.state.basicDetailsData?.companyName) {\n        newErrors.companyName = Constants.errorStrings.companyNameEmpty;\n      } else if (this.state.basicDetailsData?.companyName.trim()?.length > 50) {\n        newErrors.companyName = \"Maximum 50 characters are allowed.\";\n      } else {\n        const nameRegex = new RegExp(regex.fullname);\n        if (!nameRegex.test(this.state.basicDetailsData.companyName.trim())) {\n          newErrors.companyName = Constants.errorStrings.companyNameErr;\n        }\n      }\n      if (!this.state.basicDetailsData?.position) {\n        newErrors.position = Constants.errorStrings.positionNameEmpty;\n      } else if (this.state.basicDetailsData?.position.trim()?.length > 50) {\n        newErrors.position = \"Maximum 50 Characters Are Allowed.\";\n      } else {\n        const positionRegex = new RegExp(regex.fullname);\n        if (!positionRegex.test(this.state.basicDetailsData.position.trim())) {\n          newErrors.position = Constants.errorStrings.positionNameErr;\n        }\n      }\n    }\n\n    this.setState({ errors: newErrors });\n    return !Object.keys(newErrors).length;\n  };\n\n  validatePasswordForm = () => {\n    const newErrors: any = {};\n    if (!this.state.password) {\n      newErrors.password = Constants.errorStrings.oldPassword;\n    }\n    if (!this.state.newPassword) {\n      newErrors.newPassword = \"New Password is required\";\n    } else {\n      const passwordRegex = new RegExp(regex.password);\n      if (!passwordRegex.test(this.state.newPassword.trim())) {\n        newErrors.newPassword = Constants.errorStrings.passwordError;\n      }\n    }\n    if (\n      this.state.newPassword.trim() !== this.state.confirmNewPassword.trim()\n    ) {\n      newErrors.confirmNewPassword = Constants.errorStrings.confirmNewPassword;\n    }\n    this.setState({ errors: newErrors });\n    return !Object.keys(newErrors).length;\n  };\n\n  validateChangeEmailForm = () => {\n    const newErrors: any = {};\n    if (!this.state.newEmail) {\n      newErrors.newEmail = \"New Email Address is required\";\n    } else {\n      const emailRegex = new RegExp(regex.email);\n      if (!emailRegex.test(this.state.basicDetailsData?.email)) {\n        newErrors.newEmail = Constants.errorStrings.emailErr;\n      }\n    }\n\n    if (!this.state.password) {\n      newErrors.currentPassword = \"Current Password is required\";\n    } else {\n      const passwordRegex = new RegExp(regex.password);\n      if (!passwordRegex.test(this.state.password.trim())) {\n        newErrors.currentPassword = Constants.errorStrings.passwordError;\n      }\n    }\n\n    this.setState({ errors: newErrors });\n    return !Object.keys(newErrors).length;\n  };\n\n  changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newBasicDetails = { ...this.state.basicDetailsData };\n    newBasicDetails[`${e.target.name}`] = e.target.value;\n    this.setState({\n      basicDetailsData: newBasicDetails,\n      isEditProfileModalChanged: true,\n    });\n  };\n\n  submitBasicProfileDetails = async () => {\n    if (this.validateBasicDetailsForm()) {\n      const basicDetails = { ...this.state.basicDetailsData };\n      const filledQualification =\n        this.userType === 1\n          ? [...this.state.basicDetailsData?.qualificationDoc]?.map(\n              ({\n                url,\n                qualification_id,\n              }: {\n                url: string;\n                qualification_id: string;\n              }) =>\n                url?.length && { qualification_id: qualification_id, url: url }\n            )\n          : [];\n      const newFilledQualification = filledQualification?.filter(\n        (i: any) => i && Object.keys(i)?.length > 0\n      );\n      const remainingQualification = this.state.remainingQualificationDoc?.map(\n        ({ _id, url }: { _id: string; url: string }) =>\n          url?.length && { qualification_id: _id, url: url }\n      );\n      const newRemainingQualification = remainingQualification?.filter(\n        (i: any) => i && Object.keys(i)?.length > 0\n      );\n\n      const builderData = {\n        companyName: basicDetails?.companyName,\n        position: basicDetails?.position,\n      };\n\n      const data = {\n        fullName: basicDetails?.fullName,\n        mobileNumber: basicDetails?.mobileNumber,\n        email: basicDetails?.email,\n        abn: basicDetails?.abn,\n        qualificationDoc:\n          this.userType === 1\n            ? [...newFilledQualification, ...newRemainingQualification]\n            : undefined,\n        ...(this.userType === 1 ? {} : builderData),\n        ...(this.userType === 1 && {\n          businessName: basicDetails?.businessName,\n        }),\n      };\n      const res = await tradieUpdateBasicDetails(data);\n      if (res?.success) {\n        this.props.cleanTradieBasicDetails();\n        updateChatUserDetails(\"userName\", data.fullName);\n        basicDetails.qualificationDoc =\n          this.userType === 1 ? data.qualificationDoc : [];\n        this.setState((prevState: any) => ({\n          profileModalClicked: false,\n          addQualificationClicked: false,\n          remainingQualificationDoc: [],\n          basicDetailsData: basicDetails,\n          isEditProfileModalChanged: false,\n        }));\n        this.props.getTradieBasicDetails();\n        this.userType === 1\n          ? this.props.callTradieProfileData()\n          : this.props.getProfileBuilder();\n      }\n    }\n  };\n\n  passwordHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState((prevState: any) => ({\n      ...prevState,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  updatePasswordHandler = async () => {\n    if (this.validatePasswordForm()) {\n      const data = {\n        user_type: storageService.getItem(\"userType\"),\n        oldPassword: this.state.password,\n        newPassword: this.state.newPassword,\n      };\n      const res = await tradieUpdatePassword(data);\n      if (res.success) {\n        this.props.history.push(\"/change-password-success\");\n      }\n    }\n  };\n\n  passwordModalCloseHandler = () => {\n    this.setState({\n      profileModalClicked: true,\n      passwordModalClicked: false,\n      password: \"\",\n      newPassword: \"\",\n      confirmNewPassword: \"\",\n      showPassword: false,\n      showNewPassword: false,\n      showConfirmNewPassword: false,\n      errors: {},\n    });\n  };\n\n  changeEmailModalCloseHandler = () => {\n    this.setState({\n      profileModalClicked: true,\n      changeEmailModalClicked: false,\n      password: \"\",\n      newEmail: \"\",\n      showPassword: false,\n      errors: {},\n    });\n  };\n\n  submitPortfolioJobs = async () => {\n    if (this.state.addPortfolioJob) {\n      const portfolioJobDetail = this.state.portfolioJobDetail;\n      const data = {\n        jobName: portfolioJobDetail?.jobName,\n        jobDescription: portfolioJobDetail?.jobDescription,\n        url: portfolioJobDetail?.portfolioImage,\n      };\n      const res = await tradieAddPortfolioJob(data);\n      if (res?.success) {\n        moengage.moE_SendEvent(MoEConstants.ADDED_PORTFOLIO, {\n          timeStamp: moengage.getCurrentTimeStamp(),\n        });\n        mixPanel.mixP_SendEvent(MoEConstants.ADDED_PORTFOLIO, {\n          timeStamp: moengage.getCurrentTimeStamp(),\n        });\n        const data = { ...this.state.profileViewData };\n        data.portfolio.push(res?.data);\n        this.setState({\n          portfolioJobDetail: \"\",\n          profileViewData: data,\n          portfolioJobClicked: false,\n          isAddEditPortfolioModal: false,\n          addPortfolioJob: false,\n          portfolioJobIndex: null,\n        });\n      }\n    }\n    if (this.state.editPortfolioJob) {\n      const portfolioJobDetail = this.state.portfolioJobDetail;\n      const data = {\n        portfolioId: portfolioJobDetail?.portfolioId,\n        jobName: portfolioJobDetail?.jobName,\n        jobDescription: portfolioJobDetail?.jobDescription,\n        url: portfolioJobDetail?.portfolioImage,\n      };\n      const res = await tradieUpdatePortfolioJob(data);\n      if (res?.success) {\n        const index = this.state.portfolioJobIndex;\n        const newProfileData = { ...this.state.profileViewData };\n        const newPortfolio = newProfileData?.portfolio;\n        newPortfolio.splice(index, 1, portfolioJobDetail);\n        this.setState({\n          profileViewData: newProfileData,\n          portfolioJobClicked: true,\n          isAddEditPortfolioModal: false,\n          editPortfolioJob: false,\n          portfolioJobIndex: null,\n        });\n        return;\n      }\n    }\n    if (this.state.deletePortfolioJob) {\n      const portfolioJobDetail = this.state.portfolioJobDetail;\n      const index = this.state.portfolioJobIndex;\n      const newProfileData = { ...this.state.profileViewData };\n      const newPortfolio = newProfileData?.portfolio;\n      newPortfolio.splice(index, 1);\n      const res = await tradieDeletePortfolioJob(\n        portfolioJobDetail?.portfolioId\n      );\n      if (res?.success) {\n        this.setState({\n          portfolioJobDetail: \"\",\n          profileViewData: newProfileData,\n          portfolioJobClicked: false,\n          isAddEditPortfolioModal: false,\n          deletePortfolioJob: false,\n          confirmationModalClicked: false,\n          portfolioJobIndex: null,\n        });\n        return;\n      }\n    }\n  };\n\n  closeAddEditPortofolioModal = () => {\n    this.setState((prevState: any) => ({\n      isAddEditPortfolioModal: false,\n      portfolioJobClicked: prevState.addPortfolioJob ? false : true,\n      addPortfolioJob: false,\n    }));\n  };\n\n  addNewPortfolioJob = () => {\n    this.setState({\n      addPortfolioJob: true,\n      isAddEditPortfolioModal: true,\n      portfolioJobDetail: {\n        jobName: \"\",\n        jobDescription: \"\",\n        portfolioImage: [],\n      },\n    });\n  };\n\n  addInfoAboutYou = () => {\n    this.setState((prevState: any) => ({\n      aboutModalClicked: true,\n      about:\n        prevState?.profileViewData?.about ||\n        prevState?.profileViewData?.aboutCompany ||\n        \"\",\n    }));\n  };\n\n  submitUpdateProfile = async () => {\n    const newSpecialization: Array<any> = [\n      ...this.state.profileViewData?.areasOfSpecialization?.specializationData,\n    ];\n    var newSpecializationData: Array<any> = newSpecialization?.map(\n      ({ specializationId }: { specializationId: string }) =>\n        specializationId?.length > 0 && specializationId\n    );\n    const data = {\n      fullName: this.state.basicDetailsData?.fullName,\n      userImage:\n        this.state.profileViewData?.tradieImage ||\n        this.state.profileViewData?.builderImage,\n      trade: [\n        this.state.profileViewData?.areasOfSpecialization?.tradeData[0]\n          ?.tradeId,\n      ],\n      specialization: newSpecializationData,\n      about:\n        this.userType === 1\n          ? this.state.profileViewData?.about || \"\"\n          : undefined,\n      position:\n        this.userType === 1 ? undefined : this.state.profileViewData?.position,\n      companyName:\n        this.userType === 1\n          ? undefined\n          : this.state.profileViewData?.companyName,\n      aboutCompany:\n        this.userType === 1\n          ? undefined\n          : this.state.profileViewData?.about ||\n            this.state.profileViewData?.aboutCompany,\n    };\n    if (this.state.formData) {\n      const res1 = await onFileUpload(this.state.formData);\n      if (res1?.success) {\n        data.userImage = res1?.imgUrl;\n      }\n    }\n    const res2 = await tradieUpdateProfileDetails(data);\n    if (res2?.success) {\n      if (this.state.formData) {\n        updateChatUserDetails(\"userImage\", data.userImage);\n      }\n      this.setState({\n        formData: null,\n        isProfileViewDataChanged: false,\n      });\n      this.userType === 1\n        ? this.props.callTradieProfileData()\n        : this.props.getProfileBuilder();\n      if (\n        this.userType === 2 &&\n        this.state.about &&\n        this.state.profileViewData?.companyName !== this.state.about\n      ) {\n        moengage.moE_SendEvent(MoEConstants.ADDED_INFO_ABOUT_COMPANY, {\n          timeStamp: moengage.getCurrentTimeStamp(),\n        });\n        mixPanel.mixP_SendEvent(MoEConstants.ADDED_INFO_ABOUT_COMPANY, {\n          timeStamp: moengage.getCurrentTimeStamp(),\n        });\n      }\n    }\n  };\n\n  changeEmailHandler = async () => {\n    if (this.validateChangeEmailForm()) {\n      const data = {\n        currentEmail: this.state.basicDetailsData?.email,\n        newEmail: this.state.newEmail,\n        password: this.state.password,\n        user_type: storageService.getItem(\"userType\"),\n      };\n      const res = await tradieChangeEmail(data);\n      if (res?.success) {\n      }\n    }\n  };\n\n  removeQualificationFileHandler = (e: any, id: string, type: string) => {\n    e.stopPropagation();\n    if (type === \"filledQualification\") {\n      const newBasicData: any = { ...this.state.basicDetailsData };\n      const newqualificationDoc: Array<any> = newBasicData?.qualificationDoc;\n      const item = newqualificationDoc?.find((i) => i.qualification_id === id);\n      item.url = \"\";\n      item.fileName = \"\";\n      newBasicData.qualificationDoc = newqualificationDoc;\n      this.setState({ basicDetailsData: newBasicData });\n    }\n    if (type === \"remainingQualification\") {\n      const data: Array<any> = [...this.state.remainingQualificationDoc];\n      const item = data?.find((i) => i._id === id);\n      item.url = \"\";\n      item.fileName = \"\";\n      this.setState({ remainingQualificationDoc: data });\n    }\n  };\n\n  changeQualificationHandler = (id: string, type: string) => {\n    if (type === \"filledQualification\") {\n      const newBasicData: any = { ...this.state.basicDetailsData };\n      const newqualificationDoc: Array<any> = newBasicData?.qualificationDoc;\n      const item = newqualificationDoc?.find((i) => i.qualification_id === id);\n      const itemIndex = newqualificationDoc?.indexOf(item);\n      if (item.isSelected) {\n        newqualificationDoc.splice(itemIndex, 1, {\n          qualification_id: id,\n          url: \"\",\n        });\n      } else {\n        newqualificationDoc.splice(itemIndex, 1, {\n          qualification_id: id,\n          url: \"\",\n          isSelected: \"isSelected\",\n        });\n      }\n      newBasicData.qualificationDoc = newqualificationDoc;\n      this.setState({ basicDetailsData: newBasicData });\n    }\n\n    if (type === \"remainingQualification\") {\n      const newqualificationDoc: Array<any> = [\n        ...this.state.remainingQualificationDoc,\n      ];\n      const item = newqualificationDoc?.find((i) => i._id === id);\n      const itemIndex = newqualificationDoc?.indexOf(item);\n      if (item.isSelected) {\n        newqualificationDoc.splice(itemIndex, 1, {\n          _id: id,\n          url: \"\",\n          name: item.name,\n        });\n      } else {\n        newqualificationDoc.splice(itemIndex, 1, {\n          _id: id,\n          url: \"\",\n          name: item.name,\n          isSelected: \"isSelected\",\n        });\n      }\n      this.setState({ remainingQualificationDoc: newqualificationDoc });\n    }\n  };\n\n  qualificationFileDetails = (url: any) => {\n    var fileArray = url.replace(/^.*[\\\\\\/]/, \"\").split(\".\");\n    const type = fileArray[1].toLowerCase();\n    switch (type) {\n      case \"jpeg\":\n        return { fileName: fileArray[0], fileType: jpegFile };\n      case \"jpg\":\n        return { fileName: fileArray[0], fileType: jpgFile };\n      case \"png\":\n        return { fileName: fileArray[0], fileType: pngFile };\n      case \"pdf\":\n        return { fileName: fileArray[0], fileType: pdfFile };\n      case \"doc\":\n        return { fileName: fileArray[0], fileType: docFile };\n      case \"docx\":\n        return { fileName: fileArray[0], fileType: docFile };\n      default:\n        return null;\n    }\n  };\n\n  editProfileCloseHandler = () => {\n    this.setState((prevState: any) => ({\n      profileModalClicked: false,\n      basicDetailsData: this.props.tradieBasicDetailsData\n        ? this.props.tradieBasicDetailsData\n        : {},\n      addQualificationClicked: false,\n      remainingQualificationDoc: [],\n      errors: {},\n    }));\n  };\n\n  render() {\n    let props: any = this.props;\n    let {\n      errors,\n      profileModalClicked,\n      areasOfSpecsModalClicked,\n      aboutModalClicked,\n      isAddEditPortfolioModal,\n      portfolioJobClicked,\n      passwordModalClicked,\n      basicDetailsData,\n      trade,\n      specialization,\n      allSpecializationSelected,\n      about,\n      userImage,\n      profileViewData,\n      password,\n      showPassword,\n      newPassword,\n      showNewPassword,\n      confirmNewPassword,\n      showConfirmNewPassword,\n      portfolioJobDetail,\n      addPortfolioJob,\n      confirmationModalClicked,\n      changeEmailModalClicked,\n      isProfileViewDataChanged,\n      isEditProfileModalChanged,\n      addQualificationClicked,\n      localQualificationDoc,\n      remainingQualificationDoc,\n    } = this.state;\n\n    const tradeList: any = props.tradeListData;\n    const isSkeletonLoading: any = props.isSkeletonLoading;\n    const specializationList = props.tradeListData.find(\n      ({ _id }: { _id: string }) => _id === trade[0]\n    )?.specialisations;\n\n    return (\n      <>\n        <div className=\"flex_row f_col\">\n          <div className=\"flex_col_sm_4\">\n            <div className=\"upload_profile_pic\">\n              {isSkeletonLoading ? (\n                <Skeleton height={240} />\n              ) : (\n                <figure className=\"user_img\">\n                  <img src={userImage ? userImage : dummy} alt=\"Profile-pic\" />\n                  <label className=\"camera\" htmlFor=\"upload_profile_pic\">\n                    <img src={cameraBlack} alt=\"camera\" />\n                  </label>\n                  <input\n                    type=\"file\"\n                    accept=\"image/png,image/jpg,image/jpeg\"\n                    style={{ display: \"none\" }}\n                    id=\"upload_profile_pic\"\n                    onChange={(e) => this.onFileChange(e, \"profileImage\")}\n                  />\n                </figure>\n              )}\n            </div>\n          </div>\n          <div className=\"flex_col_sm_8\">\n            <div className=\"title_view_wrap\">\n              {isSkeletonLoading ? (\n                <Skeleton />\n              ) : (\n                <span\n                  className=\"title line-2\"\n                  title={basicDetailsData?.fullName}\n                >\n                  {basicDetailsData?.fullName}\n                  <span\n                    className=\"edit_icon\"\n                    title=\"Edit\"\n                    onClick={() => this.setState({ profileModalClicked: true })}\n                  >\n                    <img src={editIconBlue} alt=\"edit\" />\n                  </span>\n                </span>\n              )}\n              {isSkeletonLoading ? (\n                <Skeleton />\n              ) : (\n                <a\n                  href=\"javascript:void(0)\"\n                  className=\"view_profile\"\n                  onClick={() => {\n                    props.cleanTradieProfileViewData();\n                    props.history.push(\n                      `/${this.userType === 1 ? \"tradie\" : \"builder\"}-info?${\n                        this.userType === 1 ? \"trade\" : \"builder\"\n                      }Id=${basicDetailsData?.userId}`\n                    );\n                  }}\n                >\n                  <img src={viewProfile} alt=\"view-profile\" />\n                  View public profile\n                </a>\n              )}\n            </div>\n\n            <span className=\"tagg\">\n              {isSkeletonLoading ? <Skeleton /> : basicDetailsData?.position}\n            </span>\n\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_4 w85per\">\n                <div className=\"job_progress_wrap\" id=\"scroll-progress-bar\">\n                  {isSkeletonLoading ? (\n                    <Skeleton count={2} />\n                  ) : (\n                    <div className=\"progress_wrapper\">\n                      <span className=\"show_label\">Complete your profile</span>\n                      <span className=\"approval_info\">\n                        {this.userType === 1\n                          ? this.props.tradieProfileData?.profileCompleted\n                          : this.props.builderProfile?.profileCompleted}\n                      </span>\n                      <span className=\"progress_bar\">\n                        <input\n                          className=\"done_progress\"\n                          id=\"progress-bar\"\n                          type=\"range\"\n                          min=\"0\"\n                          value={parseInt(\n                            this.userType === 1\n                              ? this.props.tradieProfileData?.profileCompleted\n                              : this.props.builderProfile?.profileCompleted\n                          )}\n                        />\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <ul className=\"review_job\">\n              {isSkeletonLoading ? (\n                <Skeleton />\n              ) : (\n                <li>\n                  <span className=\"icon reviews\">\n                    {profileViewData?.ratings || \"0\"}\n                  </span>\n                  <span className=\"review_count\">{`${\n                    profileViewData?.reviewsCount || \"0\"\n                  } reviews`}</span>\n                </li>\n              )}\n              {isSkeletonLoading ? (\n                <Skeleton />\n              ) : (\n                <li>\n                  <span className=\"icon job\">\n                    {profileViewData?.jobCompletedCount}\n                  </span>\n                  <span className=\"review_count\"> jobs completed</span>\n                </li>\n              )}\n            </ul>\n          </div>\n        </div>\n\n        <Modal\n          className=\"custom_modal\"\n          open={profileModalClicked}\n          onClose={this.editProfileCloseHandler}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div\n            className=\"custom_wh profile_modal\"\n            data-aos=\"zoom-in\"\n            data-aos-delay=\"30\"\n            data-aos-duration=\"1000\"\n          >\n            <div className=\"heading\">\n              <span className=\"sub_title\">Edit Profile</span>\n              <button\n                className=\"close_btn\"\n                onClick={this.editProfileCloseHandler}\n              >\n                <img src={cancel} alt=\"cancel\" />\n              </button>\n            </div>\n            <div className=\"inner_wrap\">\n              <div className=\"inner_wrappr\">\n                <div className=\"form_field\">\n                  <label className=\"form_label\">Full Name</label>\n                  <div className=\"text_field\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Enter Full Name\"\n                      name=\"fullName\"\n                      value={basicDetailsData?.fullName}\n                      onChange={this.changeHandler}\n                    />\n                  </div>\n                  {!!errors?.fullName && (\n                    <span className=\"error_msg\">{errors?.fullName}</span>\n                  )}\n                </div>\n                <div className=\"form_field\">\n                  <label className=\"form_label\">Mobile Number</label>\n                  <div className=\"text_field f_spacebw\">\n                    <span className=\"show_label\">{`+61 ${basicDetailsData?.mobileNumber}`}</span>\n                  </div>\n                  {!!errors?.mobileNumber && (\n                    <span className=\"error_msg\">{errors?.mobileNumber}</span>\n                  )}\n                </div>\n                <div className=\"form_field\">\n                  <label className=\"form_label\">Email</label>\n                  <div className=\"text_field f_spacebw\">\n      \n                    <span className=\"show_label\">\n                      {basicDetailsData?.email}\n                    </span>\n                  </div>\n                  {!!errors?.email && (\n                    <span className=\"error_msg\">{errors?.email}</span>\n                  )}\n                </div>\n                {storageService.getItem(\"userInfo\")?.accountType ===\n                  \"normal\" && (\n                  <div className=\"form_field f_spacebw\">\n                    <a\n                      className=\"link\"\n                      onClick={() =>\n                        this.setState({\n                          changeEmailModalClicked: true,\n                          profileModalClicked: false,\n                        })\n                      }\n                    >\n                      {\" \"}\n                      Change Email\n                    </a>\n                    <a\n                      className=\"link\"\n                      onClick={() =>\n                        this.setState({\n                          passwordModalClicked: true,\n                          profileModalClicked: false,\n                        })\n                      }\n                    >\n                      Change Password\n                    </a>\n                  </div>\n                )}\n\n                {this.userType === 1 && (\n                  <div className=\"form_field\">\n                    <label className=\"form_label\">Business Name</label>\n                    <div className=\"text_field\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Enter Business Name\"\n                        name=\"businessName\"\n                        value={basicDetailsData?.businessName}\n                        onChange={this.changeHandler}\n                      />\n                    </div>\n                    {!!errors?.businessName && (\n                      <span className=\"error_msg\">{errors?.businessName}</span>\n                    )}\n                  </div>\n                )}\n                {this.userType === 1 && (\n                  <div className=\"form_field\">\n                    <label className=\"form_label\">\n                      Australian Business Number\n                    </label>\n                    <div className=\"text_field\">\n                      <NumberFormat\n                        value={basicDetailsData?.abn}\n                        displayType={\"input\"}\n                        type={\"tel\"}\n                        placeholder=\"51 824 753 556\"\n                        format=\"## ### ### ###\"\n                        isNumericString={true}\n                        onValueChange={(values) => {\n                          const { formattedValue, value } = values;\n                          const newBasicDetails = {\n                            ...this.state.basicDetailsData,\n                          };\n                          newBasicDetails.abn = value;\n                          this.setState({\n                            basicDetailsData: newBasicDetails,\n                            isEditProfileModalChanged: true,\n                          });\n                        }}\n                      />\n                    </div>\n                    {!!errors?.abn && (\n                      <span className=\"error_msg\">{errors?.abn}</span>\n                    )}\n                  </div>\n                )}\n\n                {this.userType === 1 && (\n                  <div className=\"form_field\">\n                    <label className=\"form_label\">\n                      Qualification documents{\" \"}\n                    </label>\n\n                    {basicDetailsData?.qualificationDoc?.length > 0 &&\n                      localQualificationDoc.length > 0 && (\n                        <>\n                          {basicDetailsData?.qualificationDoc?.map(\n                            ({\n                              qualification_id,\n                              url,\n                              isSelected,\n                              fileName,\n                            }: {\n                              qualification_id: string;\n                              url: string;\n                              isSelected: string;\n                              fileName: string;\n                            }) => {\n                              const qualificationName: string =\n                                localQualificationDoc.find(\n                                  ({ _id }: { _id: string }) =>\n                                    _id === qualification_id\n                                )?.name;\n                              const docDetails: any =\n                                url && this.qualificationFileDetails(url);\n                              return (\n                                <>\n                                  <div\n                                    className=\"f_spacebw mt-15\"\n                                    key={qualification_id}\n                                  >\n                                    <div className=\"checkbox_wrap agree_check\">\n                                      <input\n                                        className=\"filter-type filled-in\"\n                                        type=\"checkbox\"\n                                        checked={!!isSelected ? false : true}\n                                        name={qualificationName}\n                                        id={qualificationName}\n                                        onChange={() =>\n                                          this.changeQualificationHandler(\n                                            qualification_id,\n                                            \"filledQualification\"\n                                          )\n                                        }\n                                      />\n                                      <label htmlFor={qualificationName}>\n                                        {qualificationName}\n                                      </label>\n                                    </div>\n                                    {url ? (\n                                      <div\n                                        className=\"file_upload_box\"\n                                        onClick={() =>\n                                          window.open(\n                                            `${window.location.origin}/doc-view?url=${url}&header=true`,\n                                            \"_blank\"\n                                          )\n                                        }\n                                      >\n                                        <span\n                                          className=\"close\"\n                                          onClick={(e) =>\n                                            this.removeQualificationFileHandler(\n                                              e,\n                                              qualification_id,\n                                              \"filledQualification\"\n                                            )\n                                          }\n                                        >\n                                          <img src={removeFile} />\n                                        </span>\n                                        <span className=\"file_icon\">\n                                          <img src={docDetails?.fileType} />\n                                        </span>\n                                        <div className=\"file_details\">\n                                          <span className=\"name\">\n                                            {fileName\n                                              ? fileName\n                                              : docDetails?.fileName}\n                                          </span>\n                                        </div>\n                                      </div>\n                                    ) : (\n                                      <div className=\"upload_doc\">\n                                        <label\n                                          className={`upload_btn ${\n                                            isSelected ? \"disable\" : \"\"\n                                          }`}\n                                          htmlFor={qualificationName + \"upload\"}\n                                        >\n                                          Upload\n                                        </label>\n                                        <input\n                                          type=\"file\"\n                                          className=\"none\"\n                                          id={qualificationName + \"upload\"}\n                                          accept=\"image/jpeg,image/jpg,image/png,application/pdf,application/msword,.doc,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n                                          disabled={!!isSelected ? true : false}\n                                          onChange={(e) =>\n                                            this.onFileChange(\n                                              e,\n                                              \"filledQualification\",\n                                              qualification_id\n                                            )\n                                          }\n                                        />\n                                      </div>\n                                    )}\n                                  </div>\n                                </>\n                              );\n                            }\n                          )}\n                        </>\n                      )}\n\n                    {addQualificationClicked &&\n                      remainingQualificationDoc?.length > 0 &&\n                      remainingQualificationDoc?.map(\n                        ({\n                          _id,\n                          name,\n                          url,\n                          isSelected,\n                          fileName,\n                        }: {\n                          _id: string;\n                          name: string;\n                          url: string;\n                          isSelected: string;\n                          fileName: string;\n                        }) => {\n                          const docDetails: any =\n                            url && this.qualificationFileDetails(url);\n                          return (\n                            <>\n                              <div className=\"f_spacebw mt-15\" key={_id}>\n                                <div className=\"checkbox_wrap agree_check\">\n                                  <input\n                                    className=\"filter-type filled-in\"\n                                    type=\"checkbox\"\n                                    checked={!!isSelected ? true : false}\n                                    name={name}\n                                    id={name}\n                                    onChange={() =>\n                                      this.changeQualificationHandler(\n                                        _id,\n                                        \"remainingQualification\"\n                                      )\n                                    }\n                                  />\n                                  <label htmlFor={name}>{name}</label>\n                                </div>\n                                {url ? (\n                                  <div\n                                    className=\"file_upload_box\"\n                                    onClick={() =>\n                                      window.open(\n                                        `${window.location.origin}/doc-view?url=${url}&header=true`,\n                                        \"_blank\"\n                                      )\n                                    }\n                                  >\n                                    <span\n                                      className=\"close\"\n                                      onClick={(e) =>\n                                        this.removeQualificationFileHandler(\n                                          e,\n                                          _id,\n                                          \"remainingQualification\"\n                                        )\n                                      }\n                                    >\n                                      <img src={removeFile} />\n                                    </span>\n                                    <span className=\"file_icon\">\n                                      <img src={docDetails?.fileType} />\n                                    </span>\n                                    <div className=\"file_details\">\n                                      <span className=\"name\">{fileName}</span>\n                                    </div>\n                                  </div>\n                                ) : (\n                                  <div className=\"upload_doc\">\n                                    <label\n                                      className={`upload_btn ${\n                                        !isSelected ? \"disable\" : \"\"\n                                      }`}\n                                      htmlFor={name + \"upload\"}\n                                    >\n                                      Upload\n                                    </label>\n                                    <input\n                                      type=\"file\"\n                                      className=\"none\"\n                                      id={name + \"upload\"}\n                                      accept=\"image/jpeg,image/jpg,image/png,application/pdf,application/msword,.doc,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n                                      disabled={!!isSelected ? false : true}\n                                      onChange={(e) =>\n                                        this.onFileChange(\n                                          e,\n                                          \"remainingQualification\",\n                                          _id\n                                        )\n                                      }\n                                    />\n                                  </div>\n                                )}\n                              </div>\n                            </>\n                          );\n                        }\n                      )}\n                  </div>\n                )}\n                {this.userType === 2 && (\n                  <>\n                    <div className=\"form_field\">\n                      <label className=\"form_label\">Company Name</label>\n                      <div className=\"text_field\">\n                        <input\n                          type=\"text\"\n                          placeholder=\"Company Name\"\n                          name=\"companyName\"\n                          value={basicDetailsData?.companyName}\n                          onChange={this.changeHandler}\n                        />\n                      </div>\n                      {!!errors?.companyName && (\n                        <span className=\"error_msg\">{errors?.companyName}</span>\n                      )}\n                    </div>\n                    <div className=\"form_field\">\n                      <label className=\"form_label\">Your Position</label>\n                      <div className=\"text_field\">\n                        <input\n                          type=\"text\"\n                          placeholder=\"Your Position\"\n                          name=\"position\"\n                          value={basicDetailsData?.position}\n                          onChange={this.changeHandler}\n                        />\n                      </div>\n                      {!!errors?.position && (\n                        <span className=\"error_msg\">{errors?.position}</span>\n                      )}\n                    </div>\n                    <div className=\"form_field\">\n                      <label className=\"form_label\">\n                        Australian Business Number\n                      </label>\n                      <div className=\"text_field\">\n  \n                        <NumberFormat\n                          value={basicDetailsData?.abn}\n                          displayType={\"input\"}\n                          type={\"tel\"}\n                          placeholder=\"51 824 753 556\"\n                          format=\"## ### ### ###\"\n                          isNumericString={true}\n                          onValueChange={(values) => {\n                            const { value } = values;\n                            const newBasicDetails = {\n                              ...this.state.basicDetailsData,\n                            };\n                            newBasicDetails.abn = value;\n                            this.setState({\n                              basicDetailsData: newBasicDetails,\n                              isEditProfileModalChanged: true,\n                            });\n                          }}\n                        />\n                      </div>\n                      {!!errors?.abn && (\n                        <span className=\"error_msg\">{errors?.abn}</span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n\n              {this.userType === 1 &&\n                basicDetailsData?.qualificationDoc?.length < 6 &&\n                !addQualificationClicked && (\n                  <>\n                    <div className=\"form_field\">\n                      <button\n                        className=\"fill_grey_btn full_btn btn-effect\"\n                        onClick={() =>\n                          this.setState({ addQualificationClicked: true })\n                        }\n                      >\n                        Add qualification documents{\" \"}\n                      </button>\n                    </div>\n                    <span className=\"info_note\">\n                      Don’t worry, nobody will see it. This is for verification\n                      only!\n                    </span>\n                  </>\n                )}\n            </div>\n            <div className=\"bottom_btn custom_btn\">\n              <button\n                className={`fill_btn full_btn btn-effect ${\n                  isEditProfileModalChanged ? \"\" : \"disable_btn\"\n                }`}\n                onClick={this.submitBasicProfileDetails}\n              >\n                Save changes\n              </button>\n            </div>\n          </div>\n        </Modal>\n\n        <Modal\n          className=\"custom_modal\"\n          open={passwordModalClicked}\n          onClose={this.passwordModalCloseHandler}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div\n            className=\"custom_wh profile_modal\"\n            data-aos=\"zoom-in\"\n            data-aos-delay=\"30\"\n            data-aos-duration=\"1000\"\n          >\n            <div className=\"heading form_field\">\n              <div className=\"relate\">\n                <button\n                  className=\"back\"\n                  onClick={this.passwordModalCloseHandler}\n                ></button>\n                <div className=\"md_heading\">\n                  <span className=\"sub_title\">Change password</span>\n                </div>\n              </div>\n              <button\n                className=\"close_btn\"\n                onClick={this.passwordModalCloseHandler}\n              >\n                <img src={cancel} alt=\"cancel\" />\n              </button>\n            </div>\n            <div className=\"inner_wrap\">\n              <div className=\"inner_wrappr\">\n                <div className=\"form_field\">\n                  <label className=\"form_label\">Old Password</label>\n                  <div className=\"text_field\">\n                    <input\n                      type={showPassword ? \"text\" : \"password\"}\n                      className=\"detect_input\"\n                      placeholder=\"Enter Password\"\n                      name=\"password\"\n                      value={password}\n                      onChange={this.passwordHandler}\n                    />\n                    <span\n                      className=\"detect_icon\"\n                      onClick={() =>\n                        this.setState((prevState: any) => ({\n                          showPassword: !prevState.showPassword,\n                        }))\n                      }\n                    >\n                      <img\n                        src={showPassword ? eyeIconOpen : eyeIconClose}\n                        alt=\"\"\n                      />\n                    </span>\n                  </div>\n                  {!!errors?.password && (\n                    <span className=\"error_msg\">{errors?.password}</span>\n                  )}\n                </div>\n                <div className=\"form_field\">\n                  <label className=\"form_label\">New Password</label>\n                  <div className=\"text_field\">\n                    <input\n                      type={showNewPassword ? \"text\" : \"password\"}\n                      className=\"detect_input\"\n                      placeholder=\"Enter New Password\"\n                      name=\"newPassword\"\n                      value={newPassword}\n                      onChange={this.passwordHandler}\n                    />\n                    <span\n                      className=\"detect_icon\"\n                      onClick={() =>\n                        this.setState((prevState: any) => ({\n                          showNewPassword: !prevState.showNewPassword,\n                        }))\n                      }\n                    >\n                      <img\n                        src={showNewPassword ? eyeIconOpen : eyeIconClose}\n                        alt=\"\"\n                      />\n                    </span>\n                  </div>\n                  {!!errors?.newPassword && (\n                    <span className=\"error_msg\">{errors?.newPassword}</span>\n                  )}\n                </div>\n                <div className=\"form_field\">\n                  <label className=\"form_label\">Confirm New Password</label>\n                  <div className=\"text_field\">\n                    <input\n                      type={showConfirmNewPassword ? \"text\" : \"password\"}\n                      className=\"detect_input\"\n                      placeholder=\"Enter Confirm New Password\"\n                      name=\"confirmNewPassword\"\n                      value={confirmNewPassword}\n                      onChange={this.passwordHandler}\n                    />\n                    <span\n                      className=\"detect_icon\"\n                      onClick={() =>\n                        this.setState((prevState: any) => ({\n                          showConfirmNewPassword:\n                            !prevState.showConfirmNewPassword,\n                        }))\n                      }\n                    >\n                      <img\n                        src={\n                          showConfirmNewPassword ? eyeIconOpen : eyeIconClose\n                        }\n                        alt=\"\"\n                      />\n                    </span>\n                  </div>\n                  {!!errors?.confirmNewPassword && !errors?.newPassword && (\n                    <span className=\"error_msg\">\n                      {errors?.confirmNewPassword}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"bottom_btn custom_btn\">\n              <button\n                className={`fill_btn full_btn btn-effect ${\n                  password && newPassword && confirmNewPassword\n                    ? \"\"\n                    : \"disable_btn\"\n                }`}\n                onClick={this.updatePasswordHandler}\n              >\n                Save changes\n              </button>\n            </div>\n          </div>\n        </Modal>\n\n        {/* change email */}\n        <ChangeEmailModal\n          history={props.history}\n          isChangeEmailModalClicked={changeEmailModalClicked}\n          currentEmail={this.state.basicDetailsData?.email}\n          changeEmailModalCloseHandler={this.changeEmailModalCloseHandler}\n        />\n\n        {this.userType === 1 && (\n          <div className=\"section_wrapper\">\n            {isSkeletonLoading ? (\n              <Skeleton />\n            ) : (\n              <span className=\"sub_title\">\n                {\"Areas of specialisation\"}\n                {this.userType === 1 && (\n                  <span\n                    className=\"edit_icon\"\n                    title=\"Edit\"\n                    onClick={() =>\n                      this.setState({ areasOfSpecsModalClicked: true })\n                    }\n                  >\n                    <img src={editIconBlue} alt=\"edit\" />\n                  </span>\n                )}\n              </span>\n            )}\n            <div className=\"tags_wrap\">\n              {isSkeletonLoading ? (\n                <Skeleton count={3} />\n              ) : (\n                <ul>\n                  {profileViewData?.areasOfSpecialization?.tradeData?.map(\n                    (\n                      {\n                        tradeId,\n                        tradeName,\n                        tradeSelectedUrl,\n                      }: {\n                        tradeId: string;\n                        tradeName: string;\n                        tradeSelectedUrl: string;\n                      },\n                      index: number\n                    ) => {\n                      if (this.userType === 1 && index > 0) {\n                        return null;\n                      }\n\n                      return (\n                        <li key={tradeId} className=\"main\">\n                          {tradeName}\n                        </li>\n                      );\n                    }\n                  )}\n                  {profileViewData?.areasOfSpecialization?.specializationData?.map(\n                    ({\n                      specializationId,\n                      specializationName,\n                    }: {\n                      specializationId: string;\n                      specializationName: string;\n                    }) => {\n                      return (\n                        <li key={specializationId}>{specializationName}</li>\n                      );\n                    }\n                  )}\n                </ul>\n              )}\n            </div>\n          </div>\n        )}\n        <Modal\n          className=\"custom_modal\"\n          open={areasOfSpecsModalClicked}\n          onClose={() => this.setState({ areasOfSpecsModalClicked: false })}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div\n            className=\"custom_wh filter_modal\"\n            data-aos=\"zoom-in\"\n            data-aos-delay=\"30\"\n            data-aos-duration=\"1000\"\n          >\n            <div className=\"heading\">\n              <span className=\"sub_title\">What is your trade?</span>\n              <button\n                className=\"close_btn\"\n                onClick={() =>\n                  this.setState({ areasOfSpecsModalClicked: false })\n                }\n              >\n                <img src={cancel} alt=\"cancel\" />\n              </button>\n            </div>\n\n            <div className=\"inner_wrap\">\n              <div className=\"form_field\">\n                <span className=\"xs_sub_title\">Categories</span>\n              </div>\n              <div className=\"select_sphere\">\n                <ul>\n                  {tradeList?.map(\n                    ({\n                      _id,\n                      trade_name,\n                      selected_url,\n                      specialisations,\n                    }: {\n                      _id: string;\n                      trade_name: string;\n                      selected_url: string;\n                      specialisations: [];\n                    }) => {\n                      const active = trade[0] === _id;\n                      return (\n                        <li\n                          key={_id}\n                          className={active ? \"active\" : \"\"}\n                          onClick={() =>\n                            this.tradeHandler(\n                              { _id, trade_name, selected_url },\n                              \"trade\"\n                            )\n                          }\n                        >\n                          <figure>\n                            <img\n                              src={\n                                selected_url ? selected_url : spherePlaceholder\n                              }\n                              alt=\"\"\n                            />\n                          </figure>\n                          <span className=\"name\">{trade_name}</span>\n                        </li>\n                      );\n                    }\n                  )}\n                </ul>\n              </div>\n              <div className=\"form_field\">\n                <span className=\"xs_sub_title\">Specialisation</span>\n              </div>\n              <div className=\"tags_wrap\">\n                <ul>\n                  {specializationList?.length > 0 && (\n                    <li\n                      className={allSpecializationSelected ? \"selected\" : \"\"}\n                      onClick={() =>\n                        this.tradeHandler(specializationList, \"All Clicked\")\n                      }\n                    >\n                      All\n                    </li>\n                  )}\n                  {specializationList?.map(\n                    ({ _id, name }: { _id: string; name: string }) => {\n                      const active = specialization?.indexOf(_id) >= 0;\n                      return (\n                        <li\n                          key={_id}\n                          className={\n                            active && !allSpecializationSelected\n                              ? \"selected\"\n                              : \"\"\n                          }\n                          onClick={() =>\n                            this.tradeHandler({ _id, name }, \"specializationId\")\n                          }\n                        >\n                          {name}\n                        </li>\n                      );\n                    }\n                  )}\n                </ul>\n              </div>\n            </div>\n            <div className=\"filter_btn\">\n              <a\n                className={`link ${\n                  trade.length && specialization.length ? \"\" : \"disable_link\"\n                }`}\n                onClick={() => this.tradeHandler(\"Clear All\", \"Clear All\")}\n              >\n                Clear All\n              </a>\n              <button\n                className={`fill_btn full_btn btn-effect ${\n                  trade.length && specialization.length ? \"\" : \"disable_btn\"\n                }`}\n                onClick={this.submitAreasOfTrade}\n              >\n                Save changes\n              </button>\n            </div>\n          </div>\n        </Modal>\n\n        <div className=\"section_wrapper\">\n          {isSkeletonLoading ? (\n            <Skeleton />\n          ) : (\n            <span className=\"sub_title\">\n              About {this.userType === 2 && \"company\"}\n              {(profileViewData?.about || profileViewData?.aboutCompany) && (\n                <span\n                  className=\"edit_icon\"\n                  title=\"Edit\"\n                  onClick={this.addInfoAboutYou}\n                >\n                  <img src={editIconBlue} alt=\"edit\" />\n                </span>\n              )}\n            </span>\n          )}\n          {!profileViewData?.about && !profileViewData?.aboutCompany && (\n            <button\n              className=\"fill_grey_btn full_btn btn-effect\"\n              onClick={this.addInfoAboutYou}\n            >\n              {isSkeletonLoading ? (\n                <Skeleton />\n              ) : (\n                `Add info about ${this.userType === 1 ? \"you\" : \"company\"}`\n              )}\n            </button>\n          )}\n          <p className=\"commn_para\">\n            {isSkeletonLoading ? (\n              <Skeleton />\n            ) : (\n              profileViewData?.about || profileViewData?.aboutCompany\n            )}\n          </p>\n        </div>\n\n        <Modal\n          className=\"custom_modal\"\n          open={aboutModalClicked}\n          onClose={() =>\n            this.setState({\n              about: profileViewData?.about ? profileViewData?.about : \"\",\n              aboutModalClicked: false,\n              errors: {},\n            })\n          }\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div\n            className=\"custom_wh profile_modal\"\n            data-aos=\"zoom-in\"\n            data-aos-delay=\"30\"\n            data-aos-duration=\"1000\"\n          >\n            <div className=\"heading\">\n              <span className=\"sub_title\">\n                About {this.userType === 2 && \"company\"}\n              </span>\n              <button\n                className=\"close_btn\"\n                onClick={() =>\n                  this.setState({\n                    about: profileViewData?.about ? profileViewData?.about : \"\",\n                    aboutModalClicked: false,\n                    errors: {},\n                  })\n                }\n              >\n                <img src={cancel} alt=\"cancel\" />\n              </button>\n            </div>\n            <div className=\"form_field\">\n              <label className=\"form_label\">\n                {this.userType === 1 ? \"Description\" : \"\"}\n              </label>\n              <div className=\"text_field\">\n                <textarea\n                  placeholder=\"Enter Description\"\n                  maxLength={1000}\n                  value={about}\n                  onChange={({\n                    target: { value },\n                  }: {\n                    target: { value: string };\n                  }) => this.setState({ about: value })}\n                />\n                <span className=\"char_count\">{`${about.length}/1000`}</span>\n              </div>\n              {!!errors.about && (\n                <span className=\"error_msg\">{errors.about}</span>\n              )}\n            </div>\n            <div className=\"bottom_btn custom_btn\">\n              <button\n                className=\"fill_btn full_btn btn-effect\"\n                onClick={() => {\n                  let err: any = {};\n                  if (about.trim().length < 1) {\n                    err.about = \"Description is required\";\n                    this.setState({ errors: err });\n                  } else {\n                    const newData = { ...profileViewData };\n                    newData.about = about;\n                    this.setState({\n                      profileViewData: newData,\n                      aboutModalClicked: false,\n                      isProfileViewDataChanged: true,\n                    });\n                  }\n                }}\n              >\n                Save changes\n              </button>\n              <button\n                className=\"fill_grey_btn btn-effect\"\n                onClick={() =>\n                  this.setState({\n                    about: profileViewData?.about ? profileViewData?.about : \"\",\n                    aboutModalClicked: false,\n                    errors: {},\n                  })\n                }\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </Modal>\n\n        <div className=\"section_wrapper\">\n          <span className=\"sub_title\">\n            {isSkeletonLoading ? <Skeleton /> : \"Portfolio\"}\n          </span>\n          {profileViewData?.portfolio?.length === 0 && (\n            <button\n              className=\"fill_grey_btn full_btn btn-effect\"\n              onClick={this.addNewPortfolioJob}\n            >\n              {isSkeletonLoading ? <Skeleton /> : \"Add portfolio\"}\n            </button>\n          )}\n          {isSkeletonLoading ? (\n            <Skeleton height={200} />\n          ) : (\n            <ul className=\"portfolio_wrappr\">\n              {profileViewData?.portfolio?.map(\n                (\n                  {\n                    jobDescription,\n                    jobName,\n                    portfolioId,\n                    portfolioImage,\n                  }: {\n                    jobDescription: string;\n                    jobName: string;\n                    portfolioId: string;\n                    portfolioImage: Array<any>;\n                  },\n                  index: number\n                ) => {\n                  return (\n                    <li\n                      className=\"media\"\n                      key={portfolioId}\n                      onClick={() =>\n                        this.setState({\n                          portfolioJobClicked: true,\n                          portfolioJobDetail: {\n                            jobDescription,\n                            jobName,\n                            portfolioId,\n                            portfolioImage,\n                          },\n                          portfolioJobIndex: index,\n                        })\n                      }\n                    >\n                      <figure className=\"portfolio_img\">\n                        <img\n                          src={\n                            portfolioImage[0]\n                              ? portfolioImage[0]\n                              : profilePlaceholder\n                          }\n                          alt=\"portfolio-images\"\n                        />\n                        <span className=\"xs_sub_title\">\n                          <p className=\"line-3\" title={jobName}>\n                            {jobName}\n                          </p>\n                        </span>\n                      </figure>\n                    </li>\n                  );\n                }\n              )}\n\n              {profileViewData?.portfolio?.length < 6 &&\n                profileViewData?.portfolio?.length > 0 && (\n                  <label className=\"upload_media\">\n                    <img\n                      src={addMediaLrg}\n                      alt=\"add\"\n                      onClick={this.addNewPortfolioJob}\n                    />\n                  </label>\n                )}\n            </ul>\n          )}\n        </div>\n\n        <Modal\n          className=\"custom_modal\"\n          open={portfolioJobClicked}\n          onClose={() => this.setState({ portfolioJobClicked: false })}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div\n            className=\"custom_wh portfolio_preview\"\n            data-aos=\"zoom-in\"\n            data-aos-delay=\"30\"\n            data-aos-duration=\"1000\"\n          >\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_6\">\n                <Carousel\n                  responsive={portfolioModal}\n                  showDots={true}\n                  infinite={true}\n                  autoPlay={true}\n                  arrows={false}\n                  className=\"portfolio_wrappr\"\n                >\n                  {portfolioJobDetail?.portfolioImage?.length > 0 ? (\n                    portfolioJobDetail?.portfolioImage?.map((image: string) => {\n                      return (\n                        <div\n                          className=\"media\"\n                          key={portfolioJobDetail?.portfolioId}\n                        >\n                          <figure className=\"portfolio_img\">\n                            <img\n                              src={image ? image : portfolioPlaceholder}\n                              alt=\"portfolio-images\"\n                            />\n                            <span\n                              className=\"back bk_white\"\n                              title=\"Back\"\n                              onClick={() =>\n                                this.setState({ portfolioJobClicked: false })\n                              }\n                            ></span>\n                          </figure>\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <img alt=\"\" src={portfolioPlaceholder} />\n                  )}\n                </Carousel>\n              </div>\n              <div className=\"flex_col_sm_6\">\n                <span className=\"dot_menu\">\n                  <img src={dotMenu} alt=\"menu\" />\n\n                  <div className=\"edit_menu\">\n                    <ul>\n                      <li\n                        className=\"icon edit\"\n                        onClick={() =>\n                          this.setState({\n                            isAddEditPortfolioModal: true,\n                            portfolioJobClicked: false,\n                            editPortfolioJob: true,\n                          })\n                        }\n                      >\n                        Edit\n                      </li>\n                      <li\n                        className=\"icon delete\"\n                        onClick={() =>\n                          this.setState({\n                            deletePortfolioJob: true,\n                            confirmationModalClicked: true,\n                          })\n                        }\n                      >\n                        Delete\n                      </li>\n                    </ul>\n                  </div>\n                </span>\n                <span className=\"xs_sub_title\">Job Description</span>\n                <div className=\"job_content\">\n                  <p>{portfolioJobDetail?.jobDescription}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal>\n\n        <Modal\n          className=\"custom_modal\"\n          open={confirmationModalClicked}\n          onClose={() =>\n            this.setState({\n              confirmationModalClicked: false,\n              portfolioJobIndex: null,\n            })\n          }\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div\n            className=\"custom_wh confirmation\"\n            data-aos=\"zoom-in\"\n            data-aos-delay=\"30\"\n            data-aos-duration=\"1000\"\n          >\n            <div className=\"heading\">\n              <span className=\"xs_sub_title\">Delete Portfolio Job</span>\n              <button\n                className=\"close_btn\"\n                onClick={() =>\n                  this.setState({\n                    confirmationModalClicked: false,\n                    portfolioJobIndex: null,\n                  })\n                }\n              >\n                <img src={cancel} alt=\"cancel\" />\n              </button>\n            </div>\n            <div className=\"modal_message\">\n              <p>Are you sure you want to delete portfolio job?</p>\n            </div>\n            <div className=\"dialog_actions\">\n              <button\n                className=\"fill_btn btn-effect\"\n                onClick={this.submitPortfolioJobs}\n              >\n                Yes\n              </button>\n              <button\n                className=\"fill_grey_btn btn-effect\"\n                onClick={() =>\n                  this.setState({\n                    confirmationModalClicked: false,\n                    portfolioJobIndex: null,\n                  })\n                }\n              >\n                No\n              </button>\n            </div>\n          </div>\n        </Modal>\n\n        <Modal\n          className=\"custom_modal\"\n          open={isAddEditPortfolioModal}\n          onClose={this.closeAddEditPortofolioModal}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div\n            className=\"custom_wh\"\n            data-aos=\"zoom-in\"\n            data-aos-delay=\"30\"\n            data-aos-duration=\"1000\"\n          >\n            <div className=\"heading\">\n              <div className=\"relate\">\n                <button\n                  className=\"back\"\n                  onClick={this.closeAddEditPortofolioModal}\n                />\n                <div className=\"md_heading\">\n                  <span className=\"sub_title\">Portfolio</span>\n                  <span className=\"info_note\">\n                    {storageService.getItem(\"userType\") === 1\n                      ? \"Tradespeople who have a portfolio with photos get job faster.\"\n                      : \"Showcase your work and attract the best talent to your jobs.\"}\n                  </span>\n                </div>\n              </div>\n              <button\n                className=\"close_btn\"\n                onClick={this.closeAddEditPortofolioModal}\n              >\n                <img src={cancel} alt=\"cancel\" />\n              </button>\n            </div>\n            <div className=\"inner_wrap\">\n              <div className=\"inner_wrappr\">\n                <div className=\"form_field\">\n                  <label className=\"form_label\">Job Name</label>\n                  <div className=\"text_field\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Enter Job Name\"\n                      value={portfolioJobDetail?.jobName}\n                      maxLength={100}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        const data = { ...portfolioJobDetail };\n                        data.jobName = e.target.value;\n                        this.setState({ portfolioJobDetail: data });\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className=\"form_field\">\n                  <label className=\"form_label\">{`Job Description ${\n                    this.userType === 2 ? `(optional)` : \"\"\n                  }`}</label>\n                  <div className=\"text_field\">\n                    <textarea\n                      placeholder=\"Enter Job Description\"\n                      value={portfolioJobDetail?.jobDescription}\n                      maxLength={1000}\n                      onChange={(\n                        e: React.ChangeEvent<\n                          HTMLInputElement | HTMLTextAreaElement\n                        >\n                      ) => {\n                        const data = { ...portfolioJobDetail };\n                        data.jobDescription = e.target.value;\n                        this.setState({ portfolioJobDetail: data });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"upload_img_video\">\n                {portfolioJobDetail?.portfolioImage?.map(\n                  (image: string, index: number) => {\n                    return (\n                      <figure className=\"img_video\" key={image}>\n                        <img\n                          src={image ? image : dummy}\n                          async-src={image ? image : dummy}\n                          decoding=\"async\"\n                          loading=\"lazy\"\n                          alt=\"portfolio-images\"\n                        />\n                        <img\n                          src={remove}\n                          alt=\"remove\"\n                          className=\"remove\"\n                          onClick={() => {\n                            const data: any = { ...portfolioJobDetail };\n                            data?.portfolioImage?.splice(index, 1);\n                            this.setState({ portfolioJobDetail: data });\n                          }}\n                        />\n                      </figure>\n                    );\n                  }\n                )}\n\n                {portfolioJobDetail?.portfolioImage?.length < 6 &&\n                  addPortfolioJob && (\n                    <>\n                      <label\n                        className=\"upload_media\"\n                        htmlFor=\"upload_img_video\"\n                      >\n                        <img src={addMedia} alt=\"add\" />\n                      </label>\n\n                      <input\n                        type=\"file\"\n                        accept=\"image/png,image/jpg,image/jpeg\"\n                        style={{ display: \"none\" }}\n                        id=\"upload_img_video\"\n                        onChange={(e) => this.onFileChange(e, \"addJobPhotos\")}\n                      />\n                    </>\n                  )}\n              </div>\n            </div>\n            <div className=\"bottom_btn custom_btn\">\n              <button\n                className={`fill_btn full_btn btn-effect ${\n                  portfolioJobDetail?.jobName?.trim() &&\n                  (this.userType === 2\n                    ? true\n                    : portfolioJobDetail?.jobDescription?.trim()) &&\n                  (this.userType === 2\n                    ? true\n                    : portfolioJobDetail?.portfolioImage?.length)\n                    ? \"\"\n                    : \"disable_btn\"\n                }`}\n                onClick={this.submitPortfolioJobs}\n              >\n                Save changes\n              </button>\n              <button\n                className=\"fill_grey_btn btn-effect\"\n                onClick={this.closeAddEditPortofolioModal}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </Modal>\n\n        <div className=\"section_wrapper\">\n          <button\n            className={`fill_btn full_btn btn-effect ${\n              isProfileViewDataChanged ? \"\" : \"disable_btn\"\n            }`}\n            onClick={this.submitUpdateProfile}\n          >\n            {isSkeletonLoading ? <Skeleton /> : \"Save changes\"}\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default PersonalInformation;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/milestoneTemplates.tsx",["1135"],"import React, { useEffect, useState } from 'react';\nimport { profileTemplateList } from '../../../../redux/jobs/actions';\nimport noData from '../../../../assets/images/no-search-data.png';\n\nimport JobMilestones from './jobMilestones';\n\ninterface Proptypes {\n    data: any;\n    isLoading: any,\n    stepCompleted: Boolean;\n    handleStepComplete: (data: any) => void;\n    handleStepForward: (data: any) => void;\n    handleCombineMileStones: (data: any) => void;\n    handleStepBack: () => void;\n}\n\nconst MileStoneTemplates = (props: Proptypes) => {\n    const { isLoading, } = props;\n    const [list, setList] = useState([]);\n    const [localFetch, setLocalFetch] = useState(false);\n    const [toggleJobMilestone, setToggleJobMilestone] = useState({ toggle: false, ItemId: '' });\n\n    const preFetch = async () => {\n        let { success, data } = await profileTemplateList();\n        if (success && data?.length) {\n            setList(data)\n            setLocalFetch(true)\n        }\n    }\n\n    useEffect(() => {\n        preFetch();\n    }, []);\n\n    const backToScreen = () => {\n        setToggleJobMilestone((prev: any) => ({ ...prev, toggle: false, ItemId: '' }));\n    }\n\n    if (toggleJobMilestone?.toggle) {\n        return (\n            <JobMilestones\n                id={toggleJobMilestone?.ItemId}\n                backToScreen={backToScreen}\n            />\n        )\n    }\n    console.log({ toggleJobMilestone })\n    return (\n        <div className=\"custom_container\">\n            <div className=\"form_field\">\n                <div className=\"flex_row\">\n                    <div className=\"flex_col_sm_12\">\n                        <div className=\"\">\n                            <span className=\"title\">{'Milestone Templates'}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"flex_row\">\n                    <div className=\"flex_col_sm_8\">\n                        <ul className=\"milestone_templates\">\n                            {list?.length ?\n                                list.map(({ templateId, templateName, milestoneCount }: any) => (\n                                    <li onClick={() => {\n                                        setToggleJobMilestone({ toggle: true, ItemId: templateId });\n                                    }}>\n                                        <span className=\"name\">{templateName} </span>\n                                        <div className=\"count\">{milestoneCount}\n                                            <span>milestones</span>\n                                        </div>\n                                    </li>\n                                )) : null}\n                        </ul>\n                    </div>\n\n                    {!isLoading && !list?.length ? (\n                        <div className=\"no_record  m-t-vh\">\n                            <figure className=\"no_img\">\n                                <img src={noData} alt=\"data not found\" />\n                            </figure>\n                            <span>{'No Data Found'}</span>\n                        </div>\n                    ) : null}\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default MileStoneTemplates;","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/initialSignupPage.tsx",["1136","1137"],"import React, { useEffect } from \"react\";\nimport storageService from \"../../../utils/storageService\";\n\n\ninterface Propstype {\n  updateSteps: (num: number, data: any) => void;\n  step: number;\n  history: any;\n  showModal: boolean;\n  modalUpdateSteps: (data: any) => void;\n  callTradeList: () => void;\n}\n\nconst InitialSignupPage = (props: Propstype) => {\n  let window_: any = window;\n\n\n\n  useEffect(() => {\n    if (window_?.Intercom) {\n      window_?.Intercom(\"update\", {\n        hide_default_launcher: true,\n      });\n    }\n  }, [window_]);\n\n  const nextPageHandler = (userType: string) => {\n    var user_type = 1;\n    if (userType === \"builder\") {\n      user_type = 2;\n    }\n    props.updateSteps(props.step + 1, { user_type });\n    if (user_type === 1) {\n      props.callTradeList();\n    }\n  };\n\n\n\n  const phoneViewHandler = (e: any) => {\n    e.preventDefault();\n    if (props.showModal) {\n      props.modalUpdateSteps(0);\n      return;\n    }\n    props.history.push(\"/login\");\n  };\n\n  return (\n    <div className=\"form_wrapper\">\n      <div className=\"form_field\">\n        <button\n          className=\"fill_btn btn-effect\"\n          onClick={() => nextPageHandler(\"builder\")}\n        >\n          I’m a builder\n        </button>\n      </div>\n      <div className=\"form_field\">\n        <button\n          className=\"fill_grey_btn btn-effect\"\n          onClick={() => nextPageHandler(\"tradie\")}\n        >\n          I’m a tradesperson\n        </button>\n      </div>\n      <div className=\"form_field text-center\">\n        <span className=\"reg\">\n          Have an account?{\" \"}\n          <a className=\"link\" onClick={phoneViewHandler}>\n            Login\n          </a>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default InitialSignupPage;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/phoneNumber.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/verifyPhoneNumber.tsx",["1138","1139","1140","1141"],"import { useState, useEffect } from 'react';\nimport { checkMobileNumber, verifyOtp, verifyMobileOtp , resendOtp, resendMobileOtp} from '../../../redux/auth/actions';\nimport Constants from '../../../utils/constants';\nimport regex from '../../../utils/regex';\nimport OtpInput from \"react-otp-input\";\n\ninterface Propstype {\n    updateSteps: (num: number) => void\n    step: number\n    history?: any\n    mobileNumber: string,\n    userType?: any\n}\n\nconst VerifyPhoneNumber = (props: Propstype) => {\n    const [errors, setErrors] = useState<any>({});\n    const [counter, setCounter] = useState(Constants.OTP_TIMER);\n    const [otp, setOTP] = useState('');\n\n    const changeHandler = (newOtp: any) => {\n        setOTP(newOtp)\n    }\n\n    useEffect(() => {\n        const timer: any = counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n        return () => clearInterval(timer);\n    }, [counter]);\n\n    const validateForm = () => {\n        const newErrors: any = {};\n        if (!otp) {\n            newErrors.otp = Constants.errorStrings.otpEmpty;\n        } else {\n            const otpRegex = new RegExp(regex.otp);\n            if (!otpRegex.test(otp)) {\n                newErrors.otp = Constants.errorStrings.otpIncorrect\n            }\n        }\n        setErrors(newErrors);\n        return !Object.keys(newErrors).length;\n    }\n\n    const onSubmit = async (e: any) => {\n        e.preventDefault();\n        if (validateForm()) {\n            const data = {\n                otp: otp,\n                mobileNumber: props.mobileNumber\n            }\n            // const res: any = await verifyOtp(data)\n            const res: any = await verifyMobileOtp(data);\n            if (res.success) {\n                props.updateSteps(props.step + 1)\n            }\n        }\n    }\n\n    const resendHandler = async (e: any) => {\n        e.preventDefault();\n        let data = {\n            \"mobileNumber\": props.mobileNumber\n        };\n        let response = await resendMobileOtp(data);\n        if (response.success) {\n        // const res: any = await checkMobileNumber(props.mobileNumber)\n            setCounter(Constants.OTP_TIMER)\n        }\n    }\n\n    return (\n        <div className=\"form_wrapper\">\n            <form onSubmit={onSubmit}>\n                <span className=\"show_label\">Verification Code</span>\n                {/* <div className=\"otp_input_wrapper\">\n                                <input type=\"number\" className=\"sms-no-box\" name=\"ssn-1\" maxLength={1} onChange={changeHandler} />\n                            </div> */}\n                <div className=\"form_field\">\n                    <div className=\"otp_input_wrapper\">\n                        <OtpInput\n                            className=\"sms-no-box\"\n                            inputStyle={{ \"width\": \"48px\" }}\n                            value={otp}\n                            onChange={changeHandler}\n                            numInputs={5}\n                            isInputNum\n                        //separator={<span>-</span>}\n                        />\n                    </div>\n                    {!!errors.otp && <span className=\"error_msg\">{errors.otp}</span>}\n                </div>\n                <div className=\"form_field\">\n                    <span className=\"show_label\">We have sent a verification code to your phone.\n                        Please check SMS and enter the 5-digit code here.</span>\n                </div>\n                {counter === 0 &&\n                 <div className=\"form_field text-center\">\n                    <span className=\"show_label\">Don’t you receive any codes?</span>\n                    <a href=\"#\" className=\"link\" onClick={resendHandler}>Re-send code</a>\n                </div>\n                } \n                {counter > 0 && <div className=\"form_field text-center\">\n                    <span className=\"show_label timer\">{counter > 59 ? `01 : 00` : `00 : ${counter}`}</span>\n                </div>}\n                <div className=\"form_field\">\n                    <button className=\"fill_btn btn-effect\">Next</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default VerifyPhoneNumber\n\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/selectYourSphere.tsx",["1142"],"import { useState } from \"react\";\nimport { setShowToast } from \"../../../redux/common/actions\";\nimport spherePlaceholder from \"../../../assets/images/tick-grey.svg\";\nimport noData from \"../../../assets/images/no-search-data.png\";\n\ninterface Propstype {\n  updateSteps: (num: number, data: any) => void;\n  step: number;\n  tradeListData: Array<any>;\n  trade: string;\n}\n\nconst SelectCategories = (props: Propstype) => {\n  const [trade, setTrade] = useState(props.trade);\n  const [imgPath, setimagePath] = useState<any>([]);\n\n  const onClick = (item: string) => {\n    if (item == trade) {\n      return setTrade(\"\");\n    }\n    setTrade(item);\n  };\n\n  const onSubmit = async (e: any) => {\n    e.preventDefault();\n    if (trade) {\n      props.updateSteps(props.step + 1, { trade });\n    } else {\n      setShowToast(true, \"Please select a trade\");\n    }\n  };\n\n  const onImageError = (index: number) => {\n    let tmp = [...imgPath];\n    tmp[index] = true;\n    setimagePath(tmp);\n  };\n\n  return (\n    <div className=\"select_sphere form_wrapper\">\n      <ul>\n        {props.tradeListData?.length ? (\n          props.tradeListData.map((item, index) => {\n            const active = trade === item._id;\n            const imgSrc =\n              item.selected_url && !imgPath[index]\n                ? item.selected_url\n                : spherePlaceholder;\n            return (\n              <li\n                key={item._id}\n                className={active ? \"active\" : \"\"}\n                onClick={() => onClick(item._id)}\n              >\n                <figure>\n                  <img onError={() => onImageError(index)} src={imgSrc} />\n                </figure>\n                <span className=\"name\">{item.trade_name}</span>\n              </li>\n            );\n          })\n        ) : (\n          <li className=\"no_data\">\n            <img src={noData} alt=\"no-data\" />\n          </li>\n        )}\n      </ul>\n      <button className=\"fill_btn btn-effect\" onClick={onSubmit}>\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default SelectCategories;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/createPassword.tsx",["1143"],"import { useState } from 'react';\nimport eyeIconClose from '../../../assets/images/icon-eye-closed.png';\nimport eyeIconOpen from '../../../assets/images/icon-eye-open.png';\nimport Constants from '../../../utils/constants';\nimport regex from '../../../utils/regex'\n\n\ninterface Propstype {\n    updateSteps: (num: number, data: any) => void\n    step: number\n    history?: any\n    password: any,\n}\n\nconst CreatePassword = (props: Propstype) => {\n    const [errors, setErrors] = useState<any>({});\n    const [password, setPassword] = useState<any>(props.password)\n    const [showPassword, setShowPassword] = useState(false)\n\n    const changeHandler = (e: any) => {\n        setPassword(e.target.value)\n    }\n\n    const validateForm = () => {\n        const newErrors: any = {};\n        if (!password) {\n            newErrors.password = Constants.errorStrings.password;\n        } else {\n            const passwordRegex = new RegExp(regex.password);\n            if (!passwordRegex.test(password.trim())) {\n                newErrors.password = Constants.errorStrings.passwordError;\n            }\n        }\n        setErrors(newErrors);\n        return !Object.keys(newErrors).length;\n    }\n\n    const onSubmit = async (e: any) => {\n        e.preventDefault();\n        if (validateForm()) {\n            props.updateSteps(props.step + 1, { password })\n        }\n    }\n\n    return (\n        <div className=\"form_wrapper\">\n            <form onSubmit={onSubmit}>\n                <div className=\"form_field\">\n                    <label className=\"form_label\">Password</label>\n                    <div className=\"text_field\">\n                        <input type={showPassword ? 'text' : 'password'} className=\"detect_input\" value={password} placeholder=\"Enter Password\" onChange={changeHandler} />\n                        <span className=\"detect_icon\" onClick={() => setShowPassword(!showPassword)}><img src={showPassword ? eyeIconOpen : eyeIconClose} /></span>\n                    </div>\n                    {!!errors.password && <span className=\"error_msg\">{errors.password}</span>}\n                </div>\n                <div className=\"form_field\">\n                    <span className=\"show_label\">Please ensure your password is at least 8 characters long and contains a special character &amp; an uppercase letter or number.</span>\n                </div>\n                <div className=\"form_field\">\n                    <button className=\"fill_btn btn-effect\">Next</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default CreatePassword\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/letsGo.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/specialization.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/createAccount.tsx",["1144","1145","1146"],"import { useState } from 'react';\nimport { checkEmailId } from '../../../redux/auth/actions';\nimport Constants from '../../../utils/constants';\nimport regex from '../../../utils/regex';\nimport SocialAuth from \"../../../common/auth/socialAuth\";\nimport { setShowToast } from '../../../redux/common/actions';\nimport Urls,{ urlFor }  from '../../../network/Urls';\n\ninterface Propstype {\n    updateSteps: (num: number, data: any) => void,\n    step: number,\n    history?: any,\n    data: any,\n    onNewAccount: Function,\n    showModal?: boolean,\n    modalUpdateSteps: (data: any) => void,\n    setShowModal: (data: any) => void,\n}\n\nconst CreateAccount = (props: Propstype) => {\n    const [errors, setErrors] = useState<any>({});\n    const [signupData, setSignupData] = useState<any>({\n        firstName: props.data.firstName,\n        email: props.data.email,\n        tnc: false,\n    })\n\n    const changeHandler = (e: any) => {\n        setSignupData((prevData: any) => ({ ...prevData, [e.target.name]: e.target.value }))\n    }\n\n    const tncHandler = () => {\n        setSignupData((prevData: any) => ({ ...prevData, tnc: !prevData.tnc }))\n    }\n\n    const validateForm = () => {\n        const newErrors: any = {};\n        if (!signupData.firstName) {\n            newErrors.firstName = Constants.errorStrings.fullNameEmpty;\n        } else {\n            const nameRegex = new RegExp(regex.fullname);\n            if (!nameRegex.test(signupData.firstName.trim())) {\n                newErrors.firstName = Constants.errorStrings.fullNameErr\n            }\n        }\n        if (!signupData.email) {\n            newErrors.email = Constants.errorStrings.emailEmpty;\n        } else {\n            const emailRegex = new RegExp(regex.email);\n            if (!emailRegex.test(signupData.email)) {\n                newErrors.email = Constants.errorStrings.emailErr;\n            }\n        }\n        if (!signupData.tnc) {\n            newErrors.tnc = Constants.errorStrings.tncEmpty;\n        }\n        setErrors(newErrors);\n        return !Object.keys(newErrors).length;\n    }\n\n    const phoneViewHandler = (e: any) => {\n        e.preventDefault();\n        if(props.showModal){\n            props.modalUpdateSteps(0)\n            return;\n        }\n        props.history.push('/login')\n    }\n\n    const onSubmit = async (e: any) => {\n        const data = { ...signupData };\n        delete data.tnc;\n        e.preventDefault();\n        if (validateForm()) {\n            const res: any = await checkEmailId(signupData.email)\n            res?.isProfileCompleted && setShowToast(true, res.message);\n            if (!res.isProfileCompleted && res.success) {\n                props.updateSteps(props.step + 1, data)\n            }\n        }\n    }\n\n    return (\n        <div className=\"form_wrapper\">\n            <form onSubmit={onSubmit}>\n                <div className=\"form_field\">\n                    <label className=\"form_label\">Full Name</label>\n                    <div className=\"text_field\">\n                        <input placeholder=\"Enter Full Name\" value={signupData.firstName} name=\"firstName\" onChange={changeHandler} />\n                    </div>\n                    {!!errors.firstName && <span className=\"error_msg\">{errors.firstName}</span>}\n                </div>\n\n                <div className=\"form_field\">\n                    <label className=\"form_label\">Email</label>\n                    <div className=\"text_field\">\n                        <input className=\"detect_input\" name=\"email\" value={signupData.email}\n                            placeholder=\"Enter Email Address\" onChange={changeHandler} />\n                    </div>\n                    {!!errors.email && <span className=\"error_msg\">{errors.email}</span>}\n                </div>\n\n\n                <div className=\"form_field\">\n                    <div className=\"checkbox_wrap agree_check\">\n                        <input className=\"filter-type filled-in\" type=\"checkbox\" name=\"tnc\" id=\"tnc\"\n                            checked={signupData.tnc} onChange={tncHandler} />\n                        <label htmlFor=\"tnc\">I agree to </label>\n                        <a onClick={() => window.open(urlFor(Urls.privacyPolicyWeb), \"_blank\")} rel=\"noopener\" className=\"link\">Privacy Policy</a>\n                        <label className=\"and\">&nbsp;and&nbsp;</label>\n                        <a onClick={() => window.open(urlFor(Urls.tncWeb), \"_blank\")}  rel=\"noopener\" className=\"link m-l-30\">Terms &amp; Conditions</a>\n                    </div>\n                    {!!errors.tnc && <span className=\"error_msg m-t\">{errors.tnc}</span>}\n                </div>\n                <div className=\"form_field\">\n                    <button type=\"submit\" className=\"fill_btn btn-effect\">Sign up</button>\n                </div>\n                <span className=\"show_label text-center\">or continue with</span>\n                <SocialAuth onNewAccount={props.onNewAccount}\n                    history={props.history}\n                    userType={props.data.user_type}\n                    showModal={props.showModal}\n                    setShowModal={props.setShowModal}\n                    modalUpdateSteps={props.modalUpdateSteps}\n                />\n                <div className=\"form_field hide text-center\">\n                    <span className=\"reg\">Have an account? <a className=\"link\" onClick={phoneViewHandler}>\n                        Login</a></span>\n                </div>\n\n            </form>\n        </div>\n    )\n}\n\nexport default CreateAccount\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/addQualification.tsx",["1147","1148","1149"],"import { useState } from 'react';\nimport { setShowToast } from '../../../redux/common/actions';\nimport { onFileUpload } from '../../../redux/auth/actions';\n\nimport removeFile from '../../../assets/images/icon-close-1.png';\nimport jpegFile from '../../../assets/images/jpeg.png';\nimport jpgFile from '../../../assets/images/jpg.png';\nimport pngFile from '../../../assets/images/png.png';\nimport pdfFile from '../../../assets/images/pdf.png';\nimport docFile from '../../../assets/images/doc.png';\nimport noData from '../../../assets/images/no-search-data.png';\n\ninterface Propstype {\n    updateSteps: (num: number, data: any) => void,\n    step: number,\n    tradeListData: Array<any>,\n    trade: string,\n    qualification: Array<any>\n}\n\nconst AddQualification = (props: Propstype) => {\n    const [qualification, setQualification] = useState(props.qualification);\n\n    const changeHandler = (id: string) => {\n        setQualification((prevData: Array<any>) => {\n            const newData = [...prevData];\n            const item = newData.find(i => i.qualification_id === id)\n            const itemIndex = newData.indexOf(item);\n            if (!item) {\n                newData.push({ qualification_id: id, url: '' });\n            } else {\n                newData.splice(itemIndex, 1);\n            }\n            return newData;\n        })\n    }\n\n    const onFileChange = async (e: any, id: string) => {\n        const newData = [...qualification];\n        const item = newData.find(i => i.qualification_id === id)\n        if (!item) {\n            return\n        }\n        const formData = new FormData();\n        const newFile = e.target.files[0]\n        var fileType = newFile?.type?.split('/')[1]\n        const docTypes: Array<any> = [\"jpeg\", \"jpg\", \"png\", \"pdf\", \"msword\", \"doc\", \"docx\"]\n        var selectedFileSize = newFile?.size / 1024 / 1024;\n        if (docTypes.indexOf(fileType) < 0 || (selectedFileSize > 10)) {\n            alert('The file must be in proper format or size')\n            return;\n        }\n        formData.append('file', newFile);\n        const res = await onFileUpload(formData)\n        if (res.success) {\n            const item = newData.find(i => i.qualification_id === id)\n            item.url = res.imgUrl\n            console.log(newData, 'image upload done')\n            setQualification(newData)\n        }\n    }\n\n    const removeFileHandler = (id: string) => {\n        const newData = [...qualification];\n        const item = newData.find(i => i.qualification_id === id)\n        item.url = ''\n        setQualification(newData)\n    }\n\n    const onSubmit = (e: any) => {\n        e.preventDefault();\n        const newData = [...qualification];\n        const item = newData.find(i => i.url === '')\n        const itemIndex = newData.indexOf(item);\n        console.log(qualification, item, itemIndex, 'okk');\n        if (!qualification.length) {\n            setShowToast(true, \"Please add at least one qualification\");\n        } else if (itemIndex >= 0) {\n            setShowToast(true, \"Please upload all selected documents\");\n        } else {\n            props.updateSteps(props.step + 1, { qualification });\n        }\n    }\n\n    const onSkipQualification = (e: any) => {\n        e.preventDefault();\n        const qualification: Array<any> = []\n        props.updateSteps(props.step + 1, { qualification });\n    }\n\n    const qualificationList = props.tradeListData.find(i => i._id === props.trade)?.qualifications\n\n    const fileDetails = (item: any) => {\n        var fileArray = item.url.replace(/^.*[\\\\\\/]/, '').split('.');\n        const type = fileArray[1].toLowerCase();\n        switch (type) {\n            case \"jpeg\":\n                return { fileName: fileArray[0], fileType: jpegFile };\n            case \"jpg\":\n                return { fileName: fileArray[0], fileType: jpgFile };\n            case \"png\":\n                return { fileName: fileArray[0], fileType: pngFile };\n            case \"pdf\":\n                return { fileName: fileArray[0], fileType: pdfFile };\n            case \"doc\":\n                return { fileName: fileArray[0], fileType: docFile };\n            case \"docx\":\n                return { fileName: fileArray[0], fileType: docFile };\n            default:\n                return null;\n        }\n    }\n\n    return (\n        <div className=\"form_wrapper\">\n            <form onSubmit={onSubmit}>\n                <div className=\"choose_qf\">\n                    {qualificationList ? qualificationList?.map((item: any) => {\n                        const isChecked = qualification.find((i: any) => i.qualification_id === item._id);\n                        const docDetails = isChecked?.url && fileDetails(isChecked);\n                        return (\n                            <div className=\"f_spacebw\" key={item._id}>\n                                <div className=\"checkbox_wrap agree_check\">\n                                    <input className=\"filter-type filled-in\" type=\"checkbox\"\n                                        checked={isChecked ? true : false} name={item.name} id={item.name}\n                                        onChange={() => changeHandler(item._id)} />\n                                    <label htmlFor={item.name}>{item.name}</label>\n                                </div>\n                                {isChecked?.url ?\n                                    (<div className=\"file_upload_box\">\n                                        <span className=\"close\" onClick={() => removeFileHandler(item._id)}>\n                                            <img src={removeFile} />\n                                        </span>\n                                        <span className=\"file_icon\">\n                                            <img src={docDetails?.fileType} />\n                                        </span>\n                                        <div className=\"file_details\">\n                                            <span className=\"name\">{docDetails?.fileName}</span>\n                                        </div>\n                                    </div>) :\n                                    (<div className=\"upload_doc\">\n                                        <label className={`upload_btn ${!isChecked ? \"disable\" : \"\"}`} htmlFor={item.name + 'upload'}>Upload</label>\n                                        <input type=\"file\" className=\"none\" id={item.name + 'upload'}\n                                            accept=\"image/jpeg,image/jpg,image/png,application/pdf,application/msword,.doc\"\n                                            disabled={!!isChecked ? false : true} onChange={(e) => onFileChange(e, item._id)} />\n                                    </div>)}\n                            </div>\n                        )\n                    }) : <li className='no_data'>\n                        <img src={noData} alt=\"no-data\" />\n                    </li>}\n                </div>\n\n                <div className=\"form_field\">\n                    <button className=\"fill_btn btn-effect\">Next</button>\n                </div>\n                <div className=\"form_field text-center\">\n                    <a className=\"link\" onClick={onSkipQualification}>Skip</a>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default AddQualification\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/addABN.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/almostDone.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieSearchJobResult/mapStyles.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobType.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/postNewJob.tsx",["1150","1151"],"import React, { useEffect, useState } from \"react\";\nimport Constants from \"../../../utils/constants\";\nimport { useLocation } from \"react-router-dom\";\n//@ts-ignore\nimport _ from \"lodash\";\n//@ts-ignore\nimport \"quill/dist/quill.snow.css\"; // Add css for snow theme\n\ninterface Proptypes {\n  data: any;\n  jobUpdateParam?: any;\n  editDetailPage: any;\n  stepCompleted: boolean;\n  handleStepComplete: (data: any) => void;\n  handleStepJustUpdate: (data: any, goto: any) => void;\n  handleStepForward: (data: any) => void;\n}\n\nconst PostNewJob = ({\n  data,\n  jobUpdateParam,\n  editDetailPage,\n  stepCompleted,\n  handleStepJustUpdate,\n  handleStepForward,\n  handleStepComplete,\n}: Proptypes) => {\n  const [basicDetails, setBasicDetails] = useState<{ [index: string]: string }>(\n    { jobName: \"\", job_description: \"\" }\n  );\n  const [errors, setErrors] = useState({ jobName: \"\", job_description: \"\" });\n  const [continueClicked, setContinueClicked] = useState(false);\n  const { jobName, job_description } = basicDetails;\n\n  let location = useLocation();\n  let jobId: any = null;\n  let update: any = null;\n  if (location.search) {\n    let urlParams = new URLSearchParams(location.search);\n    jobId = urlParams.get(\"jobId\");\n    update = urlParams.get(\"update\");\n  }\n\n  useEffect(() => {\n    if (stepCompleted) {\n      setBasicDetails({\n        jobName: data?.jobName,\n        job_description: data?.job_description,\n      });\n    }\n  }, [stepCompleted, data]);\n\n  // for error messages\n  const label: { [index: string]: string } = {\n    jobName: \"Job Name\",\n    job_description: \"Job Details\",\n  };\n\n  const isInvalid = (name: string, value: string) => {\n    switch (name) {\n      case \"jobName\":\n        return !value.length\n          ? `${label[name]} is required.`\n          : value.length > 100\n          ? \"Maximum 100 characters are allowed.\"\n          : \"\";\n      case \"job_description\":\n        return !value.length\n          ? `${label[name]} is required.`\n          : value.length > 1000\n          ? \"Maximum 1000 characters are allowed.\"\n          : \"\";\n    }\n  };\n\n  const capitalize = (str: any) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  const handleChange = ({\n    target: { value, name },\n  }: {\n    target: { value: string; name: string };\n  }) => {\n    let valueElem: any = value.trimLeft();\n    let alphaNumericPunctuation =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 1234567890~!@#$%^&*()_+=-`{}|[]:;<>?,./\";\n    if (name === \"jobName\" || name === \"job_description\") {\n      if (name === \"jobName\") {\n        valueElem = valueElem.replace(alphaNumericPunctuation, \"\");\n      }\n    }\n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [name]: isInvalid(name, valueElem),\n    }));\n    setBasicDetails((prevDetails) => ({\n      ...prevDetails,\n      [name]: valueElem,\n    }));\n  };\n\n  const handleContinue = () => {\n    let hasErrors;\n\n    if (!continueClicked) {\n      setContinueClicked(true);\n\n      hasErrors = Object.keys(basicDetails).reduce((prevError, name) => {\n        const hasError = !!isInvalid(name, basicDetails[name]);\n\n        setErrors((prevErrors) => ({\n          ...prevErrors,\n          [name]: isInvalid(name, basicDetails[name]),\n        }));\n\n        return hasError || prevError;\n      }, false);\n    }\n\n    if (!hasErrors) {\n      if (editDetailPage?.currentScreen) {\n        handleStepJustUpdate(basicDetails, true);\n      } else {\n        handleStepComplete(basicDetails);\n      }\n    } else {\n      setContinueClicked(false);\n    }\n  };\n\n  const checkErrors = () => {\n    let error_1 = isInvalid(\"jobName\", basicDetails[\"jobName\"]);\n    if (!error_1?.length) {\n      return false;\n    }\n    return true;\n  };\n\n  console.log({ jobUpdateParam, jobId });\n  return (\n    <div className=\"app_wrapper\">\n      <div className=\"section_wrapper\">\n        <div className=\"custom_container\">\n          <div className=\"form_field\">\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_5\">\n                {editDetailPage?.currentScreen ? (\n                  <React.Fragment>\n                    <div className=\"relate\">\n                      <button\n                        className=\"back\"\n                        onClick={() => {\n                          handleStepForward(14);\n                        }}\n                      ></button>\n                      <span className=\"title\">\n                        {!jobUpdateParam && jobId\n                          ? \"Republish a job\"\n                          : update\n                          ? \"Update job\"\n                          : \"Post new job\"}\n                      </span>\n                    </div>\n                    <p className=\"commn_para\">\n                      Write the job name and try to describe all details for\n                      better comprehension.\n                    </p>\n                  </React.Fragment>\n                ) : (\n                  <React.Fragment>\n                    <span className=\"title\">\n                      {!jobUpdateParam && jobId\n                        ? \"Republish a job\"\n                        : update\n                        ? \"Update job\"\n                        : \"Post new job\"}\n                    </span>\n                    <p className=\"commn_para\">\n                      Write the job name and try to describe all details for\n                      better comprehension.\n                    </p>\n                  </React.Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_5\">\n              <div className=\"form_field\">\n                <span className=\"xs_sub_title\">Job</span>\n              </div>\n              <div className=\"form_field\">\n                <label className=\"form_label\">Job Name</label>\n                <div className=\"text_field\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter Job Name\"\n                    name=\"jobName\"\n                    value={jobName}\n                    onChange={handleChange}\n                  />\n                </div>\n                <span className=\"error_msg\">{errors.jobName}</span>\n              </div>\n              <div className=\"form_field\">\n                <label className=\"form_label\">Job Description</label>\n                <div className=\"text_field\">\n                  <textarea\n                    placeholder=\"Please give a general description of your job.\"\n                    name=\"job_description\"\n                    value={job_description}\n                    onChange={handleChange}\n                    maxLength={1000}\n                    onBlur={() => {\n                      if (job_description?.length) {\n                        let stringItem = job_description;\n                        if (job_description) {\n                          stringItem = job_description.split(\". \").join(\". \");\n                        }\n                        stringItem = stringItem\n                          .split(\".\")\n                          .map(capitalize)\n                          .join(\".\");\n                        stringItem = stringItem\n                          .split(\". \")\n                          .map(capitalize)\n                          .join(\". \");\n                        setBasicDetails((prev: any) => ({\n                          ...prev,\n                          job_description: stringItem,\n                        }));\n                      }\n                    }}\n                  />\n                  {job_description.length ? (\n                    <span className=\"char_count\">\n                      {`character length : ${job_description.length} / 1000`}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n                <span className=\"error_msg\">{errors.job_description}</span>\n              </div>\n              <div className=\"form_field\">\n                <button\n                  className={`fill_btn full_btn btn-effect ${\n                    checkErrors() ? \"disable_btn\" : \"\"\n                  }`}\n                  onClick={handleContinue}\n                >\n                  {\"Continue\"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostNewJob;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/addLocation.tsx",["1152","1153"],"\nimport { useEffect, useState } from 'react';\n// @ts-ignore\n// import PlacesAutocomplete from 'react-places-autocomplete';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport icgps from \"../../../assets/images/ic-gps.png\";\nimport Geocode from \"react-geocode\";\nimport { setShowToast, setLoading } from '../../../redux/common/actions';\nimport cross from \"../../../assets/images/close-black.png\";\nimport Constants from '../../../utils/constants';\n\nGeocode.setApiKey(Constants.SocialAuth.GOOGLE_GEOCODE_KEY);\nGeocode.setLanguage(\"en\");\nGeocode.setRegion('au');\n// Enable or disable logs. Its optional.\nGeocode.enableDebug();\ninterface Proptypes {\n  data: any;\n  stepCompleted: boolean;\n  handleStepComplete: (data: any) => void;\n  handleStepBack: () => void;\n}\n\nconst searchOptions = {\n  componentRestrictions: { country: \"au\" },\n  types: [\"(cities)\"]\n}\n\nconst AddLocation = ({ data, stepCompleted, handleStepComplete, handleStepBack }: Proptypes) => {\n  const [address, setAddress] = useState('');\n  const [locationDetails, setLocationDetails] = useState<{ [index: string]: any }>({ location: {}, location_name: '' });\n  const [error, setError] = useState('');\n  const [localChanges, setLocationChanges] = useState(false);\n  const [activeCurrent, setActiveCurrent] = useState(false);\n\n  const [locationSelected, setLocationSelected] = useState(false);\n\n  const updateLocalData = (data: any) => {\n    setLocationDetails({\n      location: {\n        type: 'Point',\n        coordinates: data?.coordinates\n      },\n      location_name: data?.location_name\n    });\n  }\n\n  useEffect(() => {\n    if (stepCompleted && !localChanges) {\n      updateLocalData(data);\n      setAddress(data?.location_name);\n      setLocationSelected(true);\n      setLocationChanges(true);\n    }\n\n    if (address?.length > 2) {\n      setActiveCurrent(false);\n      document.getElementById('location_search_dynamic')?.focus();\n    } else {\n      setActiveCurrent(false);\n      document.getElementById('location_search_static')?.focus();\n    }\n  }, [address, stepCompleted, data])\n\n\n  const filterFromAddress = (response: any) => {\n    let city, state, country = null;\n    for (let i = 0; i < response.results[0].address_components.length; i++) {\n      for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n        switch (response.results[0].address_components[i].types[j]) {\n          case \"locality\":\n            city = response.results[0].address_components[i].long_name;\n            break;\n          case \"administrative_area_level_1\":\n            state = response.results[0].address_components[i].long_name;\n            break;\n          case \"country\":\n            country = response.results[0].address_components[i].long_name;\n            break;\n        }\n      }\n    }\n    return { city, state, country: country.toLowerCase() };\n  }\n\n  const getCurrentLocation = async (e: any) => {\n    e.preventDefault();\n    setActiveCurrent(true);\n    let permission_web = await navigator?.permissions?.query({ name: 'geolocation' });\n\n    if (permission_web.state !== 'denied') {\n      setLoading(true)\n      let item_position: any = localStorage.getItem('position');\n      let position = JSON.parse(item_position);\n      let longitude = (position[0])?.toString();\n      let latitude = (position[1])?.toString();\n      try {\n        let response: any = await Geocode.fromLatLng(latitude, longitude);\n        console.log({response});\n        const { city, state, country } = filterFromAddress(response);\n        if (response && [\"australia\", \"au\"].includes(country)) {\n          const address = response.results[0].formatted_address;\n          let coordinates_values = [latitude, longitude];\n          setLocation({ coordinates: coordinates_values, address: address })\n          setLoading(false);\n        } else {\n          setShowToast(true, \"Uh Oh! We don't provide service currently in your location\");\n          setLoading(false);\n        }\n      } catch (err) {\n        console.log({ err });\n      }\n\n    } else {\n      setError('Please enable the location permission from the browser settings so that Tickt app can access your location');\n    }\n  }\n\n  const handleContinue = (e: any) => {\n    e.preventDefault();\n    let locationAddress: any = locationDetails;\n    if (data?.location?.coordinates?.length && data?.location_name === address) {\n      locationAddress.location['coordinates'] = data?.location?.coordinates;\n      handleStepComplete(locationAddress);\n      return\n    } else {\n      if (locationAddress?.location?.coordinates?.length) {\n        handleStepComplete(locationDetails);\n        return\n      }\n    }\n    setError('please choose current location or search a location.');\n  }\n\n  const setLocation = ({ coordinates, address }: any) => {\n    setLocationDetails({\n      location: {\n        type: 'Point',\n        coordinates: coordinates,\n      },\n      location_name: address,\n    });\n    setAddress(address);\n    setError('');\n  }\n\n  const handleSelect = async (address: any) => {\n    setLocationSelected(true);\n    try {\n      let coordinates_response = await Geocode.fromAddress(address);\n      if (coordinates_response) {\n        const { lat, lng } = coordinates_response.results[0].geometry.location;\n        setLocation({ coordinates: [lng, lat], address })\n      }\n    } catch (err) {\n      console.log({ err });\n    }\n  };\n\n  const checkErrors = () => {\n    let location_details: any = locationDetails;\n    if (!location_details?.location?.coordinates?.length && !location_details?.location_name?.length && !address?.length) {\n      return true;\n    }\n    return false;\n  }\n\n  // Please enable the location permission from the settings so that Tickt app can access your location\n  return (\n    <div className=\"app_wrapper\">\n      <div className=\"section_wrapper\">\n        <div className=\"custom_container\">\n          <div className=\"form_field\">\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_5\">\n                <div className=\"relate\">\n                  <button className=\"back\" onClick={handleStepBack}></button>\n                  <span className=\"title\">Location</span>\n                </div>\n                <p className=\"commn_para\">Type the place for your job</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_5\">\n              <div className=\"form_field\">\n\n                <div className={`text_field ${address.length > 2 ? 'none' : ''}`}>\n                  <input\n                    placeholder='Type a State, city or suburb'\n                    value={address}\n                    id=\"location_search_static\"\n                    onChange={(e) => setAddress((e.target.value).trimLeft())}\n                    autoComplete=\"off\"\n                  />\n                </div>\n\n\n                <PlacesAutocomplete\n                  value={address}\n                  onChange={(value) => {\n                    setLocationSelected(false);\n                    setAddress((value).trimLeft())\n                  }}\n                  searchOptions={searchOptions}\n                  onSelect={handleSelect}\n                >\n                  {({ getInputProps, suggestions, getSuggestionItemProps, loading }: any) => (\n                    <div>\n                      <div className=\"text_field\">\n                        <input\n                          id=\"location_search_dynamic\"\n                          {...getInputProps({\n                            placeholder: 'Type a State, city or suburb',\n                            className: `${address?.length < 2 ? 'none' : 'location-search-input detect_input'}`,\n                          })}\n                        />\n                        <span className={`${address?.length < 2 ? 'none' : 'detect_icon'}`}>\n                          <img\n                            src={cross}\n                            alt=\"cross\"\n                            onClick={() => {\n                              setAddress('');\n                              // setLocation({});\n                              setLocation({ coordinates: [], address: '' })\n                              setLocationSelected(false);\n                            }} />\n                        </span>\n                      </div>\n                      <div className=\"autocomplete-drop-down-map-container\">\n                        {loading && <div>Loading...</div>}\n                        {!locationSelected && !loading && !suggestions?.length && address?.length > 2 && !locationDetails?.location?.coordinates?.length ?\n                          (<div className=\"loc_suggestions\">\n                            {'No Result Found.'}\n                          </div>)\n                          : ''}\n                        {!locationSelected && !loading && suggestions?.length && address?.length > 2 ?\n                          suggestions.map((suggestion: any) => {\n                            const className = suggestion.active\n                              ? 'suggestion-item--active'\n                              : 'suggestion-item';\n                            // inline style for demonstration purpose\n                            const style = suggestion.active\n                              ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                              : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                            return (\n                              <div\n                                {...getSuggestionItemProps(suggestion, {\n                                  className,\n                                  style,\n                                })}\n                              >\n                                <div className=\"loc_suggestions\">{suggestion.description}</div>\n                              </div>\n                            );\n                          }) : null}\n                      </div>\n                    </div>\n                  )}\n                </PlacesAutocomplete>\n\n                <span className=\"error_msg\">{error}</span>\n              </div>\n\n              <div className=\"form_field\">\n                <button\n                  className={activeCurrent ? 'location-btn fill_btn' : \"location-btn\"}\n                  onClick={getCurrentLocation}>\n                  <span className=\"gps_icon\">\n                    <img src={icgps} alt=\"gps-icon\" />\n                  </span>\n                  {'Use my current location'}\n                </button>\n              </div>\n\n              <div className=\"form_field\">\n                <button\n                  className={`fill_btn full_btn btn-effect ${checkErrors() ? 'disable_btn' : ''}`}\n                  onClick={handleContinue}>Continue</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div >\n  )\n}\n\nexport default AddLocation;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/chooseTiming.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/payment.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/chooseTimingMileStone.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/addMilestone.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/saveTemplate.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobPostedSuccess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobMilestones.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/milestoneTemplates.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/uploadMedia.tsx",["1154","1155"],"import React, { useEffect, useState } from 'react';\nimport remove from \"../../../assets/images/icon-close-1.png\";\nimport addMedia from \"../../../assets/images/add-image.png\";\nimport docThumbnail from '../../../assets/images/add-document.png'\nimport { onFileUpload } from '../../../redux/auth/actions';\nimport { setLoading, setShowToast } from '../../../redux/common/actions';\nimport { thumbnailExtract } from '../../../common/thumbnail';\n//@ts-ignore\nimport DropboxChooser from 'react-dropbox-chooser';\nimport Menu from '@material-ui/core/Menu';\nimport Fade from '@material-ui/core/Fade';\n\ninterface Proptypes {\n    jobName?: string;\n    title?: string;\n    para?: string;\n    hasDescription?: boolean;\n    data: any;\n    stepCompleted: boolean;\n    handleStepComplete: (data: any) => void;\n    handleStepForward: (data: any) => void;\n    handleStepBack: () => void;\n}\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\nconst videoFormats: Array<any> = [\"mp4\", \"wmv\", \"avi\"];\nconst docTypes: Array<any> = [\"jpeg\", \"jpg\", \"png\", \"mp4\", \"wmv\", \"avi\", \"pdf\", \"doc\", \"docx\", \"msword\"];\nconst docformats: Array<any> = [\"pdf\", \"doc\", \"docx\", \"msword\"];\n\nconst UploadMedia = ({ jobName, title, para, hasDescription, data, stepCompleted, handleStepForward, handleStepComplete, handleStepBack }: Proptypes) => {\n    const [update, forceUpdate] = useState({});\n    const [filesUrl, setFilesUrl] = useState([] as any);\n    const [description, setDescription] = useState('');\n    const [submitClicked, setSubmitClicked] = useState(false);\n    const [selectedSlide, setSelectSlide] = useState(1);\n    const [isItemsLoad, setLoadItems] = useState({});\n    const [renderAsyncLoad, setAsyncLoad] = useState<any>(null);\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const isFileChoser = Boolean(anchorEl);\n\n    const fileChoserClicked = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const fileChoserClosed = () => {\n        setAnchorEl(null);\n    };\n\n    useEffect(() => {\n        if (stepCompleted) {\n            setFilesUrl(data?.urls);\n            setSubmitClicked(true);\n        }\n    }, [stepCompleted, data]);\n\n    const randomDelay = (item: any, index: any) => new Promise(resolve => {\n\n        let split_item_format = item.split('.');\n        let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n        let split_item_name = item.split('/');\n        let get_split_name = split_item_name[split_item_name.length - 1];\n        let image_render: any = null;\n        let loadByIndex = { [index]: true };\n\n        if (get_split_fromat) {\n            if (imageFormats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        onClick={() => { setItemToggle(index) }}\n                        title={get_split_name}\n                        src={item}\n                        onLoad={() => {\n                            loadByIndex[index] = false;\n                            console.log('image_render', '--->', { loadByIndex })\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n        }\n\n        if (!loadByIndex[index]) {\n            console.log('Hered!!!')\n            resolve(image_render);\n        }\n    });\n\n\n    const calc = async (item: any, index: any) => {\n        let result = await randomDelay(item, index);\n        console.log({ result });\n        return result;\n    };\n\n    const asyncFunc = async () => {\n        const p = filesUrl.map((item: any, index: any) => calc(item.link, index));\n        const results = await Promise.all(p);\n        setAsyncLoad(results);\n    };\n\n    useEffect(() => {\n        asyncFunc();\n    }, [filesUrl])\n\n    const checkErrors = () => {\n        if (!filesUrl?.length) {\n            return true;\n        }\n\n        if (hasDescription && (!description.trim() || description.length > 1000)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    const removeFromItem = (index: any) => {\n        filesUrl.splice(index, 1);\n        setFilesUrl(filesUrl);\n        Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n    }\n\n\n    const checkIfVideoExist = () => {\n        let videoItems: any = [];\n        let ImageItems: any = [];\n        let concatFormat = [...imageFormats, ...docformats];\n        filesUrl.forEach((element: any) => {\n            let split_items = element.link.split('.');\n            let format_split_items = split_items[split_items?.length - 1];\n            if (videoFormats.includes(format_split_items)) {\n                videoItems.push(format_split_items);\n            }\n\n            if (concatFormat.includes(format_split_items)) {\n                ImageItems.push(format_split_items);\n            }\n        });\n        console.log({\n            concatFormat,\n            ImageItems,\n            videoItems\n        })\n        if (ImageItems?.length === 6) {\n            return \".mp4, .wmv, .avi\";\n        }\n\n        if (videoItems?.length == 2) {\n            return \".png,.jpg,.jpeg,.pdf,.doc\";\n        }\n\n        return \".png,.jpg,.jpeg,.pdf,.doc,.mp4,.wmv,.avi\";\n    }\n\n    const checkIfVideoExist_ = () => {\n        let videoItems = [];\n        let ImageItems = [];\n        filesUrl.forEach((element: any) => {\n            let split_items = element.link.split('.');\n            let format_split_items = split_items[split_items?.length - 1];\n            if (videoFormats.includes(format_split_items)) {\n                videoItems.push(format_split_items);\n            }\n\n            if ([...imageFormats, ...docformats].includes(format_split_items)) {\n                ImageItems.push(format_split_items);\n            }\n        });\n\n\n        return {\n            videoCount: videoItems.length,\n            imageCount: ImageItems.length\n        }\n\n    }\n\n    const onDropBoxSuccess = (files: any) => {\n        onFileChange('', true, files[0]);\n    }\n\n    const onDropBoxCancel = (err: any) => {\n        console.log(err, \"err --- Dropbox\");\n    }\n\n    const onFileChange = async (e: any, isDropbox?: boolean, dropBoxFile?: any) => {\n        const formData = new FormData();\n        var fileType;\n        const newFile = isDropbox ? dropBoxFile?.link : e.target.files[0];\n        if (isDropbox) {\n            let dropBoxArr: any = newFile?.split(\".\");\n            fileType = dropBoxArr[dropBoxArr.length - 1]?.toLowerCase();\n        } else {\n            fileType = (newFile?.type?.split('/')[1])?.toLowerCase();\n        }\n\n        fileChoserClosed();\n\n        if (hasDescription && !imageFormats.includes(fileType)) {\n            setShowToast(true, \"The file must be in proper format\");\n            return;\n        }\n\n        if (filesUrl?.length === 8) {\n            setShowToast(true, \"Max files upload limit is 6\")\n            return;\n        }\n\n        let checkCounts: any = checkIfVideoExist_();\n\n        if (checkCounts?.videoCount === 2) {\n            if (videoFormats.includes(fileType)) {\n                return\n            }\n        }\n\n        if (checkCounts?.imageCount >= 6) {\n            let concatFormats = [...imageFormats, ...docformats];\n            if (concatFormats.includes(fileType)) {\n                return\n            }\n        }\n\n        let filesUrlClone: any = filesUrl;\n\n        let countVideoFormats = filesUrlClone.map((item: any) => {\n            let split_items = item.link.split('.');\n\n            let format_split_items = split_items[split_items?.length - 1];\n\n            if (videoFormats.includes(format_split_items)) {\n                return format_split_items;\n            }\n        }).filter((item: any) => item !== undefined);\n\n        var selectedFileSize = isDropbox ? dropBoxFile?.bytes / 1024 / 1024 : newFile?.size / 1024 / 1024; // size in mb\n\n        if (docTypes.indexOf(fileType) < 0 || (selectedFileSize > 10)) {\n            setShowToast(true, \"The file must be in proper format or size\")\n            return;\n        }\n\n        if (imageFormats.includes(fileType) && selectedFileSize > 10) { // image validations\n            setShowToast(true, \"The image file size must be below 10 mb\")\n            return;\n        }\n\n        if (videoFormats.includes(fileType)) { // video validations\n            if (selectedFileSize > 10) {\n                setShowToast(true, \"The video file size must be below 20 mb\")\n                return;\n            }\n            if (countVideoFormats?.length > 1) {\n                setShowToast(true, \"Max video file upload limit is 2\")\n                return;\n            }\n        }\n\n        !isDropbox && formData.append('file', newFile);\n        setLoadItems({});\n        const res: any = isDropbox ? { success: true } : await onFileUpload(formData);\n        setLoading(true);\n        if (res.success) {\n            let link: string = isDropbox ? dropBoxFile?.link : res?.imgUrl;\n            let check_type: any = imageFormats.includes(fileType) ? 1 : videoFormats.includes(fileType) ? 2 : [\"doc\", \"docx\", \"msword\"].includes(fileType) ? 3 : 4\n            setFilesUrl((prev: Array<any>) => [...prev, {\n                \"mediaType\": check_type,\n                \"link\": link\n            }]);\n            setLoadItems((prev: any) => ({\n                [filesUrl.length - 1]: false\n            }))\n        }\n    }\n\n\n    const setItemToggle = (index: any) => {\n        setSelectSlide(index + 1);\n    }\n\n    const renderbyFileFormat = (item: any, index: any, base64?: any) => {\n        let split_item_format = item.split('.');\n        let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n        let split_item_name = item.split('/');\n        let get_split_name = split_item_name[split_item_name.length - 1];\n        let image_render: any = null;\n        let loadByIndex = { [index]: true };\n        if (get_split_fromat) {\n            if (imageFormats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        title={get_split_name}\n                        src={item}\n                        async-src={item}\n                        decoding=\"async\"\n                        loading=\"lazy\"\n                        onLoad={() => {\n                            console.log('Loaded!')\n                            loadByIndex[index] = false;\n                            console.log('image_render', '--->', { loadByIndex })\n                            setLoadItems((prev: any) => ({\n                                [index]: true\n                            }))\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n\n            if (videoFormats.includes(get_split_fromat)) {\n                if (base64) {\n                    image_render = (\n                        <video\n                            id={`media_${index}`}\n                            title={get_split_name}\n                            crossOrigin=\"anonymous\"\n                            src={item}\n                            poster={base64}\n                            controls={false}\n                            onLoadedData={() => {\n                                console.log('Loaded!')\n                                setLoadItems((prev: any) => ({\n                                    [index]: true\n                                }))\n                            }}\n                        />\n                    )\n                } else {\n                    image_render = (\n                        <video id={`media_${index}`} crossOrigin=\"anonymous\"\n                            src={item}\n                            controls={false}\n                            title={get_split_name}\n                            onLoadedData={() => {\n                                console.log('Loaded!')\n                                setLoadItems((prev: any) => ({\n                                    [index]: true\n                                }))\n                            }}\n                        />\n                    )\n                }\n            }\n\n            if (docformats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        title={get_split_name}\n                        src={docThumbnail}\n                        async-src={item}\n                        decoding=\"async\"\n                        loading=\"lazy\"\n                        onLoad={() => {\n                            loadByIndex[index] = false;\n                            console.log('Loaded!')\n                            setLoadItems((prev: any) => ({\n                                [index]: true\n                            }))\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n            return (\n                <figure className=\"img_video\">\n                    <React.Fragment>\n                        {image_render && (\n                            <React.Fragment>\n                                {image_render}\n                                <img\n                                    onClick={() => { removeFromItem(index) }}\n                                    src={remove}\n                                    alt=\"remove\"\n                                    className=\"remove\"\n                                />\n                            </React.Fragment>\n                        )}\n                    </React.Fragment>\n                </figure>\n            )\n        }\n    }\n\n    let IsRenderValues = null;\n    if (Object.values(isItemsLoad)?.length) {\n        IsRenderValues = Array.isArray(Object.values(isItemsLoad)) && Object.values(isItemsLoad)[0] === true ? Object.values(isItemsLoad)[0] : false;\n    }\n\n    if (IsRenderValues === false) {\n        setLoading(true);\n    }\n\n    if (IsRenderValues === true) {\n        setLoading(false);\n    }\n\n    let checkErrors_: any = checkErrors();\n    console.log({ IsRenderValues, isItemsLoad, check: checkErrors_ })\n    return (\n        <div className={`app_wrapper${jobName ? ' padding_0' : ''}`}>\n            <div className={`section_wrapper${jobName ? ' padding_0' : ''}`}>\n                <div className=\"custom_container\">\n                    <canvas id=\"canvas-extractor\" style={{ display: 'none' }}></canvas>\n\n                    <div className=\"form_field\">\n                        <div className=\"flex_row\">\n                            <div className={`flex_col_sm_${jobName ? '7' : '6'}`}>\n                                <div className=\"relate\">\n                                    <button\n                                        onClick={() => { hasDescription ? handleStepBack() : handleStepForward(6) }}\n                                        className=\"back\"></button>\n                                    <span className={jobName ? \"xs_sub_title\" : \"title\"}>{jobName || 'Photos and documents'}</span>\n                                </div>\n                                {title && <span className=\"sub_title\">{title}</span>}\n                                <p className=\"commn_para\">\n                                    {para || 'Record a short video (up to 30 seconds) or add up to 6 photos and files to demonstrate your job and any unique requirements.'}\n                                </p>\n                            </div>\n                            {!jobName && !filesUrl?.length && !hasDescription ? (\n                                <div className=\"flex_col_sm_5 text-right\">\n                                    <span\n                                        onClick={() => {\n                                            handleStepForward(14)\n                                        }}\n                                        className=\"link\">\n                                        {'Skip'}\n                                    </span>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                    <div className=\"flex_row\">\n                        <div className=\"flex_col_sm_12\">\n                            <div className=\"upload_img_video\">\n                                {filesUrl?.length ?\n                                    filesUrl.map((item: any, index: number) => (renderbyFileFormat(item?.link, index, item?.base64)))\n                                    : null}\n\n                                <button\n                                    className='media_btn'\n                                    id=\"fade-button\"\n                                    aria-controls={isFileChoser ? 'fade-menu' : undefined}\n                                    aria-haspopup=\"true\"\n                                    aria-expanded={isFileChoser ? 'true' : undefined}\n                                    onClick={fileChoserClicked}\n                                >\n                                    <img src={addMedia} alt=\"\" />\n                                </button>\n\n                                <Menu\n                                    className=\"fsp_modal range dropbox\"\n                                    id=\"fade-menu\"\n                                    MenuListProps={{\n                                        'aria-labelledby': 'fade-button',\n                                    }}\n                                    anchorEl={anchorEl}\n                                    open={isFileChoser}\n                                    onClose={fileChoserClosed}\n                                    TransitionComponent={Fade}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'center',\n                                    }}\n                                    transformOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    {filesUrl?.length < 8 ? (\n                                        <React.Fragment>\n                                            <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                                                {/* <img src={addMedia} alt=\"\" /> */}\n                                                Upload from files\n                                            </label>\n                                            {!hasDescription ? (\n                                                <>\n                                                    <input\n                                                        onChange={onFileChange}\n                                                        type=\"file\"\n                                                        accept={checkIfVideoExist()}\n                                                        style={{ display: \"none\" }}\n                                                        id=\"upload_img_video\"\n                                                    />\n                                                    <DropboxChooser\n                                                        appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n                                                        success={(files: any) => onDropBoxSuccess(files)}\n                                                        cancel={(err: any) => onDropBoxCancel(err)}\n                                                        multiselect={false}\n                                                        linkType={'direct'}\n                                                    >\n                                                        <button className=\"dropbox-button\">Upload from Dropbox</button>\n                                                    </DropboxChooser>\n                                                </>\n                                            ) : (\n                                                <>\n                                                    <input\n                                                        onChange={onFileChange}\n                                                        type=\"file\"\n                                                        accept={hasDescription ? \"image/png,image/jpg,image/jpeg\" : \"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"}\n                                                        style={{ display: \"none\" }}\n                                                        id=\"upload_img_video\"\n                                                    />\n                                                    <DropboxChooser\n                                                        appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n                                                        success={(files: any) => onDropBoxSuccess(files)}\n                                                        cancel={(err: any) => onDropBoxCancel(err)}\n                                                        multiselect={false}\n                                                        linkType={'direct'}\n                                                    >\n                                                        <button className=\"dropbox-button\">Upload from Dropbox</button>\n                                                    </DropboxChooser>\n                                                </>\n                                            )}\n                                        </React.Fragment>\n                                    ) : null}\n                                </Menu>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"flex_row\">\n                        <div className=\"flex_col_sm_8\">\n                            {hasDescription && (\n                                <div className=\"form_field\">\n                                    <label className=\"form_label\">Photo Description</label>\n                                    <div className=\"text_field\">\n                                        <textarea placeholder=\"The item has..\" value={description} onChange={({ target: { value } }: any) => setDescription(value)} />\n                                        {description.length ?\n                                            <span className=\"char_count\">\n                                                {`character length : ${description.length} / 1000`}\n                                            </span>\n                                            : ''}\n                                    </div>\n                                    <span className=\"error_msg\">{submitClicked && !description.trim() ? 'Photo Description is required.' : description.length > 1000 ? 'Maximum 1000 characters are allowed.' : ''}</span>\n                                </div>\n                            )}\n                            <div className=\"form_field\">\n                                <button\n                                    onClick={() => {\n                                        setSubmitClicked(true);\n                                        let filteredItems: any = [];\n                                        let isRender: boolean = false;\n                                        filesUrl.forEach((item: any, index: any) => {\n                                            if (item?.mediaType === 2) {\n                                                if (!item?.base64) {\n                                                    let base64 = thumbnailExtract({\n                                                        canvasId: '#canvas-extractor',\n                                                        videoId: `#media_${index}`\n                                                    });\n                                                    item['base64'] = base64;\n                                                }\n                                            }\n                                            filteredItems.push(item);\n                                        });\n                                        if (!isRender) {\n                                            setFilesUrl(filteredItems);\n                                            handleStepComplete({\n                                                urls: filteredItems,\n                                                description: hasDescription ? description : undefined,\n                                            })\n                                        }\n                                    }}\n                                    className={`fill_btn full_btn btn-effect ${checkErrors_ && IsRenderValues == null ? 'disable_btn' : !checkErrors_ && !IsRenderValues ? 'disable_btn' : ''}`}>\n                                    {'Submit'}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default UploadMedia\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobDetails.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/editMileStone.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/activeJobs.tsx",["1156"],"import React, { useState, useEffect } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport { renderTime } from \"../../../utils/common\";\n//@ts-ignore\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport approved from \"../../../assets/images/approved.png\";\nimport waiting from \"../../../assets/images/exclamation.png\";\nimport activeJobs from \"../../../assets/images/activeJobs.png\";\nimport noDataFound from \"../../../assets/images/no-search-data.png\";\n\ninterface Proptypes {\n  loading: boolean;\n  newJobsCount?: number;\n  activeJobList: any;\n  getActiveJobList: (page: number) => void;\n  resetActiveJobList: () => void;\n}\n\nconst ActiveJobs = ({\n  loading,\n  getActiveJobList,\n  activeJobList,\n  resetActiveJobList,\n}: Proptypes) => {\n  const [jobList, setJobList] = useState<Array<any>>([]);\n  const [pageNo, setPageNo] = useState<number>(1);\n  const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n  const [isLoad, setIsLoad] = useState(true);\n  const history: any = useHistory();\n\n\n  useEffect(() => {\n    callJobList();\n\n    return () => resetActiveJobList();\n  }, []);\n\n  const callJobList = async () => {\n    getActiveJobList(pageNo);\n  };\n\n  useEffect(() => {\n    if (activeJobList?.length || Array.isArray(activeJobList)) {\n      const allJobs = [...jobList, ...activeJobList];\n      setJobList(allJobs);\n      setIsLoad(false);\n      setPageNo(pageNo + 1);\n      if (activeJobList.length < 10) {\n        setHasMoreItems(false);\n      }\n      resetActiveJobList();\n    }\n  }, [activeJobList]);\n\n  return (\n    <div className=\"detail_col\">\n      <InfiniteScroll\n        dataLength={jobList.length}\n        next={callJobList}\n        style={{ overflowX: \"hidden\" }}\n        hasMore={hasMoreItems}\n        loader={<></>}\n      >\n        <span className=\"sub_title\">Active Jobs</span>\n        <div className=\"flex_row tradies_row\">\n          {!isLoad && !loading && jobList.length\n            ? jobList.map(\n                ({\n                  jobId,\n                  tradeId,\n                  specializationId,\n                  jobName,\n                  fromDate,\n                  toDate,\n                  timeLeft,\n                  amount,\n                  locationName,\n                  milestoneNumber,\n                  totalMilestones,\n                  status,\n                  builderName,\n                  builderImage,\n                  quoteJob,\n                }) => (\n                  <div key={jobId} className=\"flex_col_sm_6\">\n                    <div\n                      className=\"tradie_card\"\n                      data-aos=\"fade-in\"\n                      data-aos-delay=\"250\"\n                      data-aos-duration=\"1000\"\n                    >\n                      <NavLink\n                        to={`/mark-milestone?jobId=${jobId}&redirect_from=jobs`}\n                        className=\"more_detail circle\"\n                      ></NavLink>\n                      <div className=\"user_wrap\">\n                        <figure className=\"u_img\">\n                          <img\n                            src={builderImage || dummy}\n                            alt=\"\"\n                            onError={(e: any) => {\n                              if (e?.target?.onerror) {\n                                e.target.onerror = null;\n                              }\n                              if (e?.target?.src) {\n                                e.target.src = dummy;\n                              }\n                            }}\n                          />\n                        </figure>\n                        <div className=\"details\">\n                          <span className=\"name\">{jobName}</span>\n                          <span className=\"prof\">{builderName}</span>\n                        </div>\n                      </div>\n                      <div className=\"job_info\">\n                        <ul>\n                          <li className=\"icon clock\">\n                            {renderTime(fromDate, toDate)}\n                          </li>\n                          <li className=\"icon dollar\">{amount}</li>\n                          <li className=\"icon location line-1\">\n                            {locationName}\n                          </li>\n                          <li className=\"icon calendar\">{timeLeft}</li>\n                        </ul>\n                      </div>\n                      <div\n                        className=\"job_progress_wrap\"\n                        id=\"scroll-progress-bar\"\n                      >\n                        <div className=\"progress_wrapper\">\n                          <span className=\"completed-digit\" id=\"digit-progress\">\n                            <b>Job Milestones {milestoneNumber}</b> of{\" \"}\n                            {totalMilestones}\n                          </span>\n                          <span className=\"approval_info\">\n                            {status === \"APPROVED\" && (\n                              <img src={approved} alt=\"icon\" />\n                            )}\n                            {status === \"NEEDS APPROVAL\" && (\n                              <img src={waiting} alt=\"icon\" />\n                            )}\n                            {status}\n                          </span>\n                          <span className=\"progress_bar\">\n                            <input\n                              className=\"done_progress\"\n                              id=\"progress-bar\"\n                              type=\"range\"\n                              min=\"0\"\n                              value={milestoneNumber}\n                              max={totalMilestones}\n                            />\n                          </span>\n                        </div>\n                      </div>\n                      {quoteJob && (\n                        <div className=\"text-center mt-sm\">\n                          <div\n                            className=\"view_quote\"\n                            onClick={() => {\n                              history.push({\n                                pathname: `/active-quote-job`,\n                                state: {\n                                  jobData: {\n                                    jobId: jobId,\n                                    tradeId: tradeId,\n                                    specializationId: specializationId,\n                                  },\n                                },\n                              });\n                            }}\n                          >\n                            {\"View your quote\"}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )\n              )\n            : !isLoad &&\n              !loading && (\n                <div className=\"no_record  m-t-vh\">\n                  <figure className=\"no_img\">\n                    <img src={noDataFound} alt=\"data not found\" />\n                  </figure>\n                  <span>{\"No Data Found\"}</span>\n                </div>\n                // <div className=\"no_record  m-t-vh\">\n                //   <figure>\n                //     <figure className=\"no_img\">\n                //       <img src={activeJobs} alt=\"data not found\" />\n                //     </figure>\n                //   </figure>\n\n                //   <span className=\"empty_screen_text\">\n                //     You don't have any active job yet\n                //   </span>\n                //   <button\n                //     className=\"empty_screen_button\"\n                //     onClick={() => history.push(\"/\")}\n                //   >\n                //     View recommened jobs\n                //   </button>\n                // </div>\n              )}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default ActiveJobs;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/appliedJobs.tsx",["1157"],"import { useState, useEffect } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport appliedJobs from \"../../../assets/images/appliedJobs.png\";\nimport noDataFound from \"../../../assets/images/no-search-data.png\";\n\ninterface Proptypes {\n  loading: boolean;\n  newJobsCount?: number;\n  appliedJobList: any;\n  getAppliedJobList: (page: number) => void;\n  resetAppliedJobList: () => void;\n}\n\nconst AppliedJobs = ({\n  loading,\n  getAppliedJobList,\n  appliedJobList,\n  newJobsCount,\n  resetAppliedJobList,\n}: Proptypes) => {\n  const [jobList, setJobList] = useState<Array<any>>([]);\n  const [pageNo, setPageNo] = useState<number>(1);\n  const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n  const [isLoad, setIsLoad] = useState(true);\n  const history: any = useHistory();\n\n  useEffect(() => {\n    callJobList();\n\n    return () => resetAppliedJobList();\n  }, []);\n\n  const callJobList = async () => {\n    getAppliedJobList(pageNo);\n  };\n\n  useEffect(() => {\n    if (appliedJobList?.length || Array.isArray(appliedJobList)) {\n      const allJobs = [...jobList, ...appliedJobList];\n      setJobList(allJobs);\n      setIsLoad(false);\n      setPageNo(pageNo + 1);\n      if (appliedJobList.length < 10) {\n        setHasMoreItems(false);\n      }\n      resetAppliedJobList();\n    }\n  }, [appliedJobList]);\n\n  return (\n    <div className=\"detail_col\">\n      <InfiniteScroll\n        dataLength={jobList.length}\n        next={callJobList}\n        style={{ overflowX: \"hidden\" }}\n        hasMore={hasMoreItems}\n        loader={<></>}\n      >\n        <span className=\"sub_title\">Applied Jobs</span>\n        <div className=\"flex_row tradies_row\">\n          {!isLoad && !loading && jobList.length\n            ? jobList.map(\n                ({\n                  jobId,\n                  tradeId,\n                  specializationId,\n                  jobName,\n                  time,\n                  amount,\n                  locationName,\n                  durations,\n                  milestoneNumber,\n                  totalMilestones,\n                  builderName,\n                  builderImage,\n                  quoteJob,\n                }) => (\n                  <div className=\"flex_col_sm_6\">\n                    <div\n                      className=\"tradie_card\"\n                      data-aos=\"fade-in\"\n                      data-aos-delay=\"250\"\n                      data-aos-duration=\"1000\"\n                    >\n                      <NavLink\n                        to={`/job-details-page?jobId=${jobId}&redirect_from=jobs`}\n                        className=\"more_detail circle\"\n                      ></NavLink>\n                      <div className=\"user_wrap\">\n                        <figure className=\"u_img\">\n                          <img\n                            src={builderImage || dummy}\n                            alt=\"\"\n                            onError={(e: any) => {\n                              if (e?.target?.onerror) {\n                                e.target.onerror = null;\n                              }\n                              if (e?.target?.src) {\n                                e.target.src = dummy;\n                              }\n                            }}\n                          />\n                        </figure>\n                        <div className=\"details\">\n                          <span className=\"name\">{jobName}</span>\n                          <span className=\"prof\">{builderName}</span>\n                        </div>\n                      </div>\n                      <div className=\"job_info\">\n                        <ul>\n                          <li className=\"icon clock\">{time}</li>\n                          <li className=\"icon dollar\">{amount}</li>\n                          <li className=\"icon location line-1\">\n                            {locationName}\n                          </li>\n                          <li className=\"icon calendar\">{durations}</li>\n                        </ul>\n                      </div>\n                      <div\n                        className=\"job_progress_wrap\"\n                        id=\"scroll-progress-bar\"\n                      >\n                        <div className=\"progress_wrapper\">\n                          <span className=\"completed-digit\" id=\"digit-progress\">\n                            <b>Job Milestones {milestoneNumber}</b> of{\" \"}\n                            {totalMilestones}\n                          </span>\n                          <span className=\"progress_bar\">\n                            <input\n                              className=\"done_progress\"\n                              id=\"progress-bar\"\n                              type=\"range\"\n                              min=\"0\"\n                              value={milestoneNumber}\n                              max={totalMilestones}\n                            />\n                          </span>\n                        </div>\n                      </div>\n                      {quoteJob && (\n                        <div\n                          className=\"quote-text\"\n                          onClick={() => {\n                            history.push({\n                              pathname: `/quote-job`,\n                              state: {\n                                jobData: {\n                                  jobId: jobId,\n                                  tradeId: tradeId,\n                                  specializationId: specializationId,\n                                },\n                                redirect_from: \"appliedJobs\",\n                              },\n                            });\n                          }}\n                        >\n                          {\"Quote sent\"}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )\n              )\n            : !isLoad &&\n              !loading && (\n                <div className=\"no_record  m-t-vh\">\n                  <figure className=\"no_img\">\n                    <img src={noDataFound} alt=\"data not found\" />\n                  </figure>\n                  <span>{\"No Data Found\"}</span>\n                </div>\n                // <div className=\"no_record  m-t-vh\">\n                //   <figure>\n                //     <figure className=\"no_img\">\n                //       <img src={appliedJobs} alt=\"data not found\" />\n                //     </figure>\n                //   </figure>\n\n                //   <span className=\"empty_screen_text\">\n                //     You didn't apply any job yet\n                //   </span>\n                //   <button\n                //     className=\"empty_screen_button\"\n                //     onClick={() => history.push(\"/\")}\n                //   >\n                //     View recommened jobs\n                //   </button>\n                // </div>\n              )}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default AppliedJobs;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/newJobs.tsx",["1158"],"import { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport newJobs from \"../../../assets/images/newJobs.png\";\nimport noDataFound from \"../../../assets/images/no-search-data.png\";\n\ninterface Proptypes {\n  loading: boolean;\n  newJobsCount?: number;\n  newJobList: any;\n  getNewJobList: (page: number) => void;\n  resetNewJobList: () => void;\n}\n\nconst NewJobs = ({\n  loading,\n  getNewJobList,\n  newJobList,\n  resetNewJobList,\n}: Proptypes) => {\n  const [jobList, setJobList] = useState<Array<any>>([]);\n  const [pageNo, setPageNo] = useState<number>(1);\n  const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    callJobList();\n\n    return () => resetNewJobList();\n  }, []);\n\n  const callJobList = async () => {\n    getNewJobList(pageNo);\n  };\n\n  useEffect(() => {\n    if (newJobList?.length || Array.isArray(newJobList)) {\n      const allJobs = [...jobList, ...newJobList];\n      setJobList(allJobs);\n      setIsLoad(false);\n      setPageNo(pageNo + 1);\n      if (newJobList.length < 10) {\n        setHasMoreItems(false);\n      }\n      resetNewJobList();\n    }\n  }, [newJobList]);\n\n  return (\n    <div className=\"detail_col\">\n      <InfiniteScroll\n        dataLength={jobList.length}\n        next={callJobList}\n        style={{ overflowX: \"hidden\" }}\n        hasMore={hasMoreItems}\n        loader={<></>}\n      >\n        <span className=\"sub_title\">New Jobs</span>\n        <div className=\"flex_row tradies_row\">\n          {!isLoad && !loading && jobList.length\n            ? jobList.map(\n                ({\n                  jobId,\n                  jobName,\n                  jobDescription,\n                  time,\n                  amount,\n                  locationName,\n                  durations,\n                  questionsCount,\n                  builderName,\n                  builderImage,\n                  viewersCount,\n                }) => (\n                  <div className=\"flex_col_sm_6\">\n                    <div\n                      className=\"tradie_card\"\n                      data-aos=\"fade-in\"\n                      data-aos-delay=\"250\"\n                      data-aos-duration=\"1000\"\n                    >\n                      <NavLink\n                        to={`/job-details-page?jobId=${jobId}&redirect_from=jobs&jobAction=invite`}\n                        className=\"more_detail circle\"\n                      ></NavLink>\n                      <div className=\"user_wrap\">\n                        <figure className=\"u_img\">\n                          <img\n                            src={builderImage || dummy}\n                            alt=\"\"\n                            onError={(e: any) => {\n                              if (e?.target?.onerror) {\n                                e.target.onerror = null;\n                              }\n                              if (e?.target?.src) {\n                                e.target.src = dummy;\n                              }\n                            }}\n                          />\n                        </figure>\n                        <div className=\"details\">\n                          <span className=\"name\">{jobName}</span>\n                          <span className=\"prof\">{builderName}</span>\n                        </div>\n                      </div>\n                      <div className=\"job_info\">\n                        <ul>\n                          <li className=\"icon clock\">{time}</li>\n                          <li className=\"icon dollar\">{amount}</li>\n                          <li className=\"icon location line-1\">\n                            {locationName}\n                          </li>\n                          <li className=\"icon calendar\">{durations}</li>\n                        </ul>\n                      </div>\n                      <p className=\"commn_para line-2\">{jobDescription}</p>\n                      <ul className=\"count_wrap\">\n                        <li className=\"icon view\">{viewersCount}</li>\n                        <li className=\"icon comment\">{questionsCount}</li>\n                      </ul>\n                    </div>\n                  </div>\n                )\n              )\n            : !isLoad &&\n              !loading && (\n                <div className=\"no_record  m-t-vh\">\n                  <figure className=\"no_img\">\n                    <img src={noDataFound} alt=\"data not found\" />\n                  </figure>\n                  <span>{\"No Data Found\"}</span>\n                </div>\n                // <div className=\"no_record  m-t-vh\">\n                //   <figure>\n                //     <figure className=\"no_img\">\n                //       <img src={newJobs} alt=\"data not found\" />\n                //     </figure>\n                //   </figure>\n\n                //   <span className=\"empty_screen_text\">\n                //     You don't have any new job yet\n                //   </span>\n                //   <button\n                //     className=\"empty_screen_button\"\n                //     onClick={() => history.push(\"/\")}\n                //   >\n                //     View recommened jobs\n                //   </button>\n                // </div>\n              )}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default NewJobs;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/approvedMilestones.tsx",["1159"],"import { useState, useEffect } from \"react\";\nimport { renderTime } from \"../../../utils/common\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport approved from \"../../../assets/images/approved.png\";\nimport newApprovals from \"../../../assets/images/newApprovals.png\";\nimport { useHistory } from \"react-router-dom\";\nimport { moengage, mixPanel } from \"../../../services/analyticsTools\";\nimport { MoEConstants } from \"../../../utils/constants\";\nimport noDataFound from \"../../../assets/images/no-search-data.png\";\n\ninterface Proptypes {\n  loading: boolean;\n  newJobsCount?: number;\n  approvedMilestoneList: any;\n  getApprovedMilestoneList: (page: number) => void;\n  resetApprovedMilestoneList: () => void;\n}\n\nconst ApprovedMilestones = ({\n  loading,\n  getApprovedMilestoneList,\n  approvedMilestoneList,\n  resetApprovedMilestoneList,\n}: Proptypes) => {\n  const [jobList, setJobList] = useState<Array<any>>([]);\n  const [pageNo, setPageNo] = useState<number>(1);\n  const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n  const [isLoad, setIsLoad] = useState(true);\n  const history = useHistory();\n\n  useEffect(() => {\n    callJobList();\n\n    return () => resetApprovedMilestoneList();\n  }, []);\n\n  const callJobList = async () => {\n    getApprovedMilestoneList(pageNo);\n  };\n\n  useEffect(() => {\n    if (approvedMilestoneList?.length || Array.isArray(approvedMilestoneList)) {\n      const allJobs = [...jobList, ...approvedMilestoneList];\n      setJobList(allJobs);\n      setIsLoad(false);\n      setPageNo(pageNo + 1);\n      if (approvedMilestoneList.length < 10) {\n        setHasMoreItems(false);\n      }\n      resetApprovedMilestoneList();\n    }\n  }, [approvedMilestoneList]);\n\n  return (\n    <div className=\"detail_col\">\n      <InfiniteScroll\n        dataLength={jobList.length}\n        next={callJobList}\n        style={{ overflowX: \"hidden\" }}\n        hasMore={hasMoreItems}\n        loader={<></>}\n      >\n        <span className=\"sub_title\">Approved Milestones</span>\n        <div className=\"flex_row tradies_row\">\n          {!isLoad && !loading && jobList.length\n            ? jobList.map(\n                ({\n                  jobId,\n                  jobName,\n                  tradeName,\n                  fromDate,\n                  toDate,\n                  timeLeft,\n                  amount,\n                  locationName,\n                  milestoneNumber,\n                  totalMilestones,\n                  builderName,\n                  builderImage,\n                }) => (\n                  <div key={jobId} className=\"flex_col_sm_6\">\n                    <div\n                      className=\"tradie_card\"\n                      data-aos=\"fade-in\"\n                      data-aos-delay=\"250\"\n                      data-aos-duration=\"1000\"\n                    >\n                      <span\n                        className=\"more_detail circle\"\n                        onClick={() => {\n                          const mData = {\n                            timeStamp: moengage.getCurrentTimeStamp(),\n                            category: tradeName,\n                            \"Milestone number\": milestoneNumber,\n                          };\n                          moengage.moE_SendEvent(\n                            MoEConstants.VIEWED_APPROVED_MILESTONE,\n                            mData\n                          );\n                          mixPanel.mixP_SendEvent(\n                            MoEConstants.VIEWED_APPROVED_MILESTONE,\n                            mData\n                          );\n                          history.push(\n                            `/job-details-page?jobId=${jobId}&redirect_from=jobs`\n                          );\n                        }}\n                      ></span>\n                      <div className=\"user_wrap\">\n                        <figure className=\"u_img\">\n                          <img\n                            src={builderImage || dummy}\n                            alt=\"\"\n                            onError={(e: any) => {\n                              if (e?.target?.onerror) {\n                                e.target.onerror = null;\n                              }\n                              if (e?.target?.src) {\n                                e.target.src = dummy;\n                              }\n                            }}\n                          />\n                        </figure>\n                        <div className=\"details\">\n                          <span className=\"name\">{jobName}</span>\n                          <span className=\"prof\">{builderName}</span>\n                        </div>\n                      </div>\n                      <div className=\"job_info\">\n                        <ul>\n                          <li className=\"icon clock\">\n                            {renderTime(fromDate, toDate)}\n                          </li>\n                          <li className=\"icon dollar\">{amount}</li>\n                          <li className=\"icon location line-1\">\n                            {locationName}\n                          </li>\n                          <li className=\"icon calendar\">{timeLeft}</li>\n                        </ul>\n                      </div>\n                      <div\n                        className=\"job_progress_wrap\"\n                        id=\"scroll-progress-bar\"\n                      >\n                        <div className=\"progress_wrapper\">\n                          <span className=\"completed-digit\" id=\"digit-progress\">\n                            <b>Job Milestones {milestoneNumber}</b> of{\" \"}\n                            {totalMilestones}\n                          </span>\n                          <span className=\"approval_info\">\n                            <img src={approved} alt=\"icon\" />\n                            APPROVED\n                          </span>\n                          <span className=\"progress_bar\">\n                            <input\n                              className=\"done_progress\"\n                              id=\"progress-bar\"\n                              type=\"range\"\n                              min=\"0\"\n                              value={milestoneNumber}\n                              max={totalMilestones}\n                            />\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )\n              )\n            : !isLoad &&\n              !loading && (\n                <div className=\"no_record  m-t-vh\">\n                  <figure className=\"no_img\">\n                    <img src={noDataFound} alt=\"data not found\" />\n                  </figure>\n                  <span>{\"No Data Found\"}</span>\n                </div>\n                // <div className=\"no_record  m-t-vh\">\n                //   <figure className=\"no_img\">\n                //     <img src={newApprovals} alt=\"data not found\" />\n                //   </figure>\n                //   <span className=\"empty_screen_text\">\n                //     You don't have any milestones approved yet\n                //   </span>\n                //   <span className=\"empty_screen_subtext\">\n                //     As soon as the completation your builder will approve a\n                //     milestone you will be notified\n                //   </span>\n                // </div>\n              )}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default ApprovedMilestones;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/pastJobs.tsx",["1160"],"import { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { renderTime } from \"../../../utils/common\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport rateStar from \"../../../assets/images/ic-star-fill.png\";\nimport pastJobs from \"../../../assets/images/pastJobs.png\";\nimport noDataFound from \"../../../assets/images/no-search-data.png\";\n\ninterface Proptypes {\n  history: any;\n  loading: boolean;\n  pastJobList: any;\n  getPastJobList: (page: number) => void;\n  resetPastJobList: () => void;\n}\n\nconst PastJobs = (props: Proptypes) => {\n  const [jobList, setJobList] = useState<Array<any>>([]);\n  const [pageNo, setPageNo] = useState<number>(1);\n  const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    callJobList();\n\n    return () => props.resetPastJobList();\n  }, []);\n\n  const callJobList = async () => {\n    props.getPastJobList(pageNo);\n  };\n\n  useEffect(() => {\n    if (props.pastJobList?.length || Array.isArray(props.pastJobList)) {\n      const allJobs = [...jobList, ...props.pastJobList];\n      console.log(\n        jobList,\n        \"jobList\",\n        props.pastJobList,\n        \"props.pastJobList\",\n        allJobs,\n        \"allJobs\"\n      );\n      setJobList(allJobs);\n      setIsLoad(false);\n      setPageNo(pageNo + 1);\n      if (props.pastJobList.length < 10) {\n        setHasMoreItems(false);\n      }\n      props.resetPastJobList();\n    }\n  }, [props.pastJobList]);\n\n  return (\n    <div className=\"detail_col\">\n      <InfiniteScroll\n        dataLength={jobList.length}\n        next={callJobList}\n        style={{ overflowX: \"hidden\" }}\n        hasMore={hasMoreItems}\n        loader={<></>}\n      >\n        <span className=\"sub_title\">Past Jobs</span>\n        <div className=\"flex_row tradies_row\">\n          {!isLoad && !props.loading && jobList.length\n            ? jobList.map((item: any) => (\n                <div className=\"flex_col_sm_6\" key={item.jobId}>\n                  <div\n                    className=\"tradie_card\"\n                    data-aos=\"fade-in\"\n                    data-aos-delay=\"250\"\n                    data-aos-duration=\"1000\"\n                  >\n                    <NavLink\n                      to={`/job-details-page?jobId=${item.jobId}&redirect_from=jobs`}\n                      className=\"more_detail circle\"\n                    ></NavLink>\n                    <div className=\"user_wrap\">\n                      <figure className=\"u_img\">\n                        <img\n                          src={item.builderImage || dummy}\n                          alt=\"\"\n                          onError={(e: any) => {\n                            if (e?.target?.onerror) {\n                              e.target.onerror = null;\n                            }\n                            if (e?.target?.src) {\n                              e.target.src = dummy;\n                            }\n                          }}\n                        />\n                      </figure>\n                      <div className=\"details\">\n                        <span className=\"name\">{item.jobName}</span>\n                        <span className=\"prof\">{item.builderName}</span>\n                      </div>\n                    </div>\n                    <div className=\"job_info\">\n                      <ul>\n                        <li className=\"icon calendar\">\n                          {renderTime(item.fromDate, item.toDate)}\n                        </li>\n                        <li className=\"icon dollar\">{item.amount}</li>\n                        <li className=\"icon location line-1\">\n                          {item.locationName}\n                        </li>\n                        {item.durations ? (\n                          <li className=\"icon calendar\">{item.durations}</li>\n                        ) : (\n                          <li>\n                            <span className=\"job_status\">{item.status}</span>\n                          </li>\n                        )}\n                      </ul>\n                    </div>\n                    {/* <p className=\"commn_para line-3\">\n                {builderData.jobDescription}\n              </p> */}\n                    <div className=\"job_progress_wrap\" id=\"scroll-progress-bar\">\n                      <div className=\"progress_wrapper\">\n                        <span className=\"completed-digit\" id=\"digit-progress\">\n                          <b>Job Milestones {item.milestoneNumber}</b> of{\" \"}\n                          {item.totalMilestones}\n                        </span>\n                        <span className=\"progress_bar\">\n                          <input\n                            className=\"done_progress\"\n                            id=\"progress-bar\"\n                            type=\"range\"\n                            min=\"0\"\n                            value={\n                              (item.milestoneNumber / item.totalMilestones) *\n                              100\n                            }\n                          />\n                        </span>\n                      </div>\n                    </div>\n                    {!item?.isRated && [\"COMPLETED\"].includes(item?.status) && (\n                      <NavLink\n                        to={{\n                          pathname: \"/review-builder\",\n                          state: { item: item },\n                        }}\n                      >\n                        <button className=\"fill_grey_btn full_btn\">\n                          <img src={rateStar} alt=\"rating-star\" /> Rate this\n                          builder\n                        </button>\n                      </NavLink>\n                    )}\n                  </div>\n                </div>\n              ))\n            : !isLoad &&\n              !props.loading && (\n                <div className=\"no_record  m-t-vh\">\n                  <figure className=\"no_img\">\n                    <img src={noDataFound} alt=\"data not found\" />\n                  </figure>\n                  <span>{\"No Data Found\"}</span>\n                </div>\n                // <div className=\"no_record  m-t-vh\">\n                //   <figure>\n                //     <figure className=\"no_img\">\n                //       <img src={pastJobs} alt=\"data not found\" />\n                //     </figure>\n                //   </figure>\n\n                //   <span className=\"empty_screen_text\">\n                //     You didn't complete any job yet\n                //   </span>\n                //   <span className=\"empty_screen_subtext\">\n                //     As soon as the completation of your work will get approved\n                //     you will be notified\n                //   </span>\n                // </div>\n              )}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default PastJobs;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/reviewBuilder/reviewBuilder.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/markMilestone.tsx",["1161","1162","1163","1164","1165","1166"],"import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { setShowToast } from \"../../../redux/common/actions\";\nimport UploadMedia from \"../../postJob/components/uploadMedia\";\nimport { renderTime } from \"../../../utils/common\";\nimport LodgeDispute from \"./lodgeDispute/lodgeDispute\";\nimport CancelJobs from \"./cancelJobs/cancelJob\";\nimport DigitalIdVerification from \"../../tradieEditProfile/components/digitalIdVerification\";\nimport Modal from \"@material-ui/core/Modal\";\n\n//@ts-ignore\nimport FsLightbox from \"fslightbox-react\";\nimport storageService from \"../../../utils/storageService\";\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\n\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport editIconBlue from \"../../../assets/images/ic-edit-blue.png\";\nimport more from \"../../../assets/images/icon-direction-right.png\";\nimport check from \"../../../assets/images/checked-2.png\";\nimport pendingIcon from \"../../../assets/images/exclamation-icon.png\";\nimport noDataFound from \"../../../assets/images/no-search-data.png\";\nimport verifiedIcon from \"../../../assets/images/checked-2.png\";\nimport cancel from \"../../../assets/images/ic-cancel.png\";\nimport { moengage, mixPanel } from \"../../../services/analyticsTools\";\nimport { MoEConstants } from \"../../../utils/constants\";\n\nconst digitalInfoPoints: Array<string> = [\n  \"Passport\",\n  \"Driver Licence (Driver's license) - scans of front and back are required\",\n  \"Photo Card - scans of front and back are required\",\n  \"New South Wales Driving Instructor Licence - scans of front and back are required\",\n  \"Tasmanian Government Personal Information Card - scans of front and back are required\",\n  \"ImmiCard - scans of front and back are required\",\n  \"Proof of Age card - scans of front and back are required\",\n  \"Australian Defence Force (ADF) identification card (Military ID) - scans of front and back are required\",\n];\n\nconst declinedImages = {\n  desktop: {\n    breakpoint: { max: 3000, min: 1200 },\n    items: 2,\n    slidesToSlide: 1, // optional, default to 1.\n  },\n  tablet: {\n    breakpoint: { max: 1024, min: 768 },\n    items: 1,\n  },\n  mobile: {\n    breakpoint: { max: 650, min: 0 },\n    items: 1,\n  },\n};\n\ninterface BuilderDetails {\n  builderId: string;\n  builderImage: string;\n  builderName: string;\n  ratings: number;\n  reviews: number;\n}\n\ninterface JobDetails {\n  jobId: string;\n  jobName: string;\n  milestones: Array<any>;\n  postedBy: BuilderDetails;\n  categories: Array<any>;\n}\n\ninterface BankDetails {\n  userId: string;\n  account_name: string;\n  account_number: string;\n  bsb_number: string;\n  accountVerified: boolean;\n  stripeAccountId: string;\n}\ninterface Proptypes {\n  getMilestoneList: (jobId: string) => void;\n  milestoneList: JobDetails;\n  showMilestoneCompletePage: () => void;\n  showJobCompletePage: (jobCompletedCount: number) => void;\n  addBankDetails: (data: any) => void;\n  updateBankDetails: (data: any) => void;\n  getBankDetails: () => void;\n  removeBankDetails: () => void;\n  markMilestoneComplete: (\n    data: any,\n    callback: (jobCompletedCount: number) => void\n  ) => void;\n  bankDetails: BankDetails;\n}\n\nconst MarkMilestone = (props: Proptypes) => {\n  const {\n    getMilestoneList,\n    milestoneList,\n    showJobCompletePage,\n    showMilestoneCompletePage,\n    getBankDetails,\n    addBankDetails,\n    updateBankDetails,\n    removeBankDetails,\n    markMilestoneComplete,\n    bankDetails,\n  } = props;\n  const history: any = useHistory();\n  let params: any = new URLSearchParams(history.location?.search);\n  params = {\n    jobId: params.get(\"jobId\"),\n    tradeId: params.get(\"tradeId\"),\n    specializationId: params.get(\"specializationId\"),\n  };\n\n  const defaultData = {\n    urls: [],\n    description: \"\",\n    actualHours: \"\",\n    totalAmount: \"0\",\n    account_name: \"\",\n    account_number: \"\",\n    bsb_number: \"\",\n    accountVerified: false,\n    stripeAccountId: \"\",\n  };\n  const [data, setData] = useState<any>(defaultData);\n  const [errors, setErrors] = useState({\n    actualHours: \"\",\n    account_name: \"\",\n    account_number: \"\",\n    bsb_number: \"\",\n  });\n  const [step, setStep] = useState(1);\n  const [stepCompleted, setStepCompleted] = useState<Array<number>>([]);\n  const [isLastMilestone, setIsLastMilestone] = useState(false);\n  const [milestoneIndex, setMilestoneIndex] = useState(0);\n  const [readOnly, setReadOnly] = useState(false);\n  const [toggleItem, setToggleItem] = useState<{ [index: string]: boolean }>({\n    edit: false,\n    cancel: false,\n    lodge: false,\n  });\n\n  const [milestoneDeclineData, setMilestoneDeclineData] = useState<any>({\n    multipleDeclineListCount: 0,\n    prevMilestoneDeclineId: \"\",\n    currentMilestoneDeclineId: \"\",\n  });\n  const [mediaList, setMediaList] = useState([]);\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n  const [digitalIDInfo, setDigitalIDInfo] = useState<boolean>(false);\n\n  useEffect(() => {\n    const params = new URLSearchParams(history.location?.search);\n    const jobActionType: any = params.get(\"jobAction\");\n    if (jobActionType === \"dispute\") {\n      setToggleItem((prev: any) => ({ ...prev, lodge: true }));\n    } else if (jobActionType === \"cancel\") {\n      setToggleItem((prev: any) => ({ ...prev, cancel: true }));\n    }\n  }, []);\n\n  useEffect(() => {\n    getMilestoneList(params.jobId);\n    getBankDetails();\n  }, [params.jobId, getMilestoneList, getBankDetails]);\n\n  useEffect(() => {\n    setData((prevData: any) => ({\n      ...prevData,\n      ...bankDetails,\n    }));\n\n    setReadOnly(!!bankDetails?.userId);\n  }, [bankDetails]);\n\n  const validateActualHours = (value: any) => {\n    if (!value) {\n      return \"Time Spent is required.\";\n    }\n\n    let pattern = \"^([0-9]?[0-9]?[0-9]?[0-9]?[0-9]):[0-5][0-9]$\";\n    if (value.match(pattern) !== null) {\n      if (!(+value.split(\":\")[1] % 5 === 0)) {\n        return \"Time should be in mutiples of 5 like 10:05, 10:10\";\n      }\n      return \"\";\n    }\n    return \"Please enter a valid pattern like : 10:05\";\n    // '([0-9]?[0-9]{1}|2[0-9]{1}|3[0-9]{1}|4[0-9]{1}|5[0-9]{1}|6[0-9]{1}):[0-5]{1}[0-9]{1}';\n    // return 'Hours should be in hh:mm format.';\n  };\n\n  const errorLabel = {\n    account_number: \"Account Number\",\n    account_name: \"Account Name\",\n    bsb_number: \"BSB Number\",\n  } as { [key: string]: string };\n\n  const validateBankDetails = (name: string, value: string) => {\n    if (!value) {\n      return `${errorLabel[name]} is required`;\n    }\n\n    switch (name) {\n      case \"account_number\":\n        return value.length > 10\n          ? \"Maximum 10 digits are allowed\"\n          : value.length < 6\n          ? \"Minimum 6 digits are required\"\n          : \"\";\n      case \"bsb_number\":\n        return !/^\\d{3}-\\d{3}$/.test(value)\n          ? \"Please enter valid BSB Number like 123-444\"\n          : \"\";\n    }\n\n    return \"\";\n  };\n\n  const handleChange = ({ target: { name, value } }: any) => {\n    let newVal: \"\";\n    value = value.trimLeft();\n    if (name === \"actualHours\") {\n      let tim = value?.split(\":\")[0];\n      if (value.includes(\":\") && tim?.length < 3) {\n        if (tim?.length === 2) {\n          newVal = value;\n        } else {\n          newVal =\n            value.split(\":\")[0] < 10 && value.split(\":\")[0] > 0\n              ? `0${value}`\n              : value;\n        }\n      } else {\n        newVal = value;\n      }\n    }\n    setData((prevData: any) => ({\n      ...prevData,\n      [name]: name === \"actualHours\" ? newVal : value,\n    }));\n\n    if (step === 3 && stepCompleted.includes(3)) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [name]: validateActualHours(value),\n      }));\n    }\n\n    if (step === 5 && stepCompleted.includes(5)) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [name]: validateBankDetails(name, value),\n      }));\n    }\n  };\n\n  const { jobId, jobName, milestones, postedBy } = milestoneList || {};\n  const { builderId, builderImage, builderName, reviews, ratings } =\n    postedBy || {};\n\n  const hoursMinutes = data.actualHours\n    ?.split(\":\")\n    .map((key: string) => parseInt(key));\n  const totalAmount =\n    milestones?.[milestoneIndex].amount *\n    (milestones?.[milestoneIndex].pay_type === \"Fixed price\"\n      ? 1\n      : hoursMinutes?.[0] + hoursMinutes?.[1] / 60);\n\n  useEffect(() => {\n    const multipleList: any = milestones?.filter(\n      ({ status }: { status: number }) => status === 3\n    );\n    if (multipleList?.length > 1) {\n      const list: any = milestones?.find(\n        ({ status }: { status: number }) => status === 3\n      );\n      setMilestoneDeclineData((prevData: any) => ({\n        ...prevData,\n        multipleDeclineListCount: multipleList?.length,\n        prevMilestoneDeclineId: list?.milestoneId,\n        currentMilestoneDeclineId: list?.milestoneId,\n      }));\n      setMediaList(list?.declinedReason?.url);\n    } else if (multipleList?.length === 1) {\n      const list: any = milestones?.find(\n        ({ status }: { status: number }) => status === 3\n      );\n      setMilestoneDeclineData((prevData: any) => ({\n        ...prevData,\n        multipleDeclineListCount: multipleList?.length,\n        prevMilestoneDeclineId: list?.milestoneId,\n        currentMilestoneDeclineId: list?.milestoneId,\n      }));\n      setMediaList(list?.declinedReason?.url);\n    }\n  }, [milestones]);\n  console.log(milestoneDeclineData, \"milestoneDeclineData\");\n\n  const setItemToggle = (index: any) => {\n    setToggler((prev: boolean) => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderFilteredItems = () => {\n    let sources: any = [];\n    let types: any = [];\n\n    if (mediaList?.length) {\n      mediaList.forEach((item: any) => {\n        if (item?.mediaType === 2) {\n          sources.push(item.link);\n          types.push(\"video\");\n        } else if (item?.mediaType === 1) {\n          sources.push(item.link);\n          types.push(\"image\");\n        } else {\n          sources.push(item);\n          types.push(\"image\");\n        }\n      });\n    }\n\n    return { sources, types };\n  };\n\n  const backTab = (name: string) => {\n    const params = new URLSearchParams(history.location?.search);\n    const jobActionType: any = params.get(\"jobAction\");\n    if (jobActionType) {\n      history.goBack();\n      return;\n    }\n    setToggleItem((prev: any) => ({ ...prev, [name]: false }));\n  };\n\n  if (toggleItem?.lodge) {\n    return (\n      <LodgeDispute\n        item={{ jobId: jobId, jobName: jobName }}\n        backTab={backTab}\n        history={history}\n      />\n    );\n  }\n\n  if (toggleItem?.cancel) {\n    return (\n      <CancelJobs\n        item={{ jobId: jobId, jobName: jobName }}\n        backTab={backTab}\n        history={history}\n      />\n    );\n  }\n\n  const markMilestoneVerif = (val: any) => {\n    if (val === \"backStep\") setStep(5);\n    if (val === \"verifSuccess\") {\n      setData((prevData: any) => ({\n        ...prevData,\n        accountVerified: true,\n      }));\n      setStep(5);\n    }\n  };\n\n  const { sources, types } = renderFilteredItems();\n  let page = null;\n  let isMilestoneList: any = props?.milestoneList || false;\n  let isShowError = false;\n  if (\n    isMilestoneList &&\n    isMilestoneList[0] &&\n    isMilestoneList[0]?.status === 404\n  ) {\n    isShowError = true;\n  }\n  const renderSteps = () => {\n    switch (step) {\n      case 1:\n        return (page = !isShowError ? (\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_6\">\n              <div className=\"relate\">\n                <button\n                  className=\"back\"\n                  onClick={() => history.push(\"/active-jobs\")}\n                ></button>\n\n                <span className=\"xs_sub_title\">{jobName}</span>\n                <span className=\"dot_menu\">\n                  <img src={editIconBlue} alt=\"edit\" />\n                  <div className=\"edit_menu\">\n                    <ul>\n                      <li\n                        onClick={() => {\n                          setToggleItem((prev: any) => ({\n                            ...prev,\n                            lodge: true,\n                          }));\n                        }}\n                        className=\"icon lodge\"\n                      >\n                        Lodge dispute\n                      </li>\n                      <li\n                        onClick={() => {\n                          setToggleItem((prev: any) => ({\n                            ...prev,\n                            cancel: true,\n                          }));\n                        }}\n                        className=\"icon delete\"\n                      >\n                        Cancel job\n                      </li>\n                    </ul>\n                  </div>\n                </span>\n              </div>\n\n              <p className=\"commn_para\">\n                Your job point of contact has indicated they want to be notified\n                when you reach the following milestones. Tap the milestone and\n                Submit when a milestone is completed\n              </p>\n              {milestoneDeclineData.multipleDeclineListCount > 1 && (\n                <button className=\"fill_grey_btn full_btn pending_info\">\n                  <span>\n                    <img src={pendingIcon} alt=\"icon\" />\n                    {`${milestoneDeclineData.multipleDeclineListCount} Milestones were declined`}\n                  </span>\n                </button>\n              )}\n\n              <ul className=\"milestones_check\">\n                {milestones\n                  ?.sort(({ order: prevOrder }, { order }) => prevOrder - order)\n                  ?.map(\n                    (\n                      {\n                        milestoneId,\n                        milestoneName,\n                        isPhotoevidence,\n                        status,\n                        fromDate,\n                        toDate,\n                        declinedReason,\n                        declinedCount,\n                      },\n                      index\n                    ) => {\n                      // As discussed now we take this status 4 as status 0 bacause after the decline on the change-request the status becomes 4.\n                      const prevMilestoneStatus = milestones[index - 1]?.status;\n                      const isActive =\n                        (status === 0 || status === 4 || status === 5) && // here changes done for status 4\n                        // completed or approved\n                        ([1, 2].includes(prevMilestoneStatus) ||\n                          prevMilestoneStatus === undefined);\n                      const isDeclined = status === 3;\n\n                      return (\n                        <li\n                          key={milestoneId}\n                          className={\n                            [1, 2].includes(status)\n                              ? `check`\n                              : isActive\n                              ? \"active\"\n                              : status === 3\n                              ? \"declined\"\n                              : \"disabled\"\n                          }\n                        >\n                          <div\n                            className=\"circle_stepper\"\n                            onClick={() => {\n                              setMediaList(declinedReason?.url);\n                              setMilestoneDeclineData((prevData: any) => ({\n                                ...prevData,\n                                currentMilestoneDeclineId: milestoneId,\n                              }));\n                            }}\n                          >\n                            <span></span>\n                          </div>\n                          <div className=\"info\">\n                            <label>{`${milestoneName} ${\n                              status === 3 ? \"declined\" : \"\"\n                            }`}</label>\n                            {isPhotoevidence && (\n                              <span>Photo evidence required</span>\n                            )}\n                            <span>{renderTime(fromDate, toDate)}</span>\n                          </div>\n\n                          {isDeclined &&\n                            milestoneDeclineData.currentMilestoneDeclineId ===\n                              milestoneId && (\n                              <>\n                                {Object.keys(declinedReason)?.length > 0 && (\n                                  <div className=\"decline_reason\">\n                                    <FsLightbox\n                                      toggler={toggler}\n                                      slide={selectedSlide}\n                                      sources={sources}\n                                      types={types}\n                                    />\n                                    <label className=\"form_label\">\n                                      Decline reason:\n                                    </label>\n                                    <div className=\"text_field\">\n                                      <p className=\"commn_para\">\n                                        {declinedReason?.reason}\n                                      </p>\n                                    </div>\n\n                                    {declinedReason?.url?.length > 0 && (\n                                      <Carousel\n                                        className=\"decline_media\"\n                                        responsive={declinedImages}\n                                        showDots={false}\n                                        arrows={true}\n                                      >\n                                        {declinedReason?.url?.map(\n                                          (image: string, index: number) => {\n                                            return (\n                                              <div className=\"upload_img_video\">\n                                                <figure className=\"img_video\">\n                                                  <img\n                                                    src={image}\n                                                    alt=\"image\"\n                                                    onClick={() =>\n                                                      setItemToggle(index)\n                                                    }\n                                                  />\n                                                </figure>\n                                              </div>\n                                            );\n                                          }\n                                        )}\n                                      </Carousel>\n                                    )}\n                                  </div>\n                                )}\n                                <button\n                                  onClick={() => {\n                                    if (declinedCount >= 5) {\n                                      setShowToast(\n                                        true,\n                                        \"You have exceeded maximum number of chances to submit the milestone\"\n                                      );\n                                      return;\n                                    }\n                                    setMilestoneIndex(index);\n\n                                    if (index === milestones?.length - 1) {\n                                      setIsLastMilestone(true);\n                                    }\n\n                                    if (isPhotoevidence) {\n                                      setStep(2);\n                                    } else {\n                                      setStep(3);\n                                    }\n                                  }}\n                                  className={`fill_btn full_btn btn-effect ${\n                                    milestoneDeclineData.prevMilestoneDeclineId !==\n                                    milestoneId\n                                      ? \"disable_btn\"\n                                      : \"\"\n                                  }`}\n                                >\n                                  Remark as Complete\n                                </button>\n                              </>\n                            )}\n                          {isActive && (\n                            <button\n                              className=\"fill_btn full_btn btn-effect\"\n                              onClick={() => {\n                                setMilestoneIndex(index);\n\n                                if (index === milestones?.length - 1) {\n                                  setIsLastMilestone(true);\n                                }\n\n                                if (isPhotoevidence) {\n                                  setStep(2);\n                                } else {\n                                  setStep(3);\n                                }\n                              }}\n                            >\n                              Done\n                            </button>\n                          )}\n                        </li>\n                      );\n                    }\n                  )}\n              </ul>\n            </div>\n            {/* )} */}\n            <div className=\"flex_col_sm_6 col_ruler\">\n              <span className=\"sub_title\">Posted by</span>\n              <div className=\"tradie_card posted_by \">\n                <a\n                  href=\"javascript:void(0)\"\n                  className=\"chat circle\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    history.push({\n                      pathname: `/chat`,\n                      state: {\n                        tradieId: storageService.getItem(\"userInfo\")?._id,\n                        builderId: builderId,\n                        jobId: jobId,\n                        jobName: jobName,\n                      },\n                    });\n                  }}\n                />\n                <div\n                  className=\"user_wrap\"\n                  onClick={() =>\n                    history.push(`/builder-info?builderId=${builderId}`)\n                  }\n                >\n                  <figure className=\"u_img\">\n                    <img\n                      src={builderImage || dummy}\n                      alt=\"traide-img\"\n                      onError={(e: any) => {\n                        if (e?.target?.onerror) {\n                          e.target.onerror = null;\n                        }\n                        if (e?.target?.src) {\n                          e.target.src = dummy;\n                        }\n                      }}\n                    />\n                  </figure>\n                  <div className=\"details\">\n                    <span className=\"name\">{builderName}</span>\n                    <span className=\"rating\">\n                      {ratings} | {reviews} reviews\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"relate\">\n                <span className=\"sub_title\">Job details</span>\n                <span\n                  className=\"edit_icon\"\n                  title=\"More\"\n                  onClick={() =>\n                    history.push(\n                      `/job-details-page?jobId=${params.jobId}&redirect_from=jobs`\n                    )\n                  }\n                >\n                  <img src={more} alt=\"more\" />\n                </span>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"custom_container\">\n            <div className=\"vid_img_wrapper pt-20\">\n              <div className=\"flex_row\">\n                <div className=\"flex_col_sm_8 relative\">\n                  <button\n                    className=\"back\"\n                    onClick={() => {\n                      history.goBack();\n                    }}\n                  ></button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"no_record  m-t-vh\">\n              <figure className=\"no_img\">\n                <img src={noDataFound} alt=\"data not found\" />\n              </figure>\n              <span>{\"This builder is no longer available.\"}</span>\n              <span>{\"Please contact admin.\"}</span>\n            </div>\n          </div>\n        ));\n      case 2:\n        return (page = (\n          <UploadMedia\n            jobName={jobName}\n            title=\"Photo required\"\n            para=\"Your job point of contact has indicated they want to be notified when you reach the following milestones. Tap the milestone and Submit when a milestone is completed\"\n            stepCompleted={stepCompleted.includes(2)}\n            data={data}\n            handleStepBack={() => setStep(1)}\n            handleStepForward={() => {}}\n            handleStepComplete={(stepData: any) => {\n              setData((prevData: any) => ({\n                ...prevData,\n                ...stepData,\n              }));\n\n              setStepCompleted((prevValue) => prevValue.concat([2]));\n              setStep(3);\n            }}\n            hasDescription\n          />\n        ));\n      case 3:\n        return (page = (\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_8\">\n              <div className=\"relate\">\n                <button\n                  className=\"back\"\n                  onClick={() => {\n                    if (milestones[milestoneIndex]?.isPhotoevidence) {\n                      setStep(2);\n                    } else {\n                      setStep(1);\n                    }\n                  }}\n                ></button>\n                <span className=\"xs_sub_title\">{jobName}</span>\n              </div>\n              <span className=\"sub_title\">Worked hours in this milestone</span>\n\n              <p className=\"commn_para\">\n                The amount paid will be recalculated based on approval of the\n                actual hours by the Builder\n              </p>\n\n              <div className=\"form_field\">\n                <label className=\"form_label\">Time Spent</label>\n                <div className=\"text_field time_spent\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"hh:mm\"\n                    name=\"actualHours\"\n                    value={data.actualHours}\n                    onChange={handleChange}\n                    maxLength={5}\n                  />\n                  <span className=\"detect_icon\">hours</span>\n                </div>\n                <span className=\"error_msg\">{errors.actualHours}</span>\n              </div>\n              <button\n                className=\"fill_btn full_btn btn-effect\"\n                onClick={() => {\n                  setStepCompleted((prevValue) => prevValue.concat([3]));\n\n                  const error = validateActualHours(data.actualHours);\n                  if (error) {\n                    setErrors((prevErrors) => ({\n                      ...prevErrors,\n                      actualHours: error,\n                    }));\n                  } else {\n                    setStep(4);\n                  }\n                }}\n              >\n                Submit\n              </button>\n            </div>\n          </div>\n        ));\n      case 4:\n        return (page = (\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_7\">\n              <div className=\"relate\">\n                <button className=\"back\" onClick={() => setStep(3)}></button>\n                <span className=\"xs_sub_title\">{jobName}</span>\n              </div>\n              <span className=\"sub_title\">\n                {isLastMilestone ? \"Job Complete\" : \"Add payment details\"}\n              </span>\n              <p className=\"commn_para\">\n                {isLastMilestone\n                  ? \"Please enter your prefered payment method below so your point of contact can organise payment\"\n                  : \"You need to add your bank account details for payment from the builder after approving this milestone\"}\n              </p>\n              {isLastMilestone && (\n                <div className=\"f_spacebw total_payment\">\n                  <span>Total payment</span>\n                  <span>${totalAmount?.toFixed(2)}</span>\n                </div>\n              )}\n              <button className=\"fill_grey_btn bank_btn\">\n                {data.userId && <img src={check} alt=\"check\" />} Bank account\n              </button>\n            </div>\n            <div className=\"flex_col_sm_9\">\n              <div className=\"form_field\">\n                <span className=\"payment_note\">\n                  Tickt does not store your payment information.{\" \"}\n                </span>\n                <p className=\"commn_para\">\n                  {\" \"}\n                  Tickt does not handle payment for jobs, we only facilitate\n                  communication between tradespeople and builders. If you have\n                  problems receiving your payment, please contact your builder.\n                </p>\n              </div>\n              <button\n                className=\"fill_btn full_btn btn-effect\"\n                onClick={() => setStep(5)}\n              >\n                {data.userId ? \"Continue\" : \"Add Details\"}\n              </button>\n            </div>\n          </div>\n        ));\n      case 5:\n        return (page = (\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_8\">\n              <div className=\"relate\">\n                <button className=\"back\" onClick={() => setStep(4)}></button>\n                <span className=\"xs_sub_title\">{jobName}</span>\n                {data?.userId && readOnly && (\n                  <>\n                    <div className=\"edit_delete\">\n                      <span\n                        className=\"edit\"\n                        title=\"Edit\"\n                        onClick={() => setReadOnly(!readOnly)}\n                      ></span>\n                      <span\n                        className=\"delete\"\n                        title=\"Remove\"\n                        onClick={() => removeBankDetails()}\n                      ></span>\n                    </div>\n                  </>\n                )}\n              </div>\n              <span className=\"sub_title\">Payment Details</span>\n              <p className=\"commn_para\">Enter your bank account details</p>\n\n              <div className=\"form_field\">\n                <label className=\"form_label\">Account Name</label>\n                <div className=\"text_field\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter Account Name\"\n                    name=\"account_name\"\n                    value={data.account_name}\n                    onChange={handleChange}\n                    maxLength={50}\n                    readOnly={readOnly}\n                  />\n                </div>\n                <span className=\"error_msg\">{errors.account_name}</span>\n              </div>\n              <div className=\"form_field\">\n                <label className=\"form_label\">BSB Number</label>\n                <div className=\"text_field\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter BSB Number\"\n                    name=\"bsb_number\"\n                    value={data.bsb_number}\n                    onChange={handleChange}\n                    maxLength={7}\n                    readOnly={readOnly}\n                  />\n                </div>\n                <span className=\"error_msg\">{errors.bsb_number}</span>\n              </div>\n              <div className=\"form_field\">\n                <label className=\"form_label\">Account Number</label>\n                <div className=\"text_field\">\n                  <input\n                    type=\"number\"\n                    placeholder=\"Enter Account Number\"\n                    name=\"account_number\"\n                    value={data.account_number}\n                    onChange={handleChange}\n                    maxLength={10}\n                    max={9999999999}\n                    readOnly={readOnly}\n                  />\n                </div>\n                <span className=\"error_msg\">{errors.account_number}</span>\n              </div>\n              {data.account_name &&\n                data.account_number &&\n                data.bsb_number &&\n                data.stripeAccountId && (\n                  <>\n                    <div className=\"form_field\">\n                      <button\n                        className=\"fill_grey_btn full_btn btn-effect id_verified\"\n                        onClick={() => {\n                          if (data?.accountVerified) return;\n                          setStep(6);\n                        }}\n                      >\n                        {data?.accountVerified && (\n                          <img src={check} alt=\"verified\" />\n                        )}\n                        {`${\n                          data?.accountVerified\n                            ? \"ID Verified\"\n                            : \"Add ID Verification\"\n                        }`}\n                      </button>\n                    </div>\n                    <span\n                      className=\"show_label id_info\"\n                      onClick={() => setDigitalIDInfo(true)}\n                    >\n                      ID verification is required as part of Stripe ID\n                      verification process.\n                    </span>\n                  </>\n                )}\n\n              <Modal\n                className=\"custom_modal\"\n                open={digitalIDInfo}\n                onClose={() => setDigitalIDInfo(false)}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n              >\n                <div\n                  className=\"custom_wh profile_modal\"\n                  data-aos=\"zoom-in\"\n                  data-aos-delay=\"30\"\n                  data-aos-duration=\"1000\"\n                >\n                  <div className=\"heading\">\n                    <span className=\"sub_title\">ID verification</span>\n                    <button\n                      className=\"close_btn\"\n                      onClick={() => setDigitalIDInfo(false)}\n                    >\n                      <img src={cancel} alt=\"cancel\" />\n                    </button>\n                  </div>\n                  <div className=\"inner_wrap\">\n                    <span className=\"show_label\">\n                      ID verification is required as part of Stripe ID\n                      verification process.\n                    </span>\n                    <span className=\"show_label\">\n                      Below is a spansting of documents that can accept as proof\n                      of identity, address, and entity.\n                    </span>\n                    <ul className=\"verificationid_list\">\n                      {digitalInfoPoints.map((info, index) => (\n                        <li className=\"show_label\" key={index}>\n                          {info}\n                        </li>\n                      ))}\n                    </ul>\n                    <div className=\"bottom_btn custom_btn center\">\n                      <button\n                        className={`fill_btn full_btn btn-effect`}\n                        onClick={() => setDigitalIDInfo(false)}\n                      >\n                        Ok\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </Modal>\n\n              <button\n                className={`fill_btn full_btn btn-effect ${\n                  readOnly ? (data?.accountVerified ? \"\" : \"disable_btn\") : \"\"\n                }`}\n                onClick={\n                  readOnly\n                    ? () => {\n                        const milestoneData = {\n                          evidence: milestones[milestoneIndex].isPhotoevidence\n                            ? data.urls\n                            : undefined,\n                          jobId: params.jobId,\n                          milestoneId: milestones[milestoneIndex].milestoneId,\n                          description: milestones[milestoneIndex]\n                            .isPhotoevidence\n                            ? data.description\n                            : undefined,\n                          actualHours: data.actualHours,\n                          totalAmount: `${totalAmount?.toFixed(2)}`,\n                        };\n\n                        const callback = (jobCompletedCount: number) => {\n                          const mData = {\n                            timeStamp: moengage.getCurrentTimeStamp(),\n                            category:\n                              milestoneList?.categories?.[0]?.trade_name,\n                            \"Milestone number\": milestoneIndex + 1,\n                          };\n                          moengage.moE_SendEvent(\n                            MoEConstants.MILESTONE_COMPLETED,\n                            mData\n                          );\n                          mixPanel.mixP_SendEvent(\n                            MoEConstants.MILESTONE_COMPLETED,\n                            mData\n                          );\n                          if (isLastMilestone) {\n                            showJobCompletePage(jobCompletedCount);\n                          } else {\n                            setStepCompleted([]);\n                            setData(defaultData);\n                            showMilestoneCompletePage();\n                          }\n                        };\n\n                        markMilestoneComplete(milestoneData, callback);\n                      }\n                    : () => {\n                        setStepCompleted((prevValue) => prevValue.concat([5]));\n\n                        const hasErrors = [\n                          \"account_name\",\n                          \"account_number\",\n                          \"bsb_number\",\n                        ].reduce((prevValue, name) => {\n                          const error = validateBankDetails(name, data[name]);\n                          setErrors((prevErrors) => ({\n                            ...prevErrors,\n                            [name]: error,\n                          }));\n\n                          return prevValue || error;\n                        }, \"\");\n\n                        const updatedBankDetails = {\n                          account_name: data.account_name,\n                          account_number: data.account_number,\n                          bsb_number: data.bsb_number,\n                        };\n                        if (!hasErrors) {\n                          if (bankDetails.userId) {\n                            updateBankDetails({\n                              userId: data.userId,\n                              ...updatedBankDetails,\n                            });\n                          } else {\n                            addBankDetails(updatedBankDetails);\n                            const mData = {\n                              timeStamp: moengage.getCurrentTimeStamp(),\n                            };\n                            moengage.moE_SendEvent(\n                              MoEConstants.ADDED_PAYMENT_DETAILS,\n                              mData\n                            );\n                            mixPanel.mixP_SendEvent(\n                              MoEConstants.ADDED_PAYMENT_DETAILS,\n                              mData\n                            );\n                          }\n                        }\n                      }\n                }\n              >\n                {readOnly ? \"Continue\" : \"Save changes\"}\n              </button>\n            </div>\n          </div>\n        ));\n      case 6:\n        return (page = (\n          <DigitalIdVerification\n            redirect_from={\"mark-milestone\"}\n            markMilestoneVerif={markMilestoneVerif}\n            stripeAccountId={data.stripeAccountId}\n          />\n        ));\n\n      default:\n        return null;\n    }\n  };\n\n  return <div className=\"detail_col\">{renderSteps()}</div>;\n};\n\nexport default MarkMilestone;\n","/home/appinventiv/Documents/Project/tickt/web/src/common/tradieBannerSearch/tradieBannerSearch.tsx",["1167","1168"],"import React, { useState, useEffect } from \"react\";\nimport Constants,{ MoEConstants } from \"../../utils/constants\";\nimport { useDetectClickOutside } from \"react-detect-click-outside\";\nimport { deleteRecentSearch } from \"../../redux/homeSearch/actions\";\nimport { setShowToast } from \"../../redux/common/actions\";\n// @ts-ignore\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\n// @ts-ignore\nimport { format, differenceInCalendarYears } from \"date-fns\";\n// @ts-ignore\nimport moment from \"moment\";\n// @ts-ignore\nimport { DateRange } from \"react-date-range\";\nimport \"react-date-range/dist/styles.css\";\nimport \"react-date-range/dist/theme/default.css\";\nimport Geocode from \"react-geocode\";\n\nimport Searchicon from \"../../assets/images/main-search.png\";\nimport search from \"../../assets/images/ic-search.png\";\nimport Location from \"../../assets/images/ic-location.png\";\nimport cross from \"../../assets/images/close-black.png\";\nimport icgps from \"../../assets/images/ic-gps.png\";\nimport residential from \"../../assets/images/ic-residential.png\";\nimport close from \"../../assets/images/icon-close-1.png\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\n\nGeocode.setApiKey(Constants.SocialAuth.GOOGLE_GEOCODE_KEY);\nGeocode.setLanguage(\"en\");\nGeocode.setRegion(\"au\");\ninterface PropsType {\n  history: any;\n  location?: any;\n  paramsData?: any;\n  currentCoordinates?: any;\n  searchJobListData: Array<any>;\n  recentSearchJobData: Array<any>;\n  recentLocationData: Array<any>;\n  homeSearchJobData: Array<any>;\n  tradeListData: Array<any>;\n  setTradieHomeData?: (data: any) => void;\n  getSearchJobList: (data: any) => void;\n  postHomeSearchData: (data: any) => void;\n  getRecentSearchList: () => void;\n  getRecentLocationList: () => void;\n  refreshParams?: (data: any) => void;\n  handleChangeToggle?: (data: boolean) => void;\n}\n\nconst TradieBannerSearch = (props: PropsType) => {\n  const { paramsData } = props;\n  const [stateData, setStateData] = useState<any>({\n    page: 1,\n    searchedJob: \"\",\n    isFiltered: false,\n    isSearchedJobSelected: false,\n    tradeId: [],\n    specializationId: [],\n    searchedJobId: null,\n    location: {\n      coordinates: [\n        144.9631, //long\n        -37.8136, //lat\n      ],\n    },\n    bannerLocation: \"\",\n    locationDenied: false,\n    selectedMapLocation: \"\",\n    isMapLocationSelected: false,\n    from_date: \"\",\n    startDate: \"\",\n    to_date: \"\",\n    endDate: \"\",\n  });\n  const [inputFocus1, setInputFocus1] = useState<boolean>(false);\n  const [inputFocus2, setInputFocus2] = useState<boolean>(false);\n  const [inputFocus3, setInputFocus3] = useState<boolean>(false);\n  const [calenderRange1, setCalenderRange1] = useState<any>({\n    startDate: new Date(),\n    endDate: new Date(),\n    key: \"selection1\",\n  });\n\n\n  const handleOnOutsideSearch = () => setInputFocus1(false);\n  const handleOnOutsideLocation = () => setInputFocus2(false);\n  const handleOnOutsideCalender = () => setInputFocus3(false);\n\n  const searchRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideSearch,\n  });\n  const locationRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideLocation,\n  });\n  const calenderRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideCalender,\n  });\n\n  const [suggestionSelected, setSuggestion] = useState<any>(\"\");\n\n  console.log(inputFocus1, inputFocus2, inputFocus3, \"inputfocus---------\");\n\n  useEffect(() => {\n    props.getRecentSearchList();\n    props.getRecentLocationList();\n  }, []);\n\n  useEffect(() => {\n    if (paramsData) {\n      var data = {\n        page: paramsData?.page ? paramsData?.page : 1,\n        searchedJob:\n          paramsData?.isFilterOn === \"isFilterOn\"\n            ? \"\"\n            : paramsData?.jobResults === \"jobTypeList\"\n            ? \"\"\n            : paramsData?.isAllFilterSpecs\n            ? paramsData.searchJob\n            : paramsData?.specializationId?.length >= 2\n            ? `${paramsData?.searchJob} +${\n                paramsData?.specializationId?.length - 1\n              }`\n            : paramsData?.tradeId?.length > 0\n            ? paramsData.searchJob\n            : \"\",\n        isFiltered: paramsData?.isFiltered ? paramsData?.isFiltered : false,\n        isSearchedJobSelected:\n          paramsData?.specializationId?.length > 1 ? false : true,\n        tradeId: paramsData?.tradeId ? paramsData?.tradeId : [],\n        specializationId: paramsData?.specializationId\n          ? paramsData?.specializationId\n          : [],\n        location: {\n          coordinates: [\n            paramsData?.long ? paramsData?.long : paramsData?.defaultLong,\n            paramsData?.lat ? paramsData?.lat : paramsData?.defaultLat,\n          ],\n        },\n        selectedMapLocation: paramsData?.addres ? paramsData?.addres : \"\",\n        isMapLocationSelected: paramsData?.addres ? true : false,\n        from_date: paramsData?.from_date ? paramsData?.from_date : \"\",\n        startDate: \"\",\n        to_date: paramsData?.to_date ? paramsData?.to_date : \"\",\n        endDate: \"\",\n      };\n      if (paramsData?.from_date || paramsData?.to_date) {\n        const differenceInYears: number = differenceInCalendarYears(\n          new Date(),\n          paramsData?.to_date\n        );\n        if (differenceInYears !== 0) {\n          data.startDate = moment(paramsData?.from_date).format(\"DD MMM YYYY\");\n          data.endDate = moment(paramsData?.to_date).format(\"DD MMM YYYY\");\n        } else {\n          data.startDate = moment(paramsData?.from_date).format(\"DD MMM\");\n          data.endDate = moment(paramsData?.to_date).format(\"DD MMM\");\n        }\n      }\n      setStateData((prevData: any) => ({ ...prevData, ...data }));\n    }\n  }, [paramsData]);\n\n  useEffect(() => {\n    if (calenderRange1 && inputFocus3) {\n      const differenceInYears: number = differenceInCalendarYears(\n        new Date(),\n        calenderRange1.endDate\n      );\n      var startDate: string;\n      var endDate: string;\n      if (differenceInYears !== 0) {\n        startDate = format(new Date(calenderRange1.startDate), \"dd MMM yyyy\");\n        endDate = format(new Date(calenderRange1.endDate), \"dd MMM yyyy\");\n      } else {\n        startDate = format(new Date(calenderRange1.startDate), \"dd MMM\");\n        endDate = format(new Date(calenderRange1.endDate), \"dd MMM\");\n      }\n      const from_date = format(\n        new Date(calenderRange1.startDate),\n        \"yyyy-MM-dd\"\n      );\n      const to_date = format(new Date(calenderRange1.endDate), \"yyyy-MM-dd\");\n      setStateData((prevData: any) => ({\n        ...prevData,\n        startDate: startDate,\n        endDate: endDate,\n      }));\n      setStateData((prevData: any) => ({\n        ...prevData,\n        from_date: from_date,\n        to_date: to_date,\n      }));\n    }\n  }, [calenderRange1]);\n\n  useEffect(() => {\n    if (props.currentCoordinates) {\n      setStateData((prevData: any) => ({\n        ...prevData,\n        location: props.currentCoordinates,\n      }));\n    }\n  }, [props.currentCoordinates]);\n\n  const handleCalenderRange = (item: any) => {\n    setCalenderRange1(item.selection1);\n  };\n\n  const handleJobChange = (e: any) => {\n    e.target.value.length >= 3 && props.getSearchJobList(e.target.value);\n    setStateData((prevData: any) => ({\n      ...prevData,\n      searchedJob: e.target.value,\n      isSearchedJobSelected: false,\n    }));\n  };\n\n  const cleanInputData = (item: string) => {\n    if (item === \"calender\") {\n      setStateData((prevData: any) => ({\n        ...prevData,\n        from_date: \"\",\n        to_date: \"\",\n        startDate: \"\",\n        endDate: \"\",\n      }));\n      return;\n    }\n    if (item == \"searchedJob\") {\n      setStateData((prevData: any) => ({\n        ...prevData,\n        [item]: \"\",\n        isSearchedJobSelected: false,\n      }));\n    }\n    setStateData((prevData: any) => ({ ...prevData, [item]: \"\" }));\n  };\n\n  const searchedJobClicked = (item: any, isRecentSearchesClicked?: string) => {\n    setStateData((prevData: any) => ({\n      ...prevData,\n      searchedJob: item.name,\n      tradeId: [item._id],\n      specializationId: [item.specializationsId],\n      isSearchedJobSelected: true,\n      isFirstJobSelectedCount: 1,\n    }));\n    setInputFocus1(false);\n    if (isRecentSearchesClicked === \"isRecentSearchesClicked\") {\n      const newSearchData = {\n        tradeId: [item._id],\n        specializationId: [item.specializationsId],\n        searchedJob: item.name,\n        isRecentSearchesClicked: \"isRecentSearchesClicked\",\n      };\n      bannerSearchClicked(newSearchData);\n    }\n  };\n\n  const cleanRecentSearch = async (event: any, recentSearchId: string) => {\n    event.stopPropagation();\n    const data = {\n      id: recentSearchId,\n      status: 0,\n    };\n    const res = await deleteRecentSearch(data);\n    if (res.success) {\n      props.getRecentSearchList();\n    }\n  };\n\n  const recentJobSearches = () => {\n    return (\n      props.recentSearchJobData?.length > 0 && (\n        <div className=\"custom_autosuggestion\" id=\"recent-job-search-div\">\n          <span className=\"sub_title\">Recent searches</span>\n          <div className=\"flex_row recent_search\">\n            {props.recentSearchJobData?.slice(0, 4)?.map((item: any) => {\n              return (\n                <div className=\"flex_col_sm_3\" key={item.recentSearchId}>\n                  <div\n                    className=\"card ico_txt_wrap\"\n                    onClick={() =>\n                      searchedJobClicked(item, \"isRecentSearchesClicked\")\n                    }\n                  >\n                    <figure className=\"ico\">\n                      <img src={item?.image || residential} alt=\"icon\" />\n                    </figure>\n                    <div className=\"f_column\">\n                      <span>{item.name}</span>\n                      <span className=\"name\">{item.trade_name}</span>\n                    </div>\n                    <span\n                      className=\"remove_card\"\n                      onClick={(event) =>\n                        cleanRecentSearch(event, item.recentSearchId)\n                      }\n                    >\n                      <img src={close} alt=\"remove\" />\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )\n    );\n  };\n\n  const renderJobResult = () => {\n    return (\n      props.searchJobListData?.length > 0 &&\n      stateData.searchedJob.length >= 3 && (\n        <div\n          className=\"custom_autosuggestion\"\n          id=\"fetched-custom-job-category-div\"\n        >\n          <div className=\"recent_search\">\n            <ul className=\"drop_data\">\n              {props.searchJobListData?.map((item: any) => {\n                return (\n                  <li key={item._id} onClick={() => searchedJobClicked(item)}>\n                    <figure className=\"category\">\n                      <img\n                        src={item.image ? item.image : residential}\n                        alt=\"icon\"\n                      />\n                    </figure>\n                    <div className=\"details\">\n                      <span className=\"name\">{item.name}</span>\n                      <span className=\"prof\">{item.trade_name}</span>\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      )\n    );\n  };\n\n  const locationSelectedHandler = (\n    address: string,\n    placeId?: any,\n    suggestion?: any\n  ) => {\n    setSuggestion(suggestion?.formattedSuggestion);\n    geocodeByAddress(address)\n      .then((results: any) => getLatLng(results[0]))\n      .then(({ lat, lng }: any) => {\n        const locationNew: any = {\n          location: {\n            coordinates: [lng, lat],\n          },\n        };\n        setStateData((prevData: any) => ({\n          ...prevData,\n          ...locationNew,\n          selectedMapLocation: suggestion?.formattedSuggestion?.mainText,\n          isMapLocationSelected: true,\n        }));\n        setInputFocus2(false);\n      });\n  };\n\n  const filterFromAddress = (results: any) => {\n    let city,\n      state,\n      country = null;\n    for (let i = 0; i < results[0].address_components.length; i++) {\n      for (let j = 0; j < results[0].address_components[i].types.length; j++) {\n        switch (results[0].address_components[i].types[j]) {\n          case \"locality\":\n            city = results[0].address_components[i].long_name;\n            break;\n          case \"administrative_area_level_1\":\n            state = results[0].address_components[i].long_name;\n            break;\n          case \"country\":\n            country = results[0].address_components[i].long_name;\n            break;\n        }\n      }\n    }\n    return { city, state, country: country.toLowerCase() };\n  };\n\n  const getCurrentLocation = (e: any) => {\n    e.preventDefault();\n    const showPosition = (position: any) => {\n      const lat = position.coords.latitude;\n      const long = position.coords.longitude;\n      var latlng = new google.maps.LatLng(lat, long);\n      var geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ location: latlng }, function (results, status) {\n        if (status !== google.maps.GeocoderStatus.OK) {\n          alert(status);\n        }\n        if (status === google.maps.GeocoderStatus.OK) {\n          const { country } = filterFromAddress(results);\n          if ([\"australia\", \"au\"].includes(country)) {\n            setInputFocus2(false);\n            if (results && Array.isArray(results) && results[0]) {\n              setStateData((prevData: any) => ({\n                ...prevData,\n                selectedMapLocation: results[0].formatted_address,\n                isMapLocationSelected: true,\n                locationDenied: false,\n              }));\n            }\n          } else {\n            setInputFocus2(false);\n            setShowToast(\n              true,\n              \"Uh Oh! We don't provide service currently in your Location\"\n            );\n          }\n        }\n      });\n    };\n\n    const showError = (error: any) => {\n      if (error.code === error.PERMISSION_DENIED) {\n        setStateData((prevData: any) => ({\n          ...prevData,\n          bannerLocation: \"\",\n          locationDenied: true,\n        }));\n      }\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition, showError);\n    }\n  };\n\n  const validateForm = (type?: string) => {\n    if (\n      type === \"isRecentSearchesClicked\" &&\n      props.history?.location?.pathname === \"/\"\n    ) {\n      return true;\n    }\n    const newErrors: any = {};\n    if (!stateData?.isSearchedJobSelected) {\n      newErrors.searchedJob = Constants.errorStrings.bannerSearchJob;\n    } else if (!stateData?.searchedJob) {\n      newErrors.searchedJob = Constants.errorStrings.bannerSearchJobEmpty;\n    }\n    if (!stateData?.isMapLocationSelected && stateData?.selectedMapLocation) {\n      newErrors.selectedMapLocation =\n        Constants.errorStrings.bannerSearchLocation;\n    }\n    if (type === \"showErrorToast\") {\n      return newErrors;\n    }\n    // setErrors(newErrors);\n    return !Object.keys(newErrors).length;\n  };\n\n  const bannerSearchClicked = (newSearchData?: any) => {\n    const newErrors = validateForm(\n      newSearchData?.isRecentSearchesClicked\n        ? newSearchData?.isRecentSearchesClicked\n        : \"showErrorToast\"\n    );\n    if (!!newErrors.searchedJob || !!newErrors.selectedMapLocation) {\n      if (!!newErrors.searchedJob) {\n        setShowToast(true, \"Please select job type from the list\");\n        return;\n      }\n      if (!!newErrors.selectedMapLocation) {\n        setShowToast(true, \"Please select location from the list\");\n        return;\n      }\n    }\n    if (validateForm(newSearchData?.isRecentSearchesClicked)) {\n      const params = new URLSearchParams(props.location?.search);\n      const queryParamsData: any = {\n        defaultLat: Number(params.get(\"defaultLat\")),\n        defaultLong: Number(params.get(\"defaultLong\")),\n      };\n      const data = {\n        page: stateData.page,\n        isFiltered: false,\n        ...(suggestionSelected && {\n          address: JSON.stringify(suggestionSelected),\n        }),\n        tradeId: newSearchData?.tradeId\n          ? newSearchData?.tradeId\n          : stateData?.tradeId,\n        ...(stateData.isMapLocationSelected && {\n          location: stateData?.location,\n        }),\n        specializationId: newSearchData?.specializationId\n          ? newSearchData?.specializationId\n          : stateData?.specializationId,\n        ...(stateData?.from_date && { from_date: stateData?.from_date }),\n        ...(stateData?.to_date && { to_date: stateData?.to_date }),\n      };\n      if (props?.location?.pathname === \"/search-job-results\") {\n        props.postHomeSearchData(data);\n        const mData = {\n          timeStamp: moengage.getCurrentTimeStamp(),\n          category: props.tradeListData?.find(\n            (i: any) => i._id === data?.tradeId?.[0]\n          )?.trade_name,\n          ...(data.address && {\n            location: `${JSON.parse(data.address)?.mainText} ${\n              JSON.parse(data.address)?.secondaryText\n            }`,\n          }),\n          ...(data?.max_budget && { \"Max budget\": data?.max_budget }),\n          ...(data?.from_date && { \"start date\": data?.from_date }),\n          ...(data?.to_date && { \"end date\": data?.to_date }),\n        };\n        moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_JOBS, mData);\n        mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_JOBS, mData);\n      }\n      const newData = {\n        ...data,\n        lat: stateData.location.coordinates[1],\n        long: stateData.location.coordinates[0],\n        defaultLat: props.currentCoordinates?.coordinates[1]\n          ? props.currentCoordinates?.coordinates[1]\n          : queryParamsData.defaultLat,\n        defaultLong: props.currentCoordinates?.coordinates[0]\n          ? props.currentCoordinates?.coordinates[0]\n          : queryParamsData.defaultLong,\n        ...(stateData.selectedMapLocation && {\n          addres: stateData.selectedMapLocation.replaceAll(\"#\", \"\"),\n        }),\n        searchJob: newSearchData?.searchedJob\n          ? newSearchData?.searchedJob.replaceAll(\"&\", \"xxx\")\n          : stateData?.searchedJob.replaceAll(\"&\", \"xxx\"),\n        jobResults: null,\n      };\n      if (\n        props?.location?.pathname === \"/search-job-results\" &&\n        newData.address\n      ) {\n        setTimeout(() => {\n          props.getRecentLocationList();\n        }, 500);\n      }\n      delete newData.location;\n      delete newData.isFilterOn;\n      if (newData.searchJob) {\n        delete newData.heading;\n        delete newData.jobResults;\n      }\n      Object.keys(newData).forEach(\n        (key) =>\n          (newData[key] === \"\" ||\n            newData[key] === undefined ||\n            newData[key] === null ||\n            newData[key] === 0 ||\n            newData[key] == \"0\") &&\n          delete newData[key]\n      );\n      var url = \"search-job-results?\";\n      for (let [key, value] of Object.entries(newData)) {\n        url += `${key}=${value}&`;\n      }\n      const newUrl = url.slice(0, url.length - 1);\n      console.log(newUrl, \"newUrl\", data, \"data\", newData, \"newData\");\n      if (props.history?.location?.pathname === \"/\") {\n        props.history.push(newUrl);\n      } else {\n        props.history.replace(newUrl);\n        if (props?.refreshParams) {\n          props?.refreshParams(data);\n        }\n      }\n    }\n  };\n\n  const renderPlacesData = ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading,\n  }: any) => (\n    <React.Fragment>\n      <div className=\"text_field\">\n        <input\n          {...getInputProps({ placeholder: \"Where?\", className: \"line-1\" })}\n          id=\"location-input-tag\"\n          onFocus={() => {\n            setInputFocus2(true);\n            setInputFocus1(false);\n            setInputFocus3(false);\n          }}\n        />\n        <span className=\"detect_icon_ltr\">\n          <img src={Location} alt=\"location\" />\n        </span>\n        {stateData?.selectedMapLocation && inputFocus2 && (\n          <span className=\"detect_icon\">\n            <img\n              src={cross}\n              alt=\"cross\"\n              onClick={() => {\n                setSuggestion(\"\");\n                setStateData((prevData: any) => ({\n                  ...prevData,\n                  selectedMapLocation: \"\",\n                  isMapLocationSelected: false,\n                }));\n              }}\n            />\n          </span>\n        )}\n        {/* {!!errors.selectedMapLocation && <span className=\"error_msg\">{errors.selectedMapLocation}</span>} */}\n      </div>\n      {suggestions?.length > 0 &&\n      stateData?.selectedMapLocation.length >= 3 &&\n      inputFocus2 ? (\n        <div\n          className=\"custom_autosuggestion location\"\n          id=\"autocomplete-dropdown-container\"\n        >\n          <div className=\"flex_row recent_search auto_loc\">\n            <div className=\"flex_col_sm_4\">\n              {loading && <div>Loading...</div>}\n\n              {suggestions.map((suggestion: any) => {\n                const className = \"autosuggestion_icon card loc name\";\n                const style = suggestion.active\n                  ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                  : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                    key={suggestion.formattedSuggestion.mainText}\n                  >\n                    <span>{suggestion.formattedSuggestion.mainText}</span>\n                    <span className=\"name\">\n                      {suggestion.formattedSuggestion.secondaryText}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      ) : !loading &&\n        !stateData?.isMapLocationSelected &&\n        stateData?.selectedMapLocation.length >= 3 &&\n        inputFocus2 &&\n        suggestions?.length < 1 ? (\n        <div\n          style={{ minHeight: \"50px\" }}\n          className=\"custom_autosuggestion location\"\n          id=\"autocomplete-dropdown-container\"\n        >\n          <div className=\"flex_row recent_search auto_loc\">\n            <div className=\"flex_col_sm_4\">\n              <div className=\"loc_suggestions\">{\"No Result Found.\"}</div>\n            </div>\n          </div>\n        </div>\n      ) : null}\n    </React.Fragment>\n  );\n\n  return (\n    <div className=\"home_search\">\n      <button\n        className=\"modal_srch_close\"\n        onClick={() => {\n          if (props?.handleChangeToggle) {\n            props.handleChangeToggle(false);\n          }\n        }}\n      >\n        <img src={close} alt=\"close\" />\n      </button>\n      <form\n        className={`search_wrapr ${\n          props.history?.location?.pathname === \"/\"\n            ? stateData?.isFirstJobSelectedCount\n              ? \"\"\n              : \"first_input\"\n            : \"\"\n        }`}\n      >\n        <ul>\n          <li className=\"categ_box\">\n            <div className=\"text_field\" id=\"text-field-div\">\n              <input\n                type=\"text\"\n                ref={searchRef}\n                placeholder=\"What jobs are you after?\"\n                value={stateData?.searchedJob}\n                onChange={handleJobChange}\n                onFocus={() => {\n                  setInputFocus1(true);\n                  setInputFocus2(false);\n                  setInputFocus3(false);\n                }}\n              />\n              <div className=\"border_eff\"></div>\n              <span className=\"detect_icon_ltr\">\n                <img src={Searchicon} alt=\"search\" />\n              </span>\n              {!!stateData?.searchedJob && inputFocus1 && (\n                <span className=\"detect_icon\">\n                  <img\n                    src={cross}\n                    alt=\"cross\"\n                    onClick={() => cleanInputData(\"searchedJob\")}\n                  />\n                </span>\n              )}\n            </div>\n          </li>\n          {!stateData?.searchedJob &&\n            inputFocus1 &&\n            !inputFocus2 &&\n            recentJobSearches()}\n          {stateData?.searchedJob?.length >= 1 &&\n            inputFocus1 &&\n            !inputFocus2 &&\n            renderJobResult()}\n          <li\n            ref={locationRef}\n            className=\"loc_box\"\n            style={{ display: \"block\" }}\n          >\n            <div id=\"location-text-field-div\">\n              <PlacesAutocomplete\n                value={\n                  stateData?.selectedMapLocation !== \"{}\"\n                    ? stateData?.selectedMapLocation\n                    : \"\"\n                }\n                onChange={(city: string) =>\n                  setStateData((prevData: any) => ({\n                    ...prevData,\n                    selectedMapLocation: city,\n                    isMapLocationSelected: false,\n                  }))\n                }\n                shouldFetchSuggestions={true}\n                onSelect={locationSelectedHandler}\n                highlightFirstSuggestion={true}\n                searchOptions={{\n                  componentRestrictions: { country: \"au\" },\n                  types: [\"(cities)\"],\n                }}\n              >\n                {renderPlacesData}\n              </PlacesAutocomplete>\n            </div>\n            {(!stateData?.selectedMapLocation ||\n              stateData?.selectedMapLocation === \"{}\") &&\n              inputFocus2 && (\n                <div\n                  className=\"custom_autosuggestion location\"\n                  id=\"current-location-search-div\"\n                >\n                  <a className=\"location-btn\" onClick={getCurrentLocation}>\n                    <span className=\"gps_icon\">\n                      <img src={icgps} />\n                    </span>{\" \"}\n                    Use my current location\n                  </a>\n                  {stateData?.locationDenied && (\n                    <span className=\"blocked_note\">\n                      You have blocked your location. To use this, change your\n                      location settings in browser.\n                    </span>\n                  )}\n                  <div className=\"recent_search auto_loc\">\n                    {console.log({\n                      recent: props?.recentLocationData,\n                    })}\n                    {props?.recentLocationData?.length > 0 ? (\n                      <span className=\"sub_title\">Recent searches</span>\n                    ) : null}\n                    <div className=\"flex_row\">\n                      {props?.recentLocationData?.map((item: any) => {\n                        return (\n                          item?.address?.length > 0 && (\n                            <div\n                              className=\"flex_col_sm_4\"\n                              onClick={() => {\n                                setStateData((prevData: any) => ({\n                                  ...prevData,\n                                  location: item.location,\n                                  selectedMapLocation: JSON.parse(item?.address)\n                                    ?.mainText, //item.allText?.mainText,\n                                  isMapLocationSelected: true,\n                                }));\n                                setSuggestion(JSON.parse(item?.address));\n                              }}\n                            >\n                              <div className=\"autosuggestion_icon card loc name\">\n                                <span>\n                                  {JSON.parse(item?.address)?.mainText}\n                                </span>\n                                <span className=\"name\">\n                                  {JSON.parse(item?.address)?.secondaryText}\n                                </span>\n                              </div>\n                            </div>\n                          )\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              )}\n          </li>\n          <li\n            className={`date_box ${stateData.startDate ? \"date_value\" : \"\"}`}\n            style={{ display: \"block\" }}\n          >\n            <div\n              ref={calenderRef}\n              className=\"custom_date_range\"\n              id=\"date-range-div\"\n            >\n              <div className=\"text_field\">\n                <span className=\"detect_icon_ltr calendar\"></span>\n                <input\n                  type=\"text\"\n                  id=\"calender-input\"\n                  placeholder={\n                    stateData?.startDate\n                      ? `${stateData?.startDate} - ${stateData?.endDate}`\n                      : \"When?\"\n                  }\n                  onFocus={() => {\n                    setInputFocus3(true);\n                    setInputFocus1(false);\n                    setInputFocus2(false);\n                  }}\n                />\n                {stateData?.startDate && inputFocus3 && (\n                  <span className=\"detect_icon\">\n                    <img\n                      src={cross}\n                      alt=\"cross\"\n                      onClick={() => cleanInputData(\"calender\")}\n                    />\n                  </span>\n                )}\n              </div>\n              {inputFocus3 && (\n                <div\n                  className=\"custom_autosuggestion\"\n                  id=\"custom-date-range-div\"\n                >\n                  <DateRange\n                    onChange={handleCalenderRange}\n                    ranges={[calenderRange1]}\n                    moveRangeOnFirstSelection={false}\n                    rangeColors={[\"#fee600\", \"#b5b5b5\"]}\n                    showDateDisplay={false}\n                    showSelectionPreview={true}\n                    months={2}\n                    showPreview={true}\n                    minDate={new Date()}\n                    maxDate={\n                      new Date(\n                        new Date().setFullYear(new Date().getFullYear() + 2)\n                      )\n                    }\n                    direction=\"horizontal\"\n                    fixedHeight={true}\n                  />\n                </div>\n              )}\n            </div>\n          </li>\n          <div className=\"search_btn\">\n            <button\n              type=\"button\"\n              className=\"fill_btn btn-effect\"\n              onClick={bannerSearchClicked}\n            >\n              <img src={search} alt=\"search\" />\n            </button>\n          </div>\n        </ul>\n      </form>\n    </div>\n  );\n};\n\nexport default TradieBannerSearch;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/searchResultFilters/searchResultFilters.tsx",["1169","1170","1171","1172","1173","1174","1175","1176","1177"],"import { useState, useEffect } from \"react\";\nimport Constants from \"../../utils/constants\";\nimport { setShowToast } from \"../../redux/common/actions\";\nimport { getSearchParamsData } from \"../../utils/common\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport NumberFormat from \"react-number-format\";\n\nimport filterUnselected from \"../../assets/images/ic-filter-unselected.png\";\nimport filterSelected from \"../../assets/images/ic-filter-selected.png\";\nimport cancel from \"../../assets/images/ic-cancel.png\";\nimport spherePlaceholder from \"../../assets/images/ic_categories_placeholder.svg\";\n\nconst SearchResultFilters = (props: any) => {\n  const [errors, setErrors] = useState<any>({});\n  const [priceAnchorEl, setPriceAnchorEl] = useState(null);\n  const [sortingAnchorEl, setSortingAnchorEl] = useState(null);\n\n  const [sortByFilter, setSortByFilter] = useState<any>({\n    sortByFilterClicked: false,\n    showResultsButtonClicked: false,\n    tradeId: [],\n    jobTypes: [],\n    specializationId: [],\n    allSpecializationClicked: false,\n  });\n\n  const [sortByPrice, setSortByPrice] = useState<any>({\n    priceFilterClicked: false,\n    payTypeClicked: false,\n    pay_type: \"Per hour\",\n    budget: [2100, 5100],\n    showBudgetPerHour: [2100, 5100],\n    showBudgetFixed: [2100, 5100],\n    showResultClicked: false,\n  });\n\n  const [sortBySorting, setSortBySorting] = useState<any>({\n    sortBySorting: false,\n    sortBy: 0,\n  });\n\n  useEffect(() => {\n    props.getJobTypeList();\n    props.callTradeList();\n    const paramsList = getSearchParamsData(props?.history?.location);\n    if (paramsList) {\n      if (\n        paramsList.isFilterOn === \"isFilterOn\" &&\n        (paramsList.tradeId?.length || paramsList.jobTypes?.length)\n      ) {\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          tradeId: paramsList.tradeId ? paramsList.tradeId : [],\n          jobTypes: paramsList.jobTypes ? paramsList.jobTypes : [],\n          specializationId: paramsList.specializationId\n            ? paramsList.specializationId\n            : [],\n          showResultsButtonClicked: true,\n        }));\n      }\n      if (\n        paramsList.min_budget &&\n        paramsList.max_budget &&\n        paramsList.pay_type\n      ) {\n        const newBudget = [paramsList.min_budget, paramsList.max_budget];\n        setSortByPrice((prevData: any) => ({\n          ...prevData,\n          pay_type: paramsList.pay_type,\n          budget: newBudget,\n          showResultClicked: true,\n        }));\n      }\n      if (paramsList.sortBy) {\n        setSortBySorting((prevData: any) => ({\n          ...prevData,\n          sortBy: paramsList.sortBy,\n        }));\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if (props.cleanFiltersData) {\n      setSortByFilter((prevData: any) => ({\n        ...prevData,\n        tradeId: [],\n        jobTypes: [],\n        specializationId: [],\n        allSpecializationClicked: false,\n        showResultsButtonClicked: false,\n        sortByFilterClicked: false,\n      }));\n      setSortByPrice((prevData: any) => ({\n        ...prevData,\n        pay_type: \"Per hour\",\n        showResultClicked: false,\n      }));\n      setSortBySorting((prevData: any) => ({ ...prevData, sortBy: 0 }));\n    }\n  }, [props.cleanFiltersData]);\n\n  const sortByPriceClick = (event: any) => {\n    setPriceAnchorEl(event.currentTarget);\n    setSortByPrice((prevData: any) => ({\n      ...prevData,\n      priceFilterClicked: true,\n    }));\n  };\n\n  const sortByPriceClose = () => {\n    setPriceAnchorEl(null);\n    setSortByPrice((prevData: any) => ({\n      ...prevData,\n      priceFilterClicked: false,\n    }));\n    delete errors.maxBudget;\n  };\n\n  const sortByFilterClick = () => {\n    setSortByFilter((prevData: any) => ({\n      ...prevData,\n      sortByFilterClicked: true,\n    }));\n  };\n\n  const sortByFilterClose = () => {\n    setSortByFilter((prevData: any) => ({\n      ...prevData,\n      sortByFilterClicked: false,\n    }));\n  };\n\n  const sortBySortingClick = (event: any) => {\n    setSortingAnchorEl(event.currentTarget);\n    setSortBySorting((prevData: any) => ({ ...prevData, sortBySorting: true }));\n  };\n\n  const sortBySortingClose = () => {\n    setSortingAnchorEl(null);\n    setSortBySorting((prevData: any) => ({\n      ...prevData,\n      sortBySorting: false,\n    }));\n  };\n\n  const showResultsByAllFilter = (\n    item?: any,\n    isPriceFilterClicked?: boolean\n  ) => {\n    if (item === \"callViewNearByJobApi\") {\n      props.searchByFilter(\"callViewNearByJobApi\");\n      return;\n    }\n    const data = {\n      ...(sortByFilter.tradeId?.length && { tradeId: sortByFilter.tradeId }),\n      ...(sortByFilter.jobTypes?.length && { jobTypes: sortByFilter.jobTypes }),\n      ...(sortByFilter.specializationId?.length && {\n        specializationId: sortByFilter.specializationId,\n      }),\n      ...((sortByPrice.showResultClicked || isPriceFilterClicked) &&\n        sortByPrice.budget[0] >= 0 &&\n        sortByPrice.budget[1] >= 0 && { pay_type: sortByPrice.pay_type }),\n      ...((sortByPrice.showResultClicked || isPriceFilterClicked) &&\n        sortByPrice.budget[0] >= 0 &&\n        sortByPrice.budget[1] >= 0 && {\n          min_budget: Number(sortByPrice.budget[0]),\n        }),\n      ...((sortByPrice.showResultClicked || isPriceFilterClicked) &&\n        sortByPrice.budget[0] >= 0 &&\n        sortByPrice.budget[1] >= 0 && {\n          max_budget: Number(sortByPrice.budget[1]),\n        }),\n      ...(item?.sortBy && { sortBy: Number(item?.sortBy) }),\n    };\n    if (sortByPrice.budget[1] === 0) {\n      setSortByPrice((prevData: any) => ({\n        ...prevData,\n        showResultClicked: false,\n      }));\n    }\n    props.searchByFilter(data);\n  };\n\n  const showResultsByFilter1 = () => {\n    if (sortByFilter.jobTypes.length || sortByFilter.tradeId.length) {\n      sortByFilterClose();\n      setSortByFilter((prevData: any) => ({\n        ...prevData,\n        showResultsButtonClicked: true,\n      }));\n      showResultsByAllFilter();\n    } else {\n      sortByFilterClose();\n      setSortByFilter((prevData: any) => ({\n        ...prevData,\n        tradeId: [],\n        jobTypes: [],\n        specializationId: [],\n        allSpecializationClicked: false,\n        showResultsButtonClicked: false,\n        sortByFilterClicked: false,\n      }));\n      setSortByPrice((prevData: any) => ({\n        ...prevData,\n        pay_type: \"Fixed price\",\n      }));\n      setSortBySorting((prevData: any) => ({ ...prevData, sortBy: 0 }));\n      showResultsByAllFilter(\"callViewNearByJobApi\");\n    }\n  };\n\n  const showResultsByBudget = (e: any) => {\n    e.preventDefault();\n    setSortByPrice((prevData: any) => ({\n      ...prevData,\n      showResultClicked: true,\n    }));\n    sortByPriceClose();\n    showResultsByAllFilter(\"\", true);\n  };\n\n  const sortByButtonClicked = (num: number) => {\n    const item = {\n      sortBy: num,\n    };\n    setSortBySorting((prevData: any) => ({ ...prevData, sortBy: num }));\n    sortBySortingClose();\n    showResultsByAllFilter(item);\n  };\n\n  const setSameOnClick = () => {\n    const item = {\n      sortBy: 400, //sending 400 e.g, to delete sortBy from query param ==> by passing to parent component\n    };\n    setSortBySorting((prevData: any) => ({ ...prevData, sortBy: 0 }));\n    sortBySortingClose();\n    showResultsByAllFilter(item);\n  };\n\n  const sortOnClick = (num: number) => {\n    if (sortBySorting.sortBy == num) {\n      setSameOnClick();\n    }\n  };\n\n  const sortOnChange = (num: number) => {\n    if (sortBySorting.sortBy !== num) {\n      sortByButtonClicked(num);\n    }\n  };\n\n  const handleSliderChange = (newValue: any) => {\n    console.log(\"newValue: \", newValue);\n    if (sortByPrice.pay_type === \"Per hour\") {\n      setSortByPrice((prevData: any) => ({\n        ...prevData,\n        budget: newValue,\n        showBudgetPerHour: newValue,\n      }));\n    } else {\n      setSortByPrice((prevData: any) => ({\n        ...prevData,\n        budget: newValue,\n        showBudgetFixed: newValue,\n      }));\n    }\n  };\n\n  const filterChangeHandler = (id: any, name: string) => {\n    if (name === \"jobTypes\") {\n      if (sortByFilter.jobTypes[0] == id) {\n        setSortByFilter((prevData: any) => ({ ...prevData, jobTypes: [] }));\n      } else {\n        setSortByFilter((prevData: any) => ({ ...prevData, jobTypes: [id] }));\n      }\n    } else if (name === \"specializationId\") {\n      setSortByFilter((prevData: any) => {\n        var newData = [...prevData.specializationId];\n        if (sortByFilter.allSpecializationClicked) {\n          newData = [];\n        }\n        const itemIndex = newData.indexOf(id);\n        if (newData.indexOf(id) < 0) {\n          newData.push(id);\n        } else {\n          newData.splice(itemIndex, 1);\n        }\n        return {\n          ...prevData,\n          specializationId: newData,\n          allSpecializationClicked: false,\n        };\n      });\n    } else if (name == \"categories\") {\n      if (sortByFilter.tradeId.length && sortByFilter.tradeId[0] == id) {\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          tradeId: [],\n          specializationId: [],\n          allSpecializationClicked: false,\n        }));\n      } else {\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          tradeId: [id],\n          specializationId: [],\n          allSpecializationClicked: false,\n        }));\n      }\n    } else if (name == \"All Clicked\") {\n      if (sortByFilter.allSpecializationClicked) {\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          allSpecializationClicked: false,\n          specializationId: [],\n        }));\n      } else {\n        const newSpecialization = id.map(({ _id }: { _id: string }) => {\n          return _id;\n        });\n        setSortByFilter((prevData: any) => ({\n          ...prevData,\n          allSpecializationClicked: true,\n          specializationId: newSpecialization,\n        }));\n      }\n    } else if (name == \"Clear All\") {\n      setSortByFilter((prevData: any) => ({\n        ...prevData,\n        allSpecializationClicked: false,\n        tradeId: [],\n        jobTypes: [],\n        specializationId: [],\n      }));\n    }\n  };\n\n  const specializationList = props.tradeListData.find(\n    ({ _id }: { _id: string }) => _id === sortByFilter.tradeId[0]\n  )?.specialisations;\n\n  useEffect(() => {\n    if (specializationList?.length) {\n      const newSpecialization = specializationList.map(\n        ({ _id }: { _id: string }) => {\n          return _id;\n        }\n      );\n      setSortByFilter((prevData: any) => ({\n        ...prevData,\n        specializationId: newSpecialization,\n        allSpecializationClicked: true,\n      }));\n    }\n  }, [specializationList]);\n\n  return (\n    <div className=\"filters_wrapr\">\n      <ul className=\"filters_row\">\n        <li>\n          <a\n            onClick={sortByFilterClick}\n            className={sortByFilter.showResultsButtonClicked ? \"active\" : \"\"}\n          >\n            <img\n              src={\n                sortByFilter.showResultsButtonClicked\n                  ? filterSelected\n                  : filterUnselected\n              }\n              alt=\"filter\"\n            />\n            Filter\n          </a>\n        </li>\n        <li>\n          <a\n            className={sortByPrice.showResultClicked ? \"active\" : \"\"}\n            onClick={sortByPriceClick}\n          >\n            Price\n          </a>\n        </li>\n        <li>\n          <a\n            className={sortBySorting.sortBy ? \"active\" : \"\"}\n            onClick={sortBySortingClick}\n          >\n            Sorting\n          </a>\n        </li>\n      </ul>\n      {/* filter 1 modal box */}\n      {sortByFilter.sortByFilterClicked && (\n        <Modal\n          className=\"custom_modal\"\n          open={sortByFilter.sortByFilterClicked}\n          onClose={sortByFilterClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div\n            className=\"custom_wh filter_modal\"\n            data-aos=\"zoom-in\"\n            data-aos-delay=\"30\"\n            data-aos-duration=\"1000\"\n          >\n            <div className=\"heading\">\n              <span className=\"sub_title\">Filter</span>\n              <button className=\"close_btn\" onClick={sortByFilterClose}>\n                <img src={cancel} alt=\"cancel\" />\n              </button>\n            </div>\n\n            <div className=\"inner_wrap\">\n              <div className=\"form_field\">\n                <span className=\"xs_sub_title\">Categories</span>\n              </div>\n              <div className=\"select_sphere\">\n                <ul>\n                  {props.tradeListData?.map(\n                    ({\n                      _id,\n                      trade_name,\n                      selected_url,\n                      specialisations,\n                    }: {\n                      _id: string;\n                      trade_name: string;\n                      selected_url: string;\n                      specialisations: [];\n                    }) => {\n                      const active = sortByFilter.tradeId[0] === _id;\n                      return (\n                        <li\n                          key={_id}\n                          className={active ? \"active\" : \"\"}\n                          onClick={() => filterChangeHandler(_id, \"categories\")}\n                        >\n                          <figure>\n                            <img\n                              src={\n                                selected_url ? selected_url : spherePlaceholder\n                              }\n                            />\n                          </figure>\n                          <span className=\"name\">{trade_name}</span>\n                        </li>\n                      );\n                    }\n                  )}\n                </ul>\n              </div>\n              <div className=\"form_field\">\n                <span className=\"xs_sub_title\">Job types</span>\n              </div>\n              <ul className=\"job_categories\">\n                {props.jobTypeListData?.map(\n                  ({\n                    _id,\n                    name,\n                    image,\n                  }: {\n                    _id: string;\n                    name: string;\n                    image: string;\n                  }) => {\n                    const active = sortByFilter.jobTypes[0] == _id;\n                    return (\n                      <li\n                        className={`${active ? \"active\" : \"\"}`}\n                        key={_id}\n                        onClick={() => filterChangeHandler(_id, \"jobTypes\")}\n                      >\n                        <figure className=\"type_icon\">\n                          <img src={image} alt=\"\" />\n                        </figure>\n                        <span className=\"name\">{name}</span>\n                      </li>\n                    );\n                  }\n                )}\n              </ul>\n              <div className=\"form_field\">\n                <span className=\"xs_sub_title\">Specialisation</span>\n              </div>\n              <div className=\"tags_wrap\">\n                <ul>\n                  {specializationList?.length > 0 && (\n                    <li\n                      className={\n                        sortByFilter.allSpecializationClicked ? \"selected\" : \"\"\n                      }\n                      onClick={() =>\n                        filterChangeHandler(specializationList, \"All Clicked\")\n                      }\n                    >\n                      All\n                    </li>\n                  )}\n                  {specializationList?.map(\n                    ({ _id, name }: { _id: string; name: string }) => {\n                      const active =\n                        sortByFilter.specializationId?.indexOf(_id) >= 0;\n                      return (\n                        <li\n                          key={_id}\n                          className={\n                            active && !sortByFilter.allSpecializationClicked\n                              ? \"selected\"\n                              : \"\"\n                          }\n                          onClick={() =>\n                            filterChangeHandler(_id, \"specializationId\")\n                          }\n                        >\n                          {name}\n                        </li>\n                      );\n                    }\n                  )}\n                </ul>\n              </div>\n            </div>\n            <div className=\"filter_btn\">\n              <a\n                className=\"link\"\n                onClick={() => filterChangeHandler(\"Clear All\", \"Clear All\")}\n              >\n                Clear All\n              </a>\n              <button\n                className=\"fill_btn full_btn btn-effect\"\n                onClick={showResultsByFilter1}\n              >\n                Show Results\n              </button>\n            </div>\n          </div>\n        </Modal>\n      )}\n      {/* price filter box */}\n      {sortByPrice.priceFilterClicked && (\n        <Menu\n          className=\"fsp_modal range\"\n          id=\"simple-menu\"\n          anchorEl={priceAnchorEl}\n          keepMounted\n          open={Boolean(priceAnchorEl)}\n          onClose={sortByPriceClose}\n        >\n          <span className=\"close_btn\" onClick={sortByPriceClose}>\n            <img src={cancel} alt=\"cancel\" />\n          </span>\n          <span className=\"sub_title\">Maximum budget</span>\n          <div className=\"form_field\">\n            <div className=\"radio_wrap agree_check\">\n              <input\n                className=\"filter-type filled-in\"\n                name=\"pay_type\"\n                type=\"radio\"\n                id=\"perHour\"\n                checked={sortByPrice.pay_type === \"Per hour\" ? true : false}\n                onClick={() =>\n                  setSortByPrice((prevData: any) => ({\n                    ...prevData,\n                    pay_type: \"Per hour\",\n                    budget: [2100, 5100],\n                    showBudgetPerHour: [2100, 5100],\n                  }))\n                }\n              />\n              <label htmlFor=\"perHour\">Per hour</label>\n            </div>\n            <div className=\"radio_wrap agree_check\">\n              <input\n                className=\"filter-type filled-in\"\n                name=\"pay_type\"\n                type=\"radio\"\n                id=\"fixed\"\n                checked={sortByPrice.pay_type === \"Fixed price\" ? true : false}\n                onClick={() =>\n                  setSortByPrice((prevData: any) => ({\n                    ...prevData,\n                    pay_type: \"Fixed price\",\n                    budget: [2100, 5100],\n                    showBudgetFixed: [2100, 5100],\n                  }))\n                }\n              />\n              <label htmlFor=\"fixed\">Fixed price</label>\n            </div>\n          </div>\n          <div className=\"form_field\">\n            <span className=\"per_day\">\n              <NumberFormat\n                value={sortByPrice.budget[0]}\n                className=\"foo\"\n                displayType={\"text\"}\n                thousandSeparator={true}\n                prefix={\"$\"}\n              />\n              <NumberFormat\n                value={sortByPrice.budget[1]}\n                className=\"foo\"\n                displayType={\"text\"}\n                thousandSeparator={true}\n                prefix={\" - $\"}\n                suffix={sortByPrice.budget[1] === 10000 ? \"+\" : \"\"}\n              />\n            </span>\n            <Typography id=\"range-slider\" gutterBottom></Typography>\n            <Slider\n              min={0}\n              max={10000}\n              step={100}\n              value={\n                sortByPrice.pay_type === \"Per hour\"\n                  ? sortByPrice.showBudgetPerHour\n                  : sortByPrice.showBudgetFixed\n              }\n              onChange={handleSliderChange}\n              aria-labelledby=\"range-slider\"\n            />\n          </div>\n          <div className=\"f_spacebw\">\n            <a className=\"link\" onClick={showResultsByBudget}>\n              Show results\n            </a>\n          </div>\n        </Menu>\n      )}\n      {/* sorting filter box */}\n      {sortBySorting.sortBySorting && (\n        <Menu\n          className=\"fsp_modal range\"\n          anchorEl={sortingAnchorEl}\n          keepMounted\n          open={Boolean(sortingAnchorEl)}\n          onClose={sortBySortingClose}\n        >\n          <span className=\"close_btn\" onClick={sortBySortingClose}>\n            <img src={cancel} alt=\"cancel\" />\n          </span>\n          <span className=\"sub_title\">Sort by</span>\n          <div className=\"radio_wrap agree_check\">\n            <input\n              className=\"filter-type filled-in\"\n              type=\"radio\"\n              id=\"highestRated\"\n              value=\"Highest rated\"\n              checked={sortBySorting.sortBy === 1}\n              onClick={() => {\n                sortOnClick(1);\n              }}\n              onChange={() => {\n                sortOnChange(1);\n              }}\n            />\n            <label htmlFor=\"highestRated\">Highest rated</label>\n          </div>\n          <div className=\"radio_wrap agree_check\">\n            <input\n              className=\"filter-type filled-in\"\n              type=\"radio\"\n              id=\"closest\"\n              value=\"Closest to me\"\n              checked={sortBySorting.sortBy === 2}\n              onClick={() => {\n                sortOnClick(2);\n              }}\n              onChange={() => {\n                sortOnChange(2);\n              }}\n            />\n            <label htmlFor=\"closest\">Closest to me</label>\n          </div>\n          <div className=\"radio_wrap agree_check\">\n            <input\n              className=\"filter-type filled-in\"\n              type=\"radio\"\n              id=\"mostJob\"\n              value=\"Most jobs completed\"\n              checked={sortBySorting.sortBy === 3}\n              onClick={() => {\n                sortOnClick(3);\n              }}\n              onChange={() => {\n                sortOnChange(3);\n              }}\n            />\n            <label htmlFor=\"mostJob\">Most jobs completed</label>\n          </div>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default SearchResultFilters;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/chat/userMessages.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/components/banner.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/tradieHome.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/components/jobTypes.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/homeBanner.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/popularBuilders.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/mostViewedJobs.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/recommendedJobs.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/savedJobs.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/tradieHome/components/jobTypeList.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/markMilestones.tsx",["1178"],"import React, { useState, useEffect } from 'react'\nimport dummy from '../../../assets/images/u_placeholder.jpg';\nimport editIconBlue from '../../../assets/images/ic-edit-blue.png';\nimport more from '../../../assets/images/icon-direction-right.png';\nimport MilestoneApprove from './milestoneApprove';\nimport { withRouter } from 'react-router-dom';\nimport {\n    getMilestoneList,\n    getMilestoneDetails\n} from '../../../redux/homeSearch/actions';\nimport { renderTime } from '../../../utils/common';\nimport EditMilestones from './editMilestones/index';\nimport CancelJobs from './cancelJobs/cancelJob'\nimport LodgeDispute from './lodgeDispute/lodgeDispute';\nimport storageService from '../../../utils/storageService';\nimport noDataFound from '../../../assets/images/no-search-data.png';\nimport SeeDetailsComponents from './seeDetails';\n\ninterface Mile {\n    milestoneId: any,\n    milestoneName: any,\n    isPhotoevidence: any,\n    status: any,\n    fromDate: any,\n    toDate: any,\n    enableEditMilestone: boolean,\n    enableLodgeDispute: boolean,\n    enableCancelJob: boolean\n}\n\nconst MarkMilestones = (props: any) => {\n\n    let resetStateLocal = props?.resetStateLocal;\n    let listData = props?.listData;\n    let selectedIndex = props?.selectedIndex;\n    let enableEditMilestone = props?.enableEditMilestone;\n    let enableLodgeDispute = props?.enableLodgeDispute;\n    let enableCancelJob = props?.enableCancelJob;\n\n    const [enableApprove, setEnableApprove] = useState(false);\n    const [itemDetails, setDetails] = useState(null);\n    const [showError, setShowError] = useState(false);\n    const [selectedMilestoneIndex, setMilestoneIndex] = useState<any>(null);\n    const [selectedMile, setMilestone] = useState(null);\n    const [expandItem, setExpandItem] = useState<any>({});\n\n    const [toggleSeeDetails, setSeeDetails] = useState(false);\n    const [toggleItem, setToggleItem] = useState<{ [index: string]: boolean }>({ edit: false, cancel: false, lodge: false });\n\n    const backToScreen = () => {\n        preFetch();\n        setEnableApprove(false);\n        setSeeDetails(false);\n    }\n\n    let selectedItem: any = null;\n    if (listData?.length) {\n        selectedItem = listData[selectedIndex];\n    }\n\n    useEffect(() => {\n        let UrlParams = new URLSearchParams(props.location.search);\n        let isForce = UrlParams.get('force');\n        let active = UrlParams.get('active');\n        let jobId = UrlParams.get('jobId');\n        let markMilestone = UrlParams.get('markMilestone');\n        if (isForce) {\n            props.history.replace(`${props.location.pathname}?active=${active}&jobId=${jobId}&markMilestone=${markMilestone}`);\n            props.recallHeaderNotification(true);\n            preFetch();\n        }\n    }, [props]);\n\n    useEffect(() => {\n        fetchMilestoneDetail();\n    }, [selectedMilestoneIndex]);\n\n    const fetchMilestoneDetail = async () => {\n        if (selectedMilestoneIndex && Object.keys(selectedMilestoneIndex).length) {\n            const { milestoneId, jobId } = selectedMilestoneIndex;\n            if (milestoneId && jobId) {\n                let response: any = await getMilestoneDetails({ milestoneId, jobId });\n                console.log({ response })\n                if (response.success) {\n                    setMilestone(response.data);\n                    if (selectedMilestoneIndex?.type === \"detail\") {\n                        setSeeDetails(true);\n                    } else {\n                        setEnableApprove(true);\n                    }\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        preFetch();\n    }, []);\n\n    useEffect(() => {\n        if (Object.keys(expandItem).length === 0) {\n            preFetch();\n        }\n    }, [expandItem]);\n\n    useEffect(() => {\n        if (enableEditMilestone) {\n            setToggleItem({\n                edit: true, cancel: false, lodge: false\n            })\n        }\n\n        if (enableLodgeDispute) {\n            setToggleItem({\n                edit: false, cancel: false, lodge: true\n            })\n        }\n\n        if (enableCancelJob) {\n            setToggleItem({\n                edit: false, cancel: true, lodge: false\n            })\n        }\n    }, [enableEditMilestone, enableLodgeDispute, enableCancelJob])\n\n\n    const classChecks = (isActive: any, isPrevDone: any) => {\n        if (isActive === 1 && isPrevDone === false) {\n            return 'active';\n        } else if (isActive === 2 && isPrevDone === false) {\n            return 'check';\n        } else if (isActive === 1 && isPrevDone === 2) {\n            return 'active';\n        } else if (isActive === 2 && isPrevDone === 2) {\n            return 'check';\n        } else {\n            return 'disable'\n        }\n    }\n\n    const preFetch = async () => {\n        let jobId = selectedItem?.jobId;\n        if (getMilestoneList && jobId) {\n            const res: any = await getMilestoneList(jobId);\n            if (res.success) {\n                if (res?.data?.milestones?.length) {\n                    res?.data?.milestones?.forEach((item: any, index: any) => {\n                        if (index === 0) {\n                            const isActive = item?.status;\n                            let isPrevDone: any = false;\n                            isPrevDone = false;\n                            let result = classChecks(isActive, isPrevDone);\n                            if ([\"check\", \"active\"].includes(result)) {\n                                setExpandItem({\n                                    [item?.milestoneId]: true\n                                });\n                            }\n                        }\n                    })\n                }\n                setDetails(res.data);\n                setShowError(false)\n            } else {\n                if (res?.status === 404) {\n                    setShowError(true)\n                }\n            }\n        }\n    }\n\n    const redirectToInfo = ({ jobId, status, tradieId }: any) => {\n        console.log({ jobId });\n        let props_: any = props;\n        // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&tradieId=${tradieId}&edit=true&activeType=active&hide_dipute=${item_detail?.dispute}`)\n        let urlEncode: any = `?jobId=${jobId}&status=${status}&tradieId=${tradieId}&edit=true&activeType=active&hide_dipute=${item_detail?.dispute}`;\n        props_.history.push(`/job-detail?${urlEncode}`);\n    }\n\n    let item_details: any = itemDetails;\n    if (enableApprove) {\n        return (\n            <MilestoneApprove\n                resetStateLocal={resetStateLocal}\n                backToScreen={backToScreen}\n                data={{ selectedMile, selectedMilestoneIndex, selectedItem, itemDetails }}\n            />)\n    }\n\n    if (toggleSeeDetails) {\n        return (\n            <SeeDetailsComponents\n                resetStateLocal={resetStateLocal}\n                backToScreen={backToScreen}\n                data={{ selectedMile, selectedMilestoneIndex, selectedItem, itemDetails }}\n            />\n        )\n    }\n\n    const backTab = (name: string) => {\n        setToggleItem((prev: any) => ({ ...prev, [name]: false }));\n        setExpandItem({});\n    }\n\n    if (toggleItem?.edit) {\n        let details: any = itemDetails;\n        if (details && selectedItem) {\n            if (details && Object.keys(details)?.length && Object.keys(selectedItem).length) {\n                return (\n                    <EditMilestones\n                        details={details}\n                        item={selectedItem}\n                        backTab={backTab}\n                    />\n                )\n            }\n        }\n    }\n\n    if (toggleItem?.lodge) {\n        return (\n            <LodgeDispute item={selectedItem} backTab={backTab} />\n        )\n    }\n\n    if (toggleItem?.cancel) {\n        return (\n            <CancelJobs item={selectedItem} backTab={backTab} />\n        )\n    }\n\n    let item_detail: any = itemDetails;\n    let item_status = false;\n    if (item_details?.milestones?.length) {\n        let isExist = item_details?.milestones.find((item: any) => item.status === 1);\n        if (isExist) {\n            item_status = true;\n        }\n    }\n    let dataItems: any = [];\n    if (item_details?.milestones?.length) {\n        dataItems = item_details?.milestones;\n    }\n    console.log({ selectedItem })\n\n    if (showError) {\n        return (\n            <div className=\"flex_row\">\n                <div className=\"flex_col_sm_6\">\n                    <div className=\"flex_col_sm_8 relative\">\n                        <button\n                            className=\"back\"\n                            onClick={() => {\n                                resetStateLocal();\n                            }}></button>\n                    </div>\n                </div>\n\n\n                <div className=\"no_record  m-t-vh\">\n                    <figure className=\"no_img\">\n                        <img src={noDataFound} alt=\"data not found\" />\n                    </figure>\n                    <span>{'This tradesperson is no longer available.'}</span>\n                    <span>{'please contact admin.'} </span>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"flex_row\">\n            <div className=\"flex_col_sm_6\">\n                <div className=\"relate\">\n                    <button\n                        className=\"back\"\n                        onClick={() => {\n                            // times\n                            resetStateLocal();\n                        }}\n                    ></button>\n                    <span className=\"xs_sub_title\">\n                        {item_detail && Object.keys(item_detail).length ? item_detail.jobName : ''}\n                    </span>\n\n                    <span className=\"dot_menu\">\n                        <img src={editIconBlue} alt=\"edit\" />\n                        <div className=\"edit_menu\">\n                            <ul>\n                                {(\n                                    <li\n                                        onClick={() => { setToggleItem({ edit: true, lodge: false, cancel: false }) }}\n                                        className=\"icon edit_line\">\n                                        {'Edit Milestone'}\n                                    </li>\n                                )}\n\n                                {!item_detail?.dispute && (\n                                    <li\n                                        onClick={() => { setToggleItem((prev: any) => ({ ...prev, lodge: true })) }}\n                                        className=\"icon lodge\">\n                                        {'Lodge dispute'}\n                                    </li>\n                                )}\n\n                                <li\n                                    onClick={() => { setToggleItem((prev: any) => ({ ...prev, cancel: true })) }}\n                                    className=\"icon delete\">Cancel job</li>\n                            </ul>\n                        </div>\n                    </span>\n\n\n                </div>\n                <span\n                    onClick={() => {\n                        props.history.replace(`/jobs?${Math.random()}=${Math.random()}`)\n                    }}\n                    className=\"sub_title\">\n                    {'Job Milestones'}\n                </span>\n                <p className=\"commn_para\">\n                    {\"Your job point of contact has indicated they want to be notified when you reach the following milestones. Tap the milestone and Submit when a milestone is completed\"}\n                </p>\n\n                <ul className=\"milestones_check\">\n                    {dataItems?.map(({\n                        milestoneId,\n                        milestoneName,\n                        isPhotoevidence,\n                        status,\n                        fromDate,\n                        toDate,\n                    }: Mile,\n                        index: number\n                    ) => {\n                        const isActive = status;\n                        let isPrevDone: any = false;\n                        if (index === 0) {\n                            isPrevDone = false;\n                        } else {\n                            isPrevDone = dataItems[index - 1].status;\n                        }\n                        return (\n                            <li\n                                key={milestoneId}\n                                className={classChecks(isActive, isPrevDone)}>\n                                <div\n                                    onClick={() => {\n                                        setExpandItem((prev: any) => ({\n                                            ...prev,\n                                            [milestoneId]: prev[milestoneId] === undefined ? true : !prev[milestoneId]\n                                        }));\n                                    }}\n                                    className=\"circle_stepper\">\n                                    <span></span>\n                                </div>\n                                <div className=\"info\">\n                                    <label>{milestoneName}</label>\n                                    {isPhotoevidence && (\n                                        <span>{'Photo evidence required'}</span>\n                                    )}\n                                    <span>\n                                        {renderTime(fromDate, toDate)}\n                                    </span>\n\n                                    {[\"check\"].includes(classChecks(isActive, isPrevDone)) && expandItem[milestoneId] ? (\n                                        <button\n                                            className=\"fill_btn full_btn btn-effect\"\n                                            style={{ backgroundColor: '#DFE5EF' }}\n                                            onClick={(e) => {\n                                                e.stopPropagation();\n                                                setMilestoneIndex({\n                                                    index,\n                                                    milestoneId,\n                                                    type: 'detail',\n                                                    jobId: item_details?.jobId\n                                                });\n                                            }}>\n                                            {'See Details'}\n                                        </button>\n                                    ) : null}\n                                </div>\n\n                                {[\"active\"].includes(classChecks(isActive, isPrevDone)) && expandItem[milestoneId] ? (\n                                    <button\n                                        className=\"fill_btn full_btn btn-effect\"\n                                        onClick={() => {\n                                            setMilestoneIndex({\n                                                index,\n                                                milestoneId,\n                                                type: 'approve',\n                                                jobId: item_details?.jobId\n                                            });\n                                        }}>\n                                        {'Check and Approve'}\n                                    </button>\n                                ) : null}\n                            </li>\n                        );\n                    }\n                    )}\n                </ul>\n            </div>\n            <div className=\"flex_col_sm_6 col_ruler\">\n                <span className=\"sub_title\">Tradesperson</span>\n\n                <div\n                    onClick={() => {\n                        props?.history?.push(`tradie-info?tradeId=${item_details?.tradieId}&hideInvite=true&active=true&jobId=${item_details?.jobId}`);\n                    }}\n                    className=\"tradie_card posted_by\">\n                    <span\n                        onClick={(e) => {\n                            e.stopPropagation();\n                            props.history.push({\n                                pathname: `/chat`,\n                                state: {\n                                    tradieId: item_details?.tradieId,\n                                    builderId: storageService.getItem('userInfo')?._id,\n                                    jobId: item_details?.jobId,\n                                    jobName: item_details?.jobName\n                                }\n                            })\n                        }}\n                        className=\"chat circle\" />\n                    <div className=\"user_wrap\">\n                        <figure className=\"u_img\">\n                            <img\n                                src={item_details?.tradie?.tradieImage || dummy}\n                                alt=\"traide-img\"\n                                onError={(e: any) => {\n                                    if (e?.target?.onerror) {\n                                        e.target.onerror = null;\n                                    }\n                                    if (e?.target?.src) {\n                                        e.target.src = dummy;\n                                    }\n                                }}\n                            />\n                        </figure>\n                        <div className=\"details\">\n                            <span className=\"name\">{item_details?.tradie?.tradieName || ''}</span>\n                            {item_details?.tradie && (\n                                <span className=\"rating\">\n                                    {item_details?.tradie?.ratings || 0} | {item_details?.tradie?.reviews || 0} reviews\n                                </span>\n                            )}\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"relate\">\n                    <span className=\"sub_title\">\n                        {'Job details'}\n                    </span>\n                    <span\n                        className=\"edit_icon\"\n                        title=\"More\"\n                        onClick={() => {\n                            let { jobId,  tradieId, status } = selectedItem;\n                            redirectToInfo({ jobId, status, tradieId })\n                        }}>\n                        <img src={more} alt=\"more\" />\n                    </span>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default withRouter(MarkMilestones)\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/ratethisJob/index.tsx",["1179"],"import { useState } from \"react\";\nimport moment from \"moment\";\n// @ts-ignore\nimport ReactStars from \"react-rating-stars-component\";\nimport { ratingTradieProfile } from \"../../../../redux/jobs/actions\";\nimport { setShowToast } from \"../../../../redux/common/actions\";\n\nimport dummy from \"../../../../assets/images/u_placeholder.jpg\";\nimport more from \"../../../../assets/images/icon-direction-right.png\";\nimport { withRouter } from \"react-router-dom\";\n\ninterface Proptypes {\n  history: any;\n  location: any;\n  data: any;\n  backToScreen: () => void;\n}\nconst RateThisJob = (props: any) => {\n  const [reviewBuilderData, setReviewBuilderData] = useState({\n    startDate: \"\",\n    endDate: \"\",\n    rating: 0,\n    review: \"\",\n  });\n\n  let data: any = props?.data;\n\n  const ratingChanged = (newRating: number) => {\n    console.log(newRating);\n    setReviewBuilderData((prevdata: any) => ({\n      ...prevdata,\n      rating: newRating,\n    }));\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value.trim().length <= 1000) {\n      setReviewBuilderData((prevdata: any) => ({\n        ...prevdata,\n        review: e.target.value,\n      }));\n    }\n  };\n\n\n  const submitReviewClicked = async () => {\n    if (reviewBuilderData.rating === 0) {\n      setShowToast(true, \"Star rating is required\");\n      return;\n    }\n    if (reviewBuilderData.rating > 0) {\n      const dataItem: any = {\n        jobId: data?.jobId,\n        tradieId: data?.tradieId,\n        rating: reviewBuilderData.rating,\n      };\n\n      if (reviewBuilderData.review.trim().length > 1) {\n        dataItem[\"review\"] = reviewBuilderData?.review?.length\n          ? reviewBuilderData.review.trim()\n          : \"\";\n      }\n\n      const response = await ratingTradieProfile(dataItem);\n      if (response?.success) {\n        props?.history?.push(\"/rate-success\");\n      }\n    }\n  };\n\n  const jobClickHandler = ({ jobId, data }: any) => {\n    console.log({ data }, \"----- data----- data\");\n    if (data?.status) {\n      let urlEncode: any = `?jobId=${jobId}&status=${data?.status}&job=past&activeType=past`;\n      props.history.push(`/job-detail?${urlEncode}`);\n    }\n  };\n\n  const tradieClicked = ({ tradieId, jobId }: any) => {\n    console.log({ props });\n    props.history.push(`/tradie-info?tradeId=${tradieId}&jobId=${jobId}`);\n  };\n\n  const renderTime = ({ fromDate, toDate }: any) => {\n    if (moment(fromDate).isValid() && !moment(toDate).isValid()) {\n      return `${moment(fromDate).format(\"DD MMM\")}`;\n    }\n\n    if (moment(fromDate).isValid() && moment(toDate).isValid()) {\n      let yearEnd = moment().endOf(\"year\").toISOString();\n      let monthEnd = moment(fromDate).endOf(\"month\").toISOString();\n\n      let item: any = moment(toDate).diff(moment(fromDate), \"months\", true);\n      let item_year: any = moment(toDate).diff(moment(fromDate), \"years\", true);\n\n      let monthDiff = parseInt(item.toString());\n      let yearDiff = parseInt(item_year.toString());\n\n      if (\n        yearDiff > 0 ||\n        moment(toDate).isAfter(yearEnd) ||\n        moment(toDate).isAfter(yearEnd)\n      ) {\n        return `${moment(fromDate).format(\"DD MMM YY\")} - ${moment(\n          toDate\n        ).format(\"DD MMM YY\")}`;\n      }\n      if (monthDiff > 0 || moment(toDate).isAfter(monthEnd)) {\n        return `${moment(fromDate).format(\"DD MMM\")} - ${moment(toDate).format(\n          \"DD MMM\"\n        )}`;\n      }\n      return `${moment(fromDate).format(\"DD MMM\")} - ${moment(toDate).format(\n        \"DD\"\n      )}`;\n    }\n  };\n\n  console.log({ data });\n  return (\n    <div className=\"flex_row\">\n      <div className=\"flex_col_sm_6\">\n        <div className=\"form_field relate\">\n          <button\n            className=\"back\"\n            onClick={() => {\n              props?.backToScreen();\n            }}\n          ></button>\n          <span className=\"xs_sub_title\">Review the tradesperson</span>\n        </div>\n        <span className=\"inner_title\">{\"Rate this tradesperson\"}</span>\n        <div className=\"form_field\">\n          <ReactStars\n            count={5}\n            onChange={ratingChanged}\n            size={55}\n            isHalf={true}\n            emptyIcon={<i className=\"far fa-star\"></i>}\n            halfIcon={<i className=\"fa fa-star-half-alt\"></i>}\n            fullIcon={<i className=\"fa fa-star\"></i>}\n            activeColor=\"#fee600\"\n          />\n        </div>\n        <div className=\"form_field\">\n          <label className=\"form_label\">{\"Comment (optional)\"}</label>\n          <div className=\"text_field\">\n            <input\n              type=\"text\"\n              placeholder=\"Thanks..\"\n              maxLength={1000}\n              onChange={handleChange}\n            />\n          </div>\n        </div>\n        <div className=\"form_field\">\n          <button\n            className=\"fill_btn full_btn btn-effect\"\n            onClick={submitReviewClicked}\n          >\n            {\"Leave review\"}\n          </button>\n        </div>\n      </div>\n      <div className=\"flex_col_sm_6 col_ruler\">\n        <>\n          <div className=\"relate\">\n            <span className=\"sub_title\">{\"Job details\"}</span>\n            <span\n              className=\"edit_icon\"\n              title=\"More\"\n              onClick={() => {\n                jobClickHandler({ jobId: data?.jobId, data });\n              }}\n            >\n              <img src={more} alt=\"more\" />\n            </span>\n          </div>\n          <div className=\"tradie_card posted_by \">\n            <div className=\"user_wrap\">\n              <figure className=\"u_img\">\n                <img\n                  src={data?.jobData?.tradeSelectedUrl || dummy}\n                  alt=\"traide-img\"\n                  onError={(e: any) => {\n                    if (e?.target?.onerror) {\n                      e.target.onerror = null;\n                    }\n                    if (e?.target?.src) {\n                      e.target.src = dummy;\n                    }\n                  }}\n                />\n              </figure>\n              <div\n                className=\"details\"\n                onClick={() => {\n                  jobClickHandler({ jobId: data?.jobId, data });\n                }}\n              >\n                <span className=\"name\">{data?.jobData?.tradeName}</span>\n                <span className=\"prof\">{data?.jobName}</span>\n                <span className=\"prof\">\n                  {renderTime({\n                    fromDate: data?.jobData?.fromDate,\n                    toDate: data?.jobData?.toDate,\n                  })}\n                </span>\n              </div>\n            </div>\n          </div>\n        </>\n\n        <>\n          <div className=\"relate\">\n            <span className=\"sub_title\">{\"Tradesperson\"}</span>\n            <span\n              className=\"edit_icon\"\n              title=\"More\"\n              onClick={() => {\n                tradieClicked({\n                  jobId: data?.jobId,\n                  tradieId: data?.tradieId,\n                });\n              }}\n            >\n              <img src={more} alt=\"more\" />\n            </span>\n          </div>\n          <div className=\"tradie_card posted_by \">\n            <div className=\"user_wrap\">\n              <figure className=\"u_img\">\n                <img\n                  src={data?.tradieData?.tradieImage || dummy}\n                  alt=\"traide-img\"\n                  onError={(e: any) => {\n                    if (e?.target?.onerror) {\n                      e.target.onerror = null;\n                    }\n                    if (e?.target?.src) {\n                      e.target.src = dummy;\n                    }\n                  }}\n                />\n              </figure>\n              <div\n                className=\"details\"\n                onClick={() => {\n                  tradieClicked({\n                    jobId: data?.jobId,\n                    tradieId: data?.tradieId,\n                  });\n                }}\n              >\n                <span className=\"name\">{data?.tradieData?.tradieName}</span>\n                <span className=\"rating\">\n                  {`${data?.tradieData?.ratings || \"0\"} | ${\n                    data?.tradieData?.reviews || 0\n                  } reviews`}\n                </span>\n              </div>\n            </div>\n          </div>\n        </>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(RateThisJob);\n","/home/appinventiv/Documents/Project/tickt/web/src/common/thumbnail.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/index.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/confirmAndPay.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/jobMilestones.tsx",["1180","1181"],"import React, { useEffect, useState } from 'react'\nimport { withRouter } from \"react-router-dom\";\n// @ts-ignore\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport moment from 'moment';\nimport { setShowToast } from '../../../../redux/common/actions';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { renderTimeWithFormat } from '../../../../utils/common';\nimport AddMilestones from './addEditMilestone';\nimport {\n  updateTemplate,\n  getMileStoneByTempId,\n} from \"../../../../redux/jobs/actions\";\n\nconst JobMilestones = (props: any) => {\n    const [dataItems, setDataItems] = useState([]);\n    const [editItem, setEditItems] = useState<{ [index: string]: any }>({});\n    const [toggleAddEdit, setAddEdit] = useState<any>({ toggle: false, item: null, index: null });\n    const [open, setOpen] = React.useState(false);\n    const [deleteItem, setDeleteItem] = React.useState(null);\n    const [localMilestones, setLocalMile] = useState([]);\n    const [allMilestones, setAllMilestones] = useState({});\n\n\n    const handleClickOpen = (id: any) => {\n        setOpen(true)\n        setDeleteItem(id);\n    };\n    const handleClose = () => {\n        setOpen(false)\n        setDeleteItem(null);\n    };\n\n    const handleYes = () => {\n        localMilestones.splice(toggleAddEdit?.index, 1)\n        setOpen(false);\n        setDeleteItem(null);\n    }\n\n    const prefetch = async () => {\n        let response = await getMileStoneByTempId(props?.id);\n        if (response.success) {\n            console.log({\n                response\n            })\n            if (response?.data && Array.isArray(response?.data?.milestones) && response?.data?.milestones?.length) {\n                setDataItems(response?.data?.milestones)\n\n                let filteredData: any = response?.data?.milestones.map((item: any) => {\n                    return {\n                        milestone_name: item?.milestoneName,\n                        order: item?.order,\n                        isPhotoevidence: item?.isPhotoevidence,\n                        recommended_hours: item?.recommendedHours,\n                        from_date: moment(item?.fromDate).isValid() ? moment(item?.fromDate).format('MM-DD-YYYY') : '',\n                        to_date: moment(item?.toDate).isValid() ? moment(item?.toDate).format('MM-DD-YYYY') : '',\n                    }\n                });\n                setAllMilestones(response?.data)\n                setLocalMile(filteredData);\n            }\n        }\n    }\n\n    useEffect(() => {\n        console.log('Here!!!!')\n        prefetch()\n    }, []);\n\n    const checkOnClick = (e: any, index: any) => {\n        let edit_item_clone: any = editItem;\n        edit_item_clone[index] = e.target.checked;\n        setEditItems((prev) => ({ ...prev, ...edit_item_clone }));\n    }\n\n    const reorder = (list: Array<any>, startIndex: number, endIndex: number) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n\n        return result;\n    };\n\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        const reOrderedMilestones: any = reorder(\n            localMilestones,\n            source.index,\n            destination.index\n        );\n\n        setLocalMile(reOrderedMilestones);\n    };\n\n    const format = 'MM-DD-YYYY';\n\n    const backToScreen = (data?: any) => {\n        let local_mile: any = localMilestones;\n        setAddEdit({ toggle: false });\n        if (data) {\n            let data_: any = data?.data;\n            let index = data?.index;\n        \n            if(index == undefined){\n                local_mile.push(data_);\n            } else {\n                local_mile[index] = data_;\n            }\n            setLocalMile(local_mile);\n        }\n    }\n\n    if (toggleAddEdit?.toggle) {\n        return (\n            <AddMilestones\n                backToScreen={backToScreen}\n                item={toggleAddEdit?.item}\n                items={localMilestones}\n                index={toggleAddEdit?.index}\n            />\n        )\n    }\n\n    const checkIfValidDates = (item: any) => {\n        let isfilter: any = localMilestones.filter((item_: any) => {\n            if (item_.hasOwnProperty('from_date')) {\n                if (item_?.from_date !== \"Invalid date\" || !item_?.from_date?.length) {\n                    return item_;\n                }\n            }\n        });\n        if (!isfilter?.length) {\n            return true;\n        } else {\n\n            const newarr: any = isfilter.slice().sort((a: any, b: any) => {\n                return moment(a.from_date, 'MM-DD-YYYY').diff(moment(b.from_date, 'MM-DD-YYYY'));\n            });\n            let filteredItem: any = item.filter((item_reorder: any) => {\n                if (item_reorder.hasOwnProperty('from_date')) {\n                    if (item_reorder?.from_date !== \"Invalid date\" || !item_reorder?.from_date?.length) {\n                        return item_reorder;\n                    }\n                }\n            });\n            return JSON.stringify(newarr) === JSON.stringify(filteredItem);\n        }\n    }\n\n    const handleSubmit = async () => {\n        let all_milestones: any = allMilestones;\n        let data = {\n            \"templateId\": all_milestones?.tempId,\n            \"template_name\": all_milestones?.templateName,\n            \"milestones\": localMilestones.map((item: any, index: any) => {\n                item['order'] = index + 1;\n                return item;\n            })\n        }\n\n        let response = await updateTemplate(data);\n        if (response?.success) {\n            props.history.push({\n                pathname: '/template-sucess',\n                state: { redirectTo: '/update-user-info' }\n            });\n        }\n    }\n\n    return (\n        <div className=\"custom_container\">\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">\n                    {\"Are you sure you want to delete the milestone ?\"}\n                </DialogTitle>\n                <DialogActions>\n                    <Button onClick={handleYes} color=\"primary\" autoFocus>\n                        {'Yes'}\n                    </Button>\n                    <Button onClick={handleClose} color=\"primary\">\n                        {'No'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <div className=\"form_field\">\n                <div className=\"flex_row\">\n                    <div className=\"flex_col_sm_12\">\n                        <div\n                            className=\"relate\">\n                            <span\n                                style={{ zIndex: 999, cursor: 'pointer' }}\n                                onClick={() => {\n                                    props.backToScreen();\n                                }}\n                                className=\"back\">\n                            </span>\n                            <span className=\"title\">\n                                {'Job Milestones'}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"flex_row\">\n                    <div className=\"flex_col_sm_5\">\n                        <DragDropContext onDragEnd={onDragEnd}>\n                            <Droppable droppableId=\"milestones\">\n                                {(provided, snapshot) => (\n                                    <ul ref={provided.innerRef}\n                                        className={`milestones${snapshot.isDraggingOver ? ' dragging-over' : ''}`}>\n                                        {localMilestones?.length > 0 &&\n                                            localMilestones.map(({\n                                                milestone_name,\n                                                isPhotoevidence,\n                                                recommended_hours,\n                                                from_date,\n                                                to_date,\n                                                order\n                                            }: {\n                                                milestone_name: string,\n                                                isPhotoevidence: boolean,\n                                                from_date: string,\n                                                to_date: string,\n                                                recommended_hours: any\n                                                order: any\n                                            }, index: any) => (\n                                                <Draggable\n                                                    key={`${index}-${milestone_name}`}\n                                                    draggableId={`${milestone_name}-${index}`}\n                                                    index={index}>\n                                                    {(provided: any) => (\n                                                        <li\n                                                            key={index}\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                            style={{\n                                                                ...provided.draggableProps.style,\n                                                            }}>\n                                                            {editItem[index] ? (\n                                                                <div className=\"edit_delete\">\n                                                                    <span\n                                                                        onClick={(e) => {\n                                                                            e.stopPropagation();\n                                                                            setAddEdit({\n                                                                                toggle: true,\n                                                                                item: {\n                                                                                    milestone_name,\n                                                                                    isPhotoevidence,\n                                                                                    recommended_hours,\n                                                                                    from_date,\n                                                                                    to_date,\n                                                                                    order\n                                                                                },\n                                                                                index: index\n                                                                            });\n                                                                        }}\n                                                                        className=\"edit\">\n                                                                    </span>\n                                                                    <span\n                                                                        onClick={(e) => {\n                                                                            handleClickOpen(index);\n                                                                        }}\n                                                                        className=\"delete\"></span>\n                                                                </div>\n                                                            ) : ''}\n                                                            <div className=\"checkbox_wrap agree_check\">\n                                                                <input\n                                                                    checked={editItem[index]}\n                                                                    onChange={(e: any) => {\n                                                                        checkOnClick(e, index)\n                                                                    }}\n                                                                    className=\"filter-type filled-in\"\n                                                                    type=\"checkbox\"\n                                                                    id={`milestone${index}`} />\n                                                                <label htmlFor={`milestone${index}`}>\n                                                                    {`${index + 1}. ${milestone_name}`}\n                                                                </label>\n                                                                <div className=\"info\">\n                                                                    {isPhotoevidence ?\n                                                                        <span>{'Photo evidence required'}</span>\n                                                                        : <span></span>}\n                                                                    <span>\n                                                                        {renderTimeWithFormat(\n                                                                            from_date,\n                                                                            to_date,\n                                                                            format\n                                                                        )}\n                                                                    </span>\n                                                                    <span>\n                                                                        {recommended_hours}\n                                                                    </span>\n                                                                </div>\n                                                            </div>\n                                                        </li>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                        {provided.placeholder}\n                                    </ul>\n                                )}\n                            </Droppable>\n                        </DragDropContext>\n                        {!localMilestones?.length ? (\n                            <React.Fragment>\n                                <div className=\"form_field\">\n                                    <button\n                                        className=\"fill_btn fill_grey_btn full_btn btn-effect\"\n                                        onClick={() => {\n                                            setAddEdit({ toggle: true, item: null });\n                                        }}>\n                                        {'+ Add milestone'}\n                                    </button>\n                                </div>\n                            </React.Fragment>\n                        ) : (\n                            <React.Fragment>\n                                <div className=\"form_field\">\n                                    <button\n                                        className=\"fill_btn fill_grey_btn full_btn btn-effect\"\n                                        onClick={() => {\n                                            setAddEdit({ toggle: true, item: null });\n                                        }}>\n                                        {'+ Add milestone'}\n                                    </button>\n                                </div>\n                                <div className=\"form_field\">\n                                    <button\n                                        onClick={() => {\n                                            let check: boolean = checkIfValidDates(localMilestones);\n                                            if (check) {\n                                                handleSubmit();\n                                            } else {\n                                                setShowToast(true, \"Please arrange milestone date wise\")\n                                            }\n                                        }}\n                                        className={`fill_btn full_btn btn-effect`}>\n                                        {'Save'}\n                                    </button>\n                                </div>\n                            </React.Fragment>\n                        )}\n\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(JobMilestones);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/bannerSearch.tsx",["1182","1183","1184","1185","1186","1187"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Constants, { MoEConstants } from \"../../utils/constants\";\n// @ts-ignore\nimport PlacesAutocomplete from \"react-places-autocomplete\";\n// @ts-ignore\nimport { DateRange } from \"react-date-range\";\nimport \"react-date-range/dist/styles.css\"; // main style file\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\n\nimport Searchicon from \"../../assets/images/main-search.png\";\nimport search from \"../../assets/images/ic-search.png\";\nimport Location from \"../../assets/images/ic-location.png\";\nimport cross from \"../../assets/images/close-black.png\";\nimport icgps from \"../../assets/images/ic-gps.png\";\nimport residential from \"../../assets/images/ic-residential.png\";\nimport close from \"../../assets/images/icon-close-1.png\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  getSearchJobList,\n  getRecentSearchList,\n  postHomeSearchData,\n  getRecentLocationList,\n} from \"../../redux/homeSearch/actions\";\nimport { isHandleChanges } from \"../../redux/jobs/actions\";\n// @ts-ignore\nimport { useDetectClickOutside } from \"react-detect-click-outside\";\nimport moment from \"moment\";\nimport Geocode from \"react-geocode\";\nimport { setShowToast } from \"../../redux/common/actions\";\n\nimport { deleteRecentSearch } from \"../../redux/homeSearch/actions\";\n\nimport { renderTimeWithCustomFormat } from \"../../utils/common\";\nimport { moengage, mixPanel } from \"../../services/analyticsTools\";\n\nGeocode.setApiKey(Constants.SocialAuth.GOOGLE_GEOCODE_KEY);\nGeocode.setLanguage(\"en\");\nGeocode.setRegion(\"au\");\n\ninterface PropsType {\n  history: any;\n  location?: any;\n  bannerData: any;\n  selectedItem: any;\n  selectedTrade: any;\n  current_address: any;\n  recentLocationData: Array<any>;\n\n  searchText: any;\n  stateData: any;\n  addressText: any;\n  selectedAddress: any;\n  isHandleChanges: (item: any) => void;\n  localChanges: boolean;\n  searchJobListData: Array<object>;\n  recentSearchJobData: Array<object>;\n  homeSearchJobData: Array<object>;\n  setBannerData: (data: any) => void;\n  getSearchJobList: (data: any) => void;\n  postHomeSearchData: (data: any) => void;\n  handleChangeToggle?: (data: any) => void;\n  getRecentSearchList?: () => void;\n  getRecentLocationList: () => void;\n}\n\nconst example_calender = { startDate: \"\", endDate: \"\", key: \"selection1\" };\n\nexport function useStateFromProp(initialValue: any) {\n  const [value, setValue] = useState(initialValue);\n\n  useEffect(() => setValue(initialValue), [initialValue]);\n\n  return [value, setValue];\n}\n\nconst BannerSearch = (props: PropsType) => {\n\n  const {\n    isHandleChanges,\n    localChanges,\n    getRecentSearchList,\n    getRecentLocationList,\n  } = props;\n\n  const [checkOnChange, setOnChange] = useState(false);\n  const [showOnlyTradeName, setShowOnlyTradeName] = useState(false);\n\n  const [locationStatus, setLocationStatus] = useState(null);\n  const [stateData, setStateData] = useState<any>(null);\n  const [searchText, setSearchText] = useState(\"\");\n  const [addressText, setAddressText] = useState<any>(\"\");\n  const [recentLocation, setRecentLocation] = useState<any>([]); // recentLocation\n  const [selectedAddress, setSelectedAddress] = useState({});\n  const [enableCurrentLocation, setCurrentLocations] = useState<boolean>(false);\n  const [errors, setErrors] = useState<any>({});\n  const [selectedTrade, setSelectedTrade] = useState({});\n\n  const [inputFocus1, setInputFocus1] = useState<boolean>(false);\n  const [inputFocus2, setInputFocus2] = useState<boolean>(false);\n  const [inputFocus3, setInputFocus3] = useState<boolean>(false);\n\n  const [calenderRange1, setCalenderRange1] = useState<any>(example_calender);\n\n  const [suggestionSelected, setSuggestion] = useState({});\n  const tradeListRedux = useSelector((state: any) => state.auth.tradeListData);\n\n  const handleOnOutsideSearch = () => {\n    setOnChange(false);\n    setInputFocus1(false);\n  };\n  const handleOnOutsideLocation = () => {\n    setInputFocus2(false);\n  };\n  const handleOnOutsideCalender = () => setInputFocus3(false);\n\n  const searchRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideSearch,\n  });\n  const locationRef = useDetectClickOutside({\n    onTriggered: () => {\n      handleOnOutsideLocation();\n    },\n  });\n\n  const calenderRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideCalender,\n  });\n\n  const handleCalenderRange = (item: any) => {\n    setCalenderRange1(item.selection1);\n  };\n\n  useEffect(() => {\n    if (getRecentSearchList) {\n      getRecentSearchList();\n    }\n    if (getRecentLocationList) {\n      getRecentLocationList();\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log(\"In local-changes\", { props: props.selectedItem });\n    return () => {\n      console.log(\"local-changes\", { props: props.selectedItem });\n    };\n  }, [props]);\n\n  useEffect(() => {\n    if (searchText?.length > 2) {\n      props.getSearchJobList(searchText);\n    }\n    if (!searchText?.length) {\n      setSelectedTrade({});\n    }\n  }, [searchText]);\n\n  const checkIfExist = (_id: any) => {\n    if (selectedTrade) {\n      let isLength = Object.keys(selectedTrade).length;\n      if (isLength) {\n        let item: any = selectedTrade;\n        if (item?._id === _id) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  const cleanRecentSearch = async (event: any, recentSearchId: string) => {\n    event.stopPropagation();\n    const data = {\n      id: recentSearchId,\n      status: 0,\n    };\n    const res = await deleteRecentSearch(data);\n    if (res.success) {\n      if (getRecentSearchList) {\n        getRecentSearchList();\n      }\n    }\n  };\n\n  const recentJobSearches = () => {\n    let props_Clone: any = props;\n    let tradeListData = props_Clone.tradeListData;\n    return (\n      <>\n        <div className=\"custom_autosuggestion\" id=\"recent-job-search-div\">\n          {props?.recentSearchJobData?.length ? (\n            <React.Fragment>\n              <span className=\"sub_title\">Recent searches</span>\n              <div className=\"flex_row recent_search\">\n                {props.recentSearchJobData?.length > 0 &&\n                  props.recentSearchJobData?.slice(0, 4).map((item: any) => {\n                    return (\n                      <div\n                        className=\"flex_col_sm_3\"\n                        onClick={() => {\n                          let selected_address: any = selectedAddress;\n                          props.history.push({\n                            pathname: `search-tradie-results`,\n                            state: {\n                              name: item?.name,\n                              tradeId: [item?._id],\n                              specializations: [item?.specializationsId],\n                              location: Object.keys(selected_address).length\n                                ? {\n                                    coordinates: [\n                                      selected_address?.lng,\n                                      selected_address?.lat,\n                                    ],\n                                  }\n                                : null,\n                              calender: calenderRange1,\n                              address: addressText,\n                            },\n                          });\n                        }}\n                      >\n                        <div className=\"card ico_txt_wrap\">\n                          <figure className=\"ico\">\n                            <img src={item?.image || residential} alt=\"icon\" />\n                          </figure>\n                          <div className=\"f_column\">\n                            <span>{item.name}</span>\n                            <span className=\"name\">{item.trade_name}</span>\n                          </div>\n                          <span\n                            className=\"remove_card\"\n                            onClick={(event) =>\n                              cleanRecentSearch(event, item.recentSearchId)\n                            }\n                          >\n                            <img src={close} alt=\"remove\" />\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n            </React.Fragment>\n          ) : null}\n\n          <div className=\"select_sphere recent_search\">\n            <span className=\"sub_title\">Categories</span>\n            <ul>\n              {tradeListData?.map(\n                ({\n                  _id,\n                  trade_name,\n                  selected_url,\n                  specialisations,\n                }: {\n                  _id: string;\n                  trade_name: string;\n                  selected_url: string;\n                  specialisations: [];\n                }) => (\n                  <li\n                    onClick={() => {\n                      let item_spec: any = specialisations;\n                      if (item_spec?.length) {\n                        let getItem = item_spec[0];\n                        if (getItem) {\n                          setStateData({\n                            image: selected_url,\n                            name: getItem?.name,\n                            specializationsId: getItem?._id,\n                            trade_name: trade_name,\n                            _id: _id,\n                          });\n                          setSearchText(trade_name);\n                        }\n                        setShowOnlyTradeName(true);\n                        setSelectedTrade({\n                          _id,\n                          trade_name,\n                          selected_url,\n                          specialisations,\n                        });\n                      }\n                    }}\n                    className={checkIfExist(_id) ? \"active\" : \"\"}\n                  >\n                    <figure>\n                      <img src={selected_url} alt=\"\" />\n                    </figure>\n                    <span className=\"name\">{trade_name}</span>\n                  </li>\n                )\n              )}\n            </ul>\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  const renderJobResult = () => {\n    if (props?.searchJobListData?.length) {\n      return (\n        <div\n          className=\"custom_autosuggestion\"\n          id=\"fetched-custom-job-category-div\"\n        >\n          <div className=\"recent_search\">\n            <ul className=\"drop_data\">\n              {props.searchJobListData?.map((item: any) => {\n                return (\n                  <li\n                    onClick={() => {\n                      setItemSearch(item);\n                    }}\n                  >\n                    <figure className=\"category\">\n                      <img\n                        src={item.image ? item.image : residential}\n                        alt=\"icon\"\n                      />\n                    </figure>\n                    <div className=\"details\">\n                      <span className=\"name\">{item.name}</span>\n                      <span className=\"prof\">{item.trade_name}</span>\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const onError = (status: string, clearSuggestions: Function) => {\n    console.log(\"Google Maps API returned error with status: \", status);\n    clearSuggestions();\n  };\n\n  const validateForm = () => {\n    return true;\n  };\n\n  const setItemSearch = (item: any) => {\n    setStateData(item);\n    setSelectedTrade({});\n    setSearchText(item?.name || \"\");\n  };\n\n  const bannerSearchClicked = () => {\n    let selected_address: any = selectedAddress;\n    let selected_trade: any = selectedTrade;\n    let selected_item: any = props?.selectedItem;\n    let props_trade: any = selected_item?.selectedTrade;\n\n    if (!stateData?._id && !props_trade?._id) {\n      setShowToast(true, \"Please enter the valid search text\");\n      return;\n    }\n\n    if (checkOnChange) {\n      setShowToast(true, \"Please select job type from the list\");\n      return;\n    }\n\n    if (validateForm()) {\n      let data: any = {\n        page: 1,\n        isFiltered: false,\n        tradeId: [stateData?._id],\n        specializationId: [stateData?.specializationsId],\n      };\n\n      if (Object.keys(selectedAddress).length) {\n        data[\"location\"] = {\n          coordinates: [\n            parseFloat(selected_address?.lng),\n            parseFloat(selected_address?.lat),\n          ],\n        };\n        if (addressText) {\n          data[\"address\"] =\n            addressText && Object.keys(suggestionSelected).length\n              ? JSON.stringify(suggestionSelected)\n              : \"\";\n        }\n      } else {\n        delete data.location;\n      }\n\n      if (moment(calenderRange1?.startDate).isValid()) {\n        data[\"from_date\"] = moment(calenderRange1?.startDate).format(\n          \"YYYY-MM-DD\"\n        );\n      } else {\n        delete data.from_date;\n      }\n\n      if (moment(calenderRange1?.endDate).isValid()) {\n        data[\"to_date\"] = moment(calenderRange1?.endDate).format(\"YYYY-MM-DD\");\n      } else {\n        delete data.to_date;\n      }\n\n      if (props_trade?._id) {\n        data[\"tradeId\"] = [props_trade._id];\n        if (props_trade?.specialisations?.length) {\n          data[\"specializationId\"] = props_trade.specialisations.map(\n            (item: any) => {\n              if (item?._id) {\n                return item?._id;\n              }\n              return item;\n            }\n          );\n        }\n      } else {\n        if (selected_trade) {\n          if (Object.keys(selected_trade).length) {\n            data[\"tradeId\"] = [selected_trade._id];\n            if (selected_trade?.specialisations?.length) {\n              data[\"specializationId\"] = selected_trade.specialisations.map(\n                (item: any) => item._id\n              );\n            }\n          }\n        }\n      }\n\n      if (!data?.address || !data?.address?.length) {\n        delete data.address;\n      }\n\n      if (!localChanges) {\n        props.postHomeSearchData(data);\n        const mData = {\n          timeStamp: moengage.getCurrentTimeStamp(),\n          category: tradeListRedux.find((i: any) => i._id === data?.tradeId[0])\n            ?.trade_name,\n          ...(data.address && {\n            location: `${JSON.parse(data.address)?.mainText} ${\n              JSON.parse(data.address)?.secondaryText\n            }`,\n          }),\n          //'length of hire': '',\n          ...(data?.from_date && { \"start date\": data?.from_date }),\n          ...(data?.to_date && { \"end date\": data?.to_date }),\n        };\n        moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n        mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n      }\n      isHandleChanges(false);\n      props.history.push({\n        pathname: `search-tradie-results`,\n        state: {\n          name: searchText,\n          showOnlyTradeName: showOnlyTradeName,\n          tradeId: data.tradeId,\n          specializations: data.specializationId,\n          location: Object.keys(selected_address).length\n            ? { coordinates: [selected_address?.lng, selected_address?.lat] }\n            : null,\n          calender: calenderRange1,\n          address: addressText,\n          suggestionSelected: suggestionSelected,\n        },\n      });\n    }\n  };\n\n  const filterFromAddress = (response: any) => {\n    let city,\n      state,\n      country = null;\n    for (let i = 0; i < response.results[0].address_components.length; i++) {\n      for (\n        let j = 0;\n        j < response.results[0].address_components[i].types.length;\n        j++\n      ) {\n        switch (response.results[0].address_components[i].types[j]) {\n          case \"locality\":\n            city = response.results[0].address_components[i].long_name;\n            break;\n          case \"administrative_area_level_1\":\n            state = response.results[0].address_components[i].long_name;\n            break;\n          case \"country\":\n            country = response.results[0].address_components[i].long_name;\n            break;\n        }\n      }\n    }\n    return { city, state, country: country.toLowerCase() };\n  };\n\n  const getCurrentLocation = async () => {\n    let itemToggle: any = await navigator?.permissions?.query({\n      name: \"geolocation\",\n    });\n    setLocationStatus(itemToggle.state);\n    let local_position: any = localStorage.getItem(\"position\");\n    let position: any = JSON.parse(local_position);\n    if (position?.length) {\n      let long = position[0].toString();\n      let lat = position[1].toString();\n      let response: any = await Geocode.fromLatLng(lat, long);\n      const { city, state, country } = filterFromAddress(response);\n\n      if (response && [\"australia\", \"au\"].includes(country)) {\n        if (\n          response?.results &&\n          Array.isArray(response.results) &&\n          response?.results?.length\n        ) {\n          const address = response.results[0].formatted_address;\n          setSelectedAddress({ lat, long });\n          setAddressText(address);\n          setInputFocus2(true);\n          setInputFocus1(false);\n          setInputFocus3(false);\n          setCurrentLocations(true);\n        }\n      } else {\n        if (itemToggle?.state !== \"denied\") {\n          setShowToast(\n            true,\n            \"Uh Oh! We don't provide service currently in your location\"\n          );\n        }\n      }\n    }\n  };\n\n  let selected_trade: any = selectedTrade;\n  let length_spec = 0;\n\n  if (props?.selectedItem) {\n    let sProps = props?.selectedItem;\n    if (Array.isArray(sProps?.selectedTrade?.specialisations)) {\n      length_spec = sProps?.selectedTrade?.specialisations?.length;\n    }\n  } else {\n    length_spec = selected_trade?.specialisations?.length;\n    if (!length_spec) {\n      if (stateData?.specializationsId?.length) {\n        length_spec = 1;\n      }\n    }\n  }\n\n  const checkPlaceholder = (calenderRange1: any) => {\n    let fromDate: any = calenderRange1?.startDate;\n    let toDate: any = calenderRange1?.endDate;\n    let result = renderTimeWithCustomFormat(\n      fromDate,\n      toDate,\n      \"\",\n      [\"DD MMM\", \"DD MMM YYYY\"],\n      \"When?\"\n    );\n\n    if (!result) {\n      return \"When?\";\n    }\n\n    return result;\n  };\n\n  let custom_name = searchText;\n\n  if (!checkOnChange) {\n    if (length_spec > 1) {\n      custom_name = `${custom_name} +${length_spec - 1}`;\n    }\n  }\n\n  return (\n    <div className=\"home_search\">\n      <button\n        onClick={() => {\n          if (props?.handleChangeToggle) {\n            props.handleChangeToggle(false);\n          }\n        }}\n        className=\"modal_srch_close\"\n      >\n        <img src={close} alt=\"close\" />\n      </button>\n      <form className={`search_wrapr ${!length_spec ? \"first_input\" : \"\"}`}>\n        {/* first_input */}\n        <ul>\n          <li className=\"categ_box\">\n            <div className=\"text_field\" id=\"text-field-div\">\n              <input\n                type=\"text\"\n                ref={searchRef}\n                placeholder=\"What jobs are you after?\"\n                value={showOnlyTradeName ? searchText : custom_name}\n                onChange={(e) => {\n                  setOnChange(true);\n                  setSearchText(e.target.value.trimLeft());\n                }}\n                autoComplete=\"none\"\n                onFocus={() => {\n                  setInputFocus1(true);\n                  setInputFocus2(false);\n                  setInputFocus3(false);\n                }}\n              />\n              <div className=\"border_eff\"></div>\n              <span className=\"detect_icon_ltr\">\n                <img src={Searchicon} alt=\"search\" />\n              </span>\n              {searchText?.length && inputFocus1 ? (\n                <span className=\"detect_icon\">\n                  <img\n                    src={cross}\n                    alt=\"cross\"\n                    onClick={() => {\n                      setOnChange(false);\n                      setSearchText(\"\");\n                      setStateData({});\n                      setSelectedTrade({});\n                    }}\n                  />\n                </span>\n              ) : null}\n            </div>\n            {!!errors.searchedJob && (\n              <span className=\"error_msg\">{errors.searchedJob}</span>\n            )}\n          </li>\n          {!searchText?.length && inputFocus1 ? recentJobSearches() : null}\n          {searchText?.length > 2 && inputFocus1 ? renderJobResult() : null}\n\n          {/* {'location search start here!'} */}\n          <li className=\"loc_box\" style={{ display: \"block\" }}>\n            <div id=\"location-text-field-div\">\n              <div>\n                <PlacesAutocomplete\n                  value={addressText}\n                  searchOptions={{\n                    componentRestrictions: {\n                      country: \"au\",\n                    },\n                    // types: [\"address\"]\n                    types: [\"(cities)\"],\n                  }}\n                  onChange={(item: any) => {\n                    setAddressText(item);\n                    if (!addressText.length) {\n                      setSelectedAddress({});\n                    }\n                  }}\n                  shouldFetchSuggestions={addressText?.length > 2}\n                  onSelect={async (\n                    address: string,\n                    placeId?: any,\n                    suggestion?: any\n                  ) => {\n                    console.log({ address, placeId, suggestion });\n                    let selected_address: any = address;\n                    if (address.indexOf(\",\")) {\n                      selected_address = address.split(\",\")[0];\n                    }\n                    setSuggestion(suggestion?.formattedSuggestion);\n                    setAddressText(suggestion?.formattedSuggestion?.mainText);\n                    let response = await Geocode.fromAddress(address);\n                    console.log({ selected_address });\n                    if (response?.results?.length) {\n                      const { lat, lng } =\n                        response.results[0].geometry.location;\n                      setSelectedAddress({ lat, lng });\n                      setInputFocus2(false);\n                    }\n                  }}\n                  highlightFirstSuggestion={true}\n                  onError={onError}\n                  debounce={0}\n                >\n                  {({\n                    getInputProps,\n                    suggestions,\n                    getSuggestionItemProps,\n                    loading,\n                  }: any) => (\n                    <div>\n                      <div className={`text_field`}>\n                        <input\n                          {...getInputProps({\n                            placeholder: \"Where?\",\n                            className: \"line-1\",\n                          })}\n                          id=\"location-input-tag\"\n                          ref={locationRef}\n                          autoComplete=\"off\"\n                          onFocus={() => {\n                            setInputFocus2(true);\n                            setInputFocus1(false);\n                            setInputFocus3(false);\n                          }}\n                        />\n                        <span className=\"detect_icon_ltr\">\n                          <img src={Location} alt=\"location\" />\n                        </span>\n\n                        {inputFocus2 && addressText?.length > 2 ? (\n                          <span className=\"detect_icon\">\n                            <img\n                              src={cross}\n                              alt=\"cross\"\n                              onClick={() => {\n                                setAddressText(\"\");\n                                setSelectedAddress({});\n                              }}\n                            />\n                          </span>\n                        ) : null}\n                      </div>\n\n                      {suggestions?.length &&\n                      inputFocus2 &&\n                      addressText?.length > 2 ? (\n                        <div\n                          className=\"custom_autosuggestion location\"\n                          id=\"autocomplete-dropdown-container\"\n                        >\n                          <div className=\"flex_row recent_search auto_loc\">\n                            <div className=\"flex_col_sm_4\">\n                              {!!errors.selectedMapLocation && (\n                                <span className=\"error_msg\">\n                                  {errors.selectedMapLocation}\n                                </span>\n                              )}\n                              {loading && <div>Loading...</div>}\n\n                              {suggestions.map((suggestion: any) => {\n                                const className =\n                                  \"autosuggestion_icon card loc name\";\n                                const style = suggestion.active\n                                  ? {\n                                      backgroundColor: \"#fafafa\",\n                                      cursor: \"pointer\",\n                                    }\n                                  : {\n                                      backgroundColor: \"#ffffff\",\n                                      cursor: \"pointer\",\n                                    };\n                                return (\n                                  <div\n                                    {...getSuggestionItemProps(suggestion, {\n                                      className,\n                                      style,\n                                    })}\n                                  >\n                                    <span>\n                                      {suggestion.formattedSuggestion.mainText}\n                                    </span>\n                                    <span className=\"name\">\n                                      {\n                                        suggestion.formattedSuggestion\n                                          .secondaryText\n                                      }\n                                    </span>\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          </div>\n                        </div>\n                      ) : inputFocus2 &&\n                        !suggestions?.length &&\n                        !Object.keys(selectedAddress).length ? (\n                        <div\n                          style={{ minHeight: \"50px\" }}\n                          className=\"custom_autosuggestion location\"\n                          id=\"autocomplete-dropdown-container\"\n                        >\n                          <div className=\"flex_row recent_search auto_loc\">\n                            <div className=\"flex_col_sm_4\">\n                              <div className=\"loc_suggestions\">\n                                {\"No Result Found.\"}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ) : null}\n                    </div>\n                  )}\n                </PlacesAutocomplete>\n              </div>\n            </div>\n            {!!errors.selectedMapLocation && (\n              <span className=\"error_msg\">{errors.selectedMapLocation}</span>\n            )}\n          </li>\n\n          {/* {'location search end here!'} */}\n\n          {!addressText?.length && inputFocus2 ? (\n            <div\n              className=\"custom_autosuggestion location\"\n              id=\"current-location-search-div\"\n            >\n              <span className=\"location-btn\" onClick={getCurrentLocation}>\n                <span className=\"gps_icon\">\n                  <img src={icgps} alt=\"\" />\n                </span>\n                {\" Use my current location\"}\n              </span>\n              {locationStatus === \"denied\" && (\n                <span className=\"blocked_note\">\n                  {\n                    \"You have blocked your location. To use this, change your location settings in browser.\"\n                  }\n                </span>\n              )}\n              <div className=\"flex_row recent_search auto_loc\">\n                {props?.recentLocationData?.length > 0 && (\n                  <span className=\"sub_title\">{\"Recent searches\"}</span>\n                )}\n                {props?.recentLocationData?.map((item: any) => {\n                  return (\n                    item?.address?.length > 0 && (\n                      <div\n                        className=\"flex_col_sm_4\"\n                        onClick={() => {\n                          setAddressText(JSON.parse(item?.address)?.mainText);\n                          setSelectedAddress({\n                            lat: item?.location?.coordinates[1],\n                            lng: item?.location?.coordinates[0],\n                          });\n                          setSuggestion(JSON.parse(item?.address));\n                        }}\n                      >\n                        <div className=\"autosuggestion_icon card loc name\">\n                          <span>{JSON.parse(item?.address)?.mainText}</span>\n                          <span className=\"name\">\n                            {JSON.parse(item?.address)?.secondaryText}\n                          </span>\n                        </div>\n                      </div>\n                    )\n                  );\n                })}\n              </div>\n            </div>\n          ) : null}\n          <li\n            className={`date_box ${\n              calenderRange1?.startDate ? \"date_value\" : \"\"\n            }`}\n            style={{ display: \"block\" }}\n          >\n            <div\n              ref={calenderRef}\n              className=\"custom_date_range\"\n              id=\"date-range-div\"\n            >\n              <div className=\"text_field\">\n                <span className=\"detect_icon_ltr calendar\"></span>\n                <input\n                  type=\"text\"\n                  id=\"calender-input\"\n                  placeholder={checkPlaceholder(calenderRange1)}\n                  autoComplete=\"none\"\n                  onFocus={() => {\n                    setInputFocus3(true);\n                    setInputFocus1(false);\n                    setInputFocus2(false);\n                  }}\n                />\n                {calenderRange1?.startDate && inputFocus3 && (\n                  <span className=\"detect_icon\">\n                    <img\n                      src={cross}\n                      alt=\"cross\"\n                      onClick={() => {\n                        setCalenderRange1({\n                          startDate: \"\",\n                          endDate: \"\",\n                          key: \"selection1\",\n                        });\n                      }}\n                    />\n                  </span>\n                )}\n              </div>\n              {/* {inputFocus3 && */}\n              {inputFocus3 ? (\n                <div\n                  className=\"custom_autosuggestion\"\n                  id=\"custom-date-range-div\"\n                >\n                  <DateRange\n                    onChange={handleCalenderRange}\n                    ranges={\n                      !moment(calenderRange1?.startDate).isValid()\n                        ? [\n                            {\n                              startDate: new Date(),\n                              endDate: new Date(),\n                              key: \"selection1\",\n                            },\n                          ]\n                        : [calenderRange1]\n                    }\n                    moveRangeOnFirstSelection={false}\n                    rangeColors={[\"#fee600\", \"#b5b5b5\"]}\n                    showDateDisplay={false}\n                    showSelectionPreview={true}\n                    months={2}\n                    showPreview={true}\n                    minDate={new Date()}\n                    maxDate={moment().add(2, \"years\").toDate()}\n                    direction=\"horizontal\"\n                    fixedHeight={true}\n                  />\n                </div>\n              ) : null}\n            </div>\n          </li>\n          <div className=\"search_btn\">\n            <button\n              type=\"button\"\n              className=\"fill_btn btn-effect\"\n              onClick={bannerSearchClicked}\n            >\n              <img src={search} alt=\"search\" />\n            </button>\n          </div>\n        </ul>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    searchJobListData: state.homeSearch.searchJobListData,\n    recentSearchJobData: state.homeSearch.recentSearchJobData,\n    homeSearchJobData: state.homeSearch.homeSearchJobData,\n    tradeListData: state.auth.tradeListData,\n    localChanges: state.jobs.localChanges,\n    recentLocationData: state.homeSearch.recentLocationData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators(\n    {\n      getSearchJobList,\n      getRecentSearchList,\n      postHomeSearchData,\n      isHandleChanges,\n      getRecentLocationList,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BannerSearch);\n\n/**\n\n    No-result found conditions\n    </div> : !loading || addressText?.length > 2 && !suggestions?.length && !enableCurrentLocation && !Object.keys(selectedAddress).length ? (\n\n **/\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changeEmailModal/changeEmailModal.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/cancelJobs/cancelJob.tsx",["1188","1189","1190","1191"],"import { useState } from 'react';\nimport { tradieCancelJob } from '../../../../redux/jobs/actions';\n//@ts-ignore\nimport FsLightbox from 'fslightbox-react';\nimport { JobCancelReasons } from '../../../../utils/common';\nimport { moengage, mixPanel } from '../../../../services/analyticsTools';\nimport { MoEConstants } from '../../../../utils/constants';\n\n\ninterface PropTypes {\n    item: any,\n    history: any,\n    backTab: (data: string) => void,\n}\n\nconst LodgeDispute = (props: PropTypes) => {\n    const { item: { jobId, jobName }, history } = props;\n    const [stateData, setStateData] = useState({ reason: 0, detail: '', upload: [] });\n    const [errorData, setErrorData] = useState({ reason: '', detail: '', upload: '' });\n    const [filesUrl, setFilesUrl] = useState([] as any);\n    const [toggler, setToggler] = useState(false);\n    const [selectedSlide, setSelectSlide] = useState(1);\n\n\n    const { reason, detail } = stateData;\n\n    const isValid = ({ name, value, title }: any) => {\n        if (name === 'reason') {\n            return value === 0 ? `${title} is required.` : '';\n        }\n        return !value?.length ? `${title} is required.` : '';\n    }\n\n    const checkErrors = () => {\n        let error_1 = isValid({ name: 'reason', value: reason, title: 'Reason' });\n        if (!error_1?.length) {\n            return false;\n        }\n        return true;\n    }\n\n\n    const handleSubmit = async () => {\n        let data: any = {\n            jobId: jobId,\n            reason: reason,\n            note: detail,\n        }\n        if (!data.note) delete data.note;\n        let response: any = await tradieCancelJob(data);\n        if (response?.success) {\n            const mData = {\n                timeStamp: moengage.getCurrentTimeStamp(),\n            }\n            moengage.moE_SendEvent(MoEConstants.CANCEL_JOB, mData);\n            mixPanel.mixP_SendEvent(MoEConstants.CANCEL_JOB, mData);\n            history.push('/cancel-job-success');\n        }\n    }\n\n\n    const commonRenderValues = ({ id }: any) => {\n        return (\n            <div className=\"checkbox_wrap agree_check\">\n                <input\n                    value={reason}\n                    onClick={() => { setStateData((prev: any) => ({ ...prev, reason: id })) }}\n                    checked={reason === id}\n                    name=\"Reason\" className=\"filter-type filled-in\" type=\"checkbox\" id={`reason${id}`} />\n                <label htmlFor={`reason${id}`}>\n                    {JobCancelReasons(id)}\n                </label>\n            </div>\n        )\n    }\n\n    const renderFilteredItems = () => {\n        let sources: any = [];\n        let types: any = [];\n\n        if (filesUrl?.length) {\n            filesUrl.forEach((item: any) => {\n                if (item?.mediaType === 1) {\n                    sources.push(item.link);\n                    types.push('image');\n                }\n            })\n        }\n\n        return { sources, types };\n    }\n\n    const { sources, types } = renderFilteredItems();\n    return (\n        <div className=\"detail_col\">\n            <div className=\"flex_row\">\n                <div className=\"flex_col_sm_8\">\n                    <div className=\"relate\">\n                        <button\n                            onClick={() => { props.backTab('cancel') }}\n                            className=\"back\"></button>\n                        <span className=\"xs_sub_title\">\n                            {jobName || ''}\n                        </span>\n                    </div>\n\n                    <span className=\"sub_title\">\n                        {'Your reason for canceling job'}\n                    </span>\n                    <p className=\"commn_para\">\n                        {'Let the builder and Tickt know why you are cancelling the job.'}\n                    </p>\n\n                    <FsLightbox\n                        toggler={toggler}\n                        slide={selectedSlide}\n                        sources={sources}\n                        types={types}\n                    />\n\n                    <div className=\"reason_wrap\">\n                        <div className=\"f_spacebw\">\n                            {commonRenderValues({ id: 1 })}\n                            {commonRenderValues({ id: 2 })}\n                        </div>\n\n                        <div className=\"f_spacebw\">\n                            {commonRenderValues({ id: 3 })}\n                            {commonRenderValues({ id: 4 })}\n                        </div>\n\n                        <div className=\"f_spacebw\">\n                            {commonRenderValues({ id: 5 })}\n                        </div>\n                    </div>\n\n                </div>\n\n                <div className=\"flex_col_sm_9\">\n                    <div className=\"form_field\">\n                        <label className=\"form_label\">Add note (optional)</label>\n                        <div className=\"text_field\">\n                            <textarea\n                                value={detail}\n                                onChange={(e: any) => {\n                                    setStateData((prev: any) => ({ ...prev, detail: e.target.value }))\n                                }}\n                                placeholder=\"It’s really bad work, because...\"\n                                maxLength={1000}\n                            />\n                        </div>\n                        <span className=\"error_msg\">\n                            {errorData.detail}\n                        </span>\n                    </div>\n                    <button\n                        onClick={handleSubmit}\n                        className={`fill_btn full_btn btn-effect ${checkErrors() ? 'disable_btn' : ''}`}>\n                        {'Send'}\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LodgeDispute;","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/lodgeDispute/lodgeDispute.tsx",["1192","1193"],"import React, { useState } from \"react\";\nimport { onFileUpload } from \"../../../../redux/auth/actions\";\nimport { setShowToast } from \"../../../../redux/common/actions\";\nimport { tradielodgeDispute } from \"../../../../redux/jobs/actions\";\n//@ts-ignore\nimport FsLightbox from \"fslightbox-react\";\n\nimport addMedia from \"../../../../assets/images/add-image.png\";\nimport close from \"../../../../assets/images/icon-close-1.png\";\n\nimport { JobLodgeReasons } from \"../../../../utils/common\";\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\ninterface PropTypes {\n  item: any;\n  history: any;\n  backTab: (data: string) => void;\n}\n\nconst LodgeDispute = (props: PropTypes) => {\n  const {\n    item: { jobId, jobName },\n    history,\n  } = props;\n  const [stateData, setStateData] = useState({\n    reason: 0,\n    detail: \"\",\n    upload: [],\n  });\n  const [errorData, setErrorData] = useState({\n    reason: \"\",\n    detail: \"\",\n    upload: \"\",\n  });\n  const [filesUrl, setFilesUrl] = useState([] as any);\n  const [localFiles, setLocalFiles] = useState({});\n\n  const [update, forceUpdate] = useState({});\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n\n  const { reason, detail } = stateData;\n\n  const isValid = ({ name, value, title }: any) => {\n    if (name === \"reason\") {\n      return value === 0 ? `${title} is required.` : \"\";\n    }\n    return !value?.length ? `${title} is required.` : \"\";\n  };\n\n  const checkErrors = () => {\n    let error_1 = isValid({ name: \"reason\", value: reason, title: \"Reason\" });\n\n    if (!error_1?.length) {\n      return false;\n    }\n    return true;\n  };\n\n  // useEffect(() => {\n  //     setErrorData((prev: any) => ({\n  //         ...prev,\n  //         detail: stateData?.detail?.length > 1000 ? 'Maximum 1000 characters are allowed.' : ''\n  //     }))\n  // }, [stateData]);\n\n  const removeFromItem = (index: any) => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async (e: any) => {\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    if (filesUrl?.length === 6) {\n      setShowToast(true, \"Max files upload limit is 6\");\n      return;\n    }\n\n    var fileType = newFile?.type?.split(\"/\")[1]?.toLowerCase();\n    var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n    if (imageFormats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    formData.append(\"file\", newFile);\n    const res = await onFileUpload(formData);\n    if (res.success) {\n      let link: string = res.imgUrl;\n      let check_type: any = 1;\n      setFilesUrl((prev: Array<any>) => [\n        ...prev,\n        {\n          mediaType: check_type,\n          link: link,\n        },\n      ]);\n      setLocalFiles((prev: any) => ({\n        ...prev,\n        [filesUrl?.length]: URL.createObjectURL(newFile),\n      }));\n    }\n  };\n\n  const setItemToggle = (index: any) => {\n    setToggler((prev: boolean) => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item: any, index: any) => {\n    let split_item_format = item.split(\".\");\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n    let split_item_name = item.split(\"/\");\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render: any = null;\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = (\n          <img\n            onClick={() => {\n              setItemToggle(index);\n            }}\n            title={get_split_name}\n            src={item}\n            alt=\"media\"\n          />\n        );\n      }\n      return (\n        <figure className=\"img_video\">\n          {image_render}\n          <img\n            onClick={() => {\n              removeFromItem(index);\n            }}\n            src={close}\n            alt=\"remove\"\n            className=\"remove\"\n          />\n          {/* <span style={{ fontSize: '10px' }}>{get_split_name}</span> */}\n        </figure>\n      );\n    }\n  };\n\n  const handleSubmit = async () => {\n    let data: any = {\n      jobId: jobId,\n      reason: reason,\n      details: detail.trim(),\n      photos: filesUrl,\n    };\n    if (!data.details) delete data.details;\n    if (!data.photos?.length) delete data.photos;\n\n    let response: any = await tradielodgeDispute(data);\n    if (response?.success) {\n      history.push(\"/lodge-success\");\n    }\n  };\n\n  const commonRenderValues = ({ id }: any) => {\n    return (\n      <div className=\"checkbox_wrap agree_check\">\n        <input\n          value={reason}\n          onClick={() => {\n            setStateData((prev: any) => ({ ...prev, reason: id }));\n          }}\n          checked={reason === id}\n          name=\"Reason\"\n          className=\"filter-type filled-in\"\n          type=\"checkbox\"\n          id={`reason${id}`}\n        />\n        <label htmlFor={`reason${id}`}>{JobLodgeReasons(id)}</label>\n      </div>\n    );\n  };\n\n  const renderFilteredItems = () => {\n    let sources: any = [];\n    let types: any = [];\n\n    if (filesUrl?.length) {\n      filesUrl.forEach((item: any) => {\n        if (item?.mediaType === 1) {\n          sources.push(item.link);\n          types.push(\"image\");\n        }\n      });\n    }\n\n    return { sources, types };\n  };\n\n  const { sources, types } = renderFilteredItems();\n  return (\n    <div className=\"detail_col\">\n      <div className=\"flex_row\">\n        <div className=\"flex_col_sm_8\">\n          <div className=\"relate\">\n            <button\n              onClick={() => {\n                props.backTab(\"lodge\");\n              }}\n              className=\"back\"\n            ></button>\n            <span className=\"xs_sub_title\">{jobName || \"\"}</span>\n          </div>\n          <span className=\"sub_title\">Lodge dispute</span>\n          <p className=\"commn_para\">Enter reason text</p>\n\n          <FsLightbox\n            toggler={toggler}\n            slide={selectedSlide}\n            sources={sources}\n            types={types}\n          />\n\n          <div className=\"reason_wrap\">\n            <div className=\"f_spacebw\">\n              {commonRenderValues({ id: 1 })}\n              {commonRenderValues({ id: 2 })}\n            </div>\n\n            <div className=\"f_spacebw\">\n              {commonRenderValues({ id: 3 })}\n              {commonRenderValues({ id: 4 })}\n            </div>\n\n            <div className=\"f_spacebw\">\n              {commonRenderValues({ id: 5 })}\n              {commonRenderValues({ id: 6 })}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex_col_sm_9\">\n          <div className=\"form_field\">\n            <label className=\"form_label\">Details (optional)</label>\n            <div className=\"text_field\">\n              <textarea\n                value={detail}\n                onChange={(e: any) => {\n                  setStateData((prev: any) => ({\n                    ...prev,\n                    detail: e.target.value,\n                  }));\n                }}\n                placeholder=\"It’s really bad work, because...\"\n                maxLength={1000}\n              />\n            </div>\n            <span className=\"error_msg\">{errorData.detail}</span>\n          </div>\n        </div>\n        <div className=\"flex_col_sm_12\">\n          <div className=\"upload_img_video\">\n            {filesUrl?.length\n              ? filesUrl.map((item: any, index: number) =>\n                  renderbyFileFormat(item.link, index)\n                )\n              : null}\n\n            {filesUrl?.length < 6 ? (\n              <React.Fragment>\n                <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                  <img src={addMedia} alt=\"\" />\n                </label>\n                <input\n                  onChange={onFileChange}\n                  type=\"file\"\n                  accept=\"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"\n                  style={{ display: \"none\" }}\n                  id=\"upload_img_video\"\n                />\n              </React.Fragment>\n            ) : null}\n          </div>\n          <button\n            onClick={handleSubmit}\n            className={`fill_btn full_btn btn-effect ${\n              checkErrors() ? \"disable_btn\" : \"\"\n            }`}\n          >\n            {\"Send\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LodgeDispute;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/seeDetails.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/editMilestones/index.tsx",["1194"],"import React, { useState, useEffect } from \"react\";\n// @ts-ignore\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n  DropResult,\n} from \"react-beautiful-dnd\";\nimport { renderTimeWithCustomFormat } from \"../../../../utils/common\";\nimport milestonesPlaceholder from \"../../../../assets/images/Job milestones-preview.png\";\nimport moment from \"moment\";\nimport { setShowToast } from \"../../../../redux/common/actions\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { moengage, mixPanel } from \"../../../../services/analyticsTools\";\nimport { MoEConstants } from \"../../../../utils/constants\";\nimport { changeRequest } from \"../../../../redux/jobs/actions\";\n\nimport AddEditMile from \"./addEditMile\";\n\nimport { withRouter } from \"react-router-dom\";\n\nconst EditMilestone = (props: any) => {\n  const {\n    item,\n    item: { jobName },\n    details: { milestones },\n  } = props;\n  const jobDetail: any = Object.freeze(props?.details);\n  const [stateData, setStateData] = useState<any>([]);\n  const [stateItems, setItems] = useState<any>([]);\n  const [editItem, setEditItems] = useState<{ [index: string]: any }>({});\n  const [itemData, setItemData] = useState({\n    add: false,\n    edit: false,\n    editId: \"\",\n    deleteId: \"\",\n  });\n  const [sortedItems, setSortedItems] = React.useState([]);\n  const [toggleItem, setToggleItem] = useState(false);\n\n  const [description, setDescription] = useState<any>([]);\n\n  useEffect(() => {\n    if (!stateData?.length) {\n      let filtered = milestones.map((item: any, index: any) => {\n        item[\"count\"] = index + 1;\n        return item;\n      });\n      setStateData(filtered);\n      setItems(filtered);\n    }\n  }, []);\n\n  const reorder = (list: Array<any>, source: any, destination: any) => {\n    let startIndex = source.index;\n    let endIndex = destination.index;\n\n    let findItem = list.find((index: any) => index === endIndex);\n    console.log({ findItem, list, destination, endIndex });\n    if (findItem) {\n      if ([1, 2].includes(findItem.status)) {\n        return list;\n      }\n    }\n\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    console.log({ result });\n    setDescription((prev: any) => [...prev, ...[\"Milestones are rearranged.\"]]);\n    return result;\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    // if (source.droppableId === destination.droppableId) {\n    const reOrderItems = reorder(stateItems, source, destination);\n    setItems((prev: any) => reOrderItems);\n  };\n\n  const checkIfValidDates = (item: any) => {\n    let isfilter = stateItems.filter((item_: any) => {\n      if (item_.hasOwnProperty(\"fromDate\")) {\n        if (moment(item_?.fromDate).isValid()) {\n          item_[\"fromDate\"] = moment(item_.fromDate).startOf(\"day\").toDate();\n          item_[\"toDate\"] =\n            item_.toDate === \"\"\n              ? moment(item_.fromDate).startOf(\"day\").toDate()\n              : moment(item_.toDate).startOf(\"day\").toDate();\n          return item_;\n        }\n      }\n    });\n\n    if (!isfilter?.length) {\n      return true;\n    } else {\n      const newarr: any = isfilter.sort((a: any, b: any) => {\n        let start_a = a.fromDate;\n        let end_a = a.toDate;\n\n        let start_b = b.fromDate;\n        let end_b = b.toDate;\n\n        if (start_a === start_b) {\n          return end_a - end_b;\n        }\n        return start_a - start_b;\n      });\n\n      let filteredItem: any = item.filter((item_reorder: any) => {\n        if (item_reorder.hasOwnProperty(\"fromDate\")) {\n          if (moment(item_reorder?.fromDate).isValid()) {\n            return item_reorder;\n          }\n        }\n      });\n      setSortedItems(newarr);\n      console.log({ newarr, filteredItem });\n      return JSON.stringify(newarr) === JSON.stringify(filteredItem);\n    }\n  };\n\n  const checkIfDatesValid = () => {\n    let data = item;\n\n    let start_selection: any = data?.fromDate;\n    let end_selection: any = null;\n    if (moment(data?.toDate).isValid()) {\n      if (!moment(data?.toDate).isSame(moment(data?.fromDate))) {\n        end_selection = data?.toDate;\n      }\n    }\n\n    let item_find: any = false;\n    let filteredItem = stateItems;\n\n    if (filteredItem?.length) {\n      filteredItem.forEach((item_date: any) => {\n        if (item_date.fromDate) {\n          let start: any = moment(item_date.fromDate).isValid()\n            ? item_date.fromDate\n            : null;\n          let end: any = moment(item_date.toDate).isValid()\n            ? item_date.toDate\n            : null;\n\n          if (start && !end) {\n            if (moment(start_selection).isAfter(moment(start))) {\n              item_find = true; // true;\n            }\n          }\n\n          if (start_selection && end_selection && !end) {\n            if (\n              moment(start).isSameOrAfter(moment(start_selection)) &&\n              moment(start).isSameOrBefore(moment(end_selection))\n            ) {\n              item_find = false;\n            } else {\n              item_find = true;\n            }\n          }\n        }\n      });\n    }\n\n    if (item_find) {\n      setShowToast(true, \"Please check the milestone dates\");\n      return item_find;\n    }\n\n    return item_find;\n  };\n\n  const checkOnClick = (e: any, index: any) => {\n    let edit_item_clone: any = editItem;\n    edit_item_clone[index] = e.target.checked;\n    setEditItems((prev) => ({ ...prev, ...edit_item_clone }));\n  };\n\n  const resetItems = () => {\n    setItemData((prev: any) => ({\n      ...prev,\n      add: false,\n      edit: false,\n      editId: \"\",\n      deleteId: \"\",\n    }));\n    setEditItems({});\n  };\n\n  const addNewMile = (item: any) => {\n    let state_data: any = stateItems;\n    if (itemData?.edit) {\n      // edit\n      let index = parseInt(itemData.editId);\n      let prev_count = null;\n\n      if (state_data?.length > 1 && index > 0) {\n        prev_count = state_data[index - 1].count + 1;\n      } else {\n        prev_count = state_data[index].count;\n      }\n\n      console.log({ item, prev_count }, \"---->\");\n      state_data[itemData.editId][\"isPhotoevidence\"] = item.isPhotoevidence;\n      state_data[itemData.editId][\"milestoneName\"] = item.milestoneName;\n      state_data[itemData.editId][\"recommendedHours\"] = item.recommendedHours;\n      state_data[itemData.editId][\"description\"] = item.description;\n      state_data[itemData.editId][\"status\"] = item.status;\n      state_data[itemData.editId][\"order\"] = item.order;\n\n      state_data[index][\"count\"] = prev_count;\n\n      state_data[index][\"fromDate\"] = moment(item.fromDate).isValid()\n        ? moment(item.fromDate).toISOString()\n        : \"\";\n      state_data[index][\"toDate\"] = moment(item.toDate).isValid()\n        ? moment(item.toDate).toISOString()\n        : \"\";\n      // setStateData(state_data);\n      setItems(state_data);\n    } else {\n      item[\"count\"] = state_data?.length + 1;\n      setItems((prev: any) => [...prev, item]);\n      // setStateData((prev: any) => ([...prev, item]));\n    }\n  };\n\n  if (itemData?.add || itemData?.edit) {\n    let filtered = stateData.filter((item: any) => {\n      if (!item?.isDeleteRequest) {\n        return item;\n      }\n    });\n    return (\n      <AddEditMile\n        item={item}\n        milestones={stateItems}\n        // filtered={filtered}\n        jobDetail={jobDetail}\n        isSame={JSON.stringify(filtered) === JSON.stringify(stateData)}\n        editMile={itemData.editId}\n        addNewMile={addNewMile}\n        resetItems={resetItems}\n      />\n    );\n  }\n\n  const removeMilestoneByIndex = (index: any) => {\n    let state_data: any = stateItems;\n    state_data[index][\"isDeleteRequest\"] = true;\n    let count = 0;\n    if (state_data?.length) {\n      let filtered = state_data.map((item: any) => {\n        if (!item?.isDeleteRequest) {\n          count++;\n          item[\"count\"] = count;\n        }\n        return item;\n      });\n      setStateData(filtered.concat(stateItems));\n\n      let Items = filtered.filter((item: any) => {\n        if (!item?.isDeleteRequest) {\n          return item;\n        }\n      });\n\n      resetItems();\n      // removed length check to update the items.\n      // if (Items?.length) {\n      setItems(Items);\n      // }\n    }\n  };\n\n  const checkIfChange = () => {\n    let isTrue = true;\n    if (!stateItems?.length) {\n      isTrue = false;\n    } else {\n      stateItems?.forEach((dt: any) => {\n        if (dt?.description?.length) {\n          isTrue = false;\n        }\n      });\n\n      stateData?.forEach((dt: any) => {\n        if (dt?.isDeleteRequest) {\n          isTrue = false;\n        }\n      });\n    }\n    return isTrue;\n  };\n\n  const submitData = async () => {\n    let description_string = description;\n\n    let deletedItems: any = [];\n    let uniqueValues: any = {};\n    stateData.forEach((item: any) => {\n      if (item?.isDeleteRequest) {\n        if (item?.milestoneId) {\n          if (uniqueValues[item?.milestoneId] == undefined) {\n            uniqueValues[item?.milestoneId] = 1;\n            deletedItems.push(item);\n          }\n        }\n        //  else {\n        //     deletedItems.push(item);\n        // }\n      }\n    });\n\n    let filteredItems: any = deletedItems.concat(stateItems);\n\n    console.log({\n      deletedItems,\n      filteredItems,\n    });\n\n    let filtered = filteredItems\n      .map((item: any, index: any) => {\n        let data: any = {\n          milestoneId: item?.milestoneId || \"\",\n          milestone_name: item?.milestoneName,\n          isPhotoevidence: item?.isPhotoevidence,\n          from_date: moment(item?.fromDate).isValid()\n            ? moment(item?.fromDate).format(\"YYYY-MM-DD\")\n            : \"\",\n          to_date: moment(item?.toDate).isValid()\n            ? moment(item?.toDate).format(\"YYYY-MM-DD\")\n            : \"\",\n          recommended_hours: item?.recommendedHours,\n          description: item?.description,\n          status: item?.status,\n        };\n\n        if (item.description?.length) {\n          description_string.push(item.description);\n        }\n\n        if (!data?.to_date?.length) {\n          delete data.to_date;\n        }\n\n        if (item?.isDeleteRequest && item?.status > -1) {\n          data[\"isDeleteRequest\"] = true;\n          data[\"description\"] = `${item?.milestoneName} was deleted.`;\n          description_string.push(`${item?.milestoneName} was deleted.`);\n        }\n\n        if (!item?.milestoneId) {\n          delete data.milestoneId;\n        }\n        data[\"order\"] = index + 1;\n        return data;\n      })\n      .filter((item: any) => {\n        if (![1, 2, 3].includes(item?.status)) {\n          delete item.status;\n\n          if (item?.description?.length) {\n            delete item.description;\n          }\n\n          return item;\n        }\n      });\n\n    let data = {\n      jobId: item.jobId,\n      tradieId: props?.details?.tradieId,\n      milestones: filtered,\n      description: Array.from(new Set(description_string)),\n    };\n\n    console.log({ data });\n\n    let response: any = await changeRequest(data);\n    if (response?.success) {\n      moengage.moE_SendEvent(MoEConstants.EDIT_MILESTONES, {\n        timeStamp: moengage.getCurrentTimeStamp(),\n      });\n      mixPanel.mixP_SendEvent(MoEConstants.EDIT_MILESTONES, {\n        timeStamp: moengage.getCurrentTimeStamp(),\n      });\n      props.history.push(\"/milestone-request-sent-success\");\n    }\n  };\n\n  const renderTimeIfExist = (fromDate: string, toDate: string) => {\n    const time = renderTimeWithCustomFormat(\n      fromDate,\n      moment(fromDate).isSame(moment(toDate)) ? \"\" : toDate,\n      \"\",\n      [\"DD MMM\", \"DD MMM YY\"]\n    );\n    return time === \"Choose\" ? \"\" : time;\n  };\n\n  const customRenderElements = ({\n    milestoneName,\n    isPhotoevidence,\n    recommendedHours,\n    fromDate,\n    toDate,\n    status,\n    index,\n    custom_index,\n  }: any) => {\n    console.log({\n      index,\n      custom_index,\n    });\n    return (\n      <Draggable\n        key={`${index}-${milestoneName}`}\n        draggableId={`${milestoneName}-${index}`}\n        index={index}\n        isDragDisabled={![0, 4, 5, -1].includes(status) ? true : false}\n      >\n        {(provided: any) => (\n          <li\n            key={index}\n            className={\n              ![0, 4, 5, -1].includes(status) ? \"disable_milstone\" : \"\"\n            }\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            style={{\n              ...provided.draggableProps.style,\n            }}\n          >\n            {editItem[index] ? (\n              <div className=\"edit_delete\">\n                <span\n                  onClick={(e) => {\n                    e.preventDefault();\n                    console.log({ index });\n                    setItemData((prev: any) => ({\n                      ...prev,\n                      edit: true,\n                      editId: index,\n                      deleteId: \"\",\n                    }));\n                  }}\n                  className=\"edit\"\n                ></span>\n                <span\n                  onClick={(e) => {\n                    e.preventDefault();\n                    setItemData((prev: any) => ({\n                      ...prev,\n                      editId: \"\",\n                      deleteId: index,\n                    }));\n                  }}\n                  className=\"delete\"\n                ></span>\n              </div>\n            ) : (\n              \"\"\n            )}\n            <div className=\"checkbox_wrap agree_check\">\n              <input\n                checked={editItem[index]}\n                onClick={(e: any) => {\n                  if ([0, 4, 5, -1].includes(status)) {\n                    checkOnClick(e, index);\n                  } else {\n                    e.preventDefault();\n                  }\n                }}\n                className=\"filter-type filled-in\"\n                type=\"checkbox\"\n                id={`milestone${index}`}\n              />\n              {console.log({\n                custom_index,\n                index,\n              })}\n              <label\n                htmlFor={`milestone${index}`}\n              >{`${custom_index}. ${milestoneName}`}</label>\n              <div className=\"info\">\n                {isPhotoevidence ? (\n                  <span>{\"Photo evidence required\"}</span>\n                ) : (\n                  <span></span>\n                )}\n                <span>{renderTimeIfExist(fromDate, toDate)}</span>\n                <span>{recommendedHours}</span>\n              </div>\n            </div>\n          </li>\n        )}\n      </Draggable>\n    );\n  };\n\n  const stateItemsEdit = stateItems.filter(\n    (item: any) => item?.isDeleteRequest == false\n  );\n  return (\n    <React.Fragment>\n      <Dialog\n        open={toggleItem}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\" className=\"xs_alert_dialog_title\">\n          {\"Heads Up\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {\"If you go back, you will lose all your changes.\"}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              setToggleItem((prev: any) => !prev);\n            }}\n            color=\"primary\"\n          >\n            {\"Yes\"}\n          </Button>\n          <Button\n            onClick={() => {\n              setToggleItem((prev: any) => !prev);\n              props.backTab(\"edit\");\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            {\"No\"}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        open={itemData?.deleteId !== \"\" ? true : false}\n        onClose={resetItems}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Are you sure you want to delete the milestone ?\"}\n        </DialogTitle>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              removeMilestoneByIndex(itemData?.deleteId);\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            {\"Yes\"}\n          </Button>\n          <Button\n            onClick={() => {\n              resetItems();\n            }}\n            color=\"primary\"\n          >\n            {\"No\"}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div className=\"flex_row\">\n        <div className=\"flex_col_sm_8\">\n          <div className=\"relate\">\n            <button\n              onClick={() => {\n                if (checkIfChange()) {\n                  setToggleItem((prev: any) => !prev);\n                  return;\n                }\n                props.backTab(\"edit\");\n              }}\n              className=\"back\"\n            ></button>\n            <span className=\"xs_sub_title\">{jobName || \"\"}</span>\n          </div>\n          <span className=\"sub_title\">{\"Change Request\"}</span>\n          <p className=\"commn_para\">\n            {\n              \"You can add/remove/change a milestones here. The changes will be sent to the tradesperson to accept before being implemented\"\n            }\n          </p>\n        </div>\n      </div>\n      {console.log({ stateItems, stateItemsEdit })}\n      <div className=\"flex_row\">\n        <div className=\"flex_col_sm_7\">\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"milestones\">\n              {(provided, snapshot) => (\n                <ul\n                  ref={provided.innerRef}\n                  className={`milestones${\n                    snapshot.isDraggingOver ? \" dragging-over\" : \"\"\n                  }`}\n                >\n                  {stateItems?.length > 0 &&\n                    stateItems.map(\n                      (\n                        {\n                          milestoneName,\n                          isPhotoevidence,\n                          recommendedHours,\n                          isDeleteRequest,\n                          fromDate,\n                          toDate,\n                          status,\n                          count,\n                        }: {\n                          milestoneName: string;\n                          isPhotoevidence: boolean;\n                          fromDate: string;\n                          toDate: string;\n                          status: number;\n                          recommendedHours: any;\n                          isDeleteRequest?: boolean;\n                          count?: any;\n                        },\n                        index: any\n                      ) =>\n                        !!isDeleteRequest == false &&\n                        customRenderElements({\n                          milestoneName,\n                          isPhotoevidence,\n                          recommendedHours,\n                          isDeleteRequest,\n                          fromDate,\n                          toDate,\n                          status,\n                          index,\n                          custom_index: count,\n                        })\n                    )}\n                  {provided.placeholder}\n                  {stateItems?.length === 0 && (\n                    <figure className=\"placeholder_img\">\n                      <img\n                        src={milestonesPlaceholder}\n                        alt=\"milestones-placeholder\"\n                      />\n                    </figure>\n                  )}\n                </ul>\n              )}\n            </Droppable>\n          </DragDropContext>\n          {!stateItems?.length ? (\n            <>\n              <div className=\"form_field\">\n                <button\n                  className=\"fill_btn full_btn btn-effect\"\n                  onClick={() => {\n                    setItemData({\n                      add: true,\n                      editId: \"\",\n                      edit: false,\n                      deleteId: \"\",\n                    });\n                  }}\n                >\n                  {\"+ Add milestone\"}\n                </button>\n              </div>\n            </>\n          ) : (\n            <React.Fragment>\n              <div className=\"form_field\">\n                <button\n                  className=\"fill_btn fill_grey_btn full_btn btn-effect\"\n                  onClick={() => {\n                    setItemData({\n                      add: true,\n                      editId: \"\",\n                      edit: false,\n                      deleteId: \"\",\n                    });\n                  }}\n                >\n                  {\"+ Add milestone\"}\n                </button>\n              </div>\n\n              <div className=\"form_field\">\n                <button\n                  onClick={() => {\n                    let checkIfItem: boolean = checkIfDatesValid();\n                    console.log({ checkIfItem });\n                    if (!checkIfItem) {\n                      let check: boolean = checkIfValidDates(stateItems);\n                      console.log({ check });\n                      if (check) {\n                        submitData();\n                      } else {\n                        setShowToast(\n                          true,\n                          \"Please arrange milestone date wise\"\n                        );\n                      }\n                    }\n                  }}\n                  className={`fill_btn full_btn btn-effect ${\n                    checkIfChange() ? \"disable_btn\" : \"\"\n                  }`}\n                >\n                  {\"Send to tradesperson\"}\n                </button>\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(EditMilestone);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/lodgeDispute/lodgeDispute.tsx",["1195"],"import React, { useState, useEffect } from \"react\";\nimport close from \"../../../../assets/images/icon-close-1.png\";\nimport addMedia from \"../../../../assets/images/add-image.png\";\n\nimport { onFileUpload } from \"../../../../redux/auth/actions\";\nimport { setShowToast, setLoading } from \"../../../../redux/common/actions\";\n\nimport { withRouter } from \"react-router-dom\";\n\n//@ts-ignore\nimport FsLightbox from \"fslightbox-react\";\n\nimport { lodgeDispute } from \"../../../../redux/jobs/actions\";\n\nimport { JobLodgeReasons } from \"../../../../utils/common\";\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\n\nconst LodgeDispute = (props: any) => {\n  let jobId = props?.item?.jobId;\n  let jobName = props?.item?.jobName;\n  let history = props?.history;\n  const [stateData, setStateData] = useState({\n    reason: 0,\n    detail: \"\",\n    upload: [],\n  });\n  const [errorData, setErrorData] = useState({\n    reason: \"\",\n    detail: \"\",\n    upload: \"\",\n  });\n  const [filesUrl, setFilesUrl] = useState([] as any);\n  const [localFiles, setLocalFiles] = useState({});\n\n  const [update, forceUpdate] = useState({});\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n\n  const [isItemsLoad, setLoadItems] = useState({});\n\n  const { reason, detail } = stateData;\n\n  const isValid = ({ name, value, title }: any) => {\n    if (name === \"reason\") {\n      return value === 0 ? `${title} is required.` : \"\";\n    }\n    return !value?.length ? `${title} is required.` : \"\";\n  };\n\n  const checkErrors = () => {\n    let error_1 = isValid({ name: \"reason\", value: reason, title: \"Reason\" });\n\n    if (!error_1?.length) {\n      return false;\n    }\n    return true;\n  };\n\n  useEffect(() => {\n    setErrorData((prev: any) => ({\n      ...prev,\n      detail:\n        stateData?.detail?.length > 1000\n          ? \"Maximum 1000 characters are allowed.\"\n          : \"\",\n    }));\n  }, [stateData]);\n\n  useEffect(() => {\n    let IsRenderValues = null;\n    if (Object.values(isItemsLoad)?.length) {\n      IsRenderValues =\n        Array.isArray(Object.values(isItemsLoad)) &&\n        Object.values(isItemsLoad)[0] === true\n          ? Object.values(isItemsLoad)[0]\n          : false;\n    }\n\n    if (IsRenderValues === false) {\n      setLoading(true);\n    }\n\n    if (IsRenderValues === true) {\n      setLoading(false);\n    }\n  }, [isItemsLoad]);\n\n  const removeFromItem = (index: any) => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async (e: any) => {\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    if (filesUrl?.length === 6) {\n      setShowToast(true, \"Max files upload limit is 6\");\n      return;\n    }\n\n    var fileType = newFile?.type?.split(\"/\")[1]?.toLowerCase();\n    var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n    if (imageFormats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    formData.append(\"file\", newFile);\n    setLoadItems({});\n    const res = await onFileUpload(formData);\n    if (res.success) {\n      let link: string = res.imgUrl;\n      let check_type: any = 1;\n      setFilesUrl((prev: Array<any>) => [\n        ...prev,\n        {\n          mediaType: check_type,\n          link: link,\n        },\n      ]);\n      setLoadItems((prev: any) => ({\n        [filesUrl.length - 1]: false,\n      }));\n      setLocalFiles((prev: any) => ({\n        ...prev,\n        [filesUrl?.length]: URL.createObjectURL(newFile),\n      }));\n    }\n  };\n\n  const setItemToggle = (index: any) => {\n    setToggler((prev: boolean) => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item: any, index: any) => {\n    let split_item_format = item.split(\".\");\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n    let split_item_name = item.split(\"/\");\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render: any = null;\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = (\n          <img\n            onClick={() => {\n              setItemToggle(index);\n            }}\n            title={get_split_name}\n            src={item}\n            alt=\"media\"\n            onLoad={() => {\n              setLoadItems((prev: any) => ({\n                [index]: true,\n              }));\n            }}\n          />\n        );\n      }\n      return (\n        <figure className=\"img_video\">\n          {image_render}\n          <img\n            onClick={() => {\n              removeFromItem(index);\n            }}\n            src={close}\n            alt=\"remove\"\n            className=\"remove\"\n          />\n        </figure>\n      );\n    }\n  };\n\n  const handleSubmit = async () => {\n    let data: any = {\n      jobId: jobId,\n      reason: reason,\n    };\n\n    if (filesUrl?.length) {\n      data[\"photos\"] = filesUrl;\n    }\n\n    if (detail?.length) {\n      data[\"details\"] = detail;\n    }\n\n    let response: any = await lodgeDispute(data);\n\n    if (response?.success) {\n      history.push(\"/lodge-success\");\n    }\n  };\n\n  const renderTypes = ({ id }: any) => {\n    return (\n      <div className=\"checkbox_wrap agree_check\">\n        <input\n          value={reason}\n          onClick={() => {\n            setStateData((prev: any) => ({ ...prev, reason: id }));\n          }}\n          checked={reason === id}\n          name=\"Reason\"\n          className=\"filter-type filled-in\"\n          type=\"checkbox\"\n          id={`reason${id}`}\n        />\n        <label htmlFor={`reason${id}`}>{JobLodgeReasons(id, true)}</label>\n      </div>\n    );\n  };\n\n  const renderFilteredItems = () => {\n    let sources: any = [];\n    let types: any = [];\n\n    if (filesUrl?.length) {\n      filesUrl.forEach((item: any) => {\n        if (item?.mediaType === 1) {\n          sources.push(item.link);\n          types.push(\"image\");\n        }\n      });\n    }\n\n    return { sources, types };\n  };\n\n  const { sources, types } = renderFilteredItems();\n\n  return (\n    <div className=\"flex_row\">\n      <div className=\"flex_col_sm_8\">\n        <div className=\"relate\">\n          <button\n            onClick={() => {\n              props.backTab(\"lodge\");\n            }}\n            className=\"back\"\n          ></button>\n          <span className=\"xs_sub_title\">{jobName || \"\"}</span>\n        </div>\n        <span className=\"sub_title\">Lodge dispute</span>\n        <p className=\"commn_para\">Enter reason text</p>\n\n        <FsLightbox\n          toggler={toggler}\n          slide={selectedSlide}\n          sources={sources}\n          types={types}\n        />\n\n        <div className=\"reason_wrap\">\n          <div className=\"f_spacebw\">\n            {renderTypes({ id: 1 })}\n            {renderTypes({ id: 2 })}\n          </div>\n\n          <div className=\"f_spacebw\">\n            {renderTypes({ id: 3 })}\n            {renderTypes({ id: 4 })}\n          </div>\n\n          <div className=\"f_spacebw\">\n            {renderTypes({ id: 5 })}\n            {renderTypes({ id: 6 })}\n          </div>\n\n          <div className=\"f_spacebw\">{renderTypes({ id: 7 })}</div>\n        </div>\n      </div>\n\n      <div className=\"flex_col_sm_9\">\n        <div className=\"form_field\">\n          <label className=\"form_label\">Details (optional)</label>\n          <div className=\"text_field\">\n            <textarea\n              value={detail}\n              onChange={(e: any) => {\n                setStateData((prev: any) => ({\n                  ...prev,\n                  detail: e.target.value.trimLeft(),\n                }));\n              }}\n              placeholder=\"It’s really bad work, because...\"\n            ></textarea>\n          </div>\n          <span className=\"error_msg\">{errorData.detail}</span>\n        </div>\n      </div>\n      <div className=\"flex_col_sm_12\">\n        <div className=\"upload_img_video\">\n          {filesUrl?.length\n            ? filesUrl.map((item: any, index: number) =>\n                renderbyFileFormat(item.link, index)\n              )\n            : null}\n\n          {filesUrl?.length < 6 ? (\n            <React.Fragment>\n              <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                <img src={addMedia} alt=\"\" />\n              </label>\n              <input\n                onChange={onFileChange}\n                type=\"file\"\n                accept=\"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"\n                style={{ display: \"none\" }}\n                id=\"upload_img_video\"\n              />\n            </React.Fragment>\n          ) : null}\n        </div>\n        <button\n          onClick={handleSubmit}\n          className={`fill_btn full_btn btn-effect ${\n            checkErrors() ? \"disable_btn\" : \"\"\n          }`}\n        >\n          {\"Send\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(LodgeDispute);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/cancelJobs/cancelJob.tsx",["1196","1197","1198"],"import React, { useState, useEffect } from \"react\";\nimport close from \"../../../../assets/images/icon-close-1.png\";\n\nimport { onFileUpload } from \"../../../../redux/auth/actions\";\nimport { setShowToast } from \"../../../../redux/common/actions\";\n\nimport { withRouter } from \"react-router-dom\";\n\n//@ts-ignore\nimport FsLightbox from \"fslightbox-react\";\nimport { CancelJob } from \"../../../../redux/jobs/actions\";\nimport { JobCancelReasons } from \"../../../../utils/common\";\nimport { moengage, mixPanel } from \"../../../../services/analyticsTools\";\nimport { MoEConstants } from \"../../../../utils/constants\";\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\n\nconst LodgeDispute = (props: any) => {\n  const {\n    item: { jobId, jobName },\n    history,\n  } = props;\n  const [stateData, setStateData] = useState({\n    reason: 0,\n    detail: \"\",\n    upload: [],\n  });\n  const [errorData, setErrorData] = useState({\n    reason: \"\",\n    detail: \"\",\n    upload: \"\",\n  });\n  const [filesUrl, setFilesUrl] = useState([] as any);\n  const [localFiles, setLocalFiles] = useState({});\n\n  const [update, forceUpdate] = useState({});\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n\n  const { reason, detail } = stateData;\n\n  const isValid = ({ name, value, title }: any) => {\n    if (name === \"reason\") {\n      return value === 0 ? `${title} is required.` : \"\";\n    }\n    return !value?.length ? `${title} is required.` : \"\";\n  };\n\n  const checkErrors = () => {\n    let error_1 = isValid({ name: \"reason\", value: reason, title: \"Reason\" });\n    if (!error_1?.length) {\n      return false;\n    }\n    return true;\n  };\n\n  useEffect(() => {\n    setErrorData((prev: any) => ({\n      ...prev,\n      detail:\n        stateData?.detail?.length > 1000\n          ? \"Maximum 1000 characters are allowed.\"\n          : \"\",\n    }));\n  }, [stateData]);\n\n  const removeFromItem = (index: any) => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async (e: any) => {\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    if (filesUrl?.length === 6) {\n      setShowToast(true, \"Max files upload limit is 6\");\n      return;\n    }\n\n    var fileType = newFile?.type?.split(\"/\")[1]?.toLowerCase();\n    var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n    if (imageFormats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    formData.append(\"file\", newFile);\n    const res = await onFileUpload(formData);\n    if (res.success) {\n      let link: string = res.imgUrl;\n      let check_type: any = 1;\n      setFilesUrl((prev: Array<any>) => [\n        ...prev,\n        {\n          mediaType: check_type,\n          link: link,\n        },\n      ]);\n      setLocalFiles((prev: any) => ({\n        ...prev,\n        [filesUrl?.length]: URL.createObjectURL(newFile),\n      }));\n    }\n  };\n\n  const setItemToggle = (index: any) => {\n    setToggler((prev: boolean) => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item: any, index: any) => {\n    let split_item_format = item.split(\".\");\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n    let split_item_name = item.split(\"/\");\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render: any = null;\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = (\n          <img\n            onClick={() => {\n              setItemToggle(index);\n            }}\n            title={get_split_name}\n            src={item}\n            alt=\"media\"\n          />\n        );\n      }\n      return (\n        <figure className=\"img_video\">\n          {image_render}\n          <img\n            onClick={() => {\n              removeFromItem(index);\n            }}\n            src={close}\n            alt=\"remove\"\n            className=\"remove\"\n          />\n          {/* <span style={{ fontSize: '10px' }}>{get_split_name}</span> */}\n        </figure>\n      );\n    }\n  };\n\n  const handleSubmit = async () => {\n    let data: any = {\n      jobId: jobId,\n      reason: reason,\n    };\n\n    if (detail?.length) {\n      data[\"note\"] = detail;\n    }\n\n    let response: any = await CancelJob(data);\n    if (response?.success) {\n      const mData = {\n        timeStamp: moengage.getCurrentTimeStamp(),\n      };\n      moengage.moE_SendEvent(MoEConstants.CANCEL_JOB, mData);\n      mixPanel.mixP_SendEvent(MoEConstants.CANCEL_JOB, mData);\n      history.push(\"/cancel-job-success\");\n    }\n  };\n\n  const renderTypes = ({ id }: any) => {\n    return (\n      <div className=\"checkbox_wrap agree_check\">\n        <input\n          value={reason}\n          onClick={() => {\n            setStateData((prev: any) => ({ ...prev, reason: id }));\n          }}\n          checked={reason === id}\n          name=\"Reason\"\n          className=\"filter-type filled-in\"\n          type=\"checkbox\"\n          id={`reason${id}`}\n        />\n        <label htmlFor={`reason${id}`}>{JobCancelReasons(id)}</label>\n      </div>\n    );\n  };\n\n  const renderFilteredItems = () => {\n    let sources: any = [];\n    let types: any = [];\n\n    if (filesUrl?.length) {\n      filesUrl.forEach((item: any) => {\n        if (item?.mediaType === 1) {\n          sources.push(item.link);\n          types.push(\"image\");\n        }\n      });\n    }\n\n    return { sources, types };\n  };\n\n  const { sources, types } = renderFilteredItems();\n  return (\n    <div className=\"flex_row\">\n      <div className=\"flex_col_sm_8\">\n        <div className=\"relate\">\n          <button\n            onClick={() => {\n              props.backTab(\"cancel\");\n            }}\n            className=\"back\"\n          ></button>\n          <span className=\"xs_sub_title\">{jobName || \"\"}</span>\n        </div>\n\n        <span className=\"sub_title\">{\"Your reason for canceling job\"}</span>\n        <p className=\"commn_para\">\n          {\n            \"Let the tradesperson and Tickt know why you are cancelling the job.\"\n          }\n        </p>\n\n        <FsLightbox\n          toggler={toggler}\n          slide={selectedSlide}\n          sources={sources}\n          types={types}\n        />\n\n        <div className=\"reason_wrap\">\n          <div className=\"f_spacebw\">\n            {renderTypes({ id: 1 })}\n            {renderTypes({ id: 2 })}\n          </div>\n          <div className=\"f_spacebw\">\n            {renderTypes({ id: 3 })}\n            {renderTypes({ id: 4 })}\n          </div>\n\n          <div className=\"f_spacebw\">{renderTypes({ id: 5 })}</div>\n        </div>\n      </div>\n\n      <div className=\"flex_col_sm_9\">\n        <div className=\"form_field\">\n          <label className=\"form_label\">Details</label>\n          <div className=\"text_field\">\n            <textarea\n              value={detail}\n              onChange={(e: any) => {\n                setStateData((prev: any) => ({\n                  ...prev,\n                  detail: e.target.value.trimLeft(),\n                }));\n              }}\n              placeholder=\"It’s really bad work, because...\"\n            ></textarea>\n          </div>\n          <span className=\"error_msg\">{errorData.detail}</span>\n        </div>\n        <button\n          onClick={handleSubmit}\n          className={`fill_btn full_btn btn-effect ${\n            checkErrors() ? \"disable_btn\" : \"\"\n          }`}\n        >\n          {\"Send\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(LodgeDispute);\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/milestoneApprove.tsx",["1199"],"import React, { useState } from 'react'\nimport DeclineMilestone from './declineMilestone';\nimport { milestoneAcceptOrDecline } from '../../../redux/homeSearch/actions'\n\nimport FixedRate from './confirmAndPay/fixedRate';\nimport { withRouter } from 'react-router-dom';\n//@ts-ignore\nimport FsLightbox from 'fslightbox-react';\n//@ts-ignore\nimport { moengage, mixPanel } from '../../../services/analyticsTools';\nimport { MoEConstants } from '../../../utils/constants';\n\nconst MilestoneApprove = (props: any) => {\n    const { backToScreen, data, resetStateLocal } = props;\n    const [isToggle, setToggle] = useState(false);\n    const [IsToggleAccept, setToggleAccept] = useState(false);\n    const [toggler, setToggler] = useState(false);\n    const [selectedSlide, setSelectSlide] = useState(1);\n    const [loadingTrue, setLoadingTrue] = useState(false);\n\n    if (data) {\n        let jobName: any = data?.selectedItem?.jobName;\n        let jobId: any = data?.selectedItem?.jobId;\n        let description: any = data?.selectedMile?.description;\n        let hoursWorked: any = data?.selectedMile?.hoursWorked;\n        let images: any = data?.selectedMile?.images;\n        let milestones: any = data?.itemDetails?.milestones;\n        let index: any = data?.selectedMilestoneIndex?.index;\n\n        let item: any = milestones[index];\n\n        const onSubmitAccept = async (data: any) => {\n            let total = data?.total;\n            let data_ = {\n                \"status\": 1,\n                \"jobId\": jobId,\n                \"milestoneId\": item?.milestoneId,\n                \"paymentMethodId\": data?.cardId,\n                \"milestoneAmount\": data?.milestoneAmount.replace(\"$\", \"\"),\n                \"amount\": total.replace(\"$\", \"\")\n            }\n\n            let response: any = await milestoneAcceptOrDecline(data_);\n            if (response?.success) {\n                const mData1 = {\n                    Category: props.data?.itemDetails?.categories?.[0]?.trade_name,\n                    timeStamp: moengage.getCurrentTimeStamp(),\n                }\n                moengage.moE_SendEvent(MoEConstants.MADE_PAYMENT, mData1);\n                mixPanel.mixP_SendEvent(MoEConstants.MADE_PAYMENT, mData1);\n                const mData2 = {\n                    ...mData1,\n                    'Milestone number': props.data?.selectedMilestoneIndex?.index + 1,\n                }\n                moengage.moE_SendEvent(MoEConstants.MILESTONE_CHECKED_AND_APPROVED, mData2);\n                mixPanel.mixP_SendEvent(MoEConstants.MILESTONE_CHECKED_AND_APPROVED, mData2);\n                resetStateLocal();\n                props.history.push('/need-approval-success');\n            }\n        }\n\n        const toggleBack = () => {\n            setToggle(false);\n            setToggleAccept(false);\n        }\n\n        if (IsToggleAccept) {\n            return (\n                <FixedRate\n                    {...props}\n                    jobName={jobName}\n                    data={props.data}\n                    toggleBack={toggleBack}\n                    onSubmitAccept={onSubmitAccept}\n                />\n            )\n        }\n\n\n        if (isToggle) {\n            return (\n                <DeclineMilestone\n                    milestoneAcceptOrDecline={milestoneAcceptOrDecline}\n                    jobId={jobId}\n                    jobName={jobName}\n                    toggleBack={toggleBack}\n                    resetStateLocal={resetStateLocal}\n                    milestoneId={item?.milestoneId}\n                />)\n        }\n\n\n        const renderFilteredItems = () => {\n            let sources: any = [];\n            let types: any = [];\n\n            if (images?.length) {\n                images.forEach((item: any) => {\n                    if (item?.mediaType === 2) {\n                        sources.push(item.link);\n                        types.push('video');\n                    } else if (item?.mediaType === 1) {\n                        sources.push(item.link);\n                        types.push('image');\n                    } else {\n                        sources.push(item);\n                        types.push('image');\n                    }\n                })\n            }\n\n            return { sources, types };\n        }\n\n        const { sources, types } = renderFilteredItems();\n\n        const setItemToggle = (index: any) => {\n            setToggler((prev: boolean) => !prev);\n            setSelectSlide(index + 1);\n        }\n\n        return (\n            <div className=\"flex_row\">\n                <div className=\"flex_col_sm_8\">\n                    <div className=\"relate\">\n                        <button onClick={() => { backToScreen() }} className=\"back\"></button>\n                        <span className=\"xs_sub_title\">\n                            {jobName}\n                        </span>\n                    </div>\n                    <span className=\"sub_title\">Milestone details</span>\n                    <span className=\"xs_sub_title\">{item?.milestoneName} complete</span>\n\n                    <FsLightbox\n                        toggler={toggler}\n                        slide={selectedSlide}\n                        sources={sources}\n                        types={types}\n                    />\n\n\n                    {images && Array.isArray(images) && images?.length ?\n                        <div className=\"upload_img_video\">\n                            {images.map((media_item: any, index: any) => (\n                                <figure className=\"img_video\">\n                                    {media_item?.mediaType == 1 ? (\n                                        <img\n                                            style={{ cursor: 'pointer' }}\n                                            onClick={() => { setItemToggle(index) }}\n                                            async-src={media_item?.link}\n                                            decoding=\"async\"\n                                            loading=\"lazy\"\n                                            src={media_item?.link} alt=\"media\" />\n                                    ) : media_item?.mediaType == 2 ? (\n                                        <video\n                                            style={{ cursor: 'pointer' }}\n                                            onClick={() => { setItemToggle(index) }}\n                                            src={media_item?.link} />\n                                    ) : (\n                                        <>\n                                            <img\n                                                style={{ cursor: 'pointer' }}\n                                                onClick={() => { setItemToggle(index) }}\n                                                onLoad={() => {\n                                                    setLoadingTrue(true)\n                                                }}\n                                                src={media_item}\n                                                async-src={media_item}\n                                                decoding=\"async\"\n                                                loading=\"lazy\"\n                                                alt=\"media\" />\n                                        </>\n                                    )}\n                                </figure>\n                            ))}\n                        </div>\n                        : null}\n\n                    <div className=\"form_field\">\n                        <span className=\"xs_sub_title\">Description</span>\n                        <p className=\"commn_para\">{description || ''}</p>\n                    </div>\n\n                    <div className=\"form_field\">\n                        <span className=\"xs_sub_title\">Hours worked in this milestone</span>\n                        <span className=\"show_label\">{`${hoursWorked || 0} hours`}</span>\n                    </div>\n                    <div className=\"form_field\">\n                        {/* onSubmitAccept */}\n                        <button\n                            onClick={() => {\n                                setToggleAccept(true)\n                            }}\n                            className=\"fill_btn full_btn\">Approve</button>\n                    </div>\n                    <div className=\"form_field\">\n                        <button\n                            onClick={() => { setToggle(true) }}\n                            className=\"fill_grey_btn full_btn btn-effect mt-15\">\n                            {'Decline'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    return null;\n}\n\nexport default withRouter(MilestoneApprove);\n","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/defaultRanges.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/paymentDetails.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/addEditMilestone.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changeEmailModal/components/verifyNewEmail.tsx",["1200"],"import React, { useState, useEffect } from 'react';\nimport Constants from '../../../../../../utils/constants';\nimport regex from '../../../../../../utils/regex';\nimport {\n  verifyEmailOtp,\n  tradieChangeEmail,\n} from \"../../../../../../redux/profile/actions\";\nimport OtpInput from \"react-otp-input\";\n\nimport cancel from \"../../../../../../assets/images/ic-cancel.png\";\nimport storageService from '../../../../../../utils/storageService';\n\ninterface PropsTypes {\n    history: any,\n    currentEmail: string,\n    newEmail: string,\n    currentPassword: string,\n    updateSteps: (step: number, newData?: any) => void,\n    backButtonHandler: () => void,\n    closeModalHandler: () => void,\n}\n\nconst VerifyNewEmail = (props: PropsTypes) => {\n    const [errors, setErrors] = useState<any>({});\n    const [counter, setCounter] = useState(Constants.OTP_TIMER);\n    const [otp, setOTP] = useState('');\n\n    const changeHandler = (newOtp: any) => {\n        setOTP(newOtp);\n    }\n\n    useEffect(() => {\n        const timer: any = counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n        return () => clearInterval(timer);\n    }, [counter]);\n\n    const validateForm = () => {\n        const newErrors: any = {};\n        if (!otp) {\n            newErrors.otp = Constants.errorStrings.otpEmpty;\n        } else {\n            const otpregex = new RegExp(regex.otp);\n            if (!otpregex.test(otp)) {\n                newErrors.otp = Constants.errorStrings.otpIncorrect;\n            }\n        }\n        setErrors(newErrors);\n        return !Object.keys(newErrors).length;\n    }\n\n    const resendHandler = async (e: any) => {\n        e.preventDefault()\n        const data = {\n            currentEmail: props.currentEmail,\n            newEmail: props.newEmail,\n            password: props.currentPassword,\n            user_type: storageService.getItem('userType'),\n        }\n        const res = await tradieChangeEmail(data);\n        if (res.success) {\n            setCounter(Constants.OTP_TIMER);\n        }\n    }\n\n    const onSubmit = async (e: any) => {\n        e.preventDefault();\n        if (validateForm()) {\n            const data = {\n                newEmail: props.newEmail,\n                otp: otp\n            }\n            const res: any = await verifyEmailOtp(data);\n            if (res.success) {\n                props.history?.push('/email-updated-successfully');\n            }\n        }\n    }\n\n    return (\n        <>\n            <div className=\"heading form_field\">\n                <div className=\"relate\">\n                    <button className=\"back\" onClick={props.backButtonHandler}></button>\n                    <div className=\"md_heading\">\n                        <span className=\"sub_title\">Verify your email</span>\n                    </div>\n                </div>\n                <button className=\"close_btn\" onClick={props.closeModalHandler}>\n                    <img src={cancel} alt=\"cancel\" />\n                </button>\n            </div>\n            <form onSubmit={onSubmit}>\n                <div className=\"inner_wrap\">\n                    <div className=\"form_wrapper\">\n                        <span className=\"show_label\">Verification Code</span>\n                        <div className=\"form_field\">\n                            <div className=\"otp_input_wrapper\">\n                                <OtpInput\n                                    className=\"sms-no-box\"\n                                    inputStyle={{ \"width\": \"48px\" }}\n                                    value={otp}\n                                    onChange={changeHandler}\n                                    numInputs={5}\n                                    isInputNum\n                                //separator={<span>-</span>}\n                                />\n                            </div>\n                            {!!errors.otp && <span className=\"error_msg\">{errors.otp}</span>}\n                        </div>\n                        <div className=\"form_field\">\n                            <span className=\"show_label\">We have sent a verification code to your new email.\n                                Please check email and enter the 5-digit code here.</span>\n                        </div>\n                        {counter === 0 && <div className=\"form_field f_spacebw\">\n                            <span className=\"show_label\">Don’t you receive any codes?</span>\n                            <a href=\"#\" className=\"link\" onClick={resendHandler}>Re-send code</a>\n                        </div>}\n                        {counter > 0 && <div>\n                            <span className=\"show_label timer\">{counter > 59 ? `01 : 00` : `00 : ${counter}`}</span>\n                        </div>}\n\n                    </div>\n                </div>\n                <div className=\"bottom_btn custom_btn\">\n                    <button className=\"fill_btn full_btn btn-effect\">Next</button>\n                </div>\n            </form>\n        </>\n    )\n}\n\nexport default VerifyNewEmail;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/personalInformation/changeEmailModal/components/newEmail.tsx",["1201"],"import React, { useState } from 'react';\nimport Constants from '../../../../../../utils/constants';\nimport regex from '../../../../../../utils/regex';\nimport { tradieChangeEmail } from '../../../../../../redux/profile/actions';\n\nimport eyeIconClose from '../../../../../../assets/images/icon-eye-closed.png';\nimport eyeIconOpen from '../../../../../../assets/images/icon-eye-open.png';\nimport cancel from \"../../../../../../assets/images/ic-cancel.png\";\nimport storageService from '../../../../../../utils/storageService';\n\ninterface PropsTypes {\n    currentEmail: string,\n    newEmail: string,\n    currentPassword: string,\n    updateSteps: (step: number, newData?: any) => void,\n    backButtonHandler: () => void,\n    closeModalHandler: () => void,\n}\n\nconst NewEmail = (props: PropsTypes) => {\n    const [errors, setErrors] = useState<any>({});\n    const [newEmail, setNewEmail] = useState<string>(props.newEmail);\n    const [currentPassword, setCurrentPassword] = useState<string>(props.currentPassword);\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    const validateChangeEmailForm = () => {\n        const newErrors: any = {};\n        if (!newEmail) {\n            newErrors.newEmail = 'New Email Address is required';\n        } else {\n            const emailRegex = new RegExp(regex.email);\n            if (!emailRegex.test(newEmail.trim())) {\n                newErrors.newEmail = Constants.errorStrings.emailErr;\n            }else if (newEmail.trim() === props.currentEmail) {\n                newErrors.newEmail = \"New Email Address and Current Email Address is same\";\n            }\n        }\n\n        if (!currentPassword) {\n            newErrors.currentPassword = 'Current Password is required';\n        }\n        //  else {\n        //     const passwordRegex = new RegExp(regex.password);\n        //     if (!passwordRegex.test(currentPassword.trim())) {\n        //         newErrors.currentPassword = Constants.errorStrings.passwordError;\n        //     }\n        // }\n\n        setErrors(newErrors);\n        return !Object.keys(newErrors)?.length;\n    }\n\n    const changeEmailHandler = async () => {\n        console.log(newEmail,\"newEmail\",newEmail.trim(),props.currentEmail,\"props.currentEmail\",\"qazx\",props.currentEmail.trim(),\"trim\")\n        if (validateChangeEmailForm()) {\n            const data = {\n                currentEmail: props.currentEmail,\n                newEmail: newEmail.trim(),\n                password: currentPassword.trim(),\n                user_type: storageService.getItem('userType'),\n            }\n            const res = await tradieChangeEmail(data);\n            if (res?.success) {\n                props.updateSteps(2, {newEmail: newEmail.trim(), currentPassword: currentPassword.trim()});\n            }\n        }\n    }\n    console.log(errors, \"errors new Email Modal\");\n\n    return (\n        <>\n            <div className=\"heading form_field\">\n                <div className=\"relate\">\n                    <button className=\"back\" onClick={props.backButtonHandler}></button>\n                    <div className=\"md_heading\">\n                        <span className=\"sub_title\">Change email</span>\n                        <span className=\"show_label\">Enter your password too and we will send you message to verify your new email</span>\n                    </div>\n                </div>\n                <button className=\"close_btn\" onClick={props.closeModalHandler}>\n                    <img src={cancel} alt=\"cancel\" />\n                </button>\n            </div>\n            <div className=\"inner_wrap\">\n                <div className=\"inner_wrappr\">\n                    <div className=\"form_field\">\n                        <label className=\"form_label\">New Email</label>\n                        <div className=\"text_field\">\n                            <input type=\"text\" placeholder=\"Enter New Email\" value={newEmail} name='newEmail' onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewEmail(e.target.value)} />\n                        </div>\n                        {!!errors?.newEmail && <span className=\"error_msg\">{errors?.newEmail}</span>}\n                    </div>\n                    <div className=\"form_field\">\n                        <label className=\"form_label\">Current Password</label>\n                        <div className=\"text_field\">\n                            <input type={showPassword ? 'text' : 'password'} className=\"detect_input\" placeholder=\"Enter Current Password\" name='password' value={currentPassword} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCurrentPassword(e.target.value)} />\n                            <span className=\"detect_icon\" onClick={() => setShowPassword(!showPassword)}>\n                                <img src={showPassword ? eyeIconOpen : eyeIconClose} />\n                            </span>\n                        </div>\n                        {!!errors?.currentPassword && <span className=\"error_msg\">{errors?.currentPassword}</span>}\n                    </div>\n                </div>\n            </div>\n            <div className=\"bottom_btn custom_btn\">\n                <button className={`fill_btn full_btn btn-effect ${(newEmail && currentPassword) ? '' : 'disable_btn'}`} onClick={changeEmailHandler}>Next</button>\n            </div>\n        </>\n    )\n}\n\nexport default NewEmail;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/editMilestones/addEditMile.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/fixedRate.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/declineMilestone.tsx",["1202"],"import React, { useState } from \"react\";\nimport close from \"../../../assets/images/icon-close-1.png\";\nimport addMedia from \"../../../assets/images/add-image.png\";\nimport { onFileUpload } from \"../../../redux/auth/actions\";\nimport { setShowToast } from \"../../../redux/common/actions\";\n\nimport { moengage, mixPanel } from \"../../../services/analyticsTools\";\nimport { MoEConstants } from \"../../../utils/constants\";\ninterface Props {\n  milestoneAcceptOrDecline: any;\n  jobId: any;\n  jobName: any;\n  milestoneId: any;\n  toggleBack: () => void;\n  resetStateLocal: any;\n}\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\n\nconst DeclineMilestone = ({\n  milestoneAcceptOrDecline,\n  toggleBack,\n  jobId,\n  jobName,\n  milestoneId,\n  resetStateLocal,\n}: Props) => {\n  const [reason, setReason] = useState(\"\");\n  const [filesUrl, setFilesUrl] = useState([] as any);\n  const [localFiles, setLocalFiles] = useState({});\n  const [update, forceUpdate] = useState({});\n\n  const onSubmitDecline = async () => {\n    if (!filesUrl?.length) {\n      setShowToast(true, \"Please attach at least one media file\");\n      return true;\n    }\n\n    let data = {\n      status: 2,\n      jobId: jobId,\n      milestoneId: milestoneId,\n      reason: reason,\n      url: filesUrl.length ? filesUrl.map((file: any) => file.link) : [],\n    };\n\n    let response: any = await milestoneAcceptOrDecline(data);\n    if (response?.success) {\n      moengage.moE_SendEvent(MoEConstants.MILESTONE_DECLINED, {\n        timeStamp: moengage.getCurrentTimeStamp(),\n      });\n      mixPanel.mixP_SendEvent(MoEConstants.MILESTONE_DECLINED, {\n        timeStamp: moengage.getCurrentTimeStamp(),\n      });\n      resetStateLocal(true);\n    }\n  };\n\n  const removeFromItem = (index: any) => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async (e: any) => {\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    if (filesUrl?.length === 6) {\n      setShowToast(true, \"Max files upload limit is 6\");\n      return;\n    }\n\n    var fileType = newFile?.type?.split(\"/\")[1]?.toLowerCase();\n    var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n    if (imageFormats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    formData.append(\"file\", newFile);\n    const res = await onFileUpload(formData);\n    if (res.success) {\n      let link: string = res.imgUrl;\n      let check_type: any = imageFormats.includes(fileType) ? 1 : 2;\n      setFilesUrl((prev: Array<any>) => [\n        ...prev,\n        {\n          mediaType: check_type,\n          link: link,\n        },\n      ]);\n      setLocalFiles((prev: any) => ({ ...prev, newFile }));\n    }\n  };\n\n  const renderbyFileFormat = (item: any, index: any) => {\n    let split_item_format = item.split(\".\");\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n    let split_item_name = item.split(\"/\");\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render: any = null;\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = <img title={get_split_name} src={item} alt=\"media\" />;\n      }\n      return (\n        <figure className=\"img_video\">\n          {image_render}\n          <img\n            onClick={() => {\n              removeFromItem(index);\n            }}\n            src={close}\n            alt=\"remove\"\n            className=\"remove\"\n          />\n        </figure>\n      );\n    }\n  };\n\n  const isValidCheck = () => {\n    if (!reason?.length || reason?.length > 1000) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return (\n    <div className=\"flex_row\">\n      <div className=\"flex_col_sm_12\">\n        <div className=\"relate\">\n          <button onClick={toggleBack} className=\"back\"></button>\n          <span className=\"xs_sub_title\">{jobName}</span>\n        </div>\n        <span className=\"sub_title\">Decline milestone</span>\n        <p className=\"commn_para\">\n          Please write your reason for declining the milestone\n        </p>\n        <div className=\"flex_row\">\n          <div className=\"flex_col_sm_7\">\n            <div className=\"form_field\">\n              <label className=\"form_label\">Your reason</label>\n              <div className=\"text_field\">\n                <textarea\n                  value={reason}\n                  maxLength={1000}\n                  onChange={(e: any) => {\n                    setReason(e.target.value.trimLeft());\n                  }}\n                  placeholder=\"Your reason...\"\n                ></textarea>\n                <span className=\"char_count\">\n                  {\"character length: \"}\n                  {reason?.length + \" / 1000\"}\n                </span>\n              </div>\n              {reason?.length > 1000 && (\n                <span className=\"error_msg\">\n                  {\"Maximum 1000 characters are allowed.\"}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"upload_img_video pt-10\">\n          {filesUrl?.length\n            ? filesUrl.map((item: any, index: number) =>\n                renderbyFileFormat(item.link, index)\n              )\n            : null}\n\n          {filesUrl?.length < 6 ? (\n            <React.Fragment>\n              <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                <img src={addMedia} alt=\"\" />\n              </label>\n\n              <input\n                type=\"file\"\n                accept=\"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"\n                style={{ display: \"none\" }}\n                onChange={onFileChange}\n                id=\"upload_img_video\"\n              />\n            </React.Fragment>\n          ) : null}\n        </div>\n        <button\n          onClick={onSubmitDecline}\n          className={`fill_btn full_btn btn-effect ${\n            isValidCheck() ? \"disable_btn\" : \"\"\n          }`}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DeclineMilestone;\n","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DateRangePicker/index.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DefinedRange/index.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DateRange/index.js",["1203"],"\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Calendar = _interopRequireDefault(require(\"../Calendar\"));\n\nvar _DayCell = require(\"../DayCell\");\n\nvar _utils = require(\"../../utils\");\n\nvar _max = _interopRequireDefault(require(\"date-fns/max\"));\n\nvar _isWithinInterval = _interopRequireDefault(require(\"date-fns/isWithinInterval\"));\n\nvar _min = _interopRequireDefault(require(\"date-fns/min\"));\n\nvar _addDays = _interopRequireDefault(require(\"date-fns/addDays\"));\n\nvar _differenceInCalendarDays = _interopRequireDefault(require(\"date-fns/differenceInCalendarDays\"));\n\nvar _isBefore = _interopRequireDefault(require(\"date-fns/isBefore\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _styles = _interopRequireDefault(require(\"../../styles\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar DateRange = /*#__PURE__*/function (_Component) {\n  _inherits(DateRange, _Component);\n\n  var _super = _createSuper(DateRange);\n\n  function DateRange(props, context) {\n    var _this;\n\n    _classCallCheck(this, DateRange);\n\n    _this = _super.call(this, props, context);\n\n    _defineProperty(_assertThisInitialized(_this), \"calcNewSelection\", function (value) {\n      var isSingleValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var focusedRange = _this.props.focusedRange || _this.state.focusedRange;\n      var _this$props = _this.props,\n          ranges = _this$props.ranges,\n          onChange = _this$props.onChange,\n          maxDate = _this$props.maxDate,\n          moveRangeOnFirstSelection = _this$props.moveRangeOnFirstSelection,\n          retainEndDateOnFirstSelection = _this$props.retainEndDateOnFirstSelection,\n          disabledDates = _this$props.disabledDates;\n      var focusedRangeIndex = focusedRange[0];\n      var selectedRange = ranges[focusedRangeIndex];\n      if (!selectedRange || !onChange) return {};\n      var startDate = selectedRange.startDate,\n          endDate = selectedRange.endDate;\n      var now = new Date();\n      var nextFocusRange;\n\n      if (!isSingleValue) {\n        startDate = value.startDate;\n        endDate = value.endDate;\n      } else if (focusedRange[1] === 0) {\n        // startDate selection\n        var dayOffset = (0, _differenceInCalendarDays.default)(endDate || now, startDate);\n\n        var calculateEndDate = function calculateEndDate() {\n          if (moveRangeOnFirstSelection) {\n            return (0, _addDays.default)(value, dayOffset);\n          }\n\n          if (retainEndDateOnFirstSelection) {\n            if (!endDate || (0, _isBefore.default)(value, endDate)) {\n              return endDate;\n            }\n\n            return value;\n          }\n\n          return value || now;\n        };\n\n        startDate = value;\n        endDate = calculateEndDate();\n        if (maxDate) endDate = (0, _min.default)([endDate, maxDate]);\n        nextFocusRange = [focusedRange[0], 1];\n      } else {\n        endDate = value;\n      } // reverse dates if startDate before endDate\n\n\n      var isStartDateSelected = focusedRange[1] === 0;\n\n      if ((0, _isBefore.default)(endDate, startDate)) {\n        isStartDateSelected = !isStartDateSelected;\n        var _ref = [endDate, startDate];\n        startDate = _ref[0];\n        endDate = _ref[1];\n      }\n\n      var inValidDatesWithinRange = disabledDates.filter(function (disabledDate) {\n        return (0, _isWithinInterval.default)(disabledDate, {\n          start: startDate,\n          end: endDate\n        });\n      });\n\n      if (inValidDatesWithinRange.length > 0) {\n        if (isStartDateSelected) {\n          startDate = (0, _addDays.default)((0, _max.default)(inValidDatesWithinRange), 1);\n        } else {\n          endDate = (0, _addDays.default)((0, _min.default)(inValidDatesWithinRange), -1);\n        }\n      }\n\n      if (!nextFocusRange) {\n        var nextFocusRangeIndex = (0, _utils.findNextRangeIndex)(_this.props.ranges, focusedRange[0]);\n        nextFocusRange = [nextFocusRangeIndex, 0];\n      }\n\n      return {\n        wasValid: !(inValidDatesWithinRange.length > 0),\n        range: {\n          startDate: startDate,\n          endDate: endDate\n        },\n        nextFocusRange: nextFocusRange\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSelection\", function (value, isSingleValue) {\n      var _this$props2 = _this.props,\n          onChange = _this$props2.onChange,\n          ranges = _this$props2.ranges,\n          onRangeFocusChange = _this$props2.onRangeFocusChange;\n      var focusedRange = _this.props.focusedRange || _this.state.focusedRange;\n      var focusedRangeIndex = focusedRange[0];\n      var selectedRange = ranges[focusedRangeIndex];\n      if (!selectedRange) return;\n\n      var newSelection = _this.calcNewSelection(value, isSingleValue);\n\n      onChange(_defineProperty({}, selectedRange.key || \"range\".concat(focusedRangeIndex + 1), _objectSpread(_objectSpread({}, selectedRange), newSelection.range)));\n\n      _this.setState({\n        focusedRange: newSelection.nextFocusRange,\n        preview: null\n      });\n\n      onRangeFocusChange && onRangeFocusChange(newSelection.nextFocusRange);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRangeFocusChange\", function (focusedRange) {\n      _this.setState({\n        focusedRange: focusedRange\n      });\n\n      _this.props.onRangeFocusChange && _this.props.onRangeFocusChange(focusedRange);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updatePreview\", function (val) {\n      var _ranges$focusedRange$;\n\n      if (!val) {\n        _this.setState({\n          preview: null\n        });\n\n        return;\n      }\n\n      var _this$props3 = _this.props,\n          rangeColors = _this$props3.rangeColors,\n          ranges = _this$props3.ranges;\n      var focusedRange = _this.props.focusedRange || _this.state.focusedRange;\n      var color = ((_ranges$focusedRange$ = ranges[focusedRange[0]]) === null || _ranges$focusedRange$ === void 0 ? void 0 : _ranges$focusedRange$.color) || rangeColors[focusedRange[0]] || color;\n\n      _this.setState({\n        preview: _objectSpread(_objectSpread({}, val.range), {}, {\n          color: color\n        })\n      });\n    });\n\n    _this.state = {\n      focusedRange: props.initialFocusedRange || [(0, _utils.findNextRangeIndex)(props.ranges), 0],\n      preview: null\n    };\n    _this.styles = (0, _utils.generateStyles)([_styles.default, props.classNames]);\n    return _this;\n  }\n\n  _createClass(DateRange, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_react.default.createElement(_Calendar.default, _extends({\n        focusedRange: this.state.focusedRange,\n        onRangeFocusChange: this.handleRangeFocusChange,\n        preview: this.state.preview,\n        onPreviewChange: function onPreviewChange(value) {\n          _this2.updatePreview(value ? _this2.calcNewSelection(value) : null);\n        }\n      }, this.props, {\n        displayMode: \"dateRange\",\n        className: (0, _classnames.default)(this.styles.dateRangeWrapper, this.props.className),\n        onChange: this.setSelection,\n        updateRange: function updateRange(val) {\n          return _this2.setSelection(val, false);\n        },\n        ref: function ref(target) {\n          _this2.calendar = target;\n        }\n      }));\n    }\n  }]);\n\n  return DateRange;\n}(_react.Component);\n\nDateRange.defaultProps = {\n  classNames: {},\n  ranges: [],\n  moveRangeOnFirstSelection: false,\n  retainEndDateOnFirstSelection: false,\n  rangeColors: ['#3d91ff', '#3ecf8e', '#fed14c'],\n  disabledDates: []\n};\nDateRange.propTypes = _objectSpread(_objectSpread({}, _Calendar.default.propTypes), {}, {\n  onChange: _propTypes.default.func,\n  onRangeFocusChange: _propTypes.default.func,\n  className: _propTypes.default.string,\n  ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n  moveRangeOnFirstSelection: _propTypes.default.bool,\n  retainEndDateOnFirstSelection: _propTypes.default.bool\n});\nvar _default = DateRange;\nexports.default = _default;","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/Calendar/index.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/chooseTimings.tsx",["1204"],"import React, { useState, useEffect } from 'react';\n// @ts-ignore\nimport { DateRangePicker } from '../../../../plugins/react-date-range/dist/index';\nimport '../../../../plugins/react-date-range/dist/styles.css';\nimport '../../../../plugins/react-date-range/dist/theme/default.css';\nimport moment from 'moment';\nimport { setShowToast } from '../../../../redux/common/actions';\n\ninterface Proptypes {\n    items: any;\n    toggleCalenderTime: (data?: any) => void;\n}\n\nconst default_format = 'YYYY-MM-DD';\nconst STRING_ERROR = 'Selected data is fully engage';\nconst ChooseTimings = ({\n    toggleCalenderTime,\n    items \n}: Proptypes) => {\n    const [range, setRange] = useState<{ [index: string]: string | Date }>({\n        startDate: '', //new Date(),\n        endDate: '',//new Date(),\n        key: 'selection',\n    });\n    const [formattedDates, setFormattedDates] = useState({});\n    const [error, setError] = useState('');\n\n    const handleChange = (item: any) => {\n        setRange(item.selection);\n        handleCheck(item.selection);\n    };\n\n\n    const onMountCallable = () => {\n        let count_times: any = {};\n        let milestones = items;\n\n        let filteredItems = milestones.filter((item: any) => {\n            let to_date = item?.to_date;\n            let from_date = item?.from_date;\n\n            if (from_date) {\n                count_times[from_date] = 0;\n            }\n\n            if (to_date) {\n                count_times[to_date] = 0;\n            }\n\n            if (Object.keys(item).length && item?.from_date) {\n                return item;\n            }\n\n            let ifMatch = milestones.find((item_: any) => {\n                if (item_.to_date === to_date && from_date === item_.from_date) {\n                    return item_;\n                }\n            })\n\n            return ifMatch\n        });\n\n\n        if (filteredItems?.length) {\n            filteredItems.forEach((item: any, index: any) => {\n                let to_date = item?.to_date;\n                let from_date = item?.from_date;\n\n                let color_index = index;\n                if (index > 500) {\n                    // make random index from the limit 0 to 500.\n                    // if the index is greater than 500.\n                    color_index = Math.floor((Math.random() * 500) + 1);\n                }\n\n                if (!to_date && from_date) {\n                    if (count_times[from_date] > -1) {\n                        count_times[from_date]++;\n                    }\n\n                    let from_element: any = document.getElementsByClassName(`color_${count_times[from_date]}_${from_date}`);\n                    if (from_element) {\n                        let element_from = from_element[0];\n                        if (from_element?.length > 1) {\n                            element_from = from_element[1];\n                        }\n\n                        if (element_from) {\n                            element_from.classList.add(`color_${color_index}`);\n                        }\n                    }\n                }\n\n                if (to_date && from_date) {\n                    if (count_times[from_date] > -1) {\n                        count_times[from_date]++;\n                    }\n\n                    if (count_times[to_date] > -1) {\n                        count_times[to_date]++;\n                    }\n                    let from_element: any = document.getElementsByClassName(`color_${count_times[from_date]}_${from_date}`);\n                    if (from_element) {\n                        let element_from = null;\n\n                        if (from_element?.length > 1) {\n                            if (!from_element[0].parentElement.parentElement.classList.contains('rdrDayPassive')) {\n                                element_from = from_element[0];\n                            } else {\n                                element_from = from_element[1];\n                            }\n                        } else {\n                            element_from = from_element[0];\n                        }\n\n                        if (element_from) {\n                            element_from.classList.add(`color_${color_index}`)\n                        }\n                    }\n\n                    let to_element: any = document.getElementsByClassName(`color_${count_times[to_date]}_${to_date}`);\n                    if (to_element) {\n                        let element_to = null;\n                        if (to_element?.length > 1) {\n                            if (!to_element[0].parentElement.parentElement.classList.contains('rdrDayPassive')) {\n                                element_to = to_element[0];\n                            } else {\n                                element_to = to_element[1];\n                            }\n                        } else {\n                            element_to = to_element[0];\n                        }\n                        if (element_to) {\n                            element_to.classList.add(`color_${color_index}`);\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        console.log('Did Mount')\n        const interval = setInterval(() => {\n            onMountCallable();\n         }, 1500);\n\n         return () => {\n           console.log(`clearing interval`);\n           clearInterval(interval);\n         };\n    }, [])\n\n    const handleCheck = (item: any) => {\n        let from_date = moment(item.startDate).format(default_format);\n        let to_date = moment(item.endDate).format(default_format);\n        setFormattedDates({ from_date, to_date });\n        if (moment(from_date, default_format).isAfter(moment(to_date, default_format))) { // isAfter\n            setError('finish date is greater then the start date.');\n        } else {\n            setError('');\n        }\n    }\n\n\n\n    const checkBeforeExist = (time: any) => {\n        let count_times: any = {};\n        let catch_boolean: boolean = true;\n        let milestoneItems: any = items;\n\n        milestoneItems.forEach((mile: any) => {\n\n            let mile_start = mile.from_date;\n            let mile_end = mile.to_date;\n\n            let time_start = time.from_date;\n            let time_end = time.to_date;\n\n\n            if (count_times[mile_start] == undefined) {\n                count_times[mile_start] = 1\n            } else {\n                count_times[mile_start] = count_times[mile_start] + 1;\n            }\n\n\n            if (count_times[mile_end] == undefined) {\n                count_times[mile_end] = 1\n            } else {\n                count_times[mile_end] = count_times[mile_end] + 1;\n            }\n\n            if (count_times[mile_start] === 4) {\n                if (mile_start == time_start || mile_start == time_end) {\n                    setShowToast(true, STRING_ERROR);\n                    catch_boolean = false;\n                }\n            } else {\n                if (count_times[time_start] === 4) {\n                    setShowToast(true, STRING_ERROR);\n                    catch_boolean = false;\n                }\n            }\n\n            if (count_times[mile_end] === 4) {\n                if (mile_end == time_start || mile_end == time_end) {\n                    setShowToast(true, STRING_ERROR);\n                    catch_boolean = false;\n                }\n            } else {\n                if (count_times[time_end] === 4) {\n                    setShowToast(true, STRING_ERROR);\n                    catch_boolean = false;\n                }\n            }\n\n\n        });\n\n        return catch_boolean;\n    }\n\n    const handleContinue = () => {\n        let moment_start = moment(range.startDate).format('MM-DD-YYYY')\n        let moment_end = moment(range.endDate).format('MM-DD-YYYY')\n        let timings = {\n            from_date: range.startDate !== '' ? moment_start : '',\n            to_date: (moment_start === moment_end || range.endDate === '') ? '' : moment_end\n        }\n  \n        let isChecked = checkBeforeExist(timings);\n        if (isChecked) {\n            toggleCalenderTime(range);\n        }\n    }\n\n    const checkDisable = () => {\n        if (range?.startDate && range?.startDate !== 'Invalid date') {\n            return false;\n        }\n        return true;\n    }\n\n    return (\n        <div className=\"custom_container\">\n            <div className=\"form_field\">\n                <div className=\"flex_row\">\n                    <div className=\"flex_col_sm_5\">\n                        <div className=\"relate\">\n                            <button\n                                onClick={() => {\n                                    toggleCalenderTime();\n                                }}\n                                style={{ zIndex: 999 }}\n                                className=\"back\">\n                            </button>\n                            <span\n                                onClick={() => {\n                                    onMountCallable();\n                                }}\n                                className=\"title\">\n                                {'Timing'}\n                            </span>\n                        </div>\n                        <p className=\"commn_para\">\n                            {'Select a start and end date, or a due date.'}\n                            {/* {\"if you tab the back arrow, you lose the `draft`. Can we save it ?\"} */}\n                            {/* {'Choose the start and finish day of your job'} */}\n                        </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"flex_row\">\n                <div className=\"flex_col_sm_8\">\n                    <div className=\"form_field\">\n                        <DateRangePicker\n                            ranges={[range]}\n                            onChange={handleChange}\n                            months={2}\n                            direction=\"horizontal\"\n                            moveRangeOnFirstSelection={false}\n                            rangeColors={[\"#fee600\", \"#b5b5b5\"]}\n                            showDateDisplay={false}\n                            showSelectionPreview={true}\n                            showPreview={true}\n                            fixedHeight={true}\n                            minDate={new Date()}\n                        />\n                    </div>\n                    <span className=\"error_msg mtb-15\">{error}</span>\n                    <div className=\"form_field\">\n                        <button\n                            className={`fill_btn full_btn btn-effect ${checkDisable() ? 'disable_btn' : ''}`}\n                            onClick={handleContinue}>\n                            {'Continue'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ChooseTimings;\n","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/styles.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/accessibility/index.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/utils.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DateInput/index.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/Month/index.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/DayCell/index.js",["1205"],"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.rangeShape = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _moment = require('moment');\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames4 = _interopRequireDefault(require(\"classnames\"));\n\nvar _dateFns = require(\"date-fns\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar DayCell =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(DayCell, _Component);\n\n    function DayCell(props, context) {\n      var _this;\n\n      _classCallCheck(this, DayCell);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(DayCell).call(this, props, context));\n\n      _defineProperty(_assertThisInitialized(_this), \"handleKeyEvent\", function (event) {\n        var _this$props = _this.props,\n          day = _this$props.day,\n          onMouseDown = _this$props.onMouseDown,\n          onMouseUp = _this$props.onMouseUp;\n\n        if ([13\n          /* space */\n          , 32\n          /* enter */\n        ].includes(event.keyCode)) {\n          if (event.type === 'keydown') onMouseDown(day); else onMouseUp(day);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"handleMouseEvent\", function (event) {\n        var _this$props2 = _this.props,\n          day = _this$props2.day,\n          disabled = _this$props2.disabled,\n          onPreviewChange = _this$props2.onPreviewChange,\n          onMouseEnter = _this$props2.onMouseEnter,\n          onMouseDown = _this$props2.onMouseDown,\n          onMouseUp = _this$props2.onMouseUp;\n        var stateChanges = {};\n\n        if (disabled) {\n          onPreviewChange();\n          return;\n        }\n\n        switch (event.type) {\n          case 'mouseenter':\n            onMouseEnter(day);\n            onPreviewChange(day);\n            stateChanges.hover = true;\n            break;\n\n          case 'blur':\n          case 'mouseleave':\n            stateChanges.hover = false;\n            break;\n\n          case 'mousedown':\n            stateChanges.active = true;\n            onMouseDown(day);\n            break;\n\n          case 'mouseup':\n            event.stopPropagation();\n            stateChanges.active = false;\n            onMouseUp(day);\n            break;\n\n          case 'focus':\n            onPreviewChange(day);\n            break;\n        }\n\n        if (Object.keys(stateChanges).length) {\n          _this.setState(stateChanges);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"getClassNames\", function () {\n        var _classnames;\n\n        var _this$props3 = _this.props,\n          isPassive = _this$props3.isPassive,\n          isToday = _this$props3.isToday,\n          isWeekend = _this$props3.isWeekend,\n          isStartOfWeek = _this$props3.isStartOfWeek,\n          isEndOfWeek = _this$props3.isEndOfWeek,\n          isStartOfMonth = _this$props3.isStartOfMonth,\n          isEndOfMonth = _this$props3.isEndOfMonth,\n          disabled = _this$props3.disabled,\n          styles = _this$props3.styles;\n        return (0, _classnames4[\"default\"])(styles.day, (_classnames = {}, _defineProperty(_classnames, styles.dayPassive, isPassive), _defineProperty(_classnames, styles.dayDisabled, disabled), _defineProperty(_classnames, styles.dayToday, isToday), _defineProperty(_classnames, styles.dayWeekend, isWeekend), _defineProperty(_classnames, styles.dayStartOfWeek, isStartOfWeek), _defineProperty(_classnames, styles.dayEndOfWeek, isEndOfWeek), _defineProperty(_classnames, styles.dayStartOfMonth, isStartOfMonth), _defineProperty(_classnames, styles.dayEndOfMonth, isEndOfMonth), _defineProperty(_classnames, styles.dayHovered, _this.state.hover), _defineProperty(_classnames, styles.dayActive, _this.state.active), _classnames));\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"renderPreviewPlaceholder\", function () {\n        var _classnames2;\n\n        var _this$props4 = _this.props,\n          preview = _this$props4.preview,\n          day = _this$props4.day,\n          styles = _this$props4.styles;\n        if (!preview) return null;\n        var startDate = preview.startDate ? (0, _dateFns.endOfDay)(preview.startDate) : null;\n        var endDate = preview.endDate ? (0, _dateFns.startOfDay)(preview.endDate) : null;\n        var isInRange = (!startDate || (0, _dateFns.isAfter)(day, startDate)) && (!endDate || (0, _dateFns.isBefore)(day, endDate));\n        var isStartEdge = !isInRange && (0, _dateFns.isSameDay)(day, startDate);\n        var isEndEdge = !isInRange && (0, _dateFns.isSameDay)(day, endDate);\n        return _react[\"default\"].createElement(\"span\", {\n          className: (0, _classnames4[\"default\"])((_classnames2 = {}, _defineProperty(_classnames2, styles.dayStartPreview, isStartEdge), _defineProperty(_classnames2, styles.dayInPreview, isInRange), _defineProperty(_classnames2, styles.dayEndPreview, isEndEdge), _classnames2)),\n          style: {\n            color: preview.color\n          }\n        });\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"renderSelectionPlaceholders\", function () {\n        var _this$props5 = _this.props,\n          styles = _this$props5.styles,\n          ranges = _this$props5.ranges,\n          day = _this$props5.day;\n\n        if (_this.props.displayMode === 'date') {\n          var isSelected = (0, _dateFns.isSameDay)(_this.props.day, _this.props.date);\n          return isSelected ? _react[\"default\"].createElement(\"span\", {\n            className: styles.selected,\n            style: {\n              color: _this.props.color\n            }\n          }) : null;\n        }\n\n        var inRanges = ranges.reduce(function (result, range) {\n          var startDate = range.startDate;\n          var endDate = range.endDate;\n\n          if (startDate && endDate && (0, _dateFns.isBefore)(endDate, startDate)) {\n            var _ref = [endDate, startDate];\n            startDate = _ref[0];\n            endDate = _ref[1];\n          }\n\n          startDate = startDate ? (0, _dateFns.endOfDay)(startDate) : null;\n          endDate = endDate ? (0, _dateFns.startOfDay)(endDate) : null;\n          var isInRange = (!startDate || (0, _dateFns.isAfter)(day, startDate)) && (!endDate || (0, _dateFns.isBefore)(day, endDate));\n          var isStartEdge = !isInRange && (0, _dateFns.isSameDay)(day, startDate);\n          var isEndEdge = !isInRange && (0, _dateFns.isSameDay)(day, endDate);\n\n          if (isInRange || isStartEdge || isEndEdge) {\n            return [].concat(_toConsumableArray(result), [_objectSpread({\n              isStartEdge: isStartEdge,\n              isEndEdge: isEndEdge,\n              isInRange: isInRange\n            }, range)]);\n          }\n\n          return result;\n        }, []);\n        return inRanges.map(function (range, i) {\n          var _classnames3;\n\n          return _react[\"default\"].createElement(\"span\", {\n            key: i,\n            className: (0, _classnames4[\"default\"])((_classnames3 = {}, _defineProperty(_classnames3, styles.startEdge, range.isStartEdge), _defineProperty(_classnames3, styles.endEdge, range.isEndEdge), _defineProperty(_classnames3, styles.inRange, range.isInRange), _classnames3)),\n            style: {\n              color: range.color || _this.props.color\n            }\n          });\n        });\n      });\n\n      _this.state = {\n        hover: false,\n        active: false\n      };\n      return _this;\n    }\n\n    _createClass(DayCell, [{\n      key: \"render\",\n      value: function render() {\n        return _react[\"default\"].createElement(\"button\", _extends({\n          type: \"button\",\n          onMouseEnter: this.handleMouseEvent,\n          onMouseLeave: this.handleMouseEvent,\n          onFocus: this.handleMouseEvent,\n          onMouseDown: this.handleMouseEvent,\n          onMouseUp: this.handleMouseEvent,\n          onBlur: this.handleMouseEvent,\n          onPauseCapture: this.handleMouseEvent,\n          onKeyDown: this.handleKeyEvent,\n          onKeyUp: this.handleKeyEvent,\n          className: this.getClassNames(this.props.styles)\n        }, this.props.disabled || this.props.isPassive ? {\n          tabIndex: -1\n        } : {}, {\n          style: {\n            color: this.props.color\n          }\n        }),\n          this.renderSelectionPlaceholders(),\n          this.renderPreviewPlaceholder(),\n          _react[\"default\"].createElement(\"span\", {\n            className: this.props.styles.dayNumber\n          }, _react[\"default\"].createElement(\"span\", null, (0, _dateFns.format)(this.props.day, this.props.dayDisplayFormat))\n            , _react[\"default\"].createElement(\"span\", {\n              className: `color_1_${_moment(this.props.day).format('MM-DD-YYYY')} color_element_1`,\n              // id: `color1${_moment(this.props.day).format('MMDDYYYY')}`,\n              // className:'color_element_1'\n            }),\n            _react[\"default\"].createElement(\"span\", {\n              className: `color_2_${_moment(this.props.day).format('MM-DD-YYYY')} color_element_2`,\n              // id: `color2${_moment(this.props.day).format('MMDDYYYY')}`,\n              // className:'color_element_2'\n            }),\n            _react[\"default\"].createElement(\"span\", {\n              className: `color_3_${_moment(this.props.day).format('MM-DD-YYYY')} color_element_3`,\n              // id: `color3${_moment(this.props.day).format('MMDDYYYY')}`,\n              // className:'color_element_3'\n            }),\n            _react[\"default\"].createElement(\"span\", {\n              className: `color_4_${_moment(this.props.day).format('MM-DD-YYYY')} color_element_4`,\n              // id: `color4${_moment(this.props.day).format('MMDDYYYY')}`,\n              // className:'color_element_4'\n            })\n          ));\n      }\n    }]);\n\n\n\n    return DayCell;\n  }(_react.Component);\n\nDayCell.defaultProps = {};\n\nvar rangeShape = _propTypes[\"default\"].shape({\n  startDate: _propTypes[\"default\"].object,\n  endDate: _propTypes[\"default\"].object,\n  color: _propTypes[\"default\"].string,\n  key: _propTypes[\"default\"].string,\n  autoFocus: _propTypes[\"default\"].bool,\n  disabled: _propTypes[\"default\"].bool,\n  showDateDisplay: _propTypes[\"default\"].bool\n});\n\nexports.rangeShape = rangeShape;\nDayCell.propTypes = {\n  day: _propTypes[\"default\"].object.isRequired,\n  dayDisplayFormat: _propTypes[\"default\"].string,\n  date: _propTypes[\"default\"].object,\n  ranges: _propTypes[\"default\"].arrayOf(rangeShape),\n  preview: _propTypes[\"default\"].shape({\n    startDate: _propTypes[\"default\"].object,\n    endDate: _propTypes[\"default\"].object,\n    color: _propTypes[\"default\"].string\n  }),\n  onPreviewChange: _propTypes[\"default\"].func,\n  previewColor: _propTypes[\"default\"].string,\n  disabled: _propTypes[\"default\"].bool,\n  isPassive: _propTypes[\"default\"].bool,\n  isToday: _propTypes[\"default\"].bool,\n  isWeekend: _propTypes[\"default\"].bool,\n  isStartOfWeek: _propTypes[\"default\"].bool,\n  isEndOfWeek: _propTypes[\"default\"].bool,\n  isStartOfMonth: _propTypes[\"default\"].bool,\n  isEndOfMonth: _propTypes[\"default\"].bool,\n  color: _propTypes[\"default\"].string,\n  displayMode: _propTypes[\"default\"].oneOf(['dateRange', 'date']),\n  styles: _propTypes[\"default\"].object,\n  onMouseDown: _propTypes[\"default\"].func,\n  onMouseUp: _propTypes[\"default\"].func,\n  onMouseEnter: _propTypes[\"default\"].func\n};\nvar _default = DayCell;\nexports[\"default\"] = _default;\n","/home/appinventiv/Documents/Project/tickt/web/src/plugins/react-date-range/dist/components/InputRangeField/index.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/verifyPhoneNumber.tsx",["1206","1207"],"/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/DocViewer.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/quoteJobCancel.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/quoteSuccess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/idSuccess.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/quoteJobs/success.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/services/analyticsTools.js",[],"/home/appinventiv/Documents/Project/tickt/web/src/redux/quotes/actions.ts",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/EmailVerification.tsx",["1208"],"import React, { useState, useEffect } from \"react\";\nimport { verifyOtp, resendOtp } from \"../../../redux/auth/actions\";\nimport Constants from \"../../../utils/constants\";\nimport regex from \"../../../utils/regex\";\nimport { setShowToast } from \"../../../redux/common/actions\";\nimport OtpInput from \"react-otp-input\";\n\ninterface Propstype {\n  updateSteps: (num: number, data: any) => void;\n  step: number;\n  history?: any;\n  email: any;\n}\n\nconst PhoneNumber = (props: Propstype) => {\n  const [errors, setErrors] = useState<any>({});\n  const [counter, setCounter] = useState(Constants.OTP_TIMER);\n  const [otp, setOTP] = useState(\"\");\n\n  const changeHandler = (newOtp: any) => {\n    setOTP(newOtp);\n  };\n\n  useEffect(() => {\n    const timer: any =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n    return () => clearInterval(timer);\n  }, [counter]);\n\n  const validateForm = () => {\n    const newErrors: any = {};\n    if (!otp) {\n      newErrors.otp = Constants.errorStrings.otpEmpty;\n    } else {\n      const otpRegex = new RegExp(regex.otp);\n      if (!otpRegex.test(otp)) {\n        newErrors.otp = Constants.errorStrings.otpIncorrect;\n      }\n    }\n    setErrors(newErrors);\n    return !Object.keys(newErrors).length;\n  };\n\n  const onSubmit = async (e: any) => {\n    e.preventDefault();\n    if (validateForm()) {\n      const data = {\n        email: props.email,\n        otp: otp,\n      };\n      const res: any = await verifyOtp(data);\n      if (res.success) {\n        props.updateSteps(props.step + 1, {\n          email: props.email,\n        });\n      }\n    }\n  };\n\n  const resendHandler = async () => {\n    let data = {\n      email: props.email,\n    };\n    let response = await resendOtp(data);\n    if (response.success) {\n      setShowToast(\n        true,\n        \"We have resent the verification code on your email. Please check your email\"\n      );\n      setCounter(Constants.OTP_TIMER);\n    }\n  };\n\n  return (\n    <div className=\"form_wrapper\">\n      <form onSubmit={onSubmit}>\n        <div className=\"form_field\">\n          <div className=\"otp_input_wrapper\">\n            <OtpInput\n              className=\"sms-no-box\"\n              inputStyle={{ width: \"48px\" }}\n              value={otp}\n              onChange={changeHandler}\n              numInputs={5}\n              isInputNum\n            />\n          </div>\n          {!!errors.otp && <span className=\"error_msg\">{errors.otp}</span>}\n        </div>\n\n        <div className=\"form_field\">\n          <span className=\"show_label\">\n            {\n              \"We have sent a verification code to your email. Please check the messages and enter the 5-digit code here.\"\n            }\n            {/* We have sent a verification code to your email. Please check email and enter the 5-digit code here. */}\n          </span>\n        </div>\n\n        {counter === 0 && (\n          <div className=\"form_field text-center\">\n            <span className=\"show_label\">Don’t you receive any codes?</span>\n            <a href=\"#\" className=\"link\" onClick={resendHandler}>\n              Re-send code\n            </a>\n          </div>\n        )}\n\n        {counter > 0 && (\n          <div className=\"form_field text-center\">\n            <span className=\"show_label timer\">\n              {counter > 59 ? `01 : 00` : `00 : ${counter}`}\n            </span>\n          </div>\n        )}\n\n        <div className=\"form_field\">\n          <button className=\"fill_btn btn-effect\">Next</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PhoneNumber;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/viewQuote.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/ListQuotes.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/EmailVerification.tsx",["1209"],"import React, { useState, useEffect } from 'react';\nimport { verifyOtp, resendOtp } from '../../../redux/auth/actions';\nimport Constants from '../../../utils/constants';\nimport regex from '../../../utils/regex';\nimport { setShowToast } from '../../../redux/common/actions';\nimport OtpInput from \"react-otp-input\";\n\ninterface Propstype {\n    updateSteps: (num: number, data: any) => void\n    step: number\n    history?: any\n    email: any,\n    userType: any\n}\n\nconst PhoneNumber = (props: Propstype) => {\n    const [errors, setErrors] = useState<any>({});\n    const [counter, setCounter] = useState(Constants.OTP_TIMER);\n    const [otp, setOTP] = useState('');\n\n    const changeHandler = (newOtp: any) => {\n        setOTP(newOtp)\n    }\n\n    useEffect(() => {\n        const timer: any = counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n        return () => clearInterval(timer);\n    }, [counter]);\n\n\n    const validateForm = () => {\n        const newErrors: any = {};\n        if (!otp) {\n            newErrors.otp = Constants.errorStrings.otpEmpty;\n        } else {\n            const otpRegex = new RegExp(regex.otp);\n            if (!otpRegex.test(otp)) {\n                newErrors.otp = Constants.errorStrings.otpIncorrect\n            }\n        }\n        setErrors(newErrors);\n        return !Object.keys(newErrors).length;\n    }\n\n    const onSubmit = async (e: any) => {\n        e.preventDefault();\n        if (validateForm()) {\n            const data = {\n                email:props.email,\n                otp: otp\n            }\n            const res: any = await verifyOtp(data)\n            if (res.success) {\n                props.updateSteps(props.step + 1, {\n                    email: props.email\n                })\n            }\n        }\n    }\n\n    const resendHandler = async () => {\n        let data = {\n            \"email\": props.email\n        };\n        let response = await resendOtp(data);\n        if (response.success) {\n            setShowToast(true, 'We have resent the verification code on your email. Please check your email');\n            setCounter(Constants.OTP_TIMER);\n        }\n    }\n\n    return (\n        <div className=\"form_wrapper\">\n            <form onSubmit={onSubmit}>\n\n\n                <div className=\"form_field\">\n                    <span className=\"show_label\">Verification Code</span>\n                    <div className=\"otp_input_wrapper\">\n                        <OtpInput\n                            className=\"sms-no-box\"\n                            inputStyle={{ \"width\": \"48px\" }}\n                            value={otp}\n                            onChange={changeHandler}\n                            numInputs={5}\n                            isInputNum\n                        />\n                    </div>\n                    {!!errors.otp && <span className=\"error_msg\">{errors.otp}</span>}\n                </div>\n\n                <div className=\"form_field\">\n                    <span className=\"show_label\">\n                        We have sent a verification code to your email. Please check email and enter the 5-digit code here.\n                    </span>\n                </div>\n\n                {counter === 0 && \n                <div className=\"form_field text-center\">\n                    <span className=\"show_label\">Don’t you receive any codes?</span>\n                    <a href=\"#\" className=\"link\" onClick={resendHandler}>Re-send code</a>\n                </div>\n                }\n                {counter > 0 && <div className=\"form_field text-center\">\n                    <span className=\"show_label timer\">{counter > 59 ? `01 : 00` : `00 : ${counter}`}</span>\n                </div>}\n\n                <div className=\"form_field\">\n                    <button className=\"fill_btn btn-effect\">Next</button>\n                </div>\n            </form>\n\n        </div>\n    )\n}\n\nexport default PhoneNumber\n\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/quoteJobs/quoteOuter.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/activeQuoteJob/activeQuoteOuter.tsx",["1210","1211","1212"],"import { useEffect, useState } from 'react';\nimport ActiveQuoteMark from '../activeQuoteJob/activeQuoteMark';\nimport { getHomeJobDetails } from '../../../../redux/homeSearch/actions';\nimport storageService from '../../../../utils/storageService';\n\nimport dummy from '../../../../assets/images/u_placeholder.jpg';\nimport more from '../../../../assets/images/icon-direction-right.png';\nimport noDataFound from \"../../../../assets/images/no-search-data.png\";\n\nconst ActiveQuoteOuter = (props: any) => {\n    const [dataItems, setDataItems] = useState<any>({});\n    const [isDataFetched, setIsDataFetched] = useState<boolean>(false);\n    const [isLoad, setIsLoad] = useState(true);\n\n    useEffect(() => {\n        preFetch();\n    }, []);\n\n    let jobId = props.location?.state?.jobData?.jobId;\n    let tradeId = props.location?.state?.jobData?.tradeId;\n    let specializationId = props.location?.state?.jobData?.specializationId;\n\n    const preFetch = async () => {\n        let data: any = {};\n        data.jobId = jobId;\n        data.tradeId = tradeId;\n        data.specializationId = specializationId;\n        let result: any = await getHomeJobDetails(data);\n        if (result.success) {\n            setDataItems(result?.data);\n        }\n    }\n\n    const dataFetched = (val: boolean) => {\n        setIsDataFetched(val);\n        setIsLoad(false);\n    }\n\n    const postedBy: any = dataItems?.postedBy || {};\n    const {\n        builderId,\n        builderImage,\n        builderName,\n        jobName,\n        ratings,\n        reviews\n    } = postedBy;\n\n    return (\n        <div className=\"detail_col\">\n            <div className=\"flex_row\">\n                <ActiveQuoteMark\n                    {...props}\n                    jobId={jobId}\n                    dataFetched={dataFetched}\n                />\n                {isDataFetched ? (<div className=\"flex_col_sm_6 col_ruler\">\n                    <span className=\"sub_title\">Posted by</span>\n                    <div className=\"tradie_card posted_by \">\n                        <a href=\"javascript:void(0)\" className=\"chat circle\"\n                            onClick={(e) => {\n                                e.preventDefault();\n                                props.history.push({\n                                    pathname: `/chat`,\n                                    state: {\n                                        tradieId: storageService.getItem('userInfo')?._id,\n                                        builderId: builderId,\n                                        jobId: jobId,\n                                        jobName: jobName\n                                    }\n                                })\n                            }} />\n                        <div className=\"user_wrap\"\n                            onClick={() => {\n                                props.history.push(`/builder-info?builderId=${builderId}`)\n                            }}>\n                            <figure className=\"u_img\">\n                                <img\n                                    src={builderImage || dummy}\n                                    alt=\"traide-img\"\n                                    onError={(e: any) => {\n                                        if (e?.target?.onerror) {\n                                            e.target.onerror = null;\n                                        }\n                                        if (e?.target?.src) {\n                                            e.target.src = dummy;\n                                        }\n                                    }}\n                                />\n                            </figure>\n                            <div className=\"details\">\n                                <span className=\"name\">{builderName}</span>\n                                <span className=\"rating\">{ratings} | {reviews} reviews</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"relate\">\n                        <span className=\"sub_title\">\n                            {'Job details'}\n                        </span>\n                        <span\n                            className=\"edit_icon\"\n                            title=\"More\"\n                            onClick={() =>\n                                props.history.push(`/job-details-page?jobId=${jobId}&redirect_from=jobs`)}>\n                            <img src={more} alt=\"more\" />\n                        </span>\n                    </div>\n                </div>) : !props.loading && !isLoad && (\n                    <div className=\"no_record  m-t-vh\">\n                        <figure className=\"no_img\">\n                            <img src={noDataFound} alt=\"data not found\" />\n                        </figure>\n                        <span>No Data Found</span>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n};\n\nexport default ActiveQuoteOuter;\n","/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/digitalIdVerification.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/quoteJobs/quoteMark.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/activeQuoteJob/activeQuoteMark.tsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/addBankDetails/approveMilestonePayment.jsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/addBankDetails/paymentSetupForm.jsx",[],"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/addBankDetails/becsForm.jsx",["1213"],"import { useState } from 'react';\nimport { AuBankAccountElement } from '@stripe/react-stripe-js';\n\n// Custom styling can be passed as options when creating an Element.\nconst AU_BANK_ACCOUNT_STYLE = {\n  base: {\n    color: '#161d4a',\n    font: 'Neue Haas Grotesk Text Pro Medium',\n    fontSize: '14px',\n    '::placeholder': {\n      color: '#aab7c4'\n    },\n    ':-webkit-autofill': {\n      color: '#32325d',\n    },\n  },\n  invalid: {\n    color: '#fa755a',\n    iconColor: '#fa755a',\n    ':-webkit-autofill': {\n      color: '#fa755a',\n    },\n  }\n};\n\nconst AU_BANK_ACCOUNT_ELEMENT_OPTIONS = {\n  style: AU_BANK_ACCOUNT_STYLE,\n  disabled: false,\n  hideIcon: false,\n  iconStyle: \"solid\", // or \"default\"\n};\n\nexport default function BecsForm(props) {\n  const [accountName, setAccountName] = useState('');\n  const [accountEmail, setAccountEmail] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    if (name === 'accountName') {\n      setAccountName(value);\n      return;\n    }\n    if (name === 'accountEmail') {\n      setAccountEmail(value);\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => props.onSubmit(e, accountName, accountEmail)}>\n      <div className=\"form-row inline\">\n        <div className=\"tagg mb30\">\n          <label className=\"form_label\">Name</label>\n          <div className=\"text_field\">\n            <input\n              type=\"text\"\n              name=\"accountName\"\n              placeholder=\"John Smith\"\n              required\n              onChange={handleChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"tagg mb30\">\n          <label className=\"form_label\">Email Address</label>\n          <div className=\"text_field\">\n            <input\n              name=\"accountEmail\"\n              type=\"email\"\n              placeholder=\"john.smith@example.com\"\n              required\n              onChange={handleChange}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"form-row\">\n        <label className=\"form_label\">\n          Bank Account\n          <AuBankAccountElement options={AU_BANK_ACCOUNT_ELEMENT_OPTIONS} />\n        </label>\n      </div>\n\n      <div className=\"form_field\">\n        <div className=\"checkbox_wrap agree_check mt-15\">\n          <label>By providing your bank account details, you agree to this Direct Debit Request\n            and the </label>\n          <a onClick={() => window.open(\"https://stripe.com/au-becs-dd-service-agreement/legal\", \"_blank\")} rel=\"noopener\" className=\"link\">Direct Debit Request service agreement</a>\n          <label> and authorise Stripe Payments Australia Pty Ltd ACN 160 180 343\n            Direct Debit User ID number 507156 (“Stripe”) to debit your account\n            through the Bulk Electronic Clearing System (BECS) on behalf of\n            Rocket Rides (the \"Merchant\") for any amounts separately\n            communicated to you by the Merchant. You certify that you are either\n            an account holder or an authorised signatory on the account listed above.</label>\n        </div>\n      </div>\n\n      <button\n        type=\"submit\"\n        disabled={props.disabled}\n        className={`fill_btn full_btn btn-effect ${props.disabled ? 'disable_btn' : ''}`}\n      >{`Confirm payment of ${props.milestoneTotalAmount}`}</button>\n    </form>\n  )\n}",{"ruleId":"1214","replacedBy":"1215"},{"ruleId":"1216","replacedBy":"1217"},{"ruleId":"1218","severity":1,"message":"1219","line":1,"column":10,"nodeType":"1220","messageId":"1221","endLine":1,"endColumn":29},{"ruleId":"1222","severity":1,"message":"1223","line":64,"column":57,"nodeType":"1224","messageId":"1225","endLine":64,"endColumn":58},{"ruleId":"1222","severity":1,"message":"1223","line":64,"column":81,"nodeType":"1224","messageId":"1225","endLine":64,"endColumn":82},{"ruleId":"1222","severity":1,"message":"1223","line":66,"column":49,"nodeType":"1224","messageId":"1225","endLine":66,"endColumn":50},{"ruleId":"1226","severity":1,"message":"1227","line":48,"column":1,"nodeType":"1228","endLine":53,"endColumn":2},{"ruleId":"1226","severity":1,"message":"1227","line":120,"column":1,"nodeType":"1228","endLine":130,"endColumn":2},{"ruleId":"1222","severity":1,"message":"1223","line":155,"column":106,"nodeType":"1224","messageId":"1225","endLine":155,"endColumn":107},{"ruleId":"1218","severity":1,"message":"1229","line":18,"column":12,"nodeType":"1220","messageId":"1221","endLine":18,"endColumn":18},{"ruleId":"1218","severity":1,"message":"1230","line":18,"column":20,"nodeType":"1220","messageId":"1221","endLine":18,"endColumn":29},{"ruleId":"1218","severity":1,"message":"1231","line":20,"column":12,"nodeType":"1220","messageId":"1221","endLine":20,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1232","line":20,"column":22,"nodeType":"1220","messageId":"1221","endLine":20,"endColumn":33},{"ruleId":"1218","severity":1,"message":"1233","line":22,"column":12,"nodeType":"1220","messageId":"1221","endLine":22,"endColumn":24},{"ruleId":"1234","severity":1,"message":"1235","line":174,"column":17,"nodeType":"1236","endLine":174,"endColumn":72},{"ruleId":"1237","severity":1,"message":"1238","line":182,"column":13,"nodeType":"1236","endLine":182,"endColumn":65},{"ruleId":"1237","severity":1,"message":"1238","line":201,"column":13,"nodeType":"1236","endLine":201,"endColumn":60},{"ruleId":"1239","severity":1,"message":"1240","line":60,"column":21,"nodeType":"1236","endLine":60,"endColumn":25},{"ruleId":"1241","severity":1,"message":"1242","line":9,"column":9,"nodeType":"1236","endLine":9,"endColumn":57},{"ruleId":"1239","severity":1,"message":"1240","line":84,"column":21,"nodeType":"1236","endLine":84,"endColumn":25},{"ruleId":"1218","severity":1,"message":"1243","line":40,"column":8,"nodeType":"1220","messageId":"1221","endLine":40,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1244","line":88,"column":12,"nodeType":"1220","messageId":"1221","endLine":88,"endColumn":17},{"ruleId":"1245","severity":1,"message":"1246","line":891,"column":32,"nodeType":"1247","messageId":"1248","endLine":891,"endColumn":52},{"ruleId":"1249","severity":1,"message":"1250","line":66,"column":7,"nodeType":"1220","messageId":"1221","endLine":66,"endColumn":26},{"ruleId":"1249","severity":1,"message":"1251","line":386,"column":43,"nodeType":"1220","messageId":"1221","endLine":386,"endColumn":48},{"ruleId":"1218","severity":1,"message":"1252","line":5,"column":3,"nodeType":"1220","messageId":"1221","endLine":5,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1253","line":6,"column":3,"nodeType":"1220","messageId":"1221","endLine":6,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1254","line":7,"column":3,"nodeType":"1220","messageId":"1221","endLine":7,"endColumn":26},{"ruleId":"1218","severity":1,"message":"1255","line":8,"column":3,"nodeType":"1220","messageId":"1221","endLine":8,"endColumn":26},{"ruleId":"1218","severity":1,"message":"1256","line":25,"column":10,"nodeType":"1220","messageId":"1221","endLine":25,"endColumn":22},{"ruleId":"1218","severity":1,"message":"1257","line":30,"column":8,"nodeType":"1220","messageId":"1221","endLine":30,"endColumn":24},{"ruleId":"1218","severity":1,"message":"1258","line":38,"column":8,"nodeType":"1220","messageId":"1221","endLine":38,"endColumn":12},{"ruleId":"1218","severity":1,"message":"1259","line":51,"column":8,"nodeType":"1220","messageId":"1221","endLine":51,"endColumn":21},{"ruleId":"1218","severity":1,"message":"1260","line":52,"column":8,"nodeType":"1220","messageId":"1221","endLine":52,"endColumn":25},{"ruleId":"1218","severity":1,"message":"1261","line":445,"column":9,"nodeType":"1220","messageId":"1221","endLine":445,"endColumn":25},{"ruleId":"1218","severity":1,"message":"1262","line":654,"column":11,"nodeType":"1220","messageId":"1221","endLine":654,"endColumn":18},{"ruleId":"1218","severity":1,"message":"1261","line":683,"column":9,"nodeType":"1220","messageId":"1221","endLine":683,"endColumn":25},{"ruleId":"1218","severity":1,"message":"1263","line":702,"column":9,"nodeType":"1220","messageId":"1221","endLine":702,"endColumn":29},{"ruleId":"1218","severity":1,"message":"1264","line":1408,"column":27,"nodeType":"1220","messageId":"1221","endLine":1408,"endColumn":39},{"ruleId":"1239","severity":1,"message":"1240","line":43,"column":15,"nodeType":"1236","endLine":43,"endColumn":19},{"ruleId":"1218","severity":1,"message":"1265","line":2,"column":10,"nodeType":"1220","messageId":"1221","endLine":2,"endColumn":21},{"ruleId":"1239","severity":1,"message":"1240","line":495,"column":15,"nodeType":"1236","endLine":495,"endColumn":19},{"ruleId":"1237","severity":1,"message":"1238","line":555,"column":23,"nodeType":"1236","endLine":563,"endColumn":24},{"ruleId":"1218","severity":1,"message":"1266","line":585,"column":9,"nodeType":"1220","messageId":"1221","endLine":585,"endColumn":31},{"ruleId":"1214","replacedBy":"1215"},{"ruleId":"1216","replacedBy":"1217"},{"ruleId":"1218","severity":1,"message":"1267","line":29,"column":10,"nodeType":"1220","messageId":"1221","endLine":29,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1268","line":32,"column":10,"nodeType":"1220","messageId":"1221","endLine":32,"endColumn":17},{"ruleId":"1218","severity":1,"message":"1269","line":33,"column":10,"nodeType":"1220","messageId":"1221","endLine":33,"endColumn":23},{"ruleId":"1218","severity":1,"message":"1270","line":3,"column":10,"nodeType":"1220","messageId":"1221","endLine":3,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1271","line":3,"column":22,"nodeType":"1220","messageId":"1221","endLine":3,"endColumn":27},{"ruleId":"1218","severity":1,"message":"1272","line":3,"column":29,"nodeType":"1220","messageId":"1221","endLine":3,"endColumn":41},{"ruleId":"1273","severity":1,"message":"1274","line":37,"column":17,"nodeType":"1236","endLine":37,"endColumn":117},{"ruleId":"1237","severity":1,"message":"1275","line":37,"column":17,"nodeType":"1236","endLine":37,"endColumn":117},{"ruleId":"1245","severity":1,"message":"1246","line":37,"column":25,"nodeType":"1247","messageId":"1248","endLine":37,"endColumn":45},{"ruleId":"1218","severity":1,"message":"1276","line":85,"column":43,"nodeType":"1220","messageId":"1221","endLine":85,"endColumn":50},{"ruleId":"1218","severity":1,"message":"1277","line":15,"column":21,"nodeType":"1220","messageId":"1221","endLine":15,"endColumn":33},{"ruleId":"1237","severity":1,"message":"1238","line":90,"column":48,"nodeType":"1236","endLine":90,"endColumn":108},{"ruleId":"1237","severity":1,"message":"1238","line":101,"column":55,"nodeType":"1236","endLine":101,"endColumn":116},{"ruleId":"1218","severity":1,"message":"1278","line":4,"column":11,"nodeType":"1220","messageId":"1221","endLine":4,"endColumn":16},{"ruleId":"1218","severity":1,"message":"1279","line":21,"column":7,"nodeType":"1220","messageId":"1221","endLine":21,"endColumn":25},{"ruleId":"1234","severity":1,"message":"1235","line":49,"column":102,"nodeType":"1236","endLine":49,"endColumn":157},{"ruleId":"1237","severity":1,"message":"1238","line":61,"column":51,"nodeType":"1236","endLine":61,"endColumn":71},{"ruleId":"1241","severity":1,"message":"1242","line":94,"column":9,"nodeType":"1236","endLine":94,"endColumn":57},{"ruleId":"1234","severity":1,"message":"1235","line":102,"column":13,"nodeType":"1236","endLine":102,"endColumn":56},{"ruleId":"1241","severity":1,"message":"1242","line":123,"column":9,"nodeType":"1236","endLine":123,"endColumn":57},{"ruleId":"1218","severity":1,"message":"1280","line":11,"column":8,"nodeType":"1220","messageId":"1221","endLine":11,"endColumn":17},{"ruleId":"1218","severity":1,"message":"1281","line":37,"column":10,"nodeType":"1220","messageId":"1221","endLine":37,"endColumn":14},{"ruleId":"1218","severity":1,"message":"1282","line":42,"column":10,"nodeType":"1220","messageId":"1221","endLine":42,"endColumn":16},{"ruleId":"1237","severity":1,"message":"1275","line":219,"column":23,"nodeType":"1236","endLine":219,"endColumn":69},{"ruleId":"1245","severity":1,"message":"1246","line":219,"column":31,"nodeType":"1247","messageId":"1248","endLine":219,"endColumn":51},{"ruleId":"1237","severity":1,"message":"1275","line":235,"column":27,"nodeType":"1236","endLine":240,"endColumn":28},{"ruleId":"1245","severity":1,"message":"1246","line":236,"column":34,"nodeType":"1247","messageId":"1248","endLine":236,"endColumn":54},{"ruleId":"1237","severity":1,"message":"1275","line":295,"column":25,"nodeType":"1236","endLine":300,"endColumn":26},{"ruleId":"1245","severity":1,"message":"1246","line":296,"column":32,"nodeType":"1247","messageId":"1248","endLine":296,"endColumn":52},{"ruleId":"1237","severity":1,"message":"1275","line":355,"column":21,"nodeType":"1236","endLine":355,"endColumn":67},{"ruleId":"1245","severity":1,"message":"1246","line":355,"column":29,"nodeType":"1247","messageId":"1248","endLine":355,"endColumn":49},{"ruleId":"1218","severity":1,"message":"1283","line":21,"column":10,"nodeType":"1220","messageId":"1221","endLine":21,"endColumn":17},{"ruleId":"1218","severity":1,"message":"1284","line":82,"column":9,"nodeType":"1220","messageId":"1221","endLine":82,"endColumn":19},{"ruleId":"1218","severity":1,"message":"1285","line":125,"column":19,"nodeType":"1220","messageId":"1221","endLine":125,"endColumn":22},{"ruleId":"1218","severity":1,"message":"1286","line":126,"column":19,"nodeType":"1220","messageId":"1221","endLine":126,"endColumn":22},{"ruleId":"1273","severity":1,"message":"1274","line":141,"column":15,"nodeType":"1236","endLine":145,"endColumn":16},{"ruleId":"1237","severity":1,"message":"1275","line":141,"column":15,"nodeType":"1236","endLine":145,"endColumn":16},{"ruleId":"1245","severity":1,"message":"1246","line":142,"column":22,"nodeType":"1247","messageId":"1248","endLine":142,"endColumn":42},{"ruleId":"1218","severity":1,"message":"1287","line":6,"column":8,"nodeType":"1220","messageId":"1221","endLine":6,"endColumn":18},{"ruleId":"1218","severity":1,"message":"1288","line":3,"column":8,"nodeType":"1220","messageId":"1221","endLine":3,"endColumn":16},{"ruleId":"1218","severity":1,"message":"1289","line":26,"column":10,"nodeType":"1220","messageId":"1221","endLine":26,"endColumn":24},{"ruleId":"1218","severity":1,"message":"1290","line":32,"column":10,"nodeType":"1220","messageId":"1221","endLine":32,"endColumn":19},{"ruleId":"1218","severity":1,"message":"1291","line":94,"column":10,"nodeType":"1220","messageId":"1221","endLine":94,"endColumn":24},{"ruleId":"1218","severity":1,"message":"1292","line":94,"column":26,"nodeType":"1220","messageId":"1221","endLine":94,"endColumn":43},{"ruleId":"1218","severity":1,"message":"1293","line":96,"column":10,"nodeType":"1220","messageId":"1221","endLine":96,"endColumn":31},{"ruleId":"1218","severity":1,"message":"1230","line":97,"column":18,"nodeType":"1220","messageId":"1221","endLine":97,"endColumn":27},{"ruleId":"1218","severity":1,"message":"1294","line":776,"column":23,"nodeType":"1220","messageId":"1221","endLine":776,"endColumn":39},{"ruleId":"1218","severity":1,"message":"1295","line":56,"column":9,"nodeType":"1220","messageId":"1221","endLine":56,"endColumn":13},{"ruleId":"1218","severity":1,"message":"1296","line":15,"column":7,"nodeType":"1220","messageId":"1221","endLine":15,"endColumn":28},{"ruleId":"1237","severity":1,"message":"1275","line":1019,"column":17,"nodeType":"1236","endLine":1030,"endColumn":18},{"ruleId":"1245","severity":1,"message":"1246","line":1020,"column":24,"nodeType":"1247","messageId":"1248","endLine":1020,"endColumn":44},{"ruleId":"1237","severity":1,"message":"1238","line":1163,"column":21,"nodeType":"1236","endLine":1171,"endColumn":22},{"ruleId":"1237","severity":1,"message":"1238","line":1175,"column":21,"nodeType":"1236","endLine":1183,"endColumn":22},{"ruleId":"1218","severity":1,"message":"1297","line":1220,"column":35,"nodeType":"1220","messageId":"1221","endLine":1220,"endColumn":49},{"ruleId":"1234","severity":1,"message":"1235","line":1310,"column":43,"nodeType":"1236","endLine":1310,"endColumn":67},{"ruleId":"1234","severity":1,"message":"1235","line":1313,"column":43,"nodeType":"1236","endLine":1313,"endColumn":77},{"ruleId":"1234","severity":1,"message":"1235","line":1414,"column":39,"nodeType":"1236","endLine":1414,"endColumn":63},{"ruleId":"1234","severity":1,"message":"1235","line":1417,"column":39,"nodeType":"1236","endLine":1417,"endColumn":73},{"ruleId":"1237","severity":1,"message":"1238","line":1881,"column":15,"nodeType":"1236","endLine":1886,"endColumn":16},{"ruleId":"1218","severity":1,"message":"1298","line":20,"column":12,"nodeType":"1220","messageId":"1221","endLine":20,"endColumn":22},{"ruleId":"1218","severity":1,"message":"1299","line":2,"column":8,"nodeType":"1220","messageId":"1221","endLine":2,"endColumn":22},{"ruleId":"1237","severity":1,"message":"1238","line":70,"column":11,"nodeType":"1236","endLine":70,"endColumn":58},{"ruleId":"1218","severity":1,"message":"1300","line":2,"column":10,"nodeType":"1220","messageId":"1221","endLine":2,"endColumn":27},{"ruleId":"1218","severity":1,"message":"1301","line":2,"column":29,"nodeType":"1220","messageId":"1221","endLine":2,"endColumn":38},{"ruleId":"1218","severity":1,"message":"1302","line":2,"column":58,"nodeType":"1220","messageId":"1221","endLine":2,"endColumn":67},{"ruleId":"1237","severity":1,"message":"1275","line":98,"column":21,"nodeType":"1236","endLine":98,"endColumn":74},{"ruleId":"1234","severity":1,"message":"1235","line":56,"column":19,"nodeType":"1236","endLine":56,"endColumn":75},{"ruleId":"1234","severity":1,"message":"1235","line":52,"column":102,"nodeType":"1236","endLine":52,"endColumn":157},{"ruleId":"1237","severity":1,"message":"1238","line":109,"column":25,"nodeType":"1236","endLine":109,"endColumn":129},{"ruleId":"1237","severity":1,"message":"1238","line":111,"column":25,"nodeType":"1236","endLine":111,"endColumn":127},{"ruleId":"1237","severity":1,"message":"1238","line":127,"column":60,"nodeType":"1236","endLine":127,"endColumn":107},{"ruleId":"1234","severity":1,"message":"1235","line":132,"column":45,"nodeType":"1236","endLine":132,"endColumn":69},{"ruleId":"1234","severity":1,"message":"1235","line":135,"column":45,"nodeType":"1236","endLine":135,"endColumn":79},{"ruleId":"1237","severity":1,"message":"1238","line":158,"column":21,"nodeType":"1236","endLine":158,"endColumn":71},{"ruleId":"1218","severity":1,"message":"1303","line":2,"column":8,"nodeType":"1220","messageId":"1221","endLine":2,"endColumn":17},{"ruleId":"1218","severity":1,"message":"1304","line":5,"column":8,"nodeType":"1220","messageId":"1221","endLine":5,"endColumn":9},{"ruleId":"1218","severity":1,"message":"1305","line":100,"column":17,"nodeType":"1220","messageId":"1221","endLine":100,"endColumn":21},{"ruleId":"1218","severity":1,"message":"1306","line":100,"column":23,"nodeType":"1220","messageId":"1221","endLine":100,"endColumn":28},{"ruleId":"1218","severity":1,"message":"1269","line":35,"column":12,"nodeType":"1220","messageId":"1221","endLine":35,"endColumn":25},{"ruleId":"1218","severity":1,"message":"1307","line":37,"column":12,"nodeType":"1220","messageId":"1221","endLine":37,"endColumn":27},{"ruleId":"1218","severity":1,"message":"1287","line":10,"column":8,"nodeType":"1220","messageId":"1221","endLine":10,"endColumn":18},{"ruleId":"1218","severity":1,"message":"1308","line":6,"column":8,"nodeType":"1220","messageId":"1221","endLine":6,"endColumn":19},{"ruleId":"1218","severity":1,"message":"1309","line":6,"column":8,"nodeType":"1220","messageId":"1221","endLine":6,"endColumn":15},{"ruleId":"1218","severity":1,"message":"1310","line":7,"column":8,"nodeType":"1220","messageId":"1221","endLine":7,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1288","line":8,"column":8,"nodeType":"1220","messageId":"1221","endLine":8,"endColumn":16},{"ruleId":"1218","severity":1,"message":"1311","line":23,"column":8,"nodeType":"1220","messageId":"1221","endLine":23,"endColumn":20},{"ruleId":"1241","severity":1,"message":"1242","line":535,"column":51,"nodeType":"1236","endLine":541,"endColumn":53},{"ruleId":"1273","severity":1,"message":"1274","line":613,"column":17,"nodeType":"1236","endLine":628,"endColumn":19},{"ruleId":"1237","severity":1,"message":"1275","line":613,"column":17,"nodeType":"1236","endLine":628,"endColumn":19},{"ruleId":"1245","severity":1,"message":"1246","line":614,"column":24,"nodeType":"1247","messageId":"1248","endLine":614,"endColumn":44},{"ruleId":"1218","severity":1,"message":"1312","line":1081,"column":17,"nodeType":"1220","messageId":"1221","endLine":1081,"endColumn":21},{"ruleId":"1237","severity":1,"message":"1238","line":771,"column":19,"nodeType":"1236","endLine":771,"endColumn":76},{"ruleId":"1234","severity":1,"message":"1235","line":773,"column":23,"nodeType":"1236","endLine":773,"endColumn":42},{"ruleId":"1218","severity":1,"message":"1303","line":2,"column":8,"nodeType":"1220","messageId":"1221","endLine":2,"endColumn":17},{"ruleId":"1218","severity":1,"message":"1256","line":3,"column":10,"nodeType":"1220","messageId":"1221","endLine":3,"endColumn":22},{"ruleId":"1218","severity":1,"message":"1230","line":17,"column":18,"nodeType":"1220","messageId":"1221","endLine":17,"endColumn":27},{"ruleId":"1237","severity":1,"message":"1238","line":365,"column":11,"nodeType":"1236","endLine":368,"endColumn":12},{"ruleId":"1237","severity":1,"message":"1238","line":381,"column":11,"nodeType":"1236","endLine":384,"endColumn":12},{"ruleId":"1237","severity":1,"message":"1238","line":389,"column":11,"nodeType":"1236","endLine":392,"endColumn":12},{"ruleId":"1234","severity":1,"message":"1235","line":445,"column":29,"nodeType":"1236","endLine":449,"endColumn":31},{"ruleId":"1237","severity":1,"message":"1238","line":530,"column":15,"nodeType":"1236","endLine":533,"endColumn":16},{"ruleId":"1237","severity":1,"message":"1238","line":631,"column":13,"nodeType":"1236","endLine":631,"endColumn":63},{"ruleId":"1218","severity":1,"message":"1313","line":236,"column":13,"nodeType":"1220","messageId":"1221","endLine":236,"endColumn":24},{"ruleId":"1218","severity":1,"message":"1314","line":12,"column":11,"nodeType":"1220","messageId":"1221","endLine":12,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1315","line":19,"column":12,"nodeType":"1220","messageId":"1221","endLine":19,"endColumn":21},{"ruleId":"1218","severity":1,"message":"1316","line":23,"column":12,"nodeType":"1220","messageId":"1221","endLine":23,"endColumn":22},{"ruleId":"1218","severity":1,"message":"1291","line":95,"column":10,"nodeType":"1220","messageId":"1221","endLine":95,"endColumn":24},{"ruleId":"1218","severity":1,"message":"1292","line":95,"column":26,"nodeType":"1220","messageId":"1221","endLine":95,"endColumn":43},{"ruleId":"1218","severity":1,"message":"1293","line":97,"column":10,"nodeType":"1220","messageId":"1221","endLine":97,"endColumn":31},{"ruleId":"1218","severity":1,"message":"1230","line":98,"column":18,"nodeType":"1220","messageId":"1221","endLine":98,"endColumn":27},{"ruleId":"1218","severity":1,"message":"1305","line":514,"column":15,"nodeType":"1220","messageId":"1221","endLine":514,"endColumn":19},{"ruleId":"1218","severity":1,"message":"1306","line":514,"column":21,"nodeType":"1220","messageId":"1221","endLine":514,"endColumn":26},{"ruleId":"1218","severity":1,"message":"1317","line":19,"column":23,"nodeType":"1220","messageId":"1221","endLine":19,"endColumn":35},{"ruleId":"1218","severity":1,"message":"1318","line":20,"column":22,"nodeType":"1220","messageId":"1221","endLine":20,"endColumn":33},{"ruleId":"1218","severity":1,"message":"1319","line":21,"column":21,"nodeType":"1220","messageId":"1221","endLine":21,"endColumn":31},{"ruleId":"1218","severity":1,"message":"1320","line":22,"column":27,"nodeType":"1220","messageId":"1221","endLine":22,"endColumn":41},{"ruleId":"1218","severity":1,"message":"1317","line":30,"column":21,"nodeType":"1220","messageId":"1221","endLine":30,"endColumn":33},{"ruleId":"1218","severity":1,"message":"1267","line":36,"column":10,"nodeType":"1220","messageId":"1221","endLine":36,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1321","line":44,"column":10,"nodeType":"1220","messageId":"1221","endLine":44,"endColumn":21},{"ruleId":"1218","severity":1,"message":"1267","line":34,"column":10,"nodeType":"1220","messageId":"1221","endLine":34,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1267","line":34,"column":10,"nodeType":"1220","messageId":"1221","endLine":34,"endColumn":20},{"ruleId":"1218","severity":1,"message":"1322","line":73,"column":9,"nodeType":"1220","messageId":"1221","endLine":73,"endColumn":21},{"ruleId":"1218","severity":1,"message":"1323","line":120,"column":9,"nodeType":"1220","messageId":"1221","endLine":120,"endColumn":27},{"ruleId":"1218","severity":1,"message":"1324","line":19,"column":12,"nodeType":"1220","messageId":"1221","endLine":19,"endColumn":23},{"ruleId":"1237","severity":1,"message":"1275","line":116,"column":29,"nodeType":"1236","endLine":116,"endColumn":82},{"ruleId":"1234","severity":1,"message":"1235","line":98,"column":33,"nodeType":"1236","endLine":98,"endColumn":88},{"ruleId":"1218","severity":1,"message":"1267","line":29,"column":10,"nodeType":"1220","messageId":"1221","endLine":29,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1326","line":216,"column":190,"nodeType":"1220","messageId":"1327","endLine":216,"endColumn":195},{"ruleId":"1218","severity":1,"message":"1328","line":25,"column":12,"nodeType":"1220","messageId":"1221","endLine":25,"endColumn":26},{"ruleId":"1329","severity":1,"message":"1330","line":98,"column":9,"nodeType":"1331","messageId":"1332","endLine":124,"endColumn":10},{"ruleId":"1218","severity":1,"message":"1229","line":15,"column":12,"nodeType":"1220","messageId":"1221","endLine":15,"endColumn":18},{"ruleId":"1237","severity":1,"message":"1275","line":87,"column":21,"nodeType":"1236","endLine":87,"endColumn":74},{"ruleId":"1237","severity":1,"message":"1275","line":103,"column":13,"nodeType":"1236","endLine":103,"endColumn":66},{"ruleId":"1237","severity":1,"message":"1275","line":101,"column":21,"nodeType":"1236","endLine":101,"endColumn":74},{"ruleId":"1273","severity":1,"message":"1274","line":60,"column":25,"nodeType":"1236","endLine":72,"endColumn":34},{"ruleId":"1237","severity":1,"message":"1275","line":60,"column":25,"nodeType":"1236","endLine":72,"endColumn":34},{"ruleId":"1245","severity":1,"message":"1246","line":60,"column":33,"nodeType":"1247","messageId":"1248","endLine":60,"endColumn":53},{"ruleId":"1237","severity":1,"message":"1238","line":88,"column":11,"nodeType":"1236","endLine":88,"endColumn":141},"no-native-reassign",["1333"],"no-negated-in-lhs",["1334"],"@typescript-eslint/no-unused-vars","'getTradieReviewList' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'jobsList' is assigned a value but never used.","'setJobsList' is assigned a value but never used.","'selectedItem' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'notification' is defined but never used.","'value' is assigned a value but never used.","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","no-unused-vars","'isTokenSentToServer' is assigned a value but never used.","'count' is assigned a value but never used.","'getBuilderProfile' is defined but never used.","'tradieReviewReply' is defined but never used.","'tradieUpdateReviewReply' is defined but never used.","'tradieRemoveReviewReply' is defined but never used.","'setShowToast' is defined but never used.","'TradieJobInfoBox' is defined but never used.","'menu' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'profileData' is assigned a value but never used.","'SVGIcon' is assigned a value but never used.","'toggleSpecialisation' is assigned a value but never used.","'replyId' is assigned a value but never used.","'useLocation' is defined but never used.","'getPendingRequestCount' is assigned a value but never used.","'localFiles' is assigned a value but never used.","'toggler' is assigned a value but never used.","'selectedSlide' is assigned a value but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'createStyles' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'jobtype' is assigned a value but never used.","'setStateData' is assigned a value but never used.","'Props' is defined but never used.","'builderEnableSteps' is assigned a value but never used.","'emptyChat' is defined but never used.","'user' is assigned a value but never used.","'roomId' is assigned a value but never used.","'markers' is assigned a value but never used.","'onMapClick' is assigned a value but never used.","'lat' is assigned a value but never used.","'lng' is assigned a value but never used.","'activeJobs' is defined but never used.","'pastJobs' is defined but never used.","'filterAnchorEl' is assigned a value but never used.","'prevLocal' is assigned a value but never used.","'recentLocation' is assigned a value but never used.","'setRecentLocation' is assigned a value but never used.","'enableCurrentLocation' is assigned a value but never used.","'selected_address' is assigned a value but never used.","'data' is assigned a value but never used.","'NOTIFICATION_CATEGORY' is assigned a value but never used.","'formattedValue' is assigned a value but never used.","'localFetch' is assigned a value but never used.","'storageService' is defined but never used.","'checkMobileNumber' is defined but never used.","'verifyOtp' is defined but never used.","'resendOtp' is defined but never used.","'Constants' is defined but never used.","'_' is defined but never used.","'city' is assigned a value but never used.","'state' is assigned a value but never used.","'renderAsyncLoad' is assigned a value but never used.","'appliedJobs' is defined but never used.","'newJobs' is defined but never used.","'newApprovals' is defined but never used.","'verifiedIcon' is defined but never used.","'page' is assigned a value but never used.","'item_status' is assigned a value but never used.","'Proptypes' is defined but never used.","'dataItems' is assigned a value but never used.","'deleteItem' is assigned a value but never used.","'setErrorData' is assigned a value but never used.","'setFilesUrl' is assigned a value but never used.","'setToggler' is assigned a value but never used.","'setSelectSlide' is assigned a value but never used.","'sortedItems' is assigned a value but never used.","'onFileChange' is assigned a value but never used.","'renderbyFileFormat' is assigned a value but never used.","'loadingTrue' is assigned a value but never used.","no-use-before-define","'color' was used before it was defined.","usedBeforeDefined","'formattedDates' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]