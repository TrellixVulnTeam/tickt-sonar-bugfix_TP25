{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/components/requestMonitored.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport templateImage from '../../../assets/images/thanks-bg.jpg';\nimport { setLoading } from '../../../redux/common/actions';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RequestMonitored = props => {\n  _s();\n\n  const {\n    pathname\n  } = useLocation();\n  const [isLoad, setImageLoad] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n  }, []);\n  useEffect(() => {\n    if (!isLoad) {\n      setLoading(false);\n    }\n  }, [isLoad]);\n  console.log({\n    pathname\n  });\n  let isBuilderCancelRequest = pathname === '/request-monitored/cc/bb' ? true : false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"img_text_wrap\",\n    children: /*#__PURE__*/_jsxDEV(\"figure\", {\n      className: \"full_image\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: templateImage,\n        alt: \"template\",\n        onLoad: () => {\n          setImageLoad(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"short_info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"title\",\n            children: `${pathname === '/request-monitored/cr' || pathname === '/request-monitored/ccr' ? \"Congratulations!\" : \"Got it!\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this), isBuilderCancelRequest ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"show_label\",\n            children: \"We’ll send it to your tradesperson.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"show_label\",\n            children: `${pathname === '/request-monitored/cr' ? \"You have successfully accepted the change request.\" : pathname === '/request-monitored/ccr' ? \"You have successfully accepted the cancel request.\" : \"We’ll send it to your builder.\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn_wrapr\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"fill_btn btn-effect\",\n              onClick: () => {\n                var _props$history;\n\n                return (_props$history = props.history) === null || _props$history === void 0 ? void 0 : _props$history.push('/');\n              },\n              children: \"OK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RequestMonitored, \"nZhMu7VkDxuAOe0jDQgcvnUMM9c=\", false, function () {\n  return [useLocation];\n});\n\n_c = RequestMonitored;\nexport default RequestMonitored;\n\nvar _c;\n\n$RefreshReg$(_c, \"RequestMonitored\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDetailsPage/components/requestMonitored.tsx"],"names":["React","useState","useEffect","templateImage","setLoading","useLocation","RequestMonitored","props","pathname","isLoad","setImageLoad","console","log","isBuilderCancelRequest","history","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAMA,MAAMC,gBAAgB,GAAIC,KAAD,IAAsB;AAAA;;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAoBH,WAAW,EAArC;AACA,QAAM,CAACI,MAAD,EAASC,YAAT,IAAyBT,QAAQ,CAAC,IAAD,CAAvC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAAEE,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAkB,GAA3B,EAA6B,EAA7B,CAAT;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACO,MAAL,EAAa;AAAEL,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAmB;AACrC,GAFQ,EAEN,CAACK,MAAD,CAFM,CAAT;AAGAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,IAAAA;AAAF,GAAZ;AAEA,MAAIK,sBAAsB,GAAGL,QAAQ,KAAK,0BAAb,GAA0C,IAA1C,GAAiD,KAA9E;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,2BACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACI;AACI,QAAA,GAAG,EAAEL,aADT;AAEI,QAAA,GAAG,EAAC,UAFR;AAGI,QAAA,MAAM,EAAE,MAAM;AACVO,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AALL;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACI;AAAI,YAAA,SAAS,EAAC,OAAd;AAAA,sBAAwB,GAAGF,QAAQ,KAAK,uBAAb,IAAwCA,QAAQ,KAAK,wBAAtD,GAAkF,kBAAlF,GAAuG,SAAU;AAA3I;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKK,sBAAsB,gBACnB;AAAM,YAAA,SAAS,EAAC,YAAhB;AAAA,sBACK;AADL;AAAA;AAAA;AAAA;AAAA,kBADmB,gBAKnB;AAAM,YAAA,SAAS,EAAC,YAAhB;AAAA,sBACM,GAAEL,QAAQ,KAAK,uBAAb,GAAuC,oDAAvC,GAA8FA,QAAQ,KAAK,wBAAb,GAAwC,oDAAxC,GAA+F,gCAAiC;AADtO;AAAA;AAAA;AAAA;AAAA,kBAPR,eAWI;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,mCACI;AAAQ,cAAA,SAAS,EAAC,qBAAlB;AAAwC,cAAA,OAAO,EAAE;AAAA;;AAAA,yCAAMD,KAAK,CAACO,OAAZ,mDAAM,eAAeC,IAAf,CAAoB,GAApB,CAAN;AAAA,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CA1CD;;GAAMT,gB;UACwBD,W;;;KADxBC,gB;AA4CN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport templateImage from '../../../assets/images/thanks-bg.jpg';\nimport { setLoading } from '../../../redux/common/actions';\nimport { useLocation } from 'react-router-dom';\n\ninterface PropsType {\n    history: any\n}\n\nconst RequestMonitored = (props: PropsType) => {\n    const { pathname }: any = useLocation();\n    const [isLoad, setImageLoad] = useState(true);\n\n    useEffect(() => { setLoading(true) }, [])\n\n    useEffect(() => {\n        if (!isLoad) { setLoading(false) }\n    }, [isLoad])\n    console.log({ pathname });\n\n    let isBuilderCancelRequest = pathname === '/request-monitored/cc/bb' ? true : false;\n    return (\n        <div className=\"img_text_wrap\">\n            <figure className=\"full_image\">\n                <img\n                    src={templateImage}\n                    alt=\"template\"\n                    onLoad={() => {\n                        setImageLoad(false)\n                    }}\n                />\n                <div className=\"short_info\">\n                    <div className=\"content\">\n                        <h1 className=\"title\">{`${(pathname === '/request-monitored/cr' || pathname === '/request-monitored/ccr') ? \"Congratulations!\" : \"Got it!\"}`}</h1>\n                        {isBuilderCancelRequest ? (\n                            <span className=\"show_label\">\n                                {\"We’ll send it to your tradesperson.\"}\n                            </span>\n                        ) : (\n                            <span className=\"show_label\">\n                                {`${pathname === '/request-monitored/cr' ? \"You have successfully accepted the change request.\" : pathname === '/request-monitored/ccr' ? \"You have successfully accepted the cancel request.\" : \"We’ll send it to your builder.\"}`}\n                            </span>\n                        )}\n                        <div className=\"btn_wrapr\">\n                            <button className=\"fill_btn btn-effect\" onClick={() => props.history?.push('/')}>OK</button>\n                        </div>\n                    </div>\n                </div>\n            </figure>\n        </div>\n    )\n}\n\nexport default RequestMonitored;\n"]},"metadata":{},"sourceType":"module"}