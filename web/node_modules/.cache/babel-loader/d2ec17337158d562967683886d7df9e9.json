{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobType.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Constants from \"../../../utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst JobType = ({\n  categories: categoriesData,\n  jobTypes,\n  data,\n  stepCompleted,\n  editDetailPage,\n  handleStepForward,\n  handleStepJustUpdate,\n  handleStepComplete,\n  handleStepBack\n}) => {\n  _s();\n\n  var _cate;\n\n  const {\n    errorStrings\n  } = Constants;\n  const [jobTypeDetails, setJobTypeDetails] = useState({\n    categories: [],\n    job_type: [],\n    specialization: []\n  });\n  const [errors, setErrors] = useState({\n    job_type: \"\",\n    categories: \"\",\n    specialization: \"\"\n  });\n  const [continueClicked, setContinueClicked] = useState(false);\n  const [selectedAll, setSelectedAll] = useState(false);\n  const [isCategorySelected, setIsCategorySelected] = useState(false);\n  const specializations = [];\n  const categoriesHTML = [];\n  const {\n    job_type,\n    categories,\n    specialization\n  } = jobTypeDetails;\n  categoriesData.forEach(({\n    _id,\n    trade_name,\n    selected_url,\n    specialisations\n  }) => {\n    if (categories.includes(_id)) {\n      specializations.push(...specialisations);\n    }\n\n    categoriesHTML.push( /*#__PURE__*/_jsxDEV(\"li\", {\n      className: categories.includes(_id) ? \"active\" : undefined,\n      onClick: () => {\n        handleChange(_id, \"categories\");\n        setIsCategorySelected(true);\n        setSelectedAll(false);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selected_url,\n          alt: \"cat-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name\",\n        children: trade_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, _id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this));\n  });\n  useEffect(() => {\n    if (stepCompleted) {\n      let checkSelected = false;\n\n      if (categoriesData === null || categoriesData === void 0 ? void 0 : categoriesData.length) {\n        var _preSelectedSpec, _data$specialization, _preSelectedSpec2, _data$specialization2;\n\n        let preSelectedSpec = [];\n        preSelectedSpec = categoriesData.find(item => item._id === data.categories[0]).specialisations;\n\n        if (((_preSelectedSpec = preSelectedSpec) === null || _preSelectedSpec === void 0 ? void 0 : _preSelectedSpec.length) === ((_data$specialization = data.specialization) === null || _data$specialization === void 0 ? void 0 : _data$specialization.length)) {\n          checkSelected = true;\n        }\n\n        if (((_preSelectedSpec2 = preSelectedSpec) === null || _preSelectedSpec2 === void 0 ? void 0 : _preSelectedSpec2.length) && !((_data$specialization2 = data.specialization) === null || _data$specialization2 === void 0 ? void 0 : _data$specialization2.length)) {\n          checkSelected = true;\n        }\n      }\n\n      setJobTypeDetails({\n        categories: data.categories,\n        job_type: data.job_type,\n        specialization: checkSelected ? [] : data.specialization\n      });\n      console.log({\n        checkSelected\n      });\n      setSelectedAll(checkSelected);\n    }\n  }, [stepCompleted, data]); // for error messages\n\n  const label = {\n    job_type: \"Job Type\",\n    categories: \"Categories\",\n    specialization: \"Specialization\"\n  };\n\n  const isEmpty = (name, value) => !value.length ? `${label[name]} is required.` : \"\";\n\n  const isInvalid = (name, value) => {\n    switch (name) {\n      case \"job_type\":\n        return isEmpty(name, value);\n\n      case \"categories\":\n        return isEmpty(name, value);\n\n      case \"specialization\":\n        return isEmpty(name, value);\n    }\n  }; // update errors and jobDetails\n\n\n  const updateDetails = (value, name) => {\n    if (stepCompleted || continueClicked) {\n      setErrors(prevErrors => ({ ...prevErrors,\n        [name]: isInvalid(name, value)\n      }));\n    }\n\n    setJobTypeDetails(prevDetails => ({ ...prevDetails,\n      [name]: value\n    }));\n  }; // function callable on handle change\n\n\n  const handleChange = (value, name) => {\n    if (jobTypeDetails[name].includes(value)) {\n      updateDetails(jobTypeDetails[name].filter(val => val !== value), name); // when category is deselected, remove it's specialization\n\n      if (name === \"categories\") {\n        var _categoriesData$find$;\n\n        const specializationsToBeRemoved = ((_categoriesData$find$ = categoriesData.find(({\n          _id\n        }) => _id === value).specialisations) === null || _categoriesData$find$ === void 0 ? void 0 : _categoriesData$find$.map(({\n          _id\n        }) => _id)) || [];\n        let itemsSpec = jobTypeDetails.specialization.filter(value => !specializationsToBeRemoved.includes(value));\n        updateDetails(itemsSpec, \"specialization\");\n        updateDetails([], \"categories\");\n      }\n    } else {\n      if (name !== \"specialization\") {\n        jobTypeDetails[name] = [value];\n        updateDetails(jobTypeDetails[name], name); // updateDetails([], 'specialization');\n      } else {\n        updateDetails(jobTypeDetails[name].concat([value]), name);\n      }\n    }\n  };\n\n  const handleContinue = () => {\n    let hasErrors;\n\n    if (selectedAll) {\n      setJobTypeDetails(prev => ({ ...prev,\n        specialization: specializations.map(item => item._id)\n      }));\n    }\n\n    console.log({\n      jobTypeDetails\n    }, \"-->\");\n\n    if (!continueClicked) {\n      setContinueClicked(true);\n      hasErrors = Object.keys(jobTypeDetails).reduce((prevError, name) => {\n        let hasError = !!isInvalid(name, jobTypeDetails[name]);\n\n        if (name === \"specialization\" && hasError) {\n          hasError = false;\n        }\n\n        setErrors(prevErrors => ({ ...prevErrors,\n          [name]: isInvalid(name, jobTypeDetails[name])\n        }));\n        return hasError || prevError;\n      }, false);\n    }\n\n    if (!hasErrors) {\n      var _jobTypeDetails$speci;\n\n      let dataItems = jobTypeDetails;\n\n      if ((jobTypeDetails === null || jobTypeDetails === void 0 ? void 0 : (_jobTypeDetails$speci = jobTypeDetails.specialization) === null || _jobTypeDetails$speci === void 0 ? void 0 : _jobTypeDetails$speci.length) === 0) {\n        if (selectedAll) {\n          dataItems[\"specialization\"] = specializations.map(item => item._id);\n        }\n      }\n\n      if (editDetailPage === null || editDetailPage === void 0 ? void 0 : editDetailPage.currentScreen) {\n        handleStepJustUpdate(dataItems, true);\n      } else {\n        handleStepComplete(dataItems);\n      }\n    } else {\n      setContinueClicked(false);\n    }\n  };\n\n  const checkErrors = () => {\n    let error_1 = isInvalid(\"categories\", jobTypeDetails[\"categories\"]);\n    let error_2 = isInvalid(\"job_type\", jobTypeDetails[\"job_type\"]);\n    let error_3 = isInvalid(\"specialization\", jobTypeDetails[\"specialization\"]);\n    console.log(error_3, \"error_3\");\n\n    if (!(error_1 === null || error_1 === void 0 ? void 0 : error_1.length) && !(error_2 === null || error_2 === void 0 ? void 0 : error_2.length) && (!(error_3 === null || error_3 === void 0 ? void 0 : error_3.length) || selectedAll && (specializations === null || specializations === void 0 ? void 0 : specializations.length))) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section_wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex_col_sm_5\",\n              children: [(editDetailPage === null || editDetailPage === void 0 ? void 0 : editDetailPage.currentScreen) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relate\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"back\",\n                  onClick: () => {\n                    handleStepForward(14);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"title\",\n                  children: \"Job type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relate\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"back\",\n                  onClick: handleStepBack\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"title\",\n                  children: \"Job type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"commn_para\",\n                children: \"Select the category and the specialisations required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"xs_sub_title\",\n            children: \"Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select_sphere\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            children: categoriesHTML\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error_msg\",\n            children: errors.categories\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"xs_sub_title\",\n            children: \"Job Types\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"job_categories\",\n          children: jobTypes && Array.isArray(jobTypes) ? jobTypes.map(({\n            _id,\n            name,\n            image\n          }) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `${job_type.includes(_id) ? \" active\" : \"\"}`,\n            onClick: () => handleChange(_id, \"job_type\"),\n            children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n              className: \"type_icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: image,\n                alt: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"name\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 23\n            }, this)]\n          }, _id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 21\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errors.job_type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"xs_sub_title\",\n            children: \"Specialisation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_6\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tags_wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [(specializations === null || specializations === void 0 ? void 0 : specializations.length) >= 0 && ((_cate = cate) === null || _cate === void 0 ? void 0 : _cate.length) >= 0 && /*#__PURE__*/_jsxDEV(\"li\", {\n                  onClick: () => {\n                    if (!selectedAll) {\n                      setSelectedAll(true);\n                    }\n\n                    updateDetails([], \"specialization\");\n                  },\n                  className: selectedAll ? \"selected\" : \"\",\n                  children: \"All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 23\n                }, this), specializations.map(({\n                  _id,\n                  name\n                }) => {\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: specialization.includes(_id) && !selectedAll ? \"selected\" : undefined,\n                    onClick: () => {\n                      handleChange(_id, \"specialization\");\n\n                      if (selectedAll) {\n                        setSelectedAll(false);\n                      }\n                    },\n                    children: name\n                  }, _id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 25\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error_msg\",\n                children: !selectedAll ? errors.specialization : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `fill_btn full_btn btn-effect ${checkErrors() ? \"disable_btn\" : \"\"}`,\n            onClick: () => {\n              if (selectedAll) {\n                // setJobTypeDetails((prev: any) => ({ ...prev, 'specialization': specializations.map((item: any) => item._id) }))\n                updateDetails(specializations.map(item => item._id), \"specialization\");\n              }\n\n              handleContinue();\n            },\n            children: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JobType, \"PaCd1SU1YhVCIFgNxdSEE3Pq99g=\");\n\n_c = JobType;\nexport default JobType;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobType\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobType.tsx"],"names":["useEffect","useState","Constants","JobType","categories","categoriesData","jobTypes","data","stepCompleted","editDetailPage","handleStepForward","handleStepJustUpdate","handleStepComplete","handleStepBack","errorStrings","jobTypeDetails","setJobTypeDetails","job_type","specialization","errors","setErrors","continueClicked","setContinueClicked","selectedAll","setSelectedAll","isCategorySelected","setIsCategorySelected","specializations","categoriesHTML","forEach","_id","trade_name","selected_url","specialisations","includes","push","undefined","handleChange","checkSelected","length","preSelectedSpec","find","item","console","log","label","isEmpty","name","value","isInvalid","updateDetails","prevErrors","prevDetails","filter","val","specializationsToBeRemoved","map","itemsSpec","concat","handleContinue","hasErrors","prev","Object","keys","reduce","prevError","hasError","dataItems","currentScreen","checkErrors","error_1","error_2","error_3","Array","isArray","image","cate"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Constants from \"../../../utils/constants\";\n\ninterface Proptypes {\n  categories: any;\n  jobTypes: any;\n  data: any;\n  editDetailPage: any;\n  stepCompleted: Boolean;\n  handleStepComplete: (data: any) => void;\n  handleStepBack: () => void;\n  handleStepForward: (data: any) => void;\n  handleStepJustUpdate: (data: any, goto: any) => void;\n}\n\nconst JobType = ({\n  categories: categoriesData,\n  jobTypes,\n  data,\n  stepCompleted,\n  editDetailPage,\n  handleStepForward,\n  handleStepJustUpdate,\n  handleStepComplete,\n  handleStepBack,\n}: Proptypes) => {\n  const { errorStrings } = Constants;\n\n  const [jobTypeDetails, setJobTypeDetails] = useState<{\n    [index: string]: string[];\n  }>({ categories: [], job_type: [], specialization: [] });\n  const [errors, setErrors] = useState({\n    job_type: \"\",\n    categories: \"\",\n    specialization: \"\",\n  });\n  const [continueClicked, setContinueClicked] = useState(false);\n  const [selectedAll, setSelectedAll] = useState(false);\n  const [isCategorySelected, setIsCategorySelected] = useState(false);\n\n  const specializations: Array<{ _id: string; name: string }> = [];\n  const categoriesHTML: JSX.Element[] = [];\n\n  const { job_type, categories, specialization } = jobTypeDetails;\n\n  categoriesData.forEach(\n    ({\n      _id,\n      trade_name,\n      selected_url,\n      specialisations,\n    }: {\n      _id: string;\n      trade_name: string;\n      selected_url: string;\n      specialisations: [];\n    }) => {\n      if (categories.includes(_id)) {\n        specializations.push(...specialisations);\n      }\n\n      categoriesHTML.push(\n        <li\n          key={_id}\n          className={categories.includes(_id) ? \"active\" : undefined}\n          onClick={() => {\n            handleChange(_id, \"categories\");\n            setIsCategorySelected(true);\n            setSelectedAll(false);\n          }}\n        >\n          <figure>\n            <img src={selected_url} alt=\"cat-icon\" />\n          </figure>\n          <span className=\"name\">{trade_name}</span>\n        </li>\n      );\n    }\n  );\n\n  useEffect(() => {\n    if (stepCompleted) {\n      let checkSelected = false;\n\n      if (categoriesData?.length) {\n        let preSelectedSpec = [];\n        preSelectedSpec = categoriesData.find(\n          (item: any) => item._id === data.categories[0]\n        ).specialisations;\n\n        if (preSelectedSpec?.length === data.specialization?.length) {\n          checkSelected = true;\n        }\n\n        if (preSelectedSpec?.length && !data.specialization?.length) {\n          checkSelected = true;\n        }\n      }\n\n      setJobTypeDetails({\n        categories: data.categories,\n        job_type: data.job_type,\n        specialization: checkSelected ? [] : data.specialization,\n      });\n\n      console.log({ checkSelected });\n      setSelectedAll(checkSelected);\n    }\n  }, [stepCompleted, data]);\n\n  // for error messages\n  const label: { [index: string]: string } = {\n    job_type: \"Job Type\",\n    categories: \"Categories\",\n    specialization: \"Specialization\",\n  };\n\n  const isEmpty = (name: string, value: string[]) =>\n    !value.length ? `${label[name]} is required.` : \"\";\n\n  const isInvalid = (name: string, value: string[]) => {\n    switch (name) {\n      case \"job_type\":\n        return isEmpty(name, value);\n      case \"categories\":\n        return isEmpty(name, value);\n      case \"specialization\":\n        return isEmpty(name, value);\n    }\n  };\n\n  // update errors and jobDetails\n  const updateDetails = (value: string[], name: string) => {\n    if (stepCompleted || continueClicked) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [name]: isInvalid(name, value),\n      }));\n    }\n\n    setJobTypeDetails((prevDetails) => ({\n      ...prevDetails,\n      [name]: value,\n    }));\n  };\n\n  // function callable on handle change\n  const handleChange = (value: string, name: string) => {\n    if (jobTypeDetails[name].includes(value)) {\n      updateDetails(\n        jobTypeDetails[name].filter((val) => val !== value),\n        name\n      );\n\n      // when category is deselected, remove it's specialization\n      if (name === \"categories\") {\n        const specializationsToBeRemoved =\n          categoriesData\n            .find(({ _id }: { _id: string }) => _id === value)\n            .specialisations?.map(({ _id }: { _id: string }) => _id) || [];\n        let itemsSpec = jobTypeDetails.specialization.filter(\n          (value) => !specializationsToBeRemoved.includes(value)\n        );\n        updateDetails(itemsSpec, \"specialization\");\n        updateDetails([], \"categories\");\n      }\n    } else {\n      if (name !== \"specialization\") {\n        jobTypeDetails[name] = [value];\n        updateDetails(jobTypeDetails[name], name);\n        // updateDetails([], 'specialization');\n      } else {\n        updateDetails(jobTypeDetails[name].concat([value]), name);\n      }\n    }\n  };\n\n  const handleContinue = () => {\n    let hasErrors;\n\n    if (selectedAll) {\n      setJobTypeDetails((prev: any) => ({\n        ...prev,\n        specialization: specializations.map((item: any) => item._id),\n      }));\n    }\n    console.log({ jobTypeDetails }, \"-->\");\n    if (!continueClicked) {\n      setContinueClicked(true);\n\n      hasErrors = Object.keys(jobTypeDetails).reduce((prevError, name) => {\n        let hasError = !!isInvalid(name, jobTypeDetails[name]);\n\n        if (name === \"specialization\" && hasError) {\n          hasError = false;\n        }\n\n        setErrors((prevErrors) => ({\n          ...prevErrors,\n          [name]: isInvalid(name, jobTypeDetails[name]),\n        }));\n\n        return hasError || prevError;\n      }, false);\n    }\n\n    if (!hasErrors) {\n      let dataItems = jobTypeDetails;\n\n      if (jobTypeDetails?.specialization?.length === 0) {\n        if (selectedAll) {\n          dataItems[\"specialization\"] = specializations.map(\n            (item: any) => item._id\n          );\n        }\n      }\n\n      if (editDetailPage?.currentScreen) {\n        handleStepJustUpdate(dataItems, true);\n      } else {\n        handleStepComplete(dataItems);\n      }\n    } else {\n      setContinueClicked(false);\n    }\n  };\n\n  const checkErrors = () => {\n    let error_1 = isInvalid(\"categories\", jobTypeDetails[\"categories\"]);\n    let error_2 = isInvalid(\"job_type\", jobTypeDetails[\"job_type\"]);\n    let error_3 = isInvalid(\"specialization\", jobTypeDetails[\"specialization\"]);\n    console.log(error_3, \"error_3\");\n    if (\n      !error_1?.length &&\n      !error_2?.length &&\n      (!error_3?.length || (selectedAll && specializations?.length))\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <div className=\"app_wrapper\">\n      <div className=\"section_wrapper\">\n        <div className=\"custom_container\">\n          <div className=\"form_field\">\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_5\">\n                {editDetailPage?.currentScreen ? (\n                  <div className=\"relate\">\n                    <button\n                      className=\"back\"\n                      onClick={() => {\n                        handleStepForward(14);\n                      }}\n                    ></button>\n                    <span className=\"title\">Job type</span>\n                  </div>\n                ) : (\n                  <div className=\"relate\">\n                    <button className=\"back\" onClick={handleStepBack}></button>\n                    <span className=\"title\">Job type</span>\n                  </div>\n                )}\n\n                <p className=\"commn_para\">\n                  Select the category and the specialisations required\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"form_field\">\n            <span className=\"xs_sub_title\">Categories</span>\n          </div>\n          <div className=\"select_sphere\">\n            <ul>{categoriesHTML}</ul>\n            <span className=\"error_msg\">{errors.categories}</span>\n          </div>\n          <div className=\"form_field\">\n            <span className=\"xs_sub_title\">Job Types</span>\n          </div>\n          <ul className=\"job_categories\">\n            {jobTypes && Array.isArray(jobTypes)\n              ? jobTypes.map(\n                  ({\n                    _id,\n                    name,\n                    image,\n                  }: {\n                    _id: string;\n                    name: string;\n                    image: string;\n                  }) => (\n                    <li\n                      key={_id}\n                      className={`${job_type.includes(_id) ? \" active\" : \"\"}`}\n                      onClick={() => handleChange(_id, \"job_type\")}\n                    >\n                      <figure className=\"type_icon\">\n                        <img src={image} alt=\"icon\" />\n                      </figure>\n                      <span className=\"name\">{name}</span>\n                    </li>\n                  )\n                )\n              : null}\n          </ul>\n          <span className=\"error_msg\">{errors.job_type}</span>\n          <div className=\"form_field\">\n            <span className=\"xs_sub_title\">{\"Specialisation\"}</span>\n          </div>\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_6\">\n              <div className=\"tags_wrap\">\n                <ul>\n                  {/* {console.log({ selectedAll, specializations })} */}\n                  {specializations?.length >= 0 &&\n                    cate?.length >= 0 && (\n                      <li\n                        onClick={() => {\n                          if (!selectedAll) {\n                            setSelectedAll(true);\n                          }\n                          updateDetails([], \"specialization\");\n                        }}\n                        className={selectedAll ? \"selected\" : \"\"}\n                      >\n                        {\"All\"}\n                      </li>\n                    )}\n                  {specializations.map(\n                    ({ _id, name }: { _id: string; name: string }) => {\n                      return (\n                        <li\n                          key={_id}\n                          className={\n                            specialization.includes(_id) && !selectedAll\n                              ? \"selected\"\n                              : undefined\n                          }\n                          onClick={() => {\n                            handleChange(_id, \"specialization\");\n                            if (selectedAll) {\n                              setSelectedAll(false);\n                            }\n                          }}\n                        >\n                          {name}\n                        </li>\n                      );\n                    }\n                  )}\n                </ul>\n                <span className=\"error_msg\">\n                  {!selectedAll ? errors.specialization : \"\"}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"form_field\">\n            <button\n              className={`fill_btn full_btn btn-effect ${\n                checkErrors() ? \"disable_btn\" : \"\"\n              }`}\n              onClick={() => {\n                if (selectedAll) {\n                  // setJobTypeDetails((prev: any) => ({ ...prev, 'specialization': specializations.map((item: any) => item._id) }))\n                  updateDetails(\n                    specializations.map((item: any) => item._id),\n                    \"specialization\"\n                  );\n                }\n\n                handleContinue();\n              }}\n            >\n              Continue\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default JobType;\n"]},"metadata":{},"sourceType":"module"}