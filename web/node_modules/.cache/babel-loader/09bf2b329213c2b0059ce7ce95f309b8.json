{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/lodgeDispute/lodgeDispute.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { onFileUpload } from \"../../../../redux/auth/actions\";\nimport { setShowToast } from \"../../../../redux/common/actions\";\nimport { tradielodgeDispute } from \"../../../../redux/jobs/actions\"; //@ts-ignore\n\nimport FsLightbox from \"fslightbox-react\";\nimport addMedia from \"../../../../assets/images/add-image.png\";\nimport close from \"../../../../assets/images/icon-close-1.png\";\nimport { JobLodgeReasons } from \"../../../../utils/common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imageFormats = [\"jpeg\", \"jpg\", \"png\"];\n\nconst LodgeDispute = props => {\n  _s();\n\n  const {\n    item: {\n      jobId,\n      jobName\n    },\n    history\n  } = props;\n  const [stateData, setStateData] = useState({\n    reason: 0,\n    detail: \"\",\n    upload: []\n  });\n  const [errorData, setErrorData] = useState({\n    reason: \"\",\n    detail: \"\",\n    upload: \"\"\n  });\n  const [filesUrl, setFilesUrl] = useState([]);\n  const [localFiles, setLocalFiles] = useState({});\n  const [update, forceUpdate] = useState({});\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n  const {\n    reason,\n    detail,\n    upload\n  } = stateData;\n\n  const isValid = ({\n    name,\n    value,\n    title\n  }) => {\n    if (name === \"reason\") {\n      return value === 0 ? `${title} is required.` : \"\";\n    }\n\n    return !(value === null || value === void 0 ? void 0 : value.length) ? `${title} is required.` : \"\";\n  };\n\n  const checkErrors = () => {\n    let error_1 = isValid({\n      name: \"reason\",\n      value: reason,\n      title: \"Reason\"\n    });\n\n    if (!(error_1 === null || error_1 === void 0 ? void 0 : error_1.length)) {\n      return false;\n    }\n\n    return true;\n  }; // useEffect(() => {\n  //     setErrorData((prev: any) => ({\n  //         ...prev,\n  //         detail: stateData?.detail?.length > 1000 ? 'Maximum 1000 characters are allowed.' : ''\n  //     }))\n  // }, [stateData]);\n\n\n  const removeFromItem = index => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async e => {\n    var _newFile$type, _newFile$type$split$;\n\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    if ((filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) === 6) {\n      setShowToast(true, \"Max files upload limit is 6\");\n      return;\n    }\n\n    var fileType = newFile === null || newFile === void 0 ? void 0 : (_newFile$type = newFile.type) === null || _newFile$type === void 0 ? void 0 : (_newFile$type$split$ = _newFile$type.split(\"/\")[1]) === null || _newFile$type$split$ === void 0 ? void 0 : _newFile$type$split$.toLowerCase();\n    var selectedFileSize = (newFile === null || newFile === void 0 ? void 0 : newFile.size) / 1024 / 1024; // size in mib\n\n    if (imageFormats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    formData.append(\"file\", newFile);\n    const res = await onFileUpload(formData);\n\n    if (res.success) {\n      let link = res.imgUrl;\n      let check_type = 1;\n      setFilesUrl(prev => [...prev, {\n        mediaType: check_type,\n        link: link\n      }]);\n      setLocalFiles(prev => ({ ...prev,\n        [filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length]: URL.createObjectURL(newFile)\n      }));\n    }\n  };\n\n  const setItemToggle = index => {\n    setToggler(prev => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item, index) => {\n    let split_item_format = item.split(\".\");\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n    let split_item_name = item.split(\"/\");\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render = null;\n\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            setItemToggle(index);\n          },\n          title: get_split_name,\n          src: item,\n          alt: \"media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"figure\", {\n        className: \"img_video\",\n        children: [image_render, /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            removeFromItem(index);\n          },\n          src: close,\n          alt: \"remove\",\n          className: \"remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const handleSubmit = async () => {\n    var _data$photos;\n\n    let data = {\n      jobId: jobId,\n      reason: reason,\n      details: detail.trim(),\n      photos: filesUrl\n    };\n    if (!data.details) delete data.details;\n    if (!((_data$photos = data.photos) === null || _data$photos === void 0 ? void 0 : _data$photos.length)) delete data.photos;\n    let response = await tradielodgeDispute(data);\n\n    if (response === null || response === void 0 ? void 0 : response.success) {\n      history.push(\"/lodge-success\");\n    }\n  };\n\n  const commonRenderValues = ({\n    id\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"checkbox_wrap agree_check\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: reason,\n        onClick: () => {\n          setStateData(prev => ({ ...prev,\n            reason: id\n          }));\n        },\n        checked: reason === id,\n        name: \"Reason\",\n        className: \"filter-type filled-in\",\n        type: \"checkbox\",\n        id: `reason${id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `reason${id}`,\n        children: JobLodgeReasons(id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderFilteredItems = () => {\n    let sources = [];\n    let types = [];\n\n    if (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) {\n      filesUrl.forEach(item => {\n        if ((item === null || item === void 0 ? void 0 : item.mediaType) === 1) {\n          sources.push(item.link);\n          types.push(\"image\");\n        }\n      });\n    }\n\n    return {\n      sources,\n      types\n    };\n  };\n\n  const {\n    sources,\n    types\n  } = renderFilteredItems();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"detail_col\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_col_sm_8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relate\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              props.backTab(\"lodge\");\n            },\n            className: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"xs_sub_title\",\n            children: jobName || \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sub_title\",\n          children: \"Lodge dispute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"commn_para\",\n          children: \"Enter reason text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FsLightbox, {\n          toggler: toggler,\n          slide: selectedSlide,\n          sources: sources,\n          types: types\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reason_wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"f_spacebw\",\n            children: [commonRenderValues({\n              id: 1\n            }), commonRenderValues({\n              id: 2\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"f_spacebw\",\n            children: [commonRenderValues({\n              id: 3\n            }), commonRenderValues({\n              id: 4\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"f_spacebw\",\n            children: [commonRenderValues({\n              id: 5\n            }), commonRenderValues({\n              id: 6\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_col_sm_9\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form_label\",\n            children: \"Details (optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text_field\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: detail,\n              onChange: e => {\n                setStateData(prev => ({ ...prev,\n                  detail: e.target.value\n                }));\n              },\n              placeholder: \"It\\u2019s really bad work, because...\",\n              maxLength: 1000\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error_msg\",\n            children: errorData.detail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_col_sm_12\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload_img_video\",\n          children: [(filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) ? filesUrl.map((item, index) => renderbyFileFormat(item.link, index)) : null, (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) < 6 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"upload_media\",\n              htmlFor: \"upload_img_video\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: addMedia,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: onFileChange,\n              type: \"file\",\n              accept: \"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\",\n              style: {\n                display: \"none\"\n              },\n              id: \"upload_img_video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          className: `fill_btn full_btn btn-effect ${checkErrors() ? \"disable_btn\" : \"\"}`,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LodgeDispute, \"uvq4csG7orqzIkdWiG/pBsNE8rM=\");\n\n_c = LodgeDispute;\nexport default LodgeDispute;\n\nvar _c;\n\n$RefreshReg$(_c, \"LodgeDispute\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/lodgeDispute/lodgeDispute.tsx"],"names":["React","useState","onFileUpload","setShowToast","tradielodgeDispute","FsLightbox","addMedia","close","JobLodgeReasons","imageFormats","LodgeDispute","props","item","jobId","jobName","history","stateData","setStateData","reason","detail","upload","errorData","setErrorData","filesUrl","setFilesUrl","localFiles","setLocalFiles","update","forceUpdate","toggler","setToggler","selectedSlide","setSelectSlide","isValid","name","value","title","length","checkErrors","error_1","removeFromItem","index","splice","Array","isArray","onFileChange","e","formData","FormData","newFile","target","files","fileType","type","split","toLowerCase","selectedFileSize","size","indexOf","includes","append","res","success","link","imgUrl","check_type","prev","mediaType","URL","createObjectURL","setItemToggle","renderbyFileFormat","split_item_format","get_split_fromat","split_item_name","get_split_name","image_render","handleSubmit","data","details","trim","photos","response","push","commonRenderValues","id","renderFilteredItems","sources","types","forEach","backTab","map","display"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { onFileUpload } from \"../../../../redux/auth/actions\";\nimport { setShowToast } from \"../../../../redux/common/actions\";\nimport { tradielodgeDispute } from \"../../../../redux/jobs/actions\";\n//@ts-ignore\nimport FsLightbox from \"fslightbox-react\";\n\nimport addMedia from \"../../../../assets/images/add-image.png\";\nimport close from \"../../../../assets/images/icon-close-1.png\";\n\nimport { JobLodgeReasons } from \"../../../../utils/common\";\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\ninterface PropTypes {\n  item: any;\n  history: any;\n  backTab: (data: string) => void;\n}\n\nconst LodgeDispute = (props: PropTypes) => {\n  const {\n    item: { jobId, jobName },\n    history,\n  } = props;\n  const [stateData, setStateData] = useState({\n    reason: 0,\n    detail: \"\",\n    upload: [],\n  });\n  const [errorData, setErrorData] = useState({\n    reason: \"\",\n    detail: \"\",\n    upload: \"\",\n  });\n  const [filesUrl, setFilesUrl] = useState([] as any);\n  const [localFiles, setLocalFiles] = useState({});\n\n  const [update, forceUpdate] = useState({});\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n\n  const { reason, detail, upload } = stateData;\n\n  const isValid = ({ name, value, title }: any) => {\n    if (name === \"reason\") {\n      return value === 0 ? `${title} is required.` : \"\";\n    }\n    return !value?.length ? `${title} is required.` : \"\";\n  };\n\n  const checkErrors = () => {\n    let error_1 = isValid({ name: \"reason\", value: reason, title: \"Reason\" });\n\n    if (!error_1?.length) {\n      return false;\n    }\n    return true;\n  };\n\n  // useEffect(() => {\n  //     setErrorData((prev: any) => ({\n  //         ...prev,\n  //         detail: stateData?.detail?.length > 1000 ? 'Maximum 1000 characters are allowed.' : ''\n  //     }))\n  // }, [stateData]);\n\n  const removeFromItem = (index: any) => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async (e: any) => {\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    if (filesUrl?.length === 6) {\n      setShowToast(true, \"Max files upload limit is 6\");\n      return;\n    }\n\n    var fileType = newFile?.type?.split(\"/\")[1]?.toLowerCase();\n    var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n    if (imageFormats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    formData.append(\"file\", newFile);\n    const res = await onFileUpload(formData);\n    if (res.success) {\n      let link: string = res.imgUrl;\n      let check_type: any = 1;\n      setFilesUrl((prev: Array<any>) => [\n        ...prev,\n        {\n          mediaType: check_type,\n          link: link,\n        },\n      ]);\n      setLocalFiles((prev: any) => ({\n        ...prev,\n        [filesUrl?.length]: URL.createObjectURL(newFile),\n      }));\n    }\n  };\n\n  const setItemToggle = (index: any) => {\n    setToggler((prev: boolean) => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item: any, index: any) => {\n    let split_item_format = item.split(\".\");\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n    let split_item_name = item.split(\"/\");\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render: any = null;\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = (\n          <img\n            onClick={() => {\n              setItemToggle(index);\n            }}\n            title={get_split_name}\n            src={item}\n            alt=\"media\"\n          />\n        );\n      }\n      return (\n        <figure className=\"img_video\">\n          {image_render}\n          <img\n            onClick={() => {\n              removeFromItem(index);\n            }}\n            src={close}\n            alt=\"remove\"\n            className=\"remove\"\n          />\n          {/* <span style={{ fontSize: '10px' }}>{get_split_name}</span> */}\n        </figure>\n      );\n    }\n  };\n\n  const handleSubmit = async () => {\n    let data: any = {\n      jobId: jobId,\n      reason: reason,\n      details: detail.trim(),\n      photos: filesUrl,\n    };\n    if (!data.details) delete data.details;\n    if (!data.photos?.length) delete data.photos;\n\n    let response: any = await tradielodgeDispute(data);\n    if (response?.success) {\n      history.push(\"/lodge-success\");\n    }\n  };\n\n  const commonRenderValues = ({ id }: any) => {\n    return (\n      <div className=\"checkbox_wrap agree_check\">\n        <input\n          value={reason}\n          onClick={() => {\n            setStateData((prev: any) => ({ ...prev, reason: id }));\n          }}\n          checked={reason === id}\n          name=\"Reason\"\n          className=\"filter-type filled-in\"\n          type=\"checkbox\"\n          id={`reason${id}`}\n        />\n        <label htmlFor={`reason${id}`}>{JobLodgeReasons(id)}</label>\n      </div>\n    );\n  };\n\n  const renderFilteredItems = () => {\n    let sources: any = [];\n    let types: any = [];\n\n    if (filesUrl?.length) {\n      filesUrl.forEach((item: any) => {\n        if (item?.mediaType === 1) {\n          sources.push(item.link);\n          types.push(\"image\");\n        }\n      });\n    }\n\n    return { sources, types };\n  };\n\n  const { sources, types } = renderFilteredItems();\n  return (\n    <div className=\"detail_col\">\n      <div className=\"flex_row\">\n        <div className=\"flex_col_sm_8\">\n          <div className=\"relate\">\n            <button\n              onClick={() => {\n                props.backTab(\"lodge\");\n              }}\n              className=\"back\"\n            ></button>\n            <span className=\"xs_sub_title\">{jobName || \"\"}</span>\n          </div>\n          <span className=\"sub_title\">Lodge dispute</span>\n          <p className=\"commn_para\">Enter reason text</p>\n\n          <FsLightbox\n            toggler={toggler}\n            slide={selectedSlide}\n            sources={sources}\n            types={types}\n          />\n\n          <div className=\"reason_wrap\">\n            <div className=\"f_spacebw\">\n              {commonRenderValues({ id: 1 })}\n              {commonRenderValues({ id: 2 })}\n            </div>\n\n            <div className=\"f_spacebw\">\n              {commonRenderValues({ id: 3 })}\n              {commonRenderValues({ id: 4 })}\n            </div>\n\n            <div className=\"f_spacebw\">\n              {commonRenderValues({ id: 5 })}\n              {commonRenderValues({ id: 6 })}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex_col_sm_9\">\n          <div className=\"form_field\">\n            <label className=\"form_label\">Details (optional)</label>\n            <div className=\"text_field\">\n              <textarea\n                value={detail}\n                onChange={(e: any) => {\n                  setStateData((prev: any) => ({\n                    ...prev,\n                    detail: e.target.value,\n                  }));\n                }}\n                placeholder=\"It’s really bad work, because...\"\n                maxLength={1000}\n              />\n            </div>\n            <span className=\"error_msg\">{errorData.detail}</span>\n          </div>\n        </div>\n        <div className=\"flex_col_sm_12\">\n          <div className=\"upload_img_video\">\n            {filesUrl?.length\n              ? filesUrl.map((item: any, index: number) =>\n                  renderbyFileFormat(item.link, index)\n                )\n              : null}\n\n            {filesUrl?.length < 6 ? (\n              <React.Fragment>\n                <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                  <img src={addMedia} alt=\"\" />\n                </label>\n                <input\n                  onChange={onFileChange}\n                  type=\"file\"\n                  accept=\"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"\n                  style={{ display: \"none\" }}\n                  id=\"upload_img_video\"\n                />\n              </React.Fragment>\n            ) : null}\n          </div>\n          <button\n            onClick={handleSubmit}\n            className={`fill_btn full_btn btn-effect ${\n              checkErrors() ? \"disable_btn\" : \"\"\n            }`}\n          >\n            {\"Send\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LodgeDispute;\n"]},"metadata":{},"sourceType":"module"}