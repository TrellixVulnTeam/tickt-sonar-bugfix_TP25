{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/openJobs.tsx\";\nimport React, { Component } from 'react';\nimport approved from '../../../assets/images/approved.png';\nimport jobTypePlaceholder from '../../../assets/images/job-type-placeholder.png';\nimport { renderTime } from '../../../utils/common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OpenJobs extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.redirectToInfo = ({\n      jobId,\n      status\n    }) => {\n      let props = this.props;\n\n      if ((jobId === null || jobId === void 0 ? void 0 : jobId.length) && (status === null || status === void 0 ? void 0 : status.length)) {\n        // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&activeType=${props?.activeType}`)\n        let urlEncode = `?jobId=${jobId}&status=${status}&activeType=${props === null || props === void 0 ? void 0 : props.activeType}`;\n        this.props.history.push(`/job-detail?${urlEncode}`);\n      } else {\n        // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${'open'}&activeType=${props?.activeType}`)\n        let urlEncode = `?jobId=${jobId}&status=${'open'}&activeType=${props === null || props === void 0 ? void 0 : props.activeType}`;\n        this.props.history.push(`/job-detail?${urlEncode}`);\n      }\n    };\n\n    this.setToggle = () => this.setState({\n      isToggleApplicants: !this.state.isToggleApplicants\n    });\n\n    this.state = {\n      isToggleApplicants: false,\n      quotesData: [],\n      toggleQuoteSort: true\n    };\n  }\n\n  componentDidMount() {// this.preFetchForQuotes();\n  }\n\n  render() {\n    var _props$history, _props$history$locati;\n\n    // props defined & render by params\n    const props = this.props;\n    const params = new URLSearchParams(props === null || props === void 0 ? void 0 : (_props$history = props.history) === null || _props$history === void 0 ? void 0 : (_props$history$locati = _props$history.location) === null || _props$history$locati === void 0 ? void 0 : _props$history$locati.search);\n    const quotes_param = params.get('quotes');\n    const viewQuotesParam = params.get('viewQuotes');\n    const jobId = params.get('jobId');\n    const {\n      setJobLabel,\n      dataItems,\n      applicantsList,\n      jobType,\n      isLoading\n    } = this.props;\n    let listData = dataItems;\n    let {\n      isToggleApplicants,\n      quotesData,\n      toggleQuoteSort\n    } = this.state;\n\n    if (isLoading) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: [jobType.charAt(0).toUpperCase() + jobType.slice(1), \" Jobs\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row tradies_row\",\n        children: (listData === null || listData === void 0 ? void 0 : listData.length) ? listData.map(({\n          amount,\n          durations,\n          jobId,\n          jobName,\n          fromDate,\n          toDate,\n          milestoneNumber,\n          specializationId,\n          specializationName,\n          locationName,\n          status,\n          timeLeft,\n          total,\n          totalmem,\n          totalMilestones,\n          tradieListData,\n          tradeName,\n          quoteCount,\n          quoteJob,\n          tradieId,\n          location,\n          tradeSelectedUrl,\n          tradieImage\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tradie_card\",\n            \"data-aos\": \"fade-in\",\n            \"data-aos-delay\": \"250\",\n            \"data-aos-duration\": \"1000\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => {\n                this.redirectToInfo({\n                  jobId,\n                  status\n                });\n              },\n              className: \"more_detail circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user_wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                className: \"u_img icon\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: tradeSelectedUrl || jobTypePlaceholder,\n                  alt: \"traide-img\",\n                  onError: e => {\n                    var _e$target, _e$target2;\n\n                    if (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.onerror) {\n                      e.target.onerror = null;\n                    }\n\n                    if (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.src) {\n                      e.target.src = jobTypePlaceholder;\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"details\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: tradeName || \"0\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"commn_para\",\n                  children: jobName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 31\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job_info\",\n              children: quoteJob ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon dollar\",\n                  children: amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon calendar\",\n                  children: renderTime(fromDate, toDate)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: timeLeft\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 35\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 31\n              }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon dollar\",\n                  children: amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: total\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 35\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon calendar\",\n                  children: renderTime(fromDate, toDate)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: timeLeft\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 35\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 31\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job_progress_wrap\",\n              id: \"scroll-progress-bar\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress_wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"completed-digit\",\n                  id: \"digit-progress\",\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: `Job Milestones ${milestoneNumber} `\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 33\n                  }, this), `of ${totalMilestones}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"approval_info\",\n                  children: [status === \"Approved\" && /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: approved,\n                    alt: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 35\n                  }, this), status]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"progress_bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"done_progress\",\n                    id: \"progress-bar\",\n                    type: \"range\",\n                    min: \"0\",\n                    value: milestoneNumber / totalMilestones * 100\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 31\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 29\n              }, this), quoteJob ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  if ((quoteCount === null || quoteCount === void 0 ? void 0 : quoteCount.length) || quoteCount) {\n                    this.props.setJobLabel(\"listQuote\");\n                    this.props.history.replace(`/jobs?active=open&quote=true&jobId=${jobId}`);\n                  }\n                },\n                className: \"fill_grey_btn full_btn btn-effect\",\n                children: `${quoteCount} Quote${quoteCount === 1 ? \"\" : \"s\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 31\n              }, this) : null, !quoteJob && (tradieId === null || tradieId === void 0 ? void 0 : tradieId.length) ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  this.setToggle();\n                  setJobLabel(\"applicantList\", jobId, 1, specializationId);\n                },\n                className: \"fill_grey_btn full_btn btn-effect\",\n                children: \"Applications\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 31\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 23\n        }, this)) : !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no_record  m-t-vh\",\n          children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                height: \"85px\",\n                width: \"85px\",\n                backgroundColor: \"#161D4A\",\n                borderRadius: \"50%\",\n                display: \"inline-block\",\n                position: \"relative\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: newFill,\n              style: {\n                position: \"absolute\",\n                left: \"49%\",\n                top: \"13%\",\n                height: \"24px\"\n              },\n              alt: \"data not found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: \" 20px\",\n              alignItems: \"center\",\n              display: \"inline-block\",\n              lineHeight: \"20px\",\n              fontWeight: \"bold\",\n              color: \"#161D4A\",\n              marginTop: \"20px\"\n            },\n            children: \"You don't have any active job yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              padding: \"19px 32px\",\n              width: \"327px\",\n              borderRadius: \" 3px\",\n              backgroundColor: \"#FEE600\",\n              textAlign: \"center\",\n              fontSize: \"16px\",\n              fontWeight: \"bold\",\n              color: \"#161D4A\",\n              marginTop: \"20px\"\n            },\n            children: \"Post a job\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default OpenJobs;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/openJobs.tsx"],"names":["React","Component","approved","jobTypePlaceholder","renderTime","OpenJobs","constructor","props","redirectToInfo","jobId","status","length","urlEncode","activeType","history","push","setToggle","setState","isToggleApplicants","state","quotesData","toggleQuoteSort","componentDidMount","render","params","URLSearchParams","location","search","quotes_param","get","viewQuotesParam","setJobLabel","dataItems","applicantsList","jobType","isLoading","listData","charAt","toUpperCase","slice","map","amount","durations","jobName","fromDate","toDate","milestoneNumber","specializationId","specializationName","locationName","timeLeft","total","totalmem","totalMilestones","tradieListData","tradeName","quoteCount","quoteJob","tradieId","tradeSelectedUrl","tradieImage","e","target","onerror","src","replace","height","width","backgroundColor","borderRadius","display","position","newFill","left","top","fontSize","alignItems","lineHeight","fontWeight","color","marginTop","padding","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport dummy from '../../../assets/images/u_placeholder.jpg';\nimport approved from '../../../assets/images/approved.png';\nimport ApplicantsList from './applicantsList';\nimport { withRouter } from 'react-router-dom'\nimport noDataFound from '../../../assets/images/n.png';\nimport jobTypePlaceholder from '../../../assets/images/job-type-placeholder.png';\nimport moment from 'moment';\nimport { renderTime } from '../../../utils/common';\nimport ListQuotes from './quoteJobs/ListQuotes';\nimport ViewQuote from './quoteJobs/viewQuote';\n\nimport { quoteByJobId } from '../../../redux/quotes/actions';\n\ninterface Active {\n    amount: any,\n    durations: any,\n    jobId: any,\n    jobName: any,\n    fromDate: any,\n    toDate: any,\n    milestoneNumber: any,\n    specializationId: any,\n    specializationName: any,\n    status: any,\n    timeLeft: any,\n    total: any,\n    totalmem: any,\n    location: any,\n    locationName: any,\n    totalMilestones: any,\n    tradieListData: any,\n    quoteCount: any,\n    quoteJob: any,\n    tradeName: any,\n    tradieId: any,\n    tradeSelectedUrl: any,\n    tradieImage: any,\n}\ninterface State {\n    isToggleApplicants: boolean,\n    quotesData: any,\n    toggleQuoteSort: boolean,\n}\n\ninterface Props {\n    setJobLabel: any,\n    dataItems: any,\n    applicantsList?: any,\n    jobType: any,\n    history?: any,\n    isLoading: any,\n    activeType?: any\n}\n\nclass OpenJobs extends Component<Props, State> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isToggleApplicants: false,\n            quotesData: [],\n            toggleQuoteSort: true\n        }\n    }\n\n    redirectToInfo = ({ jobId, status }: any) => {\n        let props: any = this.props;\n        if (jobId?.length && status?.length) {\n            // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&activeType=${props?.activeType}`)\n            let urlEncode: any = `?jobId=${jobId}&status=${status}&activeType=${props?.activeType}`\n            this.props.history.push(`/job-detail?${urlEncode}`);\n        } else {\n            // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${'open'}&activeType=${props?.activeType}`)\n            let urlEncode: any = `?jobId=${jobId}&status=${'open'}&activeType=${props?.activeType}`\n            this.props.history.push(`/job-detail?${urlEncode}`);\n        }\n    }\n\n    componentDidMount() {\n        // this.preFetchForQuotes();\n    }\n\n    setToggle = () => this.setState({ isToggleApplicants: !this.state.isToggleApplicants });\n\n    render() {\n        // props defined & render by params\n        const props: any = this.props;\n        const params = new URLSearchParams(props?.history?.location?.search);\n        const quotes_param: any = params.get('quotes');\n        const viewQuotesParam: any = params.get('viewQuotes');\n        const jobId: any = params.get('jobId');\n\n        const { setJobLabel, dataItems, applicantsList, jobType, isLoading } = this.props;\n        let listData: any = dataItems\n        let { isToggleApplicants, quotesData, toggleQuoteSort } = this.state;\n\n\n        if (isLoading) {\n            return null;\n        }\n\n        return (\n          <React.Fragment>\n            <span className=\"sub_title\">\n              {jobType.charAt(0).toUpperCase() + jobType.slice(1)} Jobs\n              {/* {listData?.length} */}\n            </span>\n            <div className=\"flex_row tradies_row\">\n              {listData?.length\n                ? listData.map(\n                    ({\n                      amount,\n                      durations,\n                      jobId,\n                      jobName,\n                      fromDate,\n                      toDate,\n                      milestoneNumber,\n                      specializationId,\n                      specializationName,\n                      locationName,\n                      status,\n                      timeLeft,\n                      total,\n                      totalmem,\n                      totalMilestones,\n                      tradieListData,\n                      tradeName,\n                      quoteCount,\n                      quoteJob,\n                      tradieId,\n                      location,\n                      tradeSelectedUrl,\n                      tradieImage,\n                    }: Active) => (\n                      <div className=\"flex_col_sm_6\">\n                        <div\n                          className=\"tradie_card\"\n                          data-aos=\"fade-in\"\n                          data-aos-delay=\"250\"\n                          data-aos-duration=\"1000\"\n                        >\n                          <span\n                            onClick={() => {\n                              this.redirectToInfo({ jobId, status });\n                            }}\n                            className=\"more_detail circle\"\n                          ></span>\n                          <div className=\"user_wrap\">\n                            <figure className=\"u_img icon\">\n                              <img\n                                src={tradeSelectedUrl || jobTypePlaceholder}\n                                alt=\"traide-img\"\n                                onError={(e: any) => {\n                                  if (e?.target?.onerror) {\n                                    e.target.onerror = null;\n                                  }\n                                  if (e?.target?.src) {\n                                    e.target.src = jobTypePlaceholder;\n                                  }\n                                }}\n                              />\n                            </figure>\n                            <div className=\"details\">\n                              <span className=\"name\">{tradeName || \"0\"}</span>\n                              <p className=\"commn_para\">{jobName}</p>\n                            </div>\n                          </div>\n                          <div className=\"job_info\">\n                            {quoteJob ? (\n                              <ul>\n                                <li className=\"icon dollar\">{amount}</li>\n                                <li className=\"\"></li>\n                                <li className=\"icon calendar\">\n                                  {renderTime(fromDate, toDate)}\n                                </li>\n                                <li>\n                                  <span>{timeLeft}</span>\n                                </li>\n                              </ul>\n                            ) : (\n                              <ul>\n                                <li className=\"icon dollar\">{amount}</li>\n                                <li className=\"\">\n                                  <span>{total}</span>\n                                </li>\n                                <li className=\"icon calendar\">\n                                  {renderTime(fromDate, toDate)}\n                                </li>\n                                <li>\n                                  <span>{timeLeft}</span>\n                                </li>\n                              </ul>\n                            )}\n                          </div>\n                          <div\n                            className=\"job_progress_wrap\"\n                            id=\"scroll-progress-bar\"\n                          >\n                            <div className=\"progress_wrapper\">\n                              <span\n                                className=\"completed-digit\"\n                                id=\"digit-progress\"\n                              >\n                                <b>{`Job Milestones ${milestoneNumber} `}</b>\n                                {`of ${totalMilestones}`}\n                              </span>\n                              <span className=\"approval_info\">\n                                {status === \"Approved\" && (\n                                  <img src={approved} alt=\"icon\" />\n                                )}\n                                {status}\n                              </span>\n                              <span className=\"progress_bar\">\n                                <input\n                                  className=\"done_progress\"\n                                  id=\"progress-bar\"\n                                  type=\"range\"\n                                  min=\"0\"\n                                  value={\n                                    (milestoneNumber / totalMilestones) * 100\n                                  }\n                                />\n                              </span>\n                            </div>\n\n                            {quoteJob ? (\n                              <button\n                                onClick={() => {\n                                  if (quoteCount?.length || quoteCount) {\n                                    this.props.setJobLabel(\"listQuote\");\n                                    this.props.history.replace(\n                                      `/jobs?active=open&quote=true&jobId=${jobId}`\n                                    );\n                                  }\n                                }}\n                                className=\"fill_grey_btn full_btn btn-effect\"\n                              >\n                                {`${quoteCount} Quote${\n                                  quoteCount === 1 ? \"\" : \"s\"\n                                }`}\n                              </button>\n                            ) : null}\n                            {!quoteJob && tradieId?.length ? (\n                              <button\n                                onClick={() => {\n                                  this.setToggle();\n                                  setJobLabel(\n                                    \"applicantList\",\n                                    jobId,\n                                    1,\n                                    specializationId\n                                  );\n                                }}\n                                className=\"fill_grey_btn full_btn btn-effect\"\n                              >\n                                {\"Applications\"}\n                              </button>\n                            ) : null}\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  )\n                : !isLoading && (\n                    <div className=\"no_record  m-t-vh\">\n                      <figure>\n                        <span\n                          style={{\n                            height: \"85px\",\n                            width: \"85px\",\n                            backgroundColor: \"#161D4A\",\n                            borderRadius: \"50%\",\n                            display: \"inline-block\",\n                            position: \"relative\",\n                          }}\n                        ></span>\n                        <img\n                          src={newFill}\n                          style={{\n                            position: \"absolute\",\n                            left: \"49%\",\n                            top: \"13%\",\n                            height: \"24px\",\n                          }}\n                          alt=\"data not found\"\n                        />\n                      </figure>\n\n                      <span\n                        style={{\n                          fontSize: \" 20px\",\n                          alignItems: \"center\",\n                          display: \"inline-block\",\n                          lineHeight: \"20px\",\n                          fontWeight: \"bold\",\n                          color: \"#161D4A\",\n                          marginTop: \"20px\",\n                        }}\n                      >\n                        You don't have any active job yet\n                      </span>\n                      <button\n                        style={{\n                          padding: \"19px 32px\",\n                          width: \"327px\",\n                          borderRadius: \" 3px\",\n                          backgroundColor: \"#FEE600\",\n                          textAlign: \"center\",\n                          fontSize: \"16px\",\n                          fontWeight: \"bold\",\n                          color: \"#161D4A\",\n                          marginTop: \"20px\",\n                        }}\n                      >\n                        Post a job\n                      </button>\n                    </div>\n                  )}\n            </div>\n          </React.Fragment>\n        );\n    }\n}\n\nexport default OpenJobs;"]},"metadata":{},"sourceType":"module"}