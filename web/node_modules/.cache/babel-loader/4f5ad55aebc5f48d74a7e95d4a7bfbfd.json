{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/bannerSearchProps.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n// @ts-ignore\nimport PlacesAutocomplete from 'react-places-autocomplete';\n// @ts-ignore\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\n\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nimport Searchicon from \"../../assets/images/main-search.png\";\nimport search from \"../../assets/images/ic-search.png\";\nimport Location from \"../../assets/images/ic-location.png\";\nimport cross from \"../../assets/images/close-black.png\";\nimport icgps from \"../../assets/images/ic-gps.png\";\nimport residential from \"../../assets/images/ic-residential.png\";\nimport close from \"../../assets/images/icon-close-1.png\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { getSearchJobList, getRecentSearchList, postHomeSearchData, getRecentLocationList } from '../../redux/homeSearch/actions';\nimport { isHandleChanges } from '../../redux/jobs/actions'; // @ts-ignore\n\nimport { useDetectClickOutside } from 'react-detect-click-outside';\nimport moment from 'moment';\nimport Geocode from \"react-geocode\";\nimport { setShowToast } from '../../redux/common/actions';\nimport { deleteRecentSearch } from '../../redux/homeSearch/actions';\nimport { renderTimeWithCustomFormat } from '../../utils/common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyDKFFrKp0D_5gBsA_oztQUhrrgpKnUpyPo\");\nGeocode.setLanguage(\"en\");\nconst example_calender = {\n  startDate: '',\n  endDate: '',\n  key: 'selection1'\n};\nexport function useStateFromProp(initialValue) {\n  _s();\n\n  const [value, setValue] = useState(initialValue);\n  useEffect(() => setValue(initialValue), [initialValue]);\n  return [value, setValue];\n}\n\n_s(useStateFromProp, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\nconst BannerSearch = props => {\n  _s2();\n\n  var _state_data$specializ, _props$recentLocation2, _props$recentLocation3;\n\n  let props_selected = props.selectedItem;\n  const {\n    selectedItem,\n    isHandleChanges,\n    localChanges,\n    getRecentSearchList,\n    getRecentLocationList\n  } = props;\n  const [checkOnChange, setOnChange] = useState(false);\n  const [locationStatus, setLocationStatus] = useState(null);\n  const [stateData, setStateData] = useState(null);\n  const [searchText, setSearchText] = useState('');\n  const [addressText, setAddressText] = useState(null);\n  const [recentLocation, setRecentLocation] = useState([]); // recentLocation\n\n  const [selectedAddress, setSelectedAddress] = useState({});\n  const [enableCurrentLocation, setCurrentLocations] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [selectedTrade, setSelectedTrade] = useState({});\n  const [inputFocus1, setInputFocus1] = useState(false);\n  const [inputFocus2, setInputFocus2] = useState(false);\n  const [inputFocus3, setInputFocus3] = useState(false);\n  const [calenderRange1, setCalenderRange1] = useState(example_calender);\n  const [suggestionSelected, setSuggestion] = useState({});\n\n  const handleOnOutsideSearch = () => {\n    setOnChange(false);\n    setInputFocus1(false);\n  };\n\n  const handleOnOutsideLocation = () => setInputFocus2(false);\n\n  const handleOnOutsideCalender = () => setInputFocus3(false);\n\n  const searchRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideSearch\n  });\n  const locationRef = useDetectClickOutside({\n    onTriggered: () => {\n      // if (addressText?.length > 3) {\n      handleOnOutsideLocation(); // }\n    }\n  });\n  const locationRefClone = useDetectClickOutside({\n    onTriggered: () => {//     if (!addressText || addressText?.length < 2) {\n      //         handleOnOutsideLocation()\n      //     }\n    }\n  });\n  const calenderRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideCalender\n  });\n  const [sortBy, setSortBy] = useState(0);\n\n  const handleCalenderRange = item => {\n    var _item$selection, _item$selection2;\n\n    setCalenderRange1(item.selection1);\n    console.log({\n      localInfo: props.localInfo\n    });\n    props.getTitleInfo({ ...props.localInfo,\n      from_date: moment((_item$selection = item.selection1) === null || _item$selection === void 0 ? void 0 : _item$selection.startDate).format('YYYY-MM-DD'),\n      to_date: moment((_item$selection2 = item.selection1) === null || _item$selection2 === void 0 ? void 0 : _item$selection2.endDate).format('YYYY-MM-DD')\n    });\n  };\n\n  const [checkRender, setRender] = useState(false);\n  useEffect(() => {\n    console.log({\n      selectedAddress\n    }, '!!@');\n  }, [selectedAddress]);\n  useEffect(() => {\n    let state = props.location.state;\n    let local_info = props.localInfo;\n\n    if (!(searchText === null || searchText === void 0 ? void 0 : searchText.length) && !checkRender) {\n      var _state$location, _state$location$coord;\n\n      setSearchText(state.name);\n      setStateData({\n        createdAt: null,\n        image: null,\n        name: state === null || state === void 0 ? void 0 : state.name,\n        specializationsId: state === null || state === void 0 ? void 0 : state.specializations,\n        trade_name: state === null || state === void 0 ? void 0 : state.name,\n        _id: state === null || state === void 0 ? void 0 : state.tradeId\n      });\n\n      if (state.calender && Object.keys(state.calender).length) {\n        setCalenderRange1(state.calender);\n      }\n\n      if ((state === null || state === void 0 ? void 0 : state.location) && (state === null || state === void 0 ? void 0 : (_state$location = state.location) === null || _state$location === void 0 ? void 0 : (_state$location$coord = _state$location.coordinates) === null || _state$location$coord === void 0 ? void 0 : _state$location$coord.length)) {\n        let coordinates = state.location.coordinates;\n        let valueItem = {\n          lat: coordinates[1],\n          lng: coordinates[0]\n        };\n        setSelectedAddress(valueItem);\n      }\n\n      if (state === null || state === void 0 ? void 0 : state.address) {\n        setAddressText(state.address);\n      }\n\n      setRender(true);\n    } // doingLocalChanges \n    // when this option true it the props will set.\n\n\n    if (Object.keys(local_info).length && !(local_info === null || local_info === void 0 ? void 0 : local_info.doingLocalChanges)) {\n      if ((searchText === null || searchText === void 0 ? void 0 : searchText.length) !== (local_info === null || local_info === void 0 ? void 0 : local_info.name)) {\n        if (local_info === null || local_info === void 0 ? void 0 : local_info.sortBy) {\n          setSortBy(local_info === null || local_info === void 0 ? void 0 : local_info.sortBy);\n        }\n\n        if (!(local_info === null || local_info === void 0 ? void 0 : local_info.isTradeName)) {\n          setSearchText(local_info.name);\n        } else {\n          setSearchText('');\n        }\n\n        setStateData({\n          createdAt: null,\n          image: null,\n          name: local_info === null || local_info === void 0 ? void 0 : local_info.name,\n          specializationsId: local_info === null || local_info === void 0 ? void 0 : local_info.specializationId,\n          trade_name: null,\n          _id: local_info === null || local_info === void 0 ? void 0 : local_info.tradeId\n        });\n      }\n    }\n  }, [props]);\n  useEffect(() => {\n    // if (addressText !== null) {\n    //     if (addressText?.length > 2) {\n    //         document.getElementById('location-input-tag')?.focus(); // commented this for first render un-focus\n    //     } else {\n    //         document.getElementById('location_search_static')?.focus();\n    //     }\n    // }\n    if ((!addressText || !(addressText === null || addressText === void 0 ? void 0 : addressText.length)) && inputFocus2) {\n      setSelectedAddress({});\n      setSelectedTrade({});\n    }\n\n    if (!(addressText === null || addressText === void 0 ? void 0 : addressText.length)) {\n      fetchItemsSearchWithLocation(1);\n    }\n  }, [addressText]);\n  useEffect(() => {\n    fetchItemsSearchWithLocation(); // getRecentLocationData();\n  }, []);\n\n  const fetchItemsSearchWithLocation = fetch => {\n    if (getRecentSearchList && fetch !== 1) {\n      getRecentSearchList();\n    }\n\n    if (getRecentLocationList) {\n      getRecentLocationList();\n    }\n  };\n\n  useEffect(() => {// if (props.recentLocationData?.length &&\n    //     JSON.stringify(props.recentLocationData[0]?.location?.coordinates) !== JSON.stringify(recentLocation[0]?.location?.coordinates)) {\n    //     getRecentLocationData();\n    // }\n  }, [props.recentLocationData, recentLocation]);\n\n  const updateGetTitleInfo = () => {\n    props === null || props === void 0 ? void 0 : props.getTitleInfo({ ...(props === null || props === void 0 ? void 0 : props.localInfo),\n      doingLocalChanges: true\n    });\n  };\n\n  useEffect(() => {\n    updateGetTitleInfo();\n\n    if ((searchText === null || searchText === void 0 ? void 0 : searchText.length) > 2) {\n      props.getSearchJobList(searchText);\n    }\n\n    if (!(searchText === null || searchText === void 0 ? void 0 : searchText.length)) {\n      setSelectedTrade({});\n    }\n  }, [searchText]);\n  useEffect(() => {}, [selectedAddress]);\n\n  const getRecentLocationData = async () => {\n    var recentLocationDetails = [];\n    let recentLocationData = props.recentLocationData;\n\n    for (let index = 0; index < recentLocationData.length; index++) {\n      let item = recentLocationData[index];\n\n      try {\n        var _cityText, _cityText2, _cityText3, _cityText4, _cityText5, _cityText6, _cityText7, _cityText8, _item$location, _props$recentLocation;\n\n        let lat = item.location.coordinates[1];\n        let long = item.location.coordinates[0];\n        let response = await Geocode.fromLatLng(lat, long);\n        let formatedCityText = JSON.parse(JSON.stringify(response === null || response === void 0 ? void 0 : response.results[0]));\n        let cityText = null;\n\n        if (formatedCityText === null || formatedCityText === void 0 ? void 0 : formatedCityText.formatted_address.includes(',')) {\n          cityText = formatedCityText === null || formatedCityText === void 0 ? void 0 : formatedCityText.formatted_address.split(',');\n        } else {\n          cityText = formatedCityText === null || formatedCityText === void 0 ? void 0 : formatedCityText.formatted_address.split('-');\n        }\n\n        const newData = {\n          mainText: ((_cityText = cityText) === null || _cityText === void 0 ? void 0 : _cityText.length) > 3 ? (_cityText2 = cityText) === null || _cityText2 === void 0 ? void 0 : _cityText2.slice(0, 2).join(',') : (_cityText3 = cityText) === null || _cityText3 === void 0 ? void 0 : _cityText3.slice(0, 1).join(','),\n          secondaryText: ((_cityText4 = cityText) === null || _cityText4 === void 0 ? void 0 : _cityText4.length) > 3 ? (_cityText5 = cityText) === null || _cityText5 === void 0 ? void 0 : _cityText5.slice(2, (_cityText6 = cityText) === null || _cityText6 === void 0 ? void 0 : _cityText6.length).join(',') : (_cityText7 = cityText) === null || _cityText7 === void 0 ? void 0 : _cityText7.slice(1, (_cityText8 = cityText) === null || _cityText8 === void 0 ? void 0 : _cityText8.length).join(',')\n        };\n        recentLocationDetails[index] = {\n          formatted_address: formatedCityText === null || formatedCityText === void 0 ? void 0 : formatedCityText.formatted_address,\n          location: {\n            coordinates: item === null || item === void 0 ? void 0 : (_item$location = item.location) === null || _item$location === void 0 ? void 0 : _item$location.coordinates\n          },\n          allText: newData\n        };\n\n        if ((recentLocationDetails === null || recentLocationDetails === void 0 ? void 0 : recentLocationDetails.length) === ((_props$recentLocation = props.recentLocationData) === null || _props$recentLocation === void 0 ? void 0 : _props$recentLocation.length)) {\n          setRecentLocation(recentLocationDetails);\n        }\n      } catch (err) {\n        console.log({\n          err\n        });\n      }\n    }\n  };\n\n  const checkIfExist = _id => {\n    if (selectedTrade) {\n      let isLength = Object.keys(selectedTrade).length;\n\n      if (isLength) {\n        let item = selectedTrade;\n\n        if ((item === null || item === void 0 ? void 0 : item._id) === _id) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  const cleanRecentSearch = async (event, recentSearchId) => {\n    event.stopPropagation();\n    const data = {\n      id: recentSearchId,\n      status: 0\n    };\n    const res = await deleteRecentSearch(data);\n\n    if (res.success) {\n      if (getRecentSearchList) {\n        getRecentSearchList();\n      }\n    }\n  };\n\n  const recentJobSearches = () => {\n    var _props$recentSearchJo, _props$recentSearchJo2, _props$recentSearchJo3;\n\n    let props_Clone = props;\n    let tradeListData = props_Clone.tradeListData;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_autosuggestion\",\n        id: \"recent-job-search-div\",\n        children: [(props === null || props === void 0 ? void 0 : (_props$recentSearchJo = props.recentSearchJobData) === null || _props$recentSearchJo === void 0 ? void 0 : _props$recentSearchJo.length) ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sub_title\",\n            children: \"Recent searches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row recent_search\",\n            children: ((_props$recentSearchJo2 = props.recentSearchJobData) === null || _props$recentSearchJo2 === void 0 ? void 0 : _props$recentSearchJo2.length) > 0 && ((_props$recentSearchJo3 = props.recentSearchJobData) === null || _props$recentSearchJo3 === void 0 ? void 0 : _props$recentSearchJo3.slice(0, 2).map(item => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex_col_sm_3\",\n                onClick: () => {\n                  setItemSearch({\n                    createdAt: item === null || item === void 0 ? void 0 : item.createdAt,\n                    image: item.image,\n                    name: item.name,\n                    specializationsId: [item.specializationsId],\n                    trade_name: item.trade_name,\n                    _id: item._id\n                  });\n                  setSelectedTrade({});\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card ico_txt_wrap\",\n                  children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                    className: \"ico\",\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: (item === null || item === void 0 ? void 0 : item.image) || residential,\n                      alt: \"icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 361,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"f_column\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 364,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"name\",\n                      children: item.trade_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 365,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 363,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"remove_card\",\n                    onClick: event => {\n                      cleanRecentSearch(event, item.recentSearchId);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: close,\n                      alt: \"remove\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 370,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 41\n              }, this);\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select_sphere recent_search\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sub_title\",\n            children: 'Categories'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: tradeListData === null || tradeListData === void 0 ? void 0 : tradeListData.map(({\n              _id,\n              trade_name,\n              selected_url,\n              specialisations\n            }) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => {\n                let item_spec = specialisations;\n\n                if (item_spec === null || item_spec === void 0 ? void 0 : item_spec.length) {\n                  let getItem = item_spec[0];\n\n                  if (getItem) {\n                    setStateData({\n                      image: selected_url,\n                      name: getItem === null || getItem === void 0 ? void 0 : getItem.name,\n                      specializationsId: specialisations.map(sp => sp._id),\n                      trade_name: trade_name,\n                      _id: _id\n                    });\n                    setSearchText(getItem === null || getItem === void 0 ? void 0 : getItem.name);\n                  }\n\n                  setSelectedTrade({\n                    _id,\n                    trade_name,\n                    selected_url,\n                    specialisations\n                  });\n                }\n              },\n              className: checkIfExist(_id) ? 'active' : '',\n              children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: selected_url,\n                  alt: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 403,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"name\",\n                children: trade_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  };\n\n  const renderJobResult = () => {\n    var _props$searchJobListD;\n\n    if (props === null || props === void 0 ? void 0 : (_props$searchJobListD = props.searchJobListData) === null || _props$searchJobListD === void 0 ? void 0 : _props$searchJobListD.length) {\n      var _props$searchJobListD2;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_autosuggestion\",\n        id: \"fetched-custom-job-category-div\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recent_search\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"drop_data\",\n            children: (_props$searchJobListD2 = props.searchJobListData) === null || _props$searchJobListD2 === void 0 ? void 0 : _props$searchJobListD2.map(item => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                onClick: () => {\n                  setItemSearch(item);\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                  className: \"category\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: item.image ? item.image : residential,\n                    alt: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: item.name || ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 428,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"prof\",\n                    children: item.trade_name || ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 429,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }, this);\n    }\n\n    return null;\n  };\n\n  const onError = (status, clearSuggestions) => {\n    console.log('Google Maps API returned error with status: ', status);\n    clearSuggestions();\n  };\n\n  const validateForm = () => {\n    return true;\n  };\n\n  const setItemSearch = item => {\n    setStateData(item);\n    setSelectedTrade({});\n    setSearchText((item === null || item === void 0 ? void 0 : item.name) || '');\n  };\n\n  const bannerSearchClicked = () => {\n    var _props$location, _props$location$state;\n\n    let selected_address = selectedAddress;\n    let selected_item = props === null || props === void 0 ? void 0 : props.selectedItem;\n    let props_trade = selected_item === null || selected_item === void 0 ? void 0 : selected_item.selectedTrade;\n    let local_info = props === null || props === void 0 ? void 0 : props.localInfo;\n    let prev_address = props === null || props === void 0 ? void 0 : (_props$location = props.location) === null || _props$location === void 0 ? void 0 : (_props$location$state = _props$location.state) === null || _props$location$state === void 0 ? void 0 : _props$location$state.address;\n    let suggestion_selected = local_info === null || local_info === void 0 ? void 0 : local_info.suggestionSelected;\n\n    if (suggestion_selected) {\n      suggestion_selected = JSON.stringify(local_info === null || local_info === void 0 ? void 0 : local_info.suggestionSelected);\n    }\n\n    if (suggestionSelected && Object.keys(suggestionSelected).length) {\n      if (JSON.stringify(local_info === null || local_info === void 0 ? void 0 : local_info.suggestionSelected) !== JSON.stringify(suggestionSelected)) {\n        suggestion_selected = JSON.stringify(suggestionSelected);\n      }\n    }\n\n    let tradeId = null;\n    let specializationId = null;\n\n    if (!(local_info === null || local_info === void 0 ? void 0 : local_info.doingLocalChanges)) {\n      tradeId = Array.isArray(local_info === null || local_info === void 0 ? void 0 : local_info.tradeId) ? local_info === null || local_info === void 0 ? void 0 : local_info.tradeId : [local_info === null || local_info === void 0 ? void 0 : local_info.tradeId];\n      specializationId = Array.isArray(local_info === null || local_info === void 0 ? void 0 : local_info.specializationId) ? local_info === null || local_info === void 0 ? void 0 : local_info.specializationId : [local_info === null || local_info === void 0 ? void 0 : local_info.specializationId];\n    } else {\n      if (Object.keys(stateData).length) {\n        tradeId = Array.isArray(stateData._id) ? stateData._id : [stateData._id];\n        specializationId = Array.isArray(stateData.specializationsId) ? stateData.specializationsId : [stateData.specializationsId];\n      }\n    }\n\n    if (!(stateData === null || stateData === void 0 ? void 0 : stateData._id) && !(props_trade === null || props_trade === void 0 ? void 0 : props_trade._id)) {\n      setShowToast(true, 'please enter the valid search text.');\n      return;\n    }\n\n    if (validateForm()) {\n      var _tradeId, _specializationId, _data$specializationI;\n\n      let data = {\n        page: 1,\n        isFiltered: true,\n        tradeId: tradeId,\n        specializationId: specializationId\n      };\n\n      if (!((_tradeId = tradeId) === null || _tradeId === void 0 ? void 0 : _tradeId.length)) {\n        setShowToast(true, 'please enter the valid search text.');\n        return;\n      }\n\n      if (!((_specializationId = specializationId) === null || _specializationId === void 0 ? void 0 : _specializationId.length)) {\n        data === null || data === void 0 ? true : delete data.specializationId;\n      }\n\n      if (sortBy > 0) {\n        data['sortBy'] = sortBy;\n      }\n\n      if (Object.keys(selectedAddress).length) {\n        data['location'] = {\n          \"coordinates\": [parseFloat(selected_address === null || selected_address === void 0 ? void 0 : selected_address.lng), parseFloat(selected_address === null || selected_address === void 0 ? void 0 : selected_address.lat)]\n        }; // if (prev_address == addressText) {\n        //     data['address'] = prev_address\n        // } else {\n        //     if (addressText?.length) {\n        //         data['address'] = addressText\n        //     }\n        // }\n\n        if (suggestion_selected) {\n          if (addressText) {\n            data['address'] = suggestion_selected;\n          }\n        }\n      } else {\n        delete data.location;\n      }\n\n      if (moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate).isValid()) {\n        data['from_date'] = moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate).format('YYYY-MM-DD');\n      } else {\n        delete data.from_date;\n      }\n\n      if (moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.endDate).isValid()) {\n        data['to_date'] = moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.endDate).format('YYYY-MM-DD');\n      } else {\n        delete data.to_date;\n      }\n\n      if (sortBy === 2) {\n        var _Object$keys;\n\n        if ((_Object$keys = Object.keys(selected_address)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.length) {\n          data['location'] = {\n            \"coordinates\": [parseFloat(selected_address === null || selected_address === void 0 ? void 0 : selected_address.lng), parseFloat(selected_address === null || selected_address === void 0 ? void 0 : selected_address.lat)]\n          };\n        }\n\n        if (suggestion_selected) {\n          if (addressText) {\n            let case_1 = typeof suggestion_selected == 'string' ? suggestion_selected : JSON.stringify(suggestion_selected);\n            data['address'] = addressText && suggestion_selected ? case_1 : '';\n          }\n        }\n      }\n\n      props.getTitleInfo({\n        name: searchText,\n        isTradeName: false,\n        count: data === null || data === void 0 ? void 0 : (_data$specializationI = data.specializationId) === null || _data$specializationI === void 0 ? void 0 : _data$specializationI.length,\n        tradeId: data.tradeId,\n        specializationId: data.specializationId,\n        location: data.location,\n        from_date: data === null || data === void 0 ? void 0 : data.from_date,\n        to_date: data === null || data === void 0 ? void 0 : data.to_date,\n        doingLocalChanges: true,\n        address: data === null || data === void 0 ? void 0 : data.address,\n        suggestionSelected: suggestion_selected ? JSON.parse(suggestion_selected) : null\n      });\n      props.postHomeSearchData(data);\n    }\n  };\n\n  const filterFromAddress = response => {\n    let city,\n        state,\n        country = null;\n\n    for (let i = 0; i < response.results[0].address_components.length; i++) {\n      for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n        switch (response.results[0].address_components[i].types[j]) {\n          case \"locality\":\n            city = response.results[0].address_components[i].long_name;\n            break;\n\n          case \"administrative_area_level_1\":\n            state = response.results[0].address_components[i].long_name;\n            break;\n\n          case \"country\":\n            country = response.results[0].address_components[i].long_name;\n            break;\n        }\n      }\n    }\n\n    return {\n      city,\n      state,\n      country: country.toLowerCase()\n    };\n  };\n\n  const getCurrentLocation = async () => {\n    let itemToggle = await navigator.permissions.query({\n      name: 'geolocation'\n    });\n    setLocationStatus(itemToggle.state);\n    let local_position = localStorage.getItem('position');\n    let position = JSON.parse(local_position);\n\n    if (position === null || position === void 0 ? void 0 : position.length) {\n      let lng = position[0].toString();\n      let lat = position[1].toString();\n      let response = await Geocode.fromLatLng(lat, lng);\n      const {\n        city,\n        state,\n        country\n      } = filterFromAddress(response);\n\n      if (response && [\"australia\", \"au\"].includes(country)) {\n        var _response$results;\n\n        if ((response === null || response === void 0 ? void 0 : response.results) && Array.isArray(response.results) && (response === null || response === void 0 ? void 0 : (_response$results = response.results) === null || _response$results === void 0 ? void 0 : _response$results.length)) {\n          const address = response.results[0].formatted_address;\n          setSelectedAddress({\n            lat,\n            lng\n          });\n          setAddressText(address);\n          setInputFocus2(true);\n          setInputFocus1(false);\n          setInputFocus3(false);\n          setCurrentLocations(true); // this.setState({ currentAddressLatLng: { long, lat }, addressText: address, enableCurrentLocation: true, inputFocus2: true })\n        }\n      } else {\n        if ((itemToggle === null || itemToggle === void 0 ? void 0 : itemToggle.state) !== \"denied\") {\n          setShowToast(true, \"Uh oh! we don't provide service currently in your location.\");\n        }\n      }\n    }\n  };\n\n  const checkPlaceholder = calenderRange1 => {\n    let fromDate = calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate;\n    let toDate = calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.endDate;\n    let result = renderTimeWithCustomFormat(fromDate, toDate, '', ['DD MMM', 'DD MMM YYYY'], 'When ?');\n\n    if (!result) {\n      return 'When ?';\n    }\n\n    return result;\n  };\n\n  let state_data = stateData;\n  let length_spec = 0;\n\n  if ((state_data === null || state_data === void 0 ? void 0 : (_state_data$specializ = state_data.specializationsId) === null || _state_data$specializ === void 0 ? void 0 : _state_data$specializ.length) && Array.isArray(state_data === null || state_data === void 0 ? void 0 : state_data.specializationsId)) {\n    var _state_data$specializ2;\n\n    length_spec = state_data === null || state_data === void 0 ? void 0 : (_state_data$specializ2 = state_data.specializationsId) === null || _state_data$specializ2 === void 0 ? void 0 : _state_data$specializ2.length;\n  }\n\n  let custom_name = searchText;\n\n  if (!checkOnChange) {\n    var _custom_name;\n\n    if (length_spec > 1 && ((_custom_name = custom_name) === null || _custom_name === void 0 ? void 0 : _custom_name.length)) {\n      custom_name = `${custom_name} +${length_spec - 1}`;\n    }\n  }\n\n  console.log({\n    searchText,\n    custom_name\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home_search\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (props === null || props === void 0 ? void 0 : props.handleChangeToggle) {\n          props.handleChangeToggle(false);\n        }\n      },\n      className: \"modal_srch_close\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: close,\n        alt: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"search_wrapr\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"categ_box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text_field\",\n            id: \"text-field-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ref: searchRef,\n              placeholder: \"What jobs are you after?\",\n              value: custom_name,\n              onChange: e => {\n                isHandleChanges(true);\n                setOnChange(true);\n                setSearchText(e.target.value.trimLeft());\n              } // readOnly={props?.selectedItem ? true : false}\n              ,\n              onFocus: () => {\n                setInputFocus1(true);\n                setInputFocus2(false);\n                setInputFocus3(false);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"border_eff\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detect_icon_ltr\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: Searchicon,\n                alt: \"search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 699,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 29\n            }, this), (searchText === null || searchText === void 0 ? void 0 : searchText.length) && inputFocus1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detect_icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: cross,\n                alt: \"cross\",\n                onClick: () => {\n                  // clear here\n                  setStateData({});\n                  setSelectedTrade({});\n                  isHandleChanges(true);\n                  setSearchText('');\n                  setOnChange(false);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 25\n          }, this), !!errors.searchedJob && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error_msg\",\n            children: errors.searchedJob\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 50\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 21\n        }, this), !(searchText === null || searchText === void 0 ? void 0 : searchText.length) && inputFocus1 ? recentJobSearches() : null, (searchText === null || searchText === void 0 ? void 0 : searchText.length) > 2 && inputFocus1 ? renderJobResult() : null, /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"loc_box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"location-text-field-div\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n                value: addressText,\n                searchOptions: {\n                  componentRestrictions: {\n                    country: \"au\"\n                  },\n                  //  types: [\"address\"]\n                  types: [\"(cities)\"]\n                },\n                shouldFetchSuggestions: (addressText === null || addressText === void 0 ? void 0 : addressText.length) > 2,\n                onChange: item => {\n                  setAddressText(item);\n                },\n                onSelect: async (address, placeId, suggestion) => {\n                  var _suggestion$formatted, _response$results2;\n\n                  let selected_address = address;\n\n                  if (address.indexOf(',')) {\n                    selected_address = address.split(',')[0];\n                  }\n\n                  console.log({\n                    address: suggestion === null || suggestion === void 0 ? void 0 : suggestion.formattedSuggestion\n                  });\n                  setSuggestion(suggestion === null || suggestion === void 0 ? void 0 : suggestion.formattedSuggestion);\n                  setAddressText(suggestion === null || suggestion === void 0 ? void 0 : (_suggestion$formatted = suggestion.formattedSuggestion) === null || _suggestion$formatted === void 0 ? void 0 : _suggestion$formatted.mainText);\n                  let response = await Geocode.fromAddress(address);\n\n                  if (response === null || response === void 0 ? void 0 : (_response$results2 = response.results) === null || _response$results2 === void 0 ? void 0 : _response$results2.length) {\n                    const {\n                      lat,\n                      lng\n                    } = response.results[0].geometry.location;\n                    setSelectedAddress({\n                      lat,\n                      lng\n                    });\n                    setInputFocus2(false);\n                  }\n                },\n                highlightFirstSuggestion: true,\n                onError: onError,\n                debounce: 0,\n                children: ({\n                  getInputProps,\n                  suggestions,\n                  getSuggestionItemProps,\n                  loading\n                }) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `text_field`,\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                        placeholder: 'Where?',\n                        className: 'line-1'\n                      }),\n                      id: \"location-input-tag\",\n                      autoComplete: \"off\",\n                      ref: locationRef,\n                      onFocus: () => {\n                        setInputFocus2(true);\n                        setInputFocus1(false);\n                        setInputFocus3(false);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 790,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"detect_icon_ltr\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: Location,\n                        alt: \"location\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 802,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 801,\n                      columnNumber: 49\n                    }, this), inputFocus2 && (addressText === null || addressText === void 0 ? void 0 : addressText.length) > 2 ?\n                    /*#__PURE__*/\n                    // {inputFocus2 && addressText?.length > 2 ?\n                    _jsxDEV(\"span\", {\n                      className: \"detect_icon\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: cross,\n                        alt: \"cross\",\n                        onClick: () => {\n                          setAddressText('');\n                          setSelectedAddress({});\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 807,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 806,\n                      columnNumber: 53\n                    }, this) : null]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 787,\n                    columnNumber: 45\n                  }, this), (suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) && inputFocus2 && (addressText === null || addressText === void 0 ? void 0 : addressText.length) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"custom_autosuggestion location\",\n                    id: \"autocomplete-dropdown-container\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex_row recent_search auto_loc\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"flex_col_sm_4\",\n                        children: [!!errors.selectedMapLocation && /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"error_msg\",\n                          children: errors.selectedMapLocation\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 826,\n                          columnNumber: 65\n                        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: \"Loading...\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 829,\n                          columnNumber: 73\n                        }, this), suggestions.map(suggestion => {\n                          const className = 'autosuggestion_icon card loc name';\n                          const style = suggestion.active ? {\n                            backgroundColor: '#fafafa',\n                            cursor: 'pointer'\n                          } : {\n                            backgroundColor: '#ffffff',\n                            cursor: 'pointer'\n                          };\n                          return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                              className,\n                              style\n                            }),\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              children: suggestion.formattedSuggestion.mainText\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 838,\n                              columnNumber: 73\n                            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"name\",\n                              children: suggestion.formattedSuggestion.secondaryText\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 841,\n                              columnNumber: 73\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 836,\n                            columnNumber: 69\n                          }, this);\n                        })]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 824,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 823,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 820,\n                    columnNumber: 49\n                  }, this) : null, inputFocus2 && !(suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) && !Object.keys(selectedAddress).length ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      minHeight: '50px'\n                    },\n                    className: \"custom_autosuggestion location\",\n                    id: \"autocomplete-dropdown-container\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex_row recent_search auto_loc\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"flex_col_sm_4\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"loc_suggestions\",\n                          children: 'No Result Found.'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 856,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 855,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 854,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 853,\n                    columnNumber: 49\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 786,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 751,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 25\n          }, this), !!errors.selectedMapLocation && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error_msg\",\n            children: errors.selectedMapLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 58\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 21\n        }, this), !(addressText === null || addressText === void 0 ? void 0 : addressText.length) && inputFocus2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom_autosuggestion location\",\n          id: \"current-location-search-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"location-btn\",\n            onClick: getCurrentLocation,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"gps_icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: icgps,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 878,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 877,\n              columnNumber: 33\n            }, this), \" Use my current location\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 29\n          }, this), locationStatus === \"denied\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"blocked_note\",\n            children: \"You have blocked your location. To use this, change your location settings in browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 882,\n            columnNumber: 34\n          }, this), (props === null || props === void 0 ? void 0 : (_props$recentLocation2 = props.recentLocationData) === null || _props$recentLocation2 === void 0 ? void 0 : _props$recentLocation2.length) > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sub_title\",\n            children: 'Recent searches'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row recent_search auto_loc\",\n            children: props === null || props === void 0 ? void 0 : (_props$recentLocation3 = props.recentLocationData) === null || _props$recentLocation3 === void 0 ? void 0 : _props$recentLocation3.map(item => {\n              var _item$address, _JSON$parse2, _JSON$parse3;\n\n              return (item === null || item === void 0 ? void 0 : (_item$address = item.address) === null || _item$address === void 0 ? void 0 : _item$address.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex_col_sm_4\",\n                onClick: () => {\n                  var _JSON$parse, _item$location2, _item$location3;\n\n                  setAddressText((_JSON$parse = JSON.parse(item === null || item === void 0 ? void 0 : item.address)) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.mainText);\n                  setSelectedAddress({\n                    lat: item === null || item === void 0 ? void 0 : (_item$location2 = item.location) === null || _item$location2 === void 0 ? void 0 : _item$location2.coordinates[1],\n                    lng: item === null || item === void 0 ? void 0 : (_item$location3 = item.location) === null || _item$location3 === void 0 ? void 0 : _item$location3.coordinates[0]\n                  });\n                  setSuggestion(JSON.parse(item === null || item === void 0 ? void 0 : item.address)); // let location_coordinates: any = item.location.coordinates\n                  // setAddressText(item.formatted_address);\n                  // setSelectedAddress({\n                  //     lat: location_coordinates[1],\n                  //     lng: location_coordinates[0]\n                  // });\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"autosuggestion_icon card loc name\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: (_JSON$parse2 = JSON.parse(item === null || item === void 0 ? void 0 : item.address)) === null || _JSON$parse2 === void 0 ? void 0 : _JSON$parse2.mainText\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 930,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: (_JSON$parse3 = JSON.parse(item === null || item === void 0 ? void 0 : item.address)) === null || _JSON$parse3 === void 0 ? void 0 : _JSON$parse3.secondaryText\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 931,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 929,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 912,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `date_box ${(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate) ? 'date_value' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: calenderRef,\n            className: \"custom_date_range\",\n            id: \"date-range-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text_field\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"detect_icon_ltr calendar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 943,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: checkPlaceholder(calenderRange1),\n                onFocus: () => {\n                  setInputFocus3(true);\n                  setInputFocus1(false);\n                  setInputFocus2(false);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 944,\n                columnNumber: 33\n              }, this), (calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate) && inputFocus3 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"detect_icon\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: cross,\n                  alt: \"cross\",\n                  onClick: () => {\n                    setCalenderRange1({\n                      startDate: '',\n                      endDate: '',\n                      key: 'selection1'\n                    });\n                    console.log({\n                      localInfo: props.localInfo\n                    });\n                    props.getTitleInfo({ ...props.localInfo,\n                      from_date: '',\n                      to_date: ''\n                    });\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 955,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 954,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 942,\n              columnNumber: 29\n            }, this), inputFocus3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"custom_autosuggestion\",\n              id: \"custom-date-range-div\",\n              children: /*#__PURE__*/_jsxDEV(DateRange, {\n                onChange: handleCalenderRange,\n                ranges: !moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate).isValid() ? [{\n                  startDate: new Date(),\n                  endDate: new Date(),\n                  key: 'selection1'\n                }] : [calenderRange1],\n                moveRangeOnFirstSelection: false,\n                rangeColors: [\"#fee600\", \"#b5b5b5\"],\n                showDateDisplay: false,\n                showSelectionPreview: true,\n                months: 2,\n                showPreview: true,\n                minDate: new Date(),\n                maxDate: moment().add(2, 'years').toDate(),\n                direction: \"horizontal\",\n                fixedHeight: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 974,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 938,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search_btn\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"fill_btn btn-effect\",\n            onClick: bannerSearchClicked,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: search,\n              alt: \"search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 994,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 993,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 666,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(BannerSearch, \"CkrT6ozP+im0H8U+ZOHlBzO62L0=\", false, function () {\n  return [useDetectClickOutside, useDetectClickOutside, useDetectClickOutside, useDetectClickOutside];\n});\n\n_c = BannerSearch;\n\nconst mapStateToProps = state => {\n  return {\n    searchJobListData: state.homeSearch.searchJobListData,\n    recentSearchJobData: state.homeSearch.recentSearchJobData,\n    homeSearchJobData: state.homeSearch.homeSearchJobData,\n    tradeListData: state.auth.tradeListData,\n    localChanges: state.jobs.localChanges,\n    recentLocationData: state.homeSearch.recentLocationData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getSearchJobList,\n    getRecentSearchList,\n    postHomeSearchData,\n    isHandleChanges,\n    getRecentLocationList\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BannerSearch);\n/**\n!loading &&\naddressText?.length > 2 &&\n!suggestions?.length &&\n!enableCurrentLocation &&\n!Object.keys(selectedAddress).length\n**/\n\nvar _c;\n\n$RefreshReg$(_c, \"BannerSearch\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/bannerSearchProps.tsx"],"names":["React","useState","useEffect","PlacesAutocomplete","DateRange","Searchicon","search","Location","cross","icgps","residential","close","connect","bindActionCreators","getSearchJobList","getRecentSearchList","postHomeSearchData","getRecentLocationList","isHandleChanges","useDetectClickOutside","moment","Geocode","setShowToast","deleteRecentSearch","renderTimeWithCustomFormat","setApiKey","setLanguage","example_calender","startDate","endDate","key","useStateFromProp","initialValue","value","setValue","BannerSearch","props","props_selected","selectedItem","localChanges","checkOnChange","setOnChange","locationStatus","setLocationStatus","stateData","setStateData","searchText","setSearchText","addressText","setAddressText","recentLocation","setRecentLocation","selectedAddress","setSelectedAddress","enableCurrentLocation","setCurrentLocations","errors","setErrors","selectedTrade","setSelectedTrade","inputFocus1","setInputFocus1","inputFocus2","setInputFocus2","inputFocus3","setInputFocus3","calenderRange1","setCalenderRange1","suggestionSelected","setSuggestion","handleOnOutsideSearch","handleOnOutsideLocation","handleOnOutsideCalender","searchRef","onTriggered","locationRef","locationRefClone","calenderRef","sortBy","setSortBy","handleCalenderRange","item","selection1","console","log","localInfo","getTitleInfo","from_date","format","to_date","checkRender","setRender","state","location","local_info","length","name","createdAt","image","specializationsId","specializations","trade_name","_id","tradeId","calender","Object","keys","coordinates","valueItem","lat","lng","address","doingLocalChanges","isTradeName","specializationId","fetchItemsSearchWithLocation","fetch","recentLocationData","updateGetTitleInfo","getRecentLocationData","recentLocationDetails","index","long","response","fromLatLng","formatedCityText","JSON","parse","stringify","results","cityText","formatted_address","includes","split","newData","mainText","slice","join","secondaryText","allText","err","checkIfExist","isLength","cleanRecentSearch","event","recentSearchId","stopPropagation","data","id","status","res","success","recentJobSearches","props_Clone","tradeListData","recentSearchJobData","map","setItemSearch","selected_url","specialisations","item_spec","getItem","sp","renderJobResult","searchJobListData","onError","clearSuggestions","validateForm","bannerSearchClicked","selected_address","selected_item","props_trade","prev_address","suggestion_selected","Array","isArray","page","isFiltered","parseFloat","isValid","case_1","count","filterFromAddress","city","country","i","address_components","j","types","long_name","toLowerCase","getCurrentLocation","itemToggle","navigator","permissions","query","local_position","localStorage","position","toString","checkPlaceholder","fromDate","toDate","result","state_data","length_spec","custom_name","handleChangeToggle","e","target","trimLeft","searchedJob","componentRestrictions","placeId","suggestion","indexOf","formattedSuggestion","fromAddress","geometry","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","selectedMapLocation","style","active","backgroundColor","cursor","minHeight","Date","add","mapStateToProps","homeSearch","homeSearchJobData","auth","jobs","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Constants from '../../utils/constants';\n// @ts-ignore\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng, } from 'react-places-autocomplete';\nimport regex from '../../utils/regex';\n// @ts-ignore\nimport { format } from 'date-fns';\n// @ts-ignore\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nimport Searchicon from \"../../assets/images/main-search.png\";\nimport search from \"../../assets/images/ic-search.png\";\nimport Location from \"../../assets/images/ic-location.png\";\nimport cross from \"../../assets/images/close-black.png\";\nimport icgps from \"../../assets/images/ic-gps.png\";\nimport residential from \"../../assets/images/ic-residential.png\";\nimport close from \"../../assets/images/icon-close-1.png\";\n\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux';\nimport { getSearchJobList, getRecentSearchList, postHomeSearchData, getRecentLocationList } from '../../redux/homeSearch/actions';\nimport { isHandleChanges } from '../../redux/jobs/actions';\n// @ts-ignore\nimport { useDetectClickOutside } from 'react-detect-click-outside';\nimport moment from 'moment';\nimport Geocode from \"react-geocode\";\nimport { setShowToast } from '../../redux/common/actions';\nimport { property } from 'lodash';\nimport { deleteRecentSearch } from '../../redux/homeSearch/actions';\n\nimport { renderTime, renderTimeWithCustomFormat } from '../../utils/common'\n\nGeocode.setApiKey(\"AIzaSyDKFFrKp0D_5gBsA_oztQUhrrgpKnUpyPo\");\nGeocode.setLanguage(\"en\");\n\ninterface PropsType {\n    history: any,\n    location?: any,\n    bannerData: any,\n    selectedItem: any,\n    selectedTrade: any,\n    current_address: any,\n    getTitleInfo: any,\n    searchText: any,\n    stateData: any,\n    addressText: any,\n    selectedAddress: any,\n    isHandleChanges: (item: any) => void,\n    localChanges: boolean,\n    searchJobListData: Array<object>,\n    recentSearchJobData: Array<object>,\n    homeSearchJobData: Array<object>,\n    setBannerData: (data: any) => void,\n    getSearchJobList: (data: any) => void,\n    postHomeSearchData: (data: any) => void,\n    handleChangeToggle?: (data: any) => void,\n    getRecentSearchList?: () => void,\n    getRecentLocationList: () => void,\n    localInfo: any,\n    recentLocationData: Array<any>,\n}\n\nconst example_calender = { startDate: '', endDate: '', key: 'selection1' };\n\nexport function useStateFromProp(initialValue: any) {\n    const [value, setValue] = useState(initialValue);\n\n    useEffect(() => setValue(initialValue), [initialValue]);\n\n    return [value, setValue];\n}\n\nconst BannerSearch = (props: PropsType) => {\n    let props_selected = props.selectedItem;\n    const { selectedItem, isHandleChanges, localChanges, getRecentSearchList, getRecentLocationList } = props;\n\n    const [checkOnChange, setOnChange] = useState(false);\n\n    const [locationStatus, setLocationStatus] = useState(null);\n    const [stateData, setStateData] = useState<any>(null)\n    const [searchText, setSearchText] = useState('');\n    const [addressText, setAddressText] = useState<any>(null);\n    const [recentLocation, setRecentLocation] = useState<any>([]); // recentLocation\n    const [selectedAddress, setSelectedAddress] = useState({});\n    const [enableCurrentLocation, setCurrentLocations] = useState<boolean>(false);\n    const [errors, setErrors] = useState<any>({});\n    const [selectedTrade, setSelectedTrade] = useState({});\n\n    const [inputFocus1, setInputFocus1] = useState<boolean>(false);\n    const [inputFocus2, setInputFocus2] = useState<boolean>(false);\n    const [inputFocus3, setInputFocus3] = useState<boolean>(false);\n\n    const [calenderRange1, setCalenderRange1] = useState<any>(example_calender);\n\n    const [suggestionSelected, setSuggestion] = useState({});\n\n    const handleOnOutsideSearch = () => {\n        setOnChange(false);\n        setInputFocus1(false);\n    };\n    const handleOnOutsideLocation = () => setInputFocus2(false);\n    const handleOnOutsideCalender = () => setInputFocus3(false);\n\n    const searchRef = useDetectClickOutside({ onTriggered: handleOnOutsideSearch });\n    const locationRef = useDetectClickOutside({\n        onTriggered: () => {\n            // if (addressText?.length > 3) {\n            handleOnOutsideLocation()\n            // }\n        }\n    });\n\n    const locationRefClone = useDetectClickOutside({\n        onTriggered: () => {\n            //     if (!addressText || addressText?.length < 2) {\n            //         handleOnOutsideLocation()\n            //     }\n        }\n    });\n    const calenderRef = useDetectClickOutside({ onTriggered: handleOnOutsideCalender });\n\n    const [sortBy, setSortBy] = useState(0);\n\n    const handleCalenderRange = (item: any) => {\n        setCalenderRange1(item.selection1);\n        console.log({\n            localInfo: props.localInfo\n        });\n        props.getTitleInfo({\n            ...props.localInfo,\n            from_date: moment(item.selection1?.startDate).format('YYYY-MM-DD'),\n            to_date: moment(item.selection1?.endDate).format('YYYY-MM-DD'),\n        });\n    };\n\n    const [checkRender, setRender] = useState(false);\n\n\n    useEffect(() => {\n        console.log({ selectedAddress }, '!!@')\n    }, [selectedAddress])\n\n    useEffect(() => {\n        let state = props.location.state;\n        let local_info: any = props.localInfo;\n\n        if (!searchText?.length && !checkRender) {\n            setSearchText(state.name);\n            setStateData({\n                createdAt: null,\n                image: null,\n                name: state?.name,\n                specializationsId: state?.specializations,\n                trade_name: state?.name,\n                _id: state?.tradeId\n            });\n\n            if (state.calender && Object.keys(state.calender).length) {\n                setCalenderRange1(state.calender);\n            }\n\n            if (state?.location && state?.location?.coordinates?.length) {\n                let coordinates = state.location.coordinates;\n                let valueItem = {\n                    lat: coordinates[1],\n                    lng: coordinates[0]\n                };\n                setSelectedAddress(valueItem);\n            }\n\n            if (state?.address) {\n                setAddressText(state.address);\n            }\n            setRender(true);\n        }\n        // doingLocalChanges \n        // when this option true it the props will set.\n        if (Object.keys(local_info).length && !local_info?.doingLocalChanges) {\n            if (searchText?.length !== local_info?.name) {\n                if (local_info?.sortBy) {\n                    setSortBy(local_info?.sortBy);\n                }\n\n                if (!local_info?.isTradeName) {\n                    setSearchText(local_info.name);\n                } else {\n                    setSearchText('');\n                }\n\n                setStateData({\n                    createdAt: null,\n                    image: null,\n                    name: local_info?.name,\n                    specializationsId: local_info?.specializationId,\n                    trade_name: null,\n                    _id: local_info?.tradeId\n                })\n            }\n        }\n\n    }, [props])\n\n    useEffect(() => {\n        // if (addressText !== null) {\n        //     if (addressText?.length > 2) {\n        //         document.getElementById('location-input-tag')?.focus(); // commented this for first render un-focus\n        //     } else {\n        //         document.getElementById('location_search_static')?.focus();\n        //     }\n        // }\n        if ((!addressText || !addressText?.length) && inputFocus2) {\n            setSelectedAddress({});\n            setSelectedTrade({});\n        }\n\n        if (!addressText?.length) {\n            fetchItemsSearchWithLocation(1);\n        }\n\n\n    }, [addressText])\n\n    useEffect(() => {\n        fetchItemsSearchWithLocation();\n        // getRecentLocationData();\n\n    }, []);\n\n\n    const fetchItemsSearchWithLocation = (fetch?: any) => {\n        if (getRecentSearchList && fetch !== 1) {\n            getRecentSearchList();\n        }\n        if (getRecentLocationList) {\n            getRecentLocationList();\n        }\n    }\n\n    useEffect(() => {\n        // if (props.recentLocationData?.length &&\n        //     JSON.stringify(props.recentLocationData[0]?.location?.coordinates) !== JSON.stringify(recentLocation[0]?.location?.coordinates)) {\n        //     getRecentLocationData();\n        // }\n    }, [props.recentLocationData, recentLocation])\n\n\n    const updateGetTitleInfo = () => {\n        props?.getTitleInfo({\n            ...props?.localInfo,\n            doingLocalChanges: true\n        })\n    }\n\n    useEffect(() => {\n        updateGetTitleInfo();\n        if (searchText?.length > 2) {\n            props.getSearchJobList(searchText);\n        }\n        if (!searchText?.length) {\n            setSelectedTrade({});\n        }\n    }, [searchText])\n\n    useEffect(() => {\n\n    }, [selectedAddress])\n\n    const getRecentLocationData = async () => {\n        var recentLocationDetails: any = [];\n\n        let recentLocationData = props.recentLocationData\n        for (let index = 0; index < recentLocationData.length; index++) {\n            let item = recentLocationData[index];\n            try {\n                let lat = item.location.coordinates[1];\n                let long = item.location.coordinates[0];\n                let response = await Geocode.fromLatLng(lat, long);\n                let formatedCityText = JSON.parse(JSON.stringify(response?.results[0]));\n                let cityText: any = null;\n                if (formatedCityText?.formatted_address.includes(',')) {\n                    cityText = formatedCityText?.formatted_address.split(',')\n                } else {\n                    cityText = formatedCityText?.formatted_address.split('-');\n                }\n                const newData = {\n                    mainText: cityText?.length > 3 ? cityText?.slice(0, 2).join(',') : cityText?.slice(0, 1).join(','),\n                    secondaryText: cityText?.length > 3 ? cityText?.slice(2, cityText?.length).join(',') : cityText?.slice(1, cityText?.length).join(','),\n                }\n                recentLocationDetails[index] = {\n                    formatted_address: formatedCityText?.formatted_address,\n                    location: { coordinates: item?.location?.coordinates },\n                    allText: newData\n                };\n\n                if (recentLocationDetails?.length === props.recentLocationData?.length) {\n                    setRecentLocation(recentLocationDetails);\n                }\n            } catch (err) {\n                console.log({ err });\n            }\n        }\n    }\n\n\n    const checkIfExist = (_id: any) => {\n        if (selectedTrade) {\n            let isLength = Object.keys(selectedTrade).length;\n            if (isLength) {\n                let item: any = selectedTrade;\n                if (item?._id === _id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    const cleanRecentSearch = async (event: any, recentSearchId: string) => {\n        event.stopPropagation();\n        const data = {\n            id: recentSearchId,\n            status: 0\n        }\n        const res = await deleteRecentSearch(data);\n        if (res.success) {\n            if (getRecentSearchList) {\n                getRecentSearchList();\n            }\n        }\n    }\n\n    const recentJobSearches = () => {\n        let props_Clone: any = props;\n        let tradeListData = props_Clone.tradeListData;\n        return (\n            <>\n                <div className=\"custom_autosuggestion\" id=\"recent-job-search-div\">\n                    {props?.recentSearchJobData?.length ?\n                        <React.Fragment>\n                            <span className=\"sub_title\">Recent searches</span>\n                            <div className=\"flex_row recent_search\">\n                                {props.recentSearchJobData?.length > 0 && props.recentSearchJobData?.slice(0, 2).map((item: any) => {\n                                    return (\n                                        <div\n                                            className=\"flex_col_sm_3\"\n                                            onClick={() => {\n                                                setItemSearch({\n                                                    createdAt: item?.createdAt,\n                                                    image: item.image,\n                                                    name: item.name,\n                                                    specializationsId: [item.specializationsId],\n                                                    trade_name: item.trade_name,\n                                                    _id: item._id\n                                                });\n                                                setSelectedTrade({});\n                                            }}>\n                                            <div className=\"card ico_txt_wrap\">\n                                                <figure className=\"ico\">\n                                                    <img src={item?.image || residential} alt=\"icon\" />\n                                                </figure>\n                                                <div className=\"f_column\">\n                                                    <span>{item.name}</span>\n                                                    <span className=\"name\">{item.trade_name}</span>\n                                                </div>\n                                                <span\n                                                    className=\"remove_card\"\n                                                    onClick={(event) => { cleanRecentSearch(event, item.recentSearchId) }}>\n                                                    <img src={close} alt=\"remove\" />\n                                                </span>\n                                            </div>\n                                        </div>)\n                                })}\n                            </div>\n                        </React.Fragment>\n                        : null}\n\n                    <div className=\"select_sphere recent_search\">\n                        <span className=\"sub_title\">{'Categories'}</span>\n                        <ul>\n                            {tradeListData?.map(({ _id, trade_name, selected_url, specialisations }: { _id: string, trade_name: string, selected_url: string, specialisations: [] }) =>\n                                <li\n                                    onClick={() => {\n                                        let item_spec: any = specialisations;\n                                        if (item_spec?.length) {\n                                            let getItem = item_spec[0];\n                                            if (getItem) {\n                                                setStateData({\n                                                    image: selected_url,\n                                                    name: getItem?.name,\n                                                    specializationsId: specialisations.map((sp: any) => sp._id),\n                                                    trade_name: trade_name,\n                                                    _id: _id,\n                                                })\n                                                setSearchText(getItem?.name);\n                                            }\n                                            setSelectedTrade({ _id, trade_name, selected_url, specialisations });\n                                        }\n                                    }}\n                                    className={checkIfExist(_id) ? 'active' : ''}>\n                                    <figure>\n                                        <img src={selected_url} alt=\"\" />\n                                    </figure>\n                                    <span className=\"name\">{trade_name}</span>\n                                </li>\n                            )}\n                        </ul>\n                    </div>\n                </div >\n            </>\n        )\n    }\n\n    const renderJobResult = () => {\n        if (props?.searchJobListData?.length) {\n            return (\n                <div className=\"custom_autosuggestion\" id=\"fetched-custom-job-category-div\">\n                    <div className=\"recent_search\">\n                        <ul className=\"drop_data\">\n                            {props.searchJobListData?.map((item: any) => {\n                                return (\n                                    <li onClick={() => { setItemSearch(item) }}>\n                                        <figure className=\"category\">\n                                            <img src={item.image ? item.image : residential} alt=\"icon\" />\n                                        </figure>\n                                        <div className=\"details\">\n                                            <span className=\"name\">{item.name || ''}</span>\n                                            <span className=\"prof\">{item.trade_name || ''}</span>\n                                        </div>\n                                    </li>)\n                            })}\n                        </ul>\n                    </div>\n                </div>\n            )\n        }\n        return null;\n    }\n\n    const onError = (status: string, clearSuggestions: Function) => {\n        console.log('Google Maps API returned error with status: ', status)\n        clearSuggestions();\n    }\n\n    const validateForm = () => {\n        return true;\n    }\n\n    const setItemSearch = (item: any) => {\n        setStateData(item);\n        setSelectedTrade({});\n        setSearchText(item?.name || '');\n    }\n\n    const bannerSearchClicked = () => {\n        let selected_address: any = selectedAddress;\n        let selected_item: any = props?.selectedItem;\n        let props_trade: any = selected_item?.selectedTrade;\n        let local_info: any = props?.localInfo;\n        let prev_address: any = props?.location?.state?.address;\n\n        let suggestion_selected: any = local_info?.suggestionSelected;\n\n        if (suggestion_selected) {\n            suggestion_selected = JSON.stringify(local_info?.suggestionSelected);\n        }\n\n        if (suggestionSelected && Object.keys(suggestionSelected).length) {\n            if (JSON.stringify(local_info?.suggestionSelected) !== JSON.stringify(suggestionSelected)) {\n                suggestion_selected = JSON.stringify(suggestionSelected);\n            }\n        }\n\n        let tradeId: any = null;\n        let specializationId: any = null;\n\n        if (!local_info?.doingLocalChanges) {\n            tradeId = Array.isArray(local_info?.tradeId) ? local_info?.tradeId : [local_info?.tradeId];\n            specializationId = Array.isArray(local_info?.specializationId) ? local_info?.specializationId : [local_info?.specializationId];\n        } else {\n            if (Object.keys(stateData).length) {\n                tradeId = Array.isArray(stateData._id) ? stateData._id : [stateData._id];\n                specializationId = Array.isArray(stateData.specializationsId) ? stateData.specializationsId : [stateData.specializationsId]\n            }\n        }\n\n        if (!stateData?._id && !props_trade?._id) {\n            setShowToast(true, 'please enter the valid search text.');\n            return;\n        }\n\n        if (validateForm()) {\n            let data: any = {\n                page: 1,\n                isFiltered: true,\n                tradeId: tradeId,\n                specializationId: specializationId,\n            }\n\n            if (!tradeId?.length) {\n                setShowToast(true, 'please enter the valid search text.');\n                return;\n            }\n\n            if (!specializationId?.length) {\n                delete data?.specializationId;\n            }\n\n            if (sortBy > 0) {\n                data['sortBy'] = sortBy;\n            }\n\n            if (Object.keys(selectedAddress).length) {\n                data['location'] = {\n                    \"coordinates\": [\n                        parseFloat(selected_address?.lng),\n                        parseFloat(selected_address?.lat)\n                    ]\n                }\n                // if (prev_address == addressText) {\n                //     data['address'] = prev_address\n                // } else {\n                //     if (addressText?.length) {\n                //         data['address'] = addressText\n                //     }\n                // }\n\n                if (suggestion_selected) {\n                    if (addressText) {\n                        data['address'] = suggestion_selected;\n                    }\n                }\n            } else {\n                delete data.location;\n            }\n\n            if (moment(calenderRange1?.startDate).isValid()) {\n                data['from_date'] = moment(calenderRange1?.startDate).format('YYYY-MM-DD')\n            } else {\n                delete data.from_date;\n            }\n\n            if (moment(calenderRange1?.endDate).isValid()) {\n                data['to_date'] = moment(calenderRange1?.endDate).format('YYYY-MM-DD')\n            } else {\n                delete data.to_date;\n            }\n\n            if (sortBy === 2) {\n                if (Object.keys(selected_address)?.length) {\n                    data['location'] = {\n                        \"coordinates\": [\n                            parseFloat(selected_address?.lng),\n                            parseFloat(selected_address?.lat)\n                        ]\n                    }\n                }\n                if (suggestion_selected) {\n                    if (addressText) {\n                        let case_1 = typeof (suggestion_selected) == 'string' ? suggestion_selected : JSON.stringify(suggestion_selected);\n                        data['address'] = addressText && suggestion_selected ? case_1 : '';\n                    }\n                }\n            }\n\n            props.getTitleInfo({\n                name: searchText,\n                isTradeName: false,\n                count: data?.specializationId?.length,\n                tradeId: data.tradeId,\n                specializationId: data.specializationId,\n                location: data.location,\n                from_date: data?.from_date,\n                to_date: data?.to_date,\n                doingLocalChanges: true,\n                address: data?.address,\n                suggestionSelected: suggestion_selected ? JSON.parse(suggestion_selected) : null\n            })\n            props.postHomeSearchData(data);\n        }\n    }\n\n    const filterFromAddress = (response: any) => {\n        let city, state, country = null;\n        for (let i = 0; i < response.results[0].address_components.length; i++) {\n            for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n                switch (response.results[0].address_components[i].types[j]) {\n                    case \"locality\":\n                        city = response.results[0].address_components[i].long_name;\n                        break;\n                    case \"administrative_area_level_1\":\n                        state = response.results[0].address_components[i].long_name;\n                        break;\n                    case \"country\":\n                        country = response.results[0].address_components[i].long_name;\n                        break;\n                }\n            }\n        }\n        return { city, state, country: country.toLowerCase() };\n    }\n\n    const getCurrentLocation = async () => {\n        let itemToggle: any = await navigator.permissions.query({ name: 'geolocation' });\n        setLocationStatus(itemToggle.state);\n        let local_position: any = localStorage.getItem('position');\n        let position: any = JSON.parse(local_position);\n\n        if (position?.length) {\n            let lng = (position[0]).toString();\n            let lat = (position[1]).toString();\n            let response: any = await Geocode.fromLatLng(lat, lng);\n            const { city, state, country } = filterFromAddress(response);\n\n            if (response && [\"australia\", \"au\"].includes(country)) {\n                if (response?.results && Array.isArray(response.results) && response?.results?.length) {\n                    const address = response.results[0].formatted_address;\n                    setSelectedAddress({ lat, lng });\n                    setAddressText(address);\n                    setInputFocus2(true);\n                    setInputFocus1(false);\n                    setInputFocus3(false);\n                    setCurrentLocations(true);\n                    // this.setState({ currentAddressLatLng: { long, lat }, addressText: address, enableCurrentLocation: true, inputFocus2: true })\n                }\n            } else {\n                if (itemToggle?.state !== \"denied\") {\n                    setShowToast(true, \"Uh oh! we don't provide service currently in your location.\");\n                }\n            }\n        }\n    }\n\n\n    const checkPlaceholder = (calenderRange1: any) => {\n        let fromDate: any = calenderRange1?.startDate;\n        let toDate: any = calenderRange1?.endDate;\n        let result = renderTimeWithCustomFormat(fromDate, toDate, '', ['DD MMM', 'DD MMM YYYY'], 'When ?');\n\n        if (!result) {\n            return 'When ?'\n        }\n\n        return result;\n    }\n\n\n    let state_data: any = stateData;\n    let length_spec = 0;\n    if (state_data?.specializationsId?.length && Array.isArray(state_data?.specializationsId)) {\n        length_spec = state_data?.specializationsId?.length;\n    }\n\n    let custom_name = searchText;\n    if (!checkOnChange) {\n        if (length_spec > 1 && custom_name?.length) {\n            custom_name = `${custom_name} +${length_spec - 1}`;\n        }\n    }\n    console.log({\n        searchText,\n        custom_name\n    })\n    return (\n        <div className=\"home_search\">\n            <button\n                onClick={() => {\n                    if (props?.handleChangeToggle) {\n                        props.handleChangeToggle(false)\n                    }\n                }}\n                className=\"modal_srch_close\">\n                <img src={close} alt=\"close\" />\n            </button>\n            <form className=\"search_wrapr\">\n                <ul>\n                    <li className=\"categ_box\">\n                        <div className=\"text_field\" id=\"text-field-div\">\n                            <input\n                                type=\"text\"\n                                ref={searchRef}\n                                placeholder=\"What jobs are you after?\"\n                                value={custom_name}\n                                onChange={(e) => {\n                                    isHandleChanges(true)\n                                    setOnChange(true);\n                                    setSearchText((e.target.value).trimLeft());\n                                }}\n                                // readOnly={props?.selectedItem ? true : false}\n                                onFocus={() => {\n                                    setInputFocus1(true);\n                                    setInputFocus2(false);\n                                    setInputFocus3(false);\n                                }}\n                            />\n                            <div className=\"border_eff\"></div>\n                            <span className=\"detect_icon_ltr\">\n                                <img src={Searchicon} alt=\"search\" />\n                            </span>\n                            {searchText?.length && inputFocus1 ? (\n                                <span className=\"detect_icon\" >\n                                    <img\n                                        src={cross}\n                                        alt=\"cross\"\n                                        onClick={() => {\n                                            // clear here\n                                            setStateData({});\n                                            setSelectedTrade({});\n                                            isHandleChanges(true)\n                                            setSearchText('');\n                                            setOnChange(false);\n                                        }} />\n                                </span>\n                            ) : null}\n                        </div>\n                        {!!errors.searchedJob && <span className=\"error_msg\">{errors.searchedJob}</span>}\n                    </li>\n                    {!searchText?.length && inputFocus1 ? recentJobSearches() : null}\n                    {searchText?.length > 2 && inputFocus1 ? renderJobResult() : null}\n\n                    {/* {'location search start here!'} */}\n                    <li className=\"loc_box\">\n                        <div id=\"location-text-field-div\">\n                            {/* \n                            <div\n                                className={`text_field ${addressText?.length > 2 ? 'none' : ''}`}>\n                                <input\n                                    id=\"location_search_static\"\n                                    placeholder='Where?'\n                                    ref={locationRefClone}\n                                    value={addressText}\n                                    autoComplete=\"off\"\n                                    className={'line-1'}\n                                    onChange={(e: any) => {\n                                        setAddressText((e.target.value).trimLeft());\n                                    }}\n                                    onFocus={() => {\n                                        setInputFocus2(true);\n                                        setInputFocus1(false);\n                                        setInputFocus3(false);\n                                    }}\n                                />\n                                <span className=\"detect_icon_ltr\">\n                                    <img src={Location} alt=\"location\" />\n                                </span>\n                            </div> */}\n\n\n                            <div>\n                                <PlacesAutocomplete\n                                    value={addressText}\n                                    searchOptions={{\n                                        componentRestrictions: {\n                                            country: \"au\"\n                                        },\n                                        //  types: [\"address\"]\n                                        types: [\"(cities)\"]\n                                    }}\n                                    shouldFetchSuggestions={addressText?.length > 2}\n                                    onChange={(item: any) => {\n                                        setAddressText(item);\n                                    }}\n                                    onSelect={async (address: string, placeId?: any, suggestion?: any) => {\n                                        let selected_address: any = address;\n                                        if (address.indexOf(',')) {\n                                            selected_address = address.split(',')[0];\n                                        }\n                                        console.log({\n                                            address: suggestion?.formattedSuggestion\n                                        })\n                                        setSuggestion(suggestion?.formattedSuggestion)\n                                        setAddressText(suggestion?.formattedSuggestion?.mainText);\n                                        let response = await Geocode.fromAddress(address);\n                                        if (response?.results?.length) {\n                                            const { lat, lng } = response.results[0].geometry.location;\n                                            setSelectedAddress({ lat, lng });\n                                            setInputFocus2(false);\n                                        }\n                                    }}\n                                    highlightFirstSuggestion={true}\n                                    onError={onError}\n                                    debounce={0}\n                                >\n                                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }: any) => (\n                                        <div>\n                                            <div\n                                                className={`text_field`}>\n                                                {/* className={`text_field ${addressText?.length > 2 ? '' : 'none'}`}> */}\n                                                <input\n                                                    {...getInputProps({ placeholder: 'Where?', className: 'line-1' })}\n                                                    id=\"location-input-tag\"\n                                                    autoComplete=\"off\"\n                                                    ref={locationRef}\n                                                    onFocus={() => {\n                                                        setInputFocus2(true);\n                                                        setInputFocus1(false);\n                                                        setInputFocus3(false);\n                                                    }}\n                                                />\n                                                <span className=\"detect_icon_ltr\">\n                                                    <img src={Location} alt=\"location\" />\n                                                </span>\n                                                {inputFocus2 && addressText?.length > 2 ?\n                                                    // {inputFocus2 && addressText?.length > 2 ?\n                                                    <span className=\"detect_icon\" >\n                                                        <img\n                                                            src={cross}\n                                                            alt=\"cross\"\n                                                            onClick={() => {\n                                                                setAddressText('');\n                                                                setSelectedAddress({});\n                                                            }}\n                                                        />\n                                                    </span> : null}\n                                            </div>\n                                            {suggestions?.length &&\n                                                inputFocus2 &&\n                                                addressText?.length ?\n                                                <div\n                                                    className=\"custom_autosuggestion location\"\n                                                    id=\"autocomplete-dropdown-container\">\n                                                    <div className=\"flex_row recent_search auto_loc\">\n                                                        <div className=\"flex_col_sm_4\">\n                                                            {!!errors.selectedMapLocation &&\n                                                                <span className=\"error_msg\">\n                                                                    {errors.selectedMapLocation}\n                                                                </span>}\n                                                            {loading && <div>Loading...</div>}\n                                                            {suggestions.map((suggestion: any) => {\n                                                                const className = 'autosuggestion_icon card loc name';\n                                                                const style = suggestion.active\n                                                                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                                                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                                                return (\n                                                                    <div\n                                                                        {...getSuggestionItemProps(suggestion, { className, style, })}>\n                                                                        <span>\n                                                                            {suggestion.formattedSuggestion.mainText}\n                                                                        </span>\n                                                                        <span className=\"name\">\n                                                                            {suggestion.formattedSuggestion.secondaryText}\n                                                                        </span>\n\n                                                                    </div>\n                                                                );\n                                                            })}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                : null}\n                                            {inputFocus2 && !suggestions?.length && !Object.keys(selectedAddress).length ? (\n                                                <div style={{ minHeight: '50px' }} className=\"custom_autosuggestion location\" id=\"autocomplete-dropdown-container\">\n                                                    <div className=\"flex_row recent_search auto_loc\">\n                                                        <div className=\"flex_col_sm_4\">\n                                                            <div className=\"loc_suggestions\">\n                                                                {'No Result Found.'}\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            ) : null}\n                                        </div>\n                                    )}\n                                </PlacesAutocomplete>\n                            </div>\n                        </div>\n                        {!!errors.selectedMapLocation && <span className=\"error_msg\">{errors.selectedMapLocation}</span>}\n                    </li>\n\n                    {/* {'location search end here!'} */}\n                    {!addressText?.length && inputFocus2 ?\n                        <div className=\"custom_autosuggestion location\" id=\"current-location-search-div\">\n                            <span\n                                className=\"location-btn\"\n                                onClick={getCurrentLocation}>\n                                <span className=\"gps_icon\">\n                                    <img src={icgps} alt=\"\" />\n                                </span> Use my current location\n                            </span>\n                            {locationStatus === \"denied\" &&\n                                (<span className=\"blocked_note\">\n                                    You have blocked your location.\n                                    To use this, change your location settings in browser.\n                                </span>)}\n                            {props?.recentLocationData?.length > 0 &&\n                                <span className=\"sub_title\">\n                                    {'Recent searches'}\n                                </span>}\n                            <div className=\"flex_row recent_search auto_loc\">\n\n                                {/* {recentLocation?.map((item: any) => {\n                                    return (\n                                        <div className=\"flex_col_sm_4\"\n                                            onClick={() => {\n                                                let location_coordinates: any = item.location.coordinates\n                                                setAddressText(item.formatted_address);\n                                                setSelectedAddress({\n                                                    lat: location_coordinates[1],\n                                                    lng: location_coordinates[0]\n                                                });\n                                            }}>\n                                            <div className=\"autosuggestion_icon card loc name\">\n                                                <span>{item.allText?.mainText}</span>\n                                                <span className=\"name\">{item.allText?.secondaryText}</span>\n                                            </div>\n                                        </div>)\n                                })} */}\n\n                                {props?.recentLocationData?.map((item: any) => {\n                                    return item?.address?.length > 0 && (\n                                        <div className=\"flex_col_sm_4\"\n                                            onClick={() => {\n                                                setAddressText(JSON.parse(item?.address)?.mainText);\n                                                setSelectedAddress({\n                                                    lat: item?.location?.coordinates[1],\n                                                    lng: item?.location?.coordinates[0],\n                                                });\n\n                                                setSuggestion(JSON.parse(item?.address));\n\n                                                // let location_coordinates: any = item.location.coordinates\n                                                // setAddressText(item.formatted_address);\n                                                // setSelectedAddress({\n                                                //     lat: location_coordinates[1],\n                                                //     lng: location_coordinates[0]\n                                                // });\n                                            }}>\n                                            <div className=\"autosuggestion_icon card loc name\">\n                                                <span>{JSON.parse(item?.address)?.mainText}</span>\n                                                <span className=\"name\">{JSON.parse(item?.address)?.secondaryText}</span>\n                                            </div>\n                                        </div>)\n                                })}\n                            </div>\n                        </div>\n                        : null}\n                    <li className={`date_box ${calenderRange1?.startDate ? 'date_value' : ''}`}>\n                        <div\n                            ref={calenderRef}\n                            className=\"custom_date_range\" id=\"date-range-div\">\n                            <div className=\"text_field\">\n                                <span className=\"detect_icon_ltr calendar\"></span>\n                                <input\n                                    type=\"text\"\n                                    placeholder={checkPlaceholder(calenderRange1)}\n                                    onFocus={() => {\n                                        setInputFocus3(true);\n                                        setInputFocus1(false);\n                                        setInputFocus2(false);\n                                    }}\n                                />\n                                {calenderRange1?.startDate && inputFocus3 &&\n                                    <span className=\"detect_icon\" >\n                                        <img\n                                            src={cross}\n                                            alt=\"cross\"\n                                            onClick={() => {\n                                                setCalenderRange1({ startDate: '', endDate: '', key: 'selection1' });\n                                                console.log({ localInfo: props.localInfo })\n                                                props.getTitleInfo({\n                                                    ...props.localInfo,\n                                                    from_date: '',\n                                                    to_date: ''\n                                                });\n                                            }} />\n                                    </span>}\n                            </div>\n                            {/* {inputFocus3 && */}\n                            {inputFocus3 ? (\n                                <div\n                                    className=\"custom_autosuggestion\"\n                                    id=\"custom-date-range-div\">\n                                    <DateRange\n                                        onChange={handleCalenderRange}\n                                        ranges={!moment(calenderRange1?.startDate).isValid() ? [{ startDate: new Date(), endDate: new Date(), key: 'selection1' }] : [calenderRange1]}\n                                        moveRangeOnFirstSelection={false}\n                                        rangeColors={[\"#fee600\", \"#b5b5b5\"]}\n                                        showDateDisplay={false}\n                                        showSelectionPreview={true}\n                                        months={2}\n                                        showPreview={true}\n                                        minDate={new Date()}\n                                        maxDate={moment().add(2, 'years').toDate()}\n                                        direction=\"horizontal\"\n                                        fixedHeight={true}\n                                    />\n                                </div>\n                            ) : null}\n                        </div>\n                    </li>\n                    <div className=\"search_btn\">\n                        <button type=\"button\" className=\"fill_btn btn-effect\" onClick={bannerSearchClicked}>\n                            <img src={search} alt=\"search\" />\n                        </button>\n                    </div>\n                </ul>\n            </form>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        searchJobListData: state.homeSearch.searchJobListData,\n        recentSearchJobData: state.homeSearch.recentSearchJobData,\n        homeSearchJobData: state.homeSearch.homeSearchJobData,\n        tradeListData: state.auth.tradeListData,\n        localChanges: state.jobs.localChanges,\n        recentLocationData: state.homeSearch.recentLocationData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return bindActionCreators({\n        getSearchJobList,\n        getRecentSearchList,\n        postHomeSearchData,\n        isHandleChanges,\n        getRecentLocationList\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BannerSearch);\n\n\n/**\n!loading &&\naddressText?.length > 2 &&\n!suggestions?.length &&\n!enableCurrentLocation &&\n!Object.keys(selectedAddress).length\n**/"]},"metadata":{},"sourceType":"module"}