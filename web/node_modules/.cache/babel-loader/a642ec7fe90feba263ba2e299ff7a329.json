{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/pastJobs.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport rateStar from \"../../../assets/images/ic-star-fill.png\";\nimport pastJobs from \"../../../assets/images/pastJobs.png\";\nimport jobTypePlaceholder from \"../../../assets/images/job-type-placeholder.png\";\nimport RateThisJob from \"./ratethisJob/index\";\nimport { useLocation } from \"react-router-dom\";\nimport { renderTime } from \"../../../utils/common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PastJobs = props => {\n  _s();\n\n  const {\n    dataItems,\n    jobType,\n    isLoading\n  } = props;\n  let listData = dataItems;\n  const [enableRateJob, setRateJob] = useState({\n    data: {},\n    isTrue: false\n  }); // toggle-rate-job\n\n  const [currentPage, setCurrentPage] = useState(1);\n  let [isEnable, setEnable] = useState(false);\n  const location = useLocation();\n\n  const redirectToInfo = ({\n    jobId,\n    status\n  }) => {\n    if ((jobId === null || jobId === void 0 ? void 0 : jobId.length) && (status === null || status === void 0 ? void 0 : status.length)) {\n      // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&job=past&activeType=${props?.activeType}`)\n      let urlEncode = `?jobId=${jobId}&status=${status}&job=past&activeType=${props === null || props === void 0 ? void 0 : props.activeType}`;\n      props.history.push(`/job-detail?${urlEncode}`);\n    }\n  };\n\n  const backToScreen = () => {\n    props.history.replace(\"/jobs?active=past\");\n    setRateJob(prev => ({\n      data: {},\n      isTrue: !prev.isTrue\n    }));\n  };\n\n  useEffect(() => {\n    const urlSearchParams = new URLSearchParams(location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n\n    if (params === null || params === void 0 ? void 0 : params.jobId) {\n      let jobId_ = params === null || params === void 0 ? void 0 : params.jobId;\n\n      if (listData === null || listData === void 0 ? void 0 : listData.length) {\n        let result = listData.find(item => (item === null || item === void 0 ? void 0 : item.jobId) === jobId_);\n\n        if (result) {\n          setRateJob({\n            data: result,\n            isTrue: true\n          });\n        }\n      }\n    }\n  }, [props]);\n  useEffect(() => {\n    if (isLoading === false) {\n      setEnable(true);\n    }\n  }, [isLoading]);\n\n  if (enableRateJob === null || enableRateJob === void 0 ? void 0 : enableRateJob.isTrue) {\n    return /*#__PURE__*/_jsxDEV(RateThisJob, {\n      backToScreen: backToScreen,\n      data: enableRateJob.data,\n      history: null,\n      location: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!isEnable) {\n    return null;\n  } // \"60dadb661fed05158f8745e3\"\n\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"sub_title\",\n      children: [jobType.charAt(0).toUpperCase() + jobType.slice(1), \" Jobs\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_row tradies_row\",\n      children: (listData === null || listData === void 0 ? void 0 : listData.length) ? listData.map(({\n        amount,\n        fromDate,\n        jobData,\n        jobId,\n        isRated,\n        jobName,\n        locationName,\n        isPublishedAgain,\n        milestoneNumber,\n        specializationId,\n        specializationName,\n        status,\n        toDate,\n        totalMilestones,\n        tradeId,\n        tradieId,\n        tradeName,\n        tradeSelectedUrl,\n        tradieData\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_col_sm_6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tradie_card\",\n          \"data-aos\": \"fade-in\",\n          \"data-aos-delay\": \"250\",\n          \"data-aos-duration\": \"1000\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => {\n              redirectToInfo({\n                jobId,\n                status\n              });\n            },\n            className: \"more_detail circle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user_wrap\",\n            children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n              className: \"u_img icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: (jobData === null || jobData === void 0 ? void 0 : jobData.tradeSelectedUrl) || jobTypePlaceholder,\n                alt: \"traide-img\",\n                onError: e => {\n                  var _e$target, _e$target2;\n\n                  if (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.onerror) {\n                    e.target.onerror = null;\n                  }\n\n                  if (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.src) {\n                    e.target.src = jobTypePlaceholder;\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"details\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"name\",\n                children: tradeName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"commn_para\",\n                children: jobName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job_info\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"icon calendar\",\n                children: renderTime(fromDate, toDate)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"icon dollar\",\n                children: amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"icon location line-1\",\n                children: locationName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"job_status\",\n                children: status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job_progress_wrap\",\n            id: \"scroll-progress-bar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress_wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"completed-digit\",\n                id: \"digit-progress\",\n                children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                  children: `Job Milestones ${milestoneNumber} `\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 27\n                }, this), `of ${totalMilestones}`]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"progress_bar\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"done_progress\",\n                  id: \"progress-bar\",\n                  type: \"range\",\n                  min: \"0\",\n                  value: milestoneNumber / totalMilestones > 0 ? milestoneNumber / totalMilestones * 100 : 0\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 23\n            }, this), status === \"COMPLETED\" ? !isRated && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setRateJob(prev => ({\n                  data: {\n                    amount,\n                    fromDate,\n                    jobData,\n                    jobId,\n                    jobName,\n                    locationName,\n                    milestoneNumber,\n                    specializationId,\n                    specializationName,\n                    status,\n                    toDate,\n                    totalMilestones,\n                    tradeId,\n                    tradieId,\n                    tradeName,\n                    tradeSelectedUrl,\n                    tradieData\n                  },\n                  isTrue: !prev.isTrue\n                }));\n              },\n              className: \"fill_grey_btn full_btn\",\n              children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: rateStar,\n                  alt: \"rating-star\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 33\n                }, this), \"Rate this tradesperson\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 31\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 29\n            }, this) : status === \"EXPIRED\" && !isPublishedAgain && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"fill_grey_btn full_btn\",\n              onClick: () => redirectToInfo({\n                jobId,\n                status\n              }),\n              children: \"Publish again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)) : !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no_record  m-t-vh\",\n        children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n          children: /*#__PURE__*/_jsxDEV(\"figure\", {\n            className: \"no_img\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pastJobs,\n              alt: \"data not found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"empty_screen_text\",\n          children: \"You don't have any past job yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"empty_screen_button\",\n          onClick: () => props.history.push(\"/post-new-job\"),\n          children: \"Post a job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PastJobs, \"jZ6d89qqQFAiI2gUzPrJAfWlysk=\", false, function () {\n  return [useLocation];\n});\n\n_c = PastJobs;\nexport default PastJobs;\n\nvar _c;\n\n$RefreshReg$(_c, \"PastJobs\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/pastJobs.tsx"],"names":["React","useState","useEffect","rateStar","pastJobs","jobTypePlaceholder","RateThisJob","useLocation","renderTime","PastJobs","props","dataItems","jobType","isLoading","listData","enableRateJob","setRateJob","data","isTrue","currentPage","setCurrentPage","isEnable","setEnable","location","redirectToInfo","jobId","status","length","urlEncode","activeType","history","push","backToScreen","replace","prev","urlSearchParams","URLSearchParams","search","params","Object","fromEntries","entries","jobId_","result","find","item","charAt","toUpperCase","slice","map","amount","fromDate","jobData","isRated","jobName","locationName","isPublishedAgain","milestoneNumber","specializationId","specializationName","toDate","totalMilestones","tradeId","tradieId","tradeName","tradeSelectedUrl","tradieData","e","target","onerror","src"],"mappings":"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","sourcesContent":["import React, { ReactElement, useState, useEffect } from \"react\";\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport approved from \"../../../assets/images/approved.png\";\nimport rateStar from \"../../../assets/images/ic-star-fill.png\";\nimport pastJobs from \"../../../assets/images/pastJobs.png\";\nimport jobTypePlaceholder from \"../../../assets/images/job-type-placeholder.png\";\nimport moment from \"moment\";\nimport RateThisJob from \"./ratethisJob/index\";\n\nimport { useLocation } from \"react-router-dom\";\n\nimport { renderTime } from \"../../../utils/common\";\ninterface Post {\n  amount: any;\n  fromDate: any;\n  jobData: any;\n  jobId: any;\n  isRated: any;\n  jobName: any;\n  locationName: any;\n  milestoneNumber: any;\n  specializationId: any;\n  specializationName: any;\n  status: any;\n  toDate: any;\n  totalMilestones: any;\n  isPublishedAgain: boolean;\n  tradeId: any;\n  tradieId: any;\n  tradeName: any;\n  tradeSelectedUrl: any;\n  isLoading: any;\n  tradieData: any;\n}\n\nconst PastJobs = (props: any) => {\n  const { dataItems, jobType, isLoading } = props;\n  let listData: any = dataItems;\n  const [enableRateJob, setRateJob] = useState({ data: {}, isTrue: false }); // toggle-rate-job\n  const [currentPage, setCurrentPage] = useState(1);\n  let [isEnable, setEnable] = useState<any>(false);\n\n  const location = useLocation();\n\n  const redirectToInfo = ({ jobId, status }: any) => {\n    if (jobId?.length && status?.length) {\n      // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&job=past&activeType=${props?.activeType}`)\n      let urlEncode: any = `?jobId=${jobId}&status=${status}&job=past&activeType=${props?.activeType}`;\n      props.history.push(`/job-detail?${urlEncode}`);\n    }\n  };\n\n  const backToScreen = () => {\n    props.history.replace(\"/jobs?active=past\");\n    setRateJob((prev: any) => ({\n      data: {},\n      isTrue: !prev.isTrue,\n    }));\n  };\n\n  useEffect(() => {\n    const urlSearchParams = new URLSearchParams(location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n\n    if (params?.jobId) {\n      let jobId_ = params?.jobId;\n      if (listData?.length) {\n        let result = listData.find((item: any) => item?.jobId === jobId_);\n        if (result) {\n          setRateJob({\n            data: result,\n            isTrue: true,\n          });\n        }\n      }\n    }\n  }, [props]);\n\n  useEffect(() => {\n    if (isLoading === false) {\n      setEnable(true);\n    }\n  }, [isLoading]);\n\n  if (enableRateJob?.isTrue) {\n    return (\n      <RateThisJob\n        backToScreen={backToScreen}\n        data={enableRateJob.data}\n        history={null}\n        location={null}\n      />\n    );\n  }\n\n  if (!isEnable) {\n    return null;\n  }\n  // \"60dadb661fed05158f8745e3\"\n  return (\n    <React.Fragment>\n      <span className=\"sub_title\">\n        {jobType.charAt(0).toUpperCase() + jobType.slice(1)} Jobs\n      </span>\n      <div className=\"flex_row tradies_row\">\n        {listData?.length\n          ? listData.map(\n              ({\n                amount,\n                fromDate,\n                jobData,\n                jobId,\n                isRated,\n                jobName,\n                locationName,\n                isPublishedAgain,\n                milestoneNumber,\n                specializationId,\n                specializationName,\n                status,\n                toDate,\n                totalMilestones,\n                tradeId,\n                tradieId,\n                tradeName,\n                tradeSelectedUrl,\n                tradieData,\n              }: Post) => (\n                <div className=\"flex_col_sm_6\">\n                  <div\n                    className=\"tradie_card\"\n                    data-aos=\"fade-in\"\n                    data-aos-delay=\"250\"\n                    data-aos-duration=\"1000\"\n                  >\n                    <span\n                      onClick={() => {\n                        redirectToInfo({ jobId, status });\n                      }}\n                      className=\"more_detail circle\"\n                    ></span>\n                    <div className=\"user_wrap\">\n                      <figure className=\"u_img icon\">\n                        <img\n                          src={jobData?.tradeSelectedUrl || jobTypePlaceholder}\n                          alt=\"traide-img\"\n                          onError={(e: any) => {\n                            if (e?.target?.onerror) {\n                              e.target.onerror = null;\n                            }\n                            if (e?.target?.src) {\n                              e.target.src = jobTypePlaceholder;\n                            }\n                          }}\n                        />\n                      </figure>\n                      <div className=\"details\">\n                        <span className=\"name\">{tradeName}</span>\n                        <p className=\"commn_para\">{jobName}</p>\n                      </div>\n                    </div>\n                    <div className=\"job_info\">\n                      <ul>\n                        <li className=\"icon calendar\">\n                          {renderTime(fromDate, toDate)}\n                        </li>\n                        <li className=\"icon dollar\">{amount}</li>\n                        <li className=\"icon location line-1\">{locationName}</li>\n                        <li className=\"job_status\">{status}</li>\n                      </ul>\n                    </div>\n                    <div className=\"job_progress_wrap\" id=\"scroll-progress-bar\">\n                      <div className=\"progress_wrapper\">\n                        <span className=\"completed-digit\" id=\"digit-progress\">\n                          <b>{`Job Milestones ${milestoneNumber} `}</b>\n                          {`of ${totalMilestones}`}\n                        </span>\n                        <span className=\"progress_bar\">\n                          <input\n                            className=\"done_progress\"\n                            id=\"progress-bar\"\n                            type=\"range\"\n                            min=\"0\"\n                            value={\n                              milestoneNumber / totalMilestones > 0\n                                ? (milestoneNumber / totalMilestones) * 100\n                                : 0\n                            }\n                          />\n                        </span>\n                      </div>\n                      {status === \"COMPLETED\"\n                        ? !isRated && (\n                            <button\n                              onClick={() => {\n                                setRateJob((prev: any) => ({\n                                  data: {\n                                    amount,\n                                    fromDate,\n                                    jobData,\n                                    jobId,\n                                    jobName,\n                                    locationName,\n                                    milestoneNumber,\n                                    specializationId,\n                                    specializationName,\n                                    status,\n                                    toDate,\n                                    totalMilestones,\n                                    tradeId,\n                                    tradieId,\n                                    tradeName,\n                                    tradeSelectedUrl,\n                                    tradieData,\n                                  },\n                                  isTrue: !prev.isTrue,\n                                }));\n                              }}\n                              className=\"fill_grey_btn full_btn\"\n                            >\n                              <React.Fragment>\n                                <img src={rateStar} alt=\"rating-star\" />\n                                {\"Rate this tradesperson\"}\n                              </React.Fragment>\n                            </button>\n                          )\n                        : status === \"EXPIRED\" &&\n                          !isPublishedAgain && (\n                            <button\n                              className=\"fill_grey_btn full_btn\"\n                              onClick={() => redirectToInfo({ jobId, status })}\n                            >\n                              {\"Publish again\"}\n                            </button>\n                          )}\n                    </div>\n                  </div>\n                </div>\n              )\n            )\n          : !isLoading && (\n              <div className=\"no_record  m-t-vh\">\n                <figure>\n                  <figure className=\"no_img\">\n                    <img src={pastJobs} alt=\"data not found\" />\n                  </figure>\n                </figure>\n\n                <span className=\"empty_screen_text\">\n                  You don't have any past job yet\n                </span>\n                <button\n                  className=\"empty_screen_button\"\n                  onClick={() => props.history.push(\"/post-new-job\")}\n                >\n                  Post a job\n                </button>\n              </div>\n            )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PastJobs;\n"]},"metadata":{},"sourceType":"module"}