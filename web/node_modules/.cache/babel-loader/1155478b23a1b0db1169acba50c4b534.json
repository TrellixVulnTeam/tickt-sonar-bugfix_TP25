{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/jobDashboard.tsx\";\nimport { Component } from 'react';\nimport menu from '../../assets/images/menu-line-blue.png';\nimport close from '../../assets/images/ic-cancel-blue.png';\nimport ActiveJobsComponent from './components/activeJobs';\nimport OpenJobsComponent from './components/openJobs';\nimport PastJobsComponent from './components/pastJobs';\nimport NewApplicantComponent from './components/newApplicants';\nimport NeedApproval from './components/needApproval';\nimport ApplicantsList from './components/applicantsList'; //@ts-ignore\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass JobDashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAndUpdateCount = ({\n      needApprovalCount,\n      newApplicantsCount\n    }) => {\n      var _this$state;\n\n      let {\n        approveCount,\n        applicantCount\n      } = (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.count;\n\n      if (needApprovalCount !== approveCount || newApplicantsCount !== applicantCount) {\n        this.setState({\n          count: {\n            approveCount: needApprovalCount,\n            applicantCount: newApplicantsCount\n          }\n        });\n      }\n    };\n\n    this.toggleSidebar = () => this.setState({\n      isToggleSidebar: !this.state.isToggleSidebar\n    });\n\n    this.setSelected = (jobtype, jobid, sortby, specializationId) => {\n      let {\n        currentPage\n      } = this.state;\n      let item_position = localStorage.getItem('position');\n      let locationLocal = JSON.parse(item_position);\n      let dataItemsAddons = {\n        page: currentPage,\n        jobId: jobid,\n        sortBy: sortby\n      };\n\n      if (sortby === 2) {\n        dataItemsAddons['location'] = {\n          \"type\": \"Point\",\n          \"coordinates\": [locationLocal[1], locationLocal[0]]\n        };\n      }\n\n      if (['active', 'past', 'open', 'applicant', 'approval'].includes(jobtype)) {\n        this.setState({\n          activeType: jobtype,\n          currentPage: 1,\n          hasLoad: true,\n          activeJobs: [],\n          pastJobs: [],\n          openJobs: [],\n          applicantJobs: [],\n          approvalJobs: [],\n          applicantsListJobs: [],\n          actualLoad: false,\n          selectedItem: {\n            jobtype,\n            jobid,\n            sortby,\n            specializationId\n          }\n        }, () => {\n          this.props.getClearJobs();\n          this.props.history.push(`/jobs?active=${jobtype}`);\n          window.scrollTo(0, 0);\n          this.setAfterItems({\n            jobtype,\n            currentPage: this.state.currentPage,\n            dataItemsAddons\n          });\n        });\n      } else {\n        this.setState({\n          selectedItem: {\n            jobtype,\n            jobid,\n            sortby,\n            specializationId\n          },\n          applicantsListJobs: []\n        }, () => {\n          this.props.getClearJobs();\n          this.setAfterItems({\n            jobtype,\n            currentPage: this.state.currentPage,\n            dataItemsAddons\n          });\n        });\n      }\n    };\n\n    this.setAfterItems = ({\n      jobtype,\n      currentPage,\n      dataItemsAddons\n    }) => {\n      const {\n        getActiveJobsBuilder,\n        getPastJobsBuilder,\n        getOpenJobsBuilder,\n        getNewApplicantsBuilder,\n        getnewJobApplicationListBuilder,\n        getNewApprovalList\n      } = this.props;\n\n      if (jobtype === 'active') {\n        getActiveJobsBuilder(currentPage);\n      }\n\n      if (jobtype === 'past') {\n        getPastJobsBuilder(currentPage);\n      }\n\n      if (jobtype === 'open') {\n        getOpenJobsBuilder(currentPage);\n      }\n\n      if (jobtype === 'applicant') {\n        getNewApplicantsBuilder(currentPage);\n      }\n\n      if (jobtype === 'approval') {\n        getNewApprovalList(currentPage);\n      }\n\n      if (jobtype === 'applicantList') {\n        getnewJobApplicationListBuilder(dataItemsAddons);\n      }\n    };\n\n    this.state = {\n      currentPage: 1,\n      isToggleSidebar: false,\n      activeType: 'active',\n      selectedItem: {\n        jobtype: 'active',\n        jobid: null,\n        sortby: 1,\n        specializationId: ''\n      },\n      count: {\n        applicantCount: 0,\n        approveCount: 0\n      },\n      activeJobs: [],\n      pastJobs: [],\n      openJobs: [],\n      applicantJobs: [],\n      approvalJobs: [],\n      applicantsListJobs: [],\n      enableEditMilestone: false,\n      enableLodgeDispute: false,\n      enableCancelJob: false,\n      enableMakMilestone: false,\n      globalJobId: '',\n      hasLoad: true,\n      actualLoad: false\n    };\n  }\n\n  componentDidMount() {\n    var _nextProps$location;\n\n    let {\n      activeType,\n      selectedItem: {\n        jobtype\n      },\n      currentPage,\n      hasLoad\n    } = this.state;\n    let nextProps = this.props;\n\n    if (nextProps === null || nextProps === void 0 ? void 0 : (_nextProps$location = nextProps.location) === null || _nextProps$location === void 0 ? void 0 : _nextProps$location.search) {\n      var _nextProps$location2;\n\n      let urlParams = new URLSearchParams(nextProps === null || nextProps === void 0 ? void 0 : (_nextProps$location2 = nextProps.location) === null || _nextProps$location2 === void 0 ? void 0 : _nextProps$location2.search);\n      let activeType_ = urlParams.get('active');\n      let jobId_ = urlParams.get('jobId');\n      let editMilestone_ = urlParams.get('editMilestone');\n      let lodgeDispute_ = urlParams.get('lodgeDispute');\n      let cancelJob_ = urlParams.get('cancelJob');\n      let markMilestone_ = urlParams.get('markMilestone');\n\n      if (activeType_) {\n        if (activeType_ !== activeType) {\n          this.setState({\n            activeType: activeType_,\n            selectedItem: {\n              jobtype: activeType_,\n              jobid: null,\n              sortby: 1,\n              specializationId: ''\n            }\n          }, () => {\n            this.setAfterItems({\n              jobtype: activeType_,\n              currentPage: 1,\n              dataItemsAddons: {\n                page: 1,\n                jobId: null,\n                sortBy: 1\n              }\n            });\n          });\n        } else {\n          this.props.getActiveJobsBuilder(1);\n        }\n      }\n    } else {\n      this.props.getActiveJobsBuilder(1);\n    }\n  }\n\n  // milestone dates should be lie betwwn job details\n  componentDidUpdate(prevProps) {\n    var _nextProps$location3, _activeJobs$active, _this$state2, _activeJobs$active2, _this$state3, _this$state4, _this$state4$activeJo, _this$state5, _this$state5$activeJo, _openJobs$open, _this$state11, _this$state12, _this$state12$openJob, _pastJobs$past, _this$state17, _this$state18, _this$state18$pastJob, _this$state23, _this$state24, _this$state24$applica, _this$state29, _this$state30, _this$state30$approva;\n\n    let nextProps = this.props;\n    let {\n      activeJobs,\n      pastJobs,\n      openJobs,\n      applicantsListJobs,\n      applicantJobs,\n      approvalJobs\n    } = nextProps;\n    let {\n      activeType,\n      selectedItem: {\n        jobtype\n      },\n      currentPage,\n      hasLoad\n    } = this.state;\n    let state_ = this.state;\n    let urlParams = new URLSearchParams(nextProps === null || nextProps === void 0 ? void 0 : (_nextProps$location3 = nextProps.location) === null || _nextProps$location3 === void 0 ? void 0 : _nextProps$location3.search);\n    let activeType_ = urlParams.get('active');\n    let jobId_ = urlParams.get('jobId');\n    let editMilestone_ = urlParams.get('editMilestone');\n    let lodgeDispute_ = urlParams.get('lodgeDispute');\n    let cancelJob_ = urlParams.get('cancelJob');\n    let markMilestone_ = urlParams.get('markMilestone');\n    let stateActive = this.state.activeJobs;\n    console.log({\n      activeJobs,\n      pastJobs,\n      openJobs,\n      applicantsListJobs,\n      applicantJobs,\n      approvalJobs,\n      1: jobtype === 'active',\n      2: !(activeJobs === null || activeJobs === void 0 ? void 0 : (_activeJobs$active = activeJobs.active) === null || _activeJobs$active === void 0 ? void 0 : _activeJobs$active.length) ? true : JSON.stringify(activeJobs === null || activeJobs === void 0 ? void 0 : activeJobs.active) !== JSON.stringify((_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.activeJobs),\n      3: (stateActive === null || stateActive === void 0 ? void 0 : stateActive.length) < currentPage * 10,\n      stateActive: stateActive,\n      currentPage\n    });\n\n    if (jobtype === 'active' && !(activeJobs === null || activeJobs === void 0 ? void 0 : (_activeJobs$active2 = activeJobs.active) === null || _activeJobs$active2 === void 0 ? void 0 : _activeJobs$active2.length) ? true : JSON.stringify(activeJobs === null || activeJobs === void 0 ? void 0 : activeJobs.active) !== JSON.stringify((_this$state3 = this.state) === null || _this$state3 === void 0 ? void 0 : _this$state3.activeJobs) && (((_this$state4 = this.state) === null || _this$state4 === void 0 ? void 0 : (_this$state4$activeJo = _this$state4.activeJobs) === null || _this$state4$activeJo === void 0 ? void 0 : _this$state4$activeJo.length) < currentPage * 10 || ((_this$state5 = this.state) === null || _this$state5 === void 0 ? void 0 : (_this$state5$activeJo = _this$state5.activeJobs) === null || _this$state5$activeJo === void 0 ? void 0 : _this$state5$activeJo.length) === currentPage * 10)) {\n      if (activeJobs === null || activeJobs === void 0 ? void 0 : activeJobs.active) {\n        var _this$state6, _this$state7, _this$state7$activeJo, _this$state9, _this$state9$activeJo;\n\n        let {\n          active,\n          needApprovalCount,\n          newApplicantsCount\n        } = activeJobs;\n        let page_get = 0;\n        let prevValues = [];\n\n        if (Array.isArray(active) && (active === null || active === void 0 ? void 0 : active.length)) {\n          var _active$;\n\n          page_get = (_active$ = active[0]) === null || _active$ === void 0 ? void 0 : _active$.page;\n        }\n\n        if (Array.isArray((_this$state6 = this.state) === null || _this$state6 === void 0 ? void 0 : _this$state6.activeJobs) && ((_this$state7 = this.state) === null || _this$state7 === void 0 ? void 0 : (_this$state7$activeJo = _this$state7.activeJobs) === null || _this$state7$activeJo === void 0 ? void 0 : _this$state7$activeJo.length)) {\n          var _this$state8;\n\n          prevValues = (_this$state8 = this.state) === null || _this$state8 === void 0 ? void 0 : _this$state8.activeJobs;\n        }\n\n        ;\n\n        if (hasLoad && !(active === null || active === void 0 ? void 0 : active.length) && page_get === 0 && ((_this$state9 = this.state) === null || _this$state9 === void 0 ? void 0 : (_this$state9$activeJo = _this$state9.activeJobs) === null || _this$state9$activeJo === void 0 ? void 0 : _this$state9$activeJo.length) !== 0) {\n          if (this.state.hasLoad !== false) {\n            this.setState({\n              hasLoad: false\n            });\n          }\n        } else if (hasLoad && (active === null || active === void 0 ? void 0 : active.length) && page_get === currentPage) {\n          var _this$state10, _this$state$activeJob, _result;\n\n          let result = [];\n\n          if (JSON.stringify(prevValues) === JSON.stringify(active) && page_get === currentPage) {\n            // same data items here!\n            alert('Ok!');\n          } else {\n            var _firstItem;\n\n            let concatedItems = prevValues;\n            let firstItem = null;\n\n            if (Array.isArray(active) && (active === null || active === void 0 ? void 0 : active.length)) {\n              firstItem = active[0];\n            }\n\n            if ((_firstItem = firstItem) === null || _firstItem === void 0 ? void 0 : _firstItem.jobId) {\n              let ifMatch = prevValues.find(item => {\n                var _firstItem2;\n\n                return item.jobId === ((_firstItem2 = firstItem) === null || _firstItem2 === void 0 ? void 0 : _firstItem2.jobId);\n              });\n\n              if (!ifMatch) {\n                concatedItems = [...prevValues, ...active];\n              }\n            }\n\n            result = page_get > 0 && page_get === currentPage ? page_get == 1 && currentPage == 1 ? active : concatedItems : active;\n          }\n\n          let globalJobId = jobId_ && (jobId_ === null || jobId_ === void 0 ? void 0 : jobId_.length) ? jobId_ : '';\n          let enableEditMilestone = editMilestone_ === \"true\" ? true : false;\n          let enableLodgeDispute = lodgeDispute_ === \"true\" ? true : false;\n          let enableCancelJob = cancelJob_ === \"true\" ? true : false;\n          let enableMakMilestone = markMilestone_ === \"true\" ? true : false;\n          let {\n            approveCount,\n            applicantCount\n          } = (_this$state10 = this.state) === null || _this$state10 === void 0 ? void 0 : _this$state10.count;\n          let randomState = this.state.activeJobs && Array.isArray(this.state.activeJobs) && this.state.activeJobs[0] && this.state.activeJobs[0].mathrandom ? this.state.activeJobs[0].mathrandom : '';\n          let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : ''; // console.log({\n          //     1: needApprovalCount !== approveCount,\n          //     2: newApplicantsCount !== applicantCount,\n          //     3: this.state.globalJobId !== globalJobId,\n          //     4: this.state.enableEditMilestone !== enableEditMilestone,\n          //     5: this.state.enableLodgeDispute !== enableLodgeDispute,\n          //     6: this.state.enableCancelJob !== enableCancelJob,\n          //     7: this.state.enableCancelJob !== enableCancelJob,\n          //     8: this.state.activeJobs?.length !== result?.length,\n          //     9: this.state.activeJobs?.length,\n          //     10: result,\n          //     11: randomState !== randomResult, \n          // })\n\n          if (needApprovalCount !== approveCount || newApplicantsCount !== applicantCount || this.state.globalJobId !== globalJobId || this.state.enableEditMilestone !== enableEditMilestone || this.state.enableLodgeDispute !== enableLodgeDispute || this.state.enableCancelJob !== enableCancelJob || this.state.enableCancelJob !== enableCancelJob || this.state.enableMakMilestone !== enableMakMilestone || ((_this$state$activeJob = this.state.activeJobs) === null || _this$state$activeJob === void 0 ? void 0 : _this$state$activeJob.length) !== ((_result = result) === null || _result === void 0 ? void 0 : _result.length) || randomState !== randomResult) {\n            this.setState({\n              globalJobId: jobId_ && (jobId_ === null || jobId_ === void 0 ? void 0 : jobId_.length) ? jobId_ : '',\n              enableEditMilestone: editMilestone_ === \"true\" ? true : false,\n              enableLodgeDispute: lodgeDispute_ === \"true\" ? true : false,\n              enableCancelJob: cancelJob_ === \"true\" ? true : false,\n              enableMakMilestone: markMilestone_ === \"true\" ? true : false,\n              activeJobs: result,\n              count: {\n                approveCount: needApprovalCount,\n                applicantCount: newApplicantsCount\n              },\n              actualLoad: true\n            });\n          }\n        } else {\n          this.checkAndUpdateCount({\n            needApprovalCount,\n            newApplicantsCount\n          });\n        }\n      }\n    }\n\n    if (jobtype === 'open' && !(openJobs === null || openJobs === void 0 ? void 0 : (_openJobs$open = openJobs.open) === null || _openJobs$open === void 0 ? void 0 : _openJobs$open.length) ? true : JSON.stringify(openJobs === null || openJobs === void 0 ? void 0 : openJobs.open) !== JSON.stringify((_this$state11 = this.state) === null || _this$state11 === void 0 ? void 0 : _this$state11.openJobs) && ((_this$state12 = this.state) === null || _this$state12 === void 0 ? void 0 : (_this$state12$openJob = _this$state12.openJobs) === null || _this$state12$openJob === void 0 ? void 0 : _this$state12$openJob.length) < currentPage * 10) {\n      if (openJobs === null || openJobs === void 0 ? void 0 : openJobs.open) {\n        var _this$state13, _this$state14, _this$state14$openJob, _this$state16, _this$state16$openJob;\n\n        let {\n          open,\n          needApprovalCount,\n          newApplicantsCount\n        } = openJobs;\n        let page_get = 0;\n        let prevValues = [];\n\n        if (Array.isArray(open) && (open === null || open === void 0 ? void 0 : open.length)) {\n          var _open$;\n\n          page_get = (_open$ = open[0]) === null || _open$ === void 0 ? void 0 : _open$.page;\n        }\n\n        if (Array.isArray((_this$state13 = this.state) === null || _this$state13 === void 0 ? void 0 : _this$state13.openJobs) && ((_this$state14 = this.state) === null || _this$state14 === void 0 ? void 0 : (_this$state14$openJob = _this$state14.openJobs) === null || _this$state14$openJob === void 0 ? void 0 : _this$state14$openJob.length)) {\n          var _this$state15;\n\n          prevValues = (_this$state15 = this.state) === null || _this$state15 === void 0 ? void 0 : _this$state15.openJobs;\n        }\n\n        ;\n\n        if (hasLoad && !(open === null || open === void 0 ? void 0 : open.length) && page_get === 0 && ((_this$state16 = this.state) === null || _this$state16 === void 0 ? void 0 : (_this$state16$openJob = _this$state16.openJobs) === null || _this$state16$openJob === void 0 ? void 0 : _this$state16$openJob.length) !== 0) {\n          if (this.state.hasLoad !== false) {\n            this.setState({\n              hasLoad: false\n            });\n          }\n        } else if (hasLoad && (open === null || open === void 0 ? void 0 : open.length) && page_get === currentPage) {\n          let result = [];\n\n          if (JSON.stringify(prevValues) === JSON.stringify(open) && page_get === currentPage) {// same data items here!\n          } else {\n            result = page_get > 0 && page_get === currentPage ? [...prevValues, ...open] : open;\n          }\n\n          this.setState({\n            openJobs: result,\n            count: {\n              approveCount: needApprovalCount,\n              applicantCount: newApplicantsCount\n            },\n            actualLoad: true\n          });\n        } else {\n          this.checkAndUpdateCount({\n            needApprovalCount,\n            newApplicantsCount\n          });\n        }\n      }\n    }\n\n    if (jobtype === 'past' && !(pastJobs === null || pastJobs === void 0 ? void 0 : (_pastJobs$past = pastJobs.past) === null || _pastJobs$past === void 0 ? void 0 : _pastJobs$past.length) ? true : JSON.stringify(pastJobs === null || pastJobs === void 0 ? void 0 : pastJobs.past) !== JSON.stringify((_this$state17 = this.state) === null || _this$state17 === void 0 ? void 0 : _this$state17.pastJobs) && ((_this$state18 = this.state) === null || _this$state18 === void 0 ? void 0 : (_this$state18$pastJob = _this$state18.pastJobs) === null || _this$state18$pastJob === void 0 ? void 0 : _this$state18$pastJob.length) < currentPage * 10) {\n      if (pastJobs === null || pastJobs === void 0 ? void 0 : pastJobs.past) {\n        var _this$state19, _this$state20, _this$state20$pastJob, _this$state22, _this$state22$pastJob;\n\n        let {\n          past,\n          needApprovalCount,\n          newApplicantsCount\n        } = pastJobs;\n        let page_get = 0;\n        let prevValues = [];\n\n        if (Array.isArray(past) && (past === null || past === void 0 ? void 0 : past.length)) {\n          var _past$;\n\n          page_get = (_past$ = past[0]) === null || _past$ === void 0 ? void 0 : _past$.page;\n        }\n\n        if (Array.isArray((_this$state19 = this.state) === null || _this$state19 === void 0 ? void 0 : _this$state19.pastJobs) && ((_this$state20 = this.state) === null || _this$state20 === void 0 ? void 0 : (_this$state20$pastJob = _this$state20.pastJobs) === null || _this$state20$pastJob === void 0 ? void 0 : _this$state20$pastJob.length)) {\n          var _this$state21;\n\n          prevValues = (_this$state21 = this.state) === null || _this$state21 === void 0 ? void 0 : _this$state21.pastJobs;\n        }\n\n        ;\n\n        if (hasLoad && !(past === null || past === void 0 ? void 0 : past.length) && page_get === 0 && ((_this$state22 = this.state) === null || _this$state22 === void 0 ? void 0 : (_this$state22$pastJob = _this$state22.pastJobs) === null || _this$state22$pastJob === void 0 ? void 0 : _this$state22$pastJob.length) !== 0) {\n          if (this.state.hasLoad !== false) {\n            this.setState({\n              hasLoad: false\n            });\n          }\n        } else if (hasLoad && (past === null || past === void 0 ? void 0 : past.length) && page_get === currentPage) {\n          let result = [];\n\n          if (JSON.stringify(prevValues) === JSON.stringify(past) && page_get === currentPage) {// same data items here!\n          } else {\n            result = page_get > 0 && page_get === currentPage ? [...prevValues, ...past] : past;\n          }\n\n          this.setState({\n            pastJobs: result,\n            count: {\n              approveCount: needApprovalCount,\n              applicantCount: newApplicantsCount\n            },\n            actualLoad: true\n          });\n        } else {\n          this.checkAndUpdateCount({\n            needApprovalCount,\n            newApplicantsCount\n          });\n        }\n      }\n    }\n\n    if (jobtype === 'applicantList' && JSON.stringify(applicantsListJobs) !== JSON.stringify(this.state.applicantsListJobs)) {\n      this.setState({\n        applicantsListJobs\n      });\n    }\n\n    if (jobtype === 'applicant' && JSON.stringify(applicantJobs) !== JSON.stringify((_this$state23 = this.state) === null || _this$state23 === void 0 ? void 0 : _this$state23.applicantJobs) && ((_this$state24 = this.state) === null || _this$state24 === void 0 ? void 0 : (_this$state24$applica = _this$state24.applicantJobs) === null || _this$state24$applica === void 0 ? void 0 : _this$state24$applica.length) < currentPage * 10) {\n      var _this$state25, _this$state26, _this$state26$applica, _this$state28, _this$state28$applica;\n\n      let page_get = 0;\n      let prevValues = [];\n\n      if (Array.isArray(applicantJobs) && (applicantJobs === null || applicantJobs === void 0 ? void 0 : applicantJobs.length)) {\n        var _applicantJobs$;\n\n        page_get = (_applicantJobs$ = applicantJobs[0]) === null || _applicantJobs$ === void 0 ? void 0 : _applicantJobs$.page;\n      }\n\n      if (Array.isArray((_this$state25 = this.state) === null || _this$state25 === void 0 ? void 0 : _this$state25.applicantJobs) && ((_this$state26 = this.state) === null || _this$state26 === void 0 ? void 0 : (_this$state26$applica = _this$state26.applicantJobs) === null || _this$state26$applica === void 0 ? void 0 : _this$state26$applica.length)) {\n        var _this$state27;\n\n        prevValues = (_this$state27 = this.state) === null || _this$state27 === void 0 ? void 0 : _this$state27.applicantJobs;\n      }\n\n      ;\n\n      if (hasLoad && !(applicantJobs === null || applicantJobs === void 0 ? void 0 : applicantJobs.length) && page_get === 0 && ((_this$state28 = this.state) === null || _this$state28 === void 0 ? void 0 : (_this$state28$applica = _this$state28.applicantJobs) === null || _this$state28$applica === void 0 ? void 0 : _this$state28$applica.length) !== 0) {\n        if (this.state.hasLoad !== false) {\n          this.setState({\n            hasLoad: false\n          });\n        }\n      } else {\n        if (hasLoad && (applicantJobs === null || applicantJobs === void 0 ? void 0 : applicantJobs.length) && page_get === currentPage) {\n          this.setState({\n            applicantJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...applicantJobs] : applicantJobs,\n            actualLoad: true\n          });\n        }\n      }\n    }\n\n    if (jobtype === 'approval' && JSON.stringify(approvalJobs) !== JSON.stringify((_this$state29 = this.state) === null || _this$state29 === void 0 ? void 0 : _this$state29.approvalJobs) && ((_this$state30 = this.state) === null || _this$state30 === void 0 ? void 0 : (_this$state30$approva = _this$state30.approvalJobs) === null || _this$state30$approva === void 0 ? void 0 : _this$state30$approva.length) < currentPage * 10) {\n      var _this$state31, _this$state32, _this$state32$approva, _this$state34, _this$state34$approva;\n\n      let page_get = 0;\n      let prevValues = [];\n\n      if (Array.isArray(approvalJobs) && (approvalJobs === null || approvalJobs === void 0 ? void 0 : approvalJobs.length)) {\n        var _approvalJobs$;\n\n        page_get = (_approvalJobs$ = approvalJobs[0]) === null || _approvalJobs$ === void 0 ? void 0 : _approvalJobs$.page;\n      }\n\n      if (Array.isArray((_this$state31 = this.state) === null || _this$state31 === void 0 ? void 0 : _this$state31.approvalJobs) && ((_this$state32 = this.state) === null || _this$state32 === void 0 ? void 0 : (_this$state32$approva = _this$state32.approvalJobs) === null || _this$state32$approva === void 0 ? void 0 : _this$state32$approva.length)) {\n        var _this$state33;\n\n        prevValues = (_this$state33 = this.state) === null || _this$state33 === void 0 ? void 0 : _this$state33.approvalJobs;\n      }\n\n      ;\n\n      if (hasLoad && !(approvalJobs === null || approvalJobs === void 0 ? void 0 : approvalJobs.length) && page_get === 0 && ((_this$state34 = this.state) === null || _this$state34 === void 0 ? void 0 : (_this$state34$approva = _this$state34.approvalJobs) === null || _this$state34$approva === void 0 ? void 0 : _this$state34$approva.length) !== 0) {\n        if (this.state.hasLoad !== false) {\n          this.setState({\n            hasLoad: false\n          });\n        }\n      } else {\n        if (hasLoad && (approvalJobs === null || approvalJobs === void 0 ? void 0 : approvalJobs.length) && page_get === currentPage) {\n          this.setState({\n            approvalJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...approvalJobs] : approvalJobs,\n            actualLoad: true\n          });\n        }\n      }\n    }\n  }\n\n  render() {\n    let {\n      actualLoad,\n      hasLoad,\n      currentPage,\n      enableEditMilestone,\n      enableLodgeDispute,\n      enableCancelJob,\n      enableMakMilestone,\n      globalJobId,\n      isToggleSidebar,\n      activeType,\n      selectedItem: {\n        jobtype,\n        jobid,\n        specializationId\n      },\n      count: {\n        applicantCount,\n        approveCount\n      },\n      activeJobs,\n      pastJobs,\n      openJobs,\n      applicantJobs,\n      applicantsListJobs,\n      approvalJobs\n    } = this.state;\n    const {\n      toggleSidebar,\n      setSelected\n    } = this;\n    let props = this.props;\n    let isLoading = props.isLoading;\n    let totalCount = 0;\n\n    if (jobtype === 'active') {\n      totalCount = activeJobs === null || activeJobs === void 0 ? void 0 : activeJobs.length;\n    }\n\n    if (jobtype === 'past') {\n      totalCount = pastJobs === null || pastJobs === void 0 ? void 0 : pastJobs.length;\n    }\n\n    if (jobtype === 'open') {\n      totalCount = openJobs === null || openJobs === void 0 ? void 0 : openJobs.length;\n    }\n\n    if (jobtype === 'applicant') {\n      totalCount = applicantJobs === null || applicantJobs === void 0 ? void 0 : applicantJobs.length;\n    }\n\n    if (jobtype === 'approval') {\n      totalCount = approvalJobs === null || approvalJobs === void 0 ? void 0 : approvalJobs.length;\n    }\n\n    if (jobtype === 'applicantList') {\n      totalCount = applicantsListJobs === null || applicantsListJobs === void 0 ? void 0 : applicantsListJobs.length;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mob_side_nav\",\n          onClick: () => {\n            toggleSidebar();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: menu,\n            alt: \"mob-side-nav\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `side_nav_col${isToggleSidebar ? ' active' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close_nav\",\n              onClick: () => {\n                toggleSidebar();\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: close,\n                alt: \"close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stick\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"title\",\n                children: \"Job Dashboard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"dashboard_menu\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon star ${activeType === \"active\" ? 'active' : ''}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        console.log('Here!!!!'); // setResetItem(true);\n\n                        setSelected('active');\n                      },\n                      className: \"menu_txt\",\n                      children: \"Active\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 554,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 553,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 552,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon open ${activeType === \"open\" ? 'active' : ''}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        setSelected('open');\n                      },\n                      className: \"menu_txt\",\n                      children: \"Open\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 565,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 564,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 563,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon past ${activeType === \"past\" ? 'active' : ''}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        setSelected('past');\n                      },\n                      className: \"menu_txt\",\n                      children: \"Past\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 572,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 571,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon applicants ${activeType === \"applicant\" ? 'active' : ''}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        setSelected('applicant');\n                      },\n                      className: \"menu_txt\",\n                      children: ['New applicants', !!applicantCount && /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"badge_count\",\n                        children: applicantCount > 9 ? '9+' : applicantCount\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 585,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 580,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 579,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 578,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon approved ${activeType === \"approval\" ? 'active' : ''}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        setSelected('approval');\n                      },\n                      className: \"menu_txt\",\n                      children: ['Need approval', !!approveCount && /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"badge_count\",\n                        children: approveCount > 9 ? '9+' : approveCount\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 602,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 595,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 594,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 592,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n            dataLength: totalCount,\n            next: () => {\n              if (totalCount == this.state.currentPage * 10) {\n                this.setState({\n                  currentPage: this.state.currentPage + 1\n                }, () => {\n                  let cp = this.state.currentPage;\n\n                  if (jobtype === 'active') {\n                    this.props.getActiveJobsBuilder(cp);\n                  }\n\n                  if (jobtype === 'past') {\n                    this.props.getPastJobsBuilder(cp);\n                  }\n\n                  if (jobtype === 'open') {\n                    this.props.getOpenJobsBuilder(cp);\n                  }\n\n                  if (jobtype === 'applicant') {\n                    this.props.getNewApplicantsBuilder(cp);\n                  }\n\n                  if (jobtype === 'approval') {\n                    this.props.getNewApprovalList(cp);\n                  }\n                });\n              } else {// this.setState({ hasLoad: false })\n              }\n            },\n            hasMore: hasLoad,\n            loader: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false),\n            style: {\n              overflowX: 'hidden'\n            },\n            className: `detail_col element-side-scroll hide_scroll`,\n            children: [jobtype === 'past' && /*#__PURE__*/_jsxDEV(PastJobsComponent, {\n              isLoading: isLoading,\n              dataItems: pastJobs,\n              jobType: jobtype,\n              activeType: activeType,\n              history: props.history,\n              getPastJobsBuilder: props === null || props === void 0 ? void 0 : props.getPastJobsBuilder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 33\n            }, this), jobtype === 'active' && /*#__PURE__*/_jsxDEV(ActiveJobsComponent, {\n              isLoading: isLoading,\n              dataItems: activeJobs,\n              jobType: jobtype,\n              activeType: activeType,\n              setJobLabel: setSelected,\n              history: props.history,\n              globalJobId: globalJobId,\n              enableEditMilestone: enableEditMilestone,\n              enableLodgeDispute: enableLodgeDispute,\n              enableCancelJob: enableCancelJob,\n              enableMakMilestone: enableMakMilestone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 33\n            }, this), jobtype === 'open' && /*#__PURE__*/_jsxDEV(OpenJobsComponent, {\n              isLoading: isLoading,\n              dataItems: openJobs,\n              jobType: jobtype,\n              setJobLabel: setSelected,\n              activeType: activeType,\n              history: props.history\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 33\n            }, this), jobtype === 'applicant' && /*#__PURE__*/_jsxDEV(NewApplicantComponent, {\n              isLoading: isLoading,\n              dataItems: applicantJobs,\n              jobType: jobtype,\n              setJobLabel: setSelected,\n              history: props.history\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 33\n            }, this), jobtype === 'approval' && /*#__PURE__*/_jsxDEV(NeedApproval, {\n              isLoading: isLoading,\n              dataItems: approvalJobs,\n              jobType: jobtype,\n              setJobLabel: setSelected,\n              activeType: activeType,\n              history: props.history\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 33\n            }, this), jobtype === 'applicantList' && /*#__PURE__*/_jsxDEV(ApplicantsList, {\n              isLoading: isLoading,\n              items: applicantsListJobs,\n              jobid: jobid,\n              specializationId: specializationId,\n              setJobLabel: setSelected,\n              activeType: activeType,\n              history: props.history\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default JobDashboard;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/jobDashboard.tsx"],"names":["Component","menu","close","ActiveJobsComponent","OpenJobsComponent","PastJobsComponent","NewApplicantComponent","NeedApproval","ApplicantsList","InfiniteScroll","JobDashboard","constructor","props","checkAndUpdateCount","needApprovalCount","newApplicantsCount","approveCount","applicantCount","state","count","setState","toggleSidebar","isToggleSidebar","setSelected","jobtype","jobid","sortby","specializationId","currentPage","item_position","localStorage","getItem","locationLocal","JSON","parse","dataItemsAddons","page","jobId","sortBy","includes","activeType","hasLoad","activeJobs","pastJobs","openJobs","applicantJobs","approvalJobs","applicantsListJobs","actualLoad","selectedItem","getClearJobs","history","push","window","scrollTo","setAfterItems","getActiveJobsBuilder","getPastJobsBuilder","getOpenJobsBuilder","getNewApplicantsBuilder","getnewJobApplicationListBuilder","getNewApprovalList","enableEditMilestone","enableLodgeDispute","enableCancelJob","enableMakMilestone","globalJobId","componentDidMount","nextProps","location","search","urlParams","URLSearchParams","activeType_","get","jobId_","editMilestone_","lodgeDispute_","cancelJob_","markMilestone_","componentDidUpdate","prevProps","state_","stateActive","console","log","active","length","stringify","page_get","prevValues","Array","isArray","result","alert","concatedItems","firstItem","ifMatch","find","item","randomState","mathrandom","randomResult","open","past","render","isLoading","totalCount","cp","overflowX"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport menu from '../../assets/images/menu-line-blue.png';\nimport close from '../../assets/images/ic-cancel-blue.png';\n\nimport ActiveJobsComponent from './components/activeJobs';\nimport OpenJobsComponent from './components/openJobs';\nimport PastJobsComponent from './components/pastJobs';\nimport NewApplicantComponent from './components/newApplicants';\nimport NeedApproval from './components/needApproval';\nimport ApplicantsList from './components/applicantsList';\n//@ts-ignore\nimport InfiniteScroll from \"react-infinite-scroll-component\";\ninterface Props {\n    getActiveJobsBuilder: (page: number) => void,\n    getPastJobsBuilder: (page: number) => void,\n    getNewApplicantsBuilder: (page: number) => void,\n    getOpenJobsBuilder: (page: number) => void,\n    getnewJobApplicationListBuilder: (item: any) => void,\n    getNewApprovalList: (page: number) => void,\n    getClearJobs: () => void,\n    activeJobs: any,\n    pastJobs: any,\n    openJobs: any\n    applicantJobs: any,\n    approvalJobs: any,\n    applicantsListJobs: any,\n    history: any,\n    isLoading: any\n}\ninterface State {\n    isToggleSidebar: any,\n    selectedItem: any,\n    count: any,\n    currentPage: any,\n    activeType: any,\n    activeJobs: any,\n    pastJobs: any,\n    openJobs: any\n    applicantJobs: any,\n    approvalJobs: any,\n    applicantsListJobs: any,\n    enableEditMilestone: any,\n    enableLodgeDispute: any,\n    enableCancelJob: any,\n    enableMakMilestone: any,\n    globalJobId: string,\n    hasLoad: boolean,\n    actualLoad: boolean,\n}\nclass JobDashboard extends Component<Props, State> {\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            currentPage: 1,\n            isToggleSidebar: false,\n            activeType: 'active',\n            selectedItem: { jobtype: 'active', jobid: null, sortby: 1, specializationId: '' },\n            count: { applicantCount: 0, approveCount: 0 },\n            activeJobs: [],\n            pastJobs: [],\n            openJobs: [],\n            applicantJobs: [],\n            approvalJobs: [],\n            applicantsListJobs: [],\n            enableEditMilestone: false,\n            enableLodgeDispute: false,\n            enableCancelJob: false,\n            enableMakMilestone: false,\n            globalJobId: '',\n            hasLoad: true,\n            actualLoad: false\n        }\n    }\n\n    componentDidMount() {\n        let { activeType, selectedItem: { jobtype }, currentPage, hasLoad } = this.state;\n        let nextProps: any = this.props;\n        if (nextProps?.location?.search) {\n\n            let urlParams = new URLSearchParams(nextProps?.location?.search);\n            let activeType_ = urlParams.get('active');\n            let jobId_ = urlParams.get('jobId');\n            let editMilestone_ = urlParams.get('editMilestone');\n            let lodgeDispute_ = urlParams.get('lodgeDispute');\n            let cancelJob_ = urlParams.get('cancelJob');\n            let markMilestone_ = urlParams.get('markMilestone');\n\n            if (activeType_) {\n                if (activeType_ !== activeType) {\n                    this.setState({\n                        activeType: activeType_,\n                        selectedItem: {\n                            jobtype: activeType_,\n                            jobid: null,\n                            sortby: 1,\n                            specializationId: '',\n                        },\n                    }, () => {\n                        this.setAfterItems({\n                            jobtype: activeType_,\n                            currentPage: 1,\n                            dataItemsAddons: { page: 1, jobId: null, sortBy: 1 }\n                        })\n                    })\n                } else {\n                    this.props.getActiveJobsBuilder(1);\n                }\n            }\n        } else {\n            this.props.getActiveJobsBuilder(1);\n        }\n    }\n\n\n    checkAndUpdateCount = ({\n        needApprovalCount,\n        newApplicantsCount\n    }: any) => {\n        let { approveCount, applicantCount } = this.state?.count\n        if (needApprovalCount !== approveCount ||\n            newApplicantsCount !== applicantCount) {\n            this.setState({\n                count: {\n                    approveCount: needApprovalCount,\n                    applicantCount: newApplicantsCount\n                },\n            })\n        }\n    }\n\n    // milestone dates should be lie betwwn job details\n    componentDidUpdate(prevProps: any) {\n        let nextProps: any = this.props;\n        let { activeJobs, pastJobs, openJobs, applicantsListJobs, applicantJobs, approvalJobs } = nextProps;\n        let { activeType, selectedItem: { jobtype }, currentPage, hasLoad } = this.state;\n        let state_: any = this.state;\n\n        let urlParams = new URLSearchParams(nextProps?.location?.search);\n        let activeType_ = urlParams.get('active');\n        let jobId_ = urlParams.get('jobId');\n        let editMilestone_ = urlParams.get('editMilestone');\n        let lodgeDispute_ = urlParams.get('lodgeDispute');\n        let cancelJob_ = urlParams.get('cancelJob');\n        let markMilestone_ = urlParams.get('markMilestone');\n\n        let stateActive = this.state.activeJobs;\n\n        console.log({\n            activeJobs, pastJobs, openJobs, applicantsListJobs, applicantJobs, approvalJobs,\n            1: jobtype === 'active',\n            2: !activeJobs?.active?.length ? true : JSON.stringify(activeJobs?.active) !== JSON.stringify(this.state?.activeJobs),\n            3: (stateActive?.length < currentPage * 10),\n            stateActive: stateActive,\n            currentPage\n        })\n\n        if (\n            jobtype === 'active' &&\n                !activeJobs?.active?.length ? true : JSON.stringify(activeJobs?.active) !== JSON.stringify(this.state?.activeJobs) &&\n            (this.state?.activeJobs?.length < currentPage * 10 || this.state?.activeJobs?.length === currentPage * 10)\n        ) {\n            if (activeJobs?.active) {\n\n                let { active, needApprovalCount, newApplicantsCount } = activeJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(active) && active?.length) {\n                    page_get = active[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.activeJobs) && this.state?.activeJobs?.length) {\n                    prevValues = this.state?.activeJobs;\n                };\n\n                if (hasLoad && !active?.length && page_get === 0 && this.state?.activeJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && active?.length && page_get === currentPage) {\n                    let result = [];\n                    if (JSON.stringify(prevValues) === JSON.stringify(active) && page_get === currentPage) {\n                        // same data items here!\n                        alert('Ok!')\n                    } else {\n                        let concatedItems: any = prevValues;\n                        let firstItem: any = null;\n\n                        if (Array.isArray(active) && active?.length) {\n                            firstItem = active[0];\n                        }\n\n                        if (firstItem?.jobId) {\n                            let ifMatch = prevValues.find((item: any) => item.jobId === firstItem?.jobId);\n                            if (!ifMatch) {\n                                concatedItems = [...prevValues, ...active]\n                            }\n                        }\n\n                        result = page_get > 0 && page_get === currentPage ?\n                            page_get == 1 && currentPage == 1 ? active : concatedItems\n                            : active;\n                    }\n\n                    let globalJobId = jobId_ && jobId_?.length ? jobId_ : ''\n                    let enableEditMilestone = editMilestone_ === \"true\" ? true : false;\n                    let enableLodgeDispute = lodgeDispute_ === \"true\" ? true : false;\n                    let enableCancelJob = cancelJob_ === \"true\" ? true : false;\n                    let enableMakMilestone = markMilestone_ === \"true\" ? true : false;\n                    let { approveCount, applicantCount } = this.state?.count;\n\n                    let randomState = this.state.activeJobs && Array.isArray(this.state.activeJobs) && this.state.activeJobs[0] && this.state.activeJobs[0].mathrandom ? this.state.activeJobs[0].mathrandom : ''\n\n                    let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n                    // console.log({\n                    //     1: needApprovalCount !== approveCount,\n                    //     2: newApplicantsCount !== applicantCount,\n                    //     3: this.state.globalJobId !== globalJobId,\n                    //     4: this.state.enableEditMilestone !== enableEditMilestone,\n                    //     5: this.state.enableLodgeDispute !== enableLodgeDispute,\n                    //     6: this.state.enableCancelJob !== enableCancelJob,\n                    //     7: this.state.enableCancelJob !== enableCancelJob,\n                    //     8: this.state.activeJobs?.length !== result?.length,\n                    //     9: this.state.activeJobs?.length,\n                    //     10: result,\n                    //     11: randomState !== randomResult, \n                    // })\n\n                    if (needApprovalCount !== approveCount ||\n                        newApplicantsCount !== applicantCount ||\n                        this.state.globalJobId !== globalJobId ||\n                        this.state.enableEditMilestone !== enableEditMilestone ||\n                        this.state.enableLodgeDispute !== enableLodgeDispute ||\n                        this.state.enableCancelJob !== enableCancelJob ||\n                        this.state.enableCancelJob !== enableCancelJob ||\n                        this.state.enableMakMilestone !== enableMakMilestone ||\n                        this.state.activeJobs?.length !== result?.length ||\n                        randomState !== randomResult\n                    ) {\n                        this.setState({\n                            globalJobId: jobId_ && jobId_?.length ? jobId_ : '',\n                            enableEditMilestone: editMilestone_ === \"true\" ? true : false,\n                            enableLodgeDispute: lodgeDispute_ === \"true\" ? true : false,\n                            enableCancelJob: cancelJob_ === \"true\" ? true : false,\n                            enableMakMilestone: markMilestone_ === \"true\" ? true : false,\n                            activeJobs: result,\n                            count: {\n                                approveCount: needApprovalCount,\n                                applicantCount: newApplicantsCount\n                            },\n                            actualLoad: true\n                        });\n                    }\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n            }\n        }\n\n        if (\n            jobtype === 'open' &&\n                !openJobs?.open?.length ? true : JSON.stringify(openJobs?.open) !== JSON.stringify(this.state?.openJobs) &&\n            (this.state?.openJobs?.length < currentPage * 10)\n        ) {\n            if (openJobs?.open) {\n                let { open, needApprovalCount, newApplicantsCount } = openJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(open) && open?.length) {\n                    page_get = open[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.openJobs) && this.state?.openJobs?.length) {\n                    prevValues = this.state?.openJobs;\n                };\n\n\n                if (hasLoad && !open?.length && page_get === 0 && this.state?.openJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && open?.length && page_get === currentPage) {\n                    let result = [];\n                    if (JSON.stringify(prevValues) === JSON.stringify(open) && page_get === currentPage) {\n                        // same data items here!\n                    } else {\n                        result = page_get > 0 && page_get === currentPage ? [...prevValues, ...open] : open;\n                    }\n                    this.setState({\n                        openJobs: result,\n                        count: {\n                            approveCount: needApprovalCount,\n                            applicantCount: newApplicantsCount\n                        },\n                        actualLoad: true\n                    });\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n\n            }\n        }\n\n        if (\n            jobtype === 'past' &&\n                !pastJobs?.past?.length ? true : JSON.stringify(pastJobs?.past) !== JSON.stringify(this.state?.pastJobs) &&\n            (this.state?.pastJobs?.length < currentPage * 10)\n        ) {\n\n            if (pastJobs?.past) {\n\n                let { past, needApprovalCount, newApplicantsCount } = pastJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(past) && past?.length) {\n                    page_get = past[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.pastJobs) && this.state?.pastJobs?.length) {\n                    prevValues = this.state?.pastJobs;\n                };\n\n\n                if (hasLoad && !past?.length && page_get === 0 && this.state?.pastJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && past?.length && page_get === currentPage) {\n                    let result = [];\n                    if (JSON.stringify(prevValues) === JSON.stringify(past) && page_get === currentPage) {\n                        // same data items here!\n                    } else {\n                        result = page_get > 0 && page_get === currentPage ? [...prevValues, ...past] : past;\n                    }\n                    this.setState({\n                        pastJobs: result,\n                        count: {\n                            approveCount: needApprovalCount,\n                            applicantCount: newApplicantsCount\n                        },\n                        actualLoad: true\n                    });\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n            }\n        }\n\n        if (jobtype === 'applicantList' && JSON.stringify(applicantsListJobs) !== JSON.stringify(this.state.applicantsListJobs)) {\n            this.setState({ applicantsListJobs });\n        }\n\n        if (\n            jobtype === 'applicant' &&\n            JSON.stringify(applicantJobs) !== JSON.stringify(this.state?.applicantJobs) &&\n            (this.state?.applicantJobs?.length < currentPage * 10)\n        ) {\n            let page_get = 0;\n            let prevValues = [];\n\n            if (Array.isArray(applicantJobs) && applicantJobs?.length) {\n                page_get = applicantJobs[0]?.page;\n            }\n\n            if (Array.isArray(this.state?.applicantJobs) && this.state?.applicantJobs?.length) {\n                prevValues = this.state?.applicantJobs;\n            };\n\n\n            if (hasLoad && !applicantJobs?.length && page_get === 0 && this.state?.applicantJobs?.length !== 0) {\n                if (this.state.hasLoad !== false) {\n                    this.setState({ hasLoad: false });\n                }\n            } else {\n                if (hasLoad && applicantJobs?.length && page_get === currentPage) {\n                    this.setState({\n                        applicantJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...applicantJobs] : applicantJobs,\n                        actualLoad: true\n                    });\n                }\n            }\n        }\n\n\n        if (\n            jobtype === 'approval' &&\n            JSON.stringify(approvalJobs) !== JSON.stringify(this.state?.approvalJobs) &&\n            (this.state?.approvalJobs?.length < currentPage * 10)\n        ) {\n            let page_get = 0;\n            let prevValues = [];\n\n            if (Array.isArray(approvalJobs) && approvalJobs?.length) {\n                page_get = approvalJobs[0]?.page;\n            }\n\n            if (Array.isArray(this.state?.approvalJobs) && this.state?.approvalJobs?.length) {\n                prevValues = this.state?.approvalJobs;\n            };\n\n\n            if (hasLoad && !approvalJobs?.length && page_get === 0 && this.state?.approvalJobs?.length !== 0) {\n                if (this.state.hasLoad !== false) {\n                    this.setState({ hasLoad: false });\n                }\n            } else {\n                if (hasLoad && approvalJobs?.length && page_get === currentPage) {\n                    this.setState({\n                        approvalJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...approvalJobs] : approvalJobs,\n                        actualLoad: true\n                    });\n                }\n            }\n        }\n    }\n\n    toggleSidebar = () => this.setState({ isToggleSidebar: !this.state.isToggleSidebar });\n    setSelected = (jobtype: any, jobid?: any, sortby?: any, specializationId?: any) => {\n\n        let { currentPage } = this.state;\n        let item_position: any = localStorage.getItem('position');\n        let locationLocal: any = JSON.parse(item_position);\n\n        let dataItemsAddons: any = { page: currentPage, jobId: jobid, sortBy: sortby };\n        if (sortby === 2) {\n            dataItemsAddons['location'] = {\n                \"type\": \"Point\",\n                \"coordinates\": [\n                    locationLocal[1],\n                    locationLocal[0]\n                ]\n            };\n        }\n\n        if (['active', 'past', 'open', 'applicant', 'approval'].includes(jobtype)) {\n            this.setState({\n                activeType: jobtype,\n                currentPage: 1,\n                hasLoad: true,\n                activeJobs: [],\n                pastJobs: [],\n                openJobs: [],\n                applicantJobs: [],\n                approvalJobs: [],\n                applicantsListJobs: [],\n                actualLoad: false,\n                selectedItem: { jobtype, jobid, sortby, specializationId },\n            }, () => {\n                this.props.getClearJobs();\n                this.props.history.push(`/jobs?active=${jobtype}`);\n                window.scrollTo(0, 0);\n\n                this.setAfterItems({ jobtype, currentPage: this.state.currentPage, dataItemsAddons });\n            })\n        } else {\n            this.setState({\n                selectedItem: { jobtype, jobid, sortby, specializationId },\n                applicantsListJobs: [],\n            }, () => {\n                this.props.getClearJobs();\n                this.setAfterItems({ jobtype, currentPage: this.state.currentPage, dataItemsAddons });\n            });\n        }\n    }\n\n    setAfterItems = ({ jobtype, currentPage, dataItemsAddons }: any) => {\n        const { getActiveJobsBuilder, getPastJobsBuilder, getOpenJobsBuilder, getNewApplicantsBuilder, getnewJobApplicationListBuilder, getNewApprovalList } = this.props;\n\n        if (jobtype === 'active') { getActiveJobsBuilder(currentPage); }\n        if (jobtype === 'past') { getPastJobsBuilder(currentPage); }\n        if (jobtype === 'open') { getOpenJobsBuilder(currentPage); }\n        if (jobtype === 'applicant') { getNewApplicantsBuilder(currentPage); }\n        if (jobtype === 'approval') { getNewApprovalList(currentPage); }\n        if (jobtype === 'applicantList') { getnewJobApplicationListBuilder(dataItemsAddons); }\n    }\n\n    render() {\n        let {\n            actualLoad,\n            hasLoad,\n            currentPage,\n            enableEditMilestone,\n            enableLodgeDispute,\n            enableCancelJob,\n            enableMakMilestone,\n            globalJobId,\n            isToggleSidebar,\n            activeType,\n            selectedItem: { jobtype, jobid, specializationId },\n            count: { applicantCount, approveCount },\n            activeJobs, pastJobs, openJobs, applicantJobs, applicantsListJobs, approvalJobs\n        } = this.state;\n        const { toggleSidebar, setSelected } = this;\n        let props: any = this.props;\n        let isLoading: any = props.isLoading;\n        let totalCount: any = 0;\n\n        if (jobtype === 'active') {\n            totalCount = activeJobs?.length;\n        }\n\n        if (jobtype === 'past') {\n            totalCount = pastJobs?.length;\n        }\n\n        if (jobtype === 'open') {\n            totalCount = openJobs?.length;\n        }\n\n        if (jobtype === 'applicant') {\n            totalCount = applicantJobs?.length;\n        }\n\n        if (jobtype === 'approval') {\n            totalCount = approvalJobs?.length;\n        }\n\n        if (jobtype === 'applicantList') {\n            totalCount = applicantsListJobs?.length;\n        }\n\n        return (\n            <div className=\"app_wrapper\">\n                <div className=\"custom_container\">\n                    <span\n                        className=\"mob_side_nav\"\n                        onClick={() => { toggleSidebar() }}\n                    >\n                        <img src={menu} alt=\"mob-side-nav\" />\n                    </span>\n                    <div className=\"f_row\">\n                        <div className={`side_nav_col${isToggleSidebar ? ' active' : ''}`}>\n                            <button className=\"close_nav\" onClick={() => { toggleSidebar() }}>\n                                <img src={close} alt=\"close\" />\n                            </button>\n                            <div className=\"stick\">\n                                <span className=\"title\">Job Dashboard</span>\n                                <ul className=\"dashboard_menu\">\n                                    <li>\n                                        <span className={`icon star ${activeType === \"active\" ? 'active' : ''}`}>\n                                            <span\n                                                onClick={() => {\n                                                    console.log('Here!!!!')\n                                                    // setResetItem(true);\n                                                    setSelected('active')\n                                                }}\n                                                className=\"menu_txt\">Active</span>\n                                        </span>\n                                    </li>\n                                    <li>\n                                        <span className={`icon open ${activeType === \"open\" ? 'active' : ''}`}>\n                                            <span\n                                                onClick={() => { setSelected('open') }}\n                                                className=\"menu_txt\">Open</span>\n                                        </span>\n                                    </li>\n                                    <li>\n                                        <span className={`icon past ${activeType === \"past\" ? 'active' : ''}`}>\n                                            <span\n                                                onClick={() => { setSelected('past') }}\n                                                className=\"menu_txt\">Past</span>\n                                        </span>\n                                    </li>\n                                    {/* <hr></hr> */}\n                                    <li>\n                                        <span className={`icon applicants ${activeType === \"applicant\" ? 'active' : ''}`}>\n                                            <span\n                                                onClick={() => { setSelected('applicant') }}\n                                                className=\"menu_txt\">\n                                                {'New applicants'}\n                                                {!!applicantCount && (\n                                                    <span className=\"badge_count\">\n                                                        {applicantCount > 9 ? '9+' : applicantCount}\n                                                    </span>\n                                                )}\n                                            </span>\n                                        </span>\n                                    </li>\n                                    <li>\n                                        {/* <span className=\"icon approved\"> */}\n                                        <span className={`icon approved ${activeType === \"approval\" ? 'active' : ''}`}>\n                                            <span\n                                                onClick={() => {\n                                                    setSelected('approval')\n                                                }}\n                                                className=\"menu_txt\">\n                                                {'Need approval'}\n                                                {!!approveCount && (\n                                                    <span className=\"badge_count\">\n                                                        {approveCount > 9 ? '9+' : approveCount}\n                                                    </span>\n                                                )}\n                                            </span>\n                                        </span>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n\n\n                        <InfiniteScroll\n                            dataLength={totalCount}\n                            next={() => {\n                                if (totalCount == this.state.currentPage * 10) {\n                                    this.setState({ currentPage: this.state.currentPage + 1 }, () => {\n                                        let cp: any = this.state.currentPage;\n\n                                        if (jobtype === 'active') {\n                                            this.props.getActiveJobsBuilder(cp);\n                                        }\n\n                                        if (jobtype === 'past') {\n                                            this.props.getPastJobsBuilder(cp)\n                                        }\n\n                                        if (jobtype === 'open') {\n                                            this.props.getOpenJobsBuilder(cp);\n                                        }\n\n                                        if (jobtype === 'applicant') {\n                                            this.props.getNewApplicantsBuilder(cp);\n                                        }\n\n                                        if (jobtype === 'approval') {\n                                            this.props.getNewApprovalList(cp);\n                                        }\n\n                                    });\n                                } else {\n                                    // this.setState({ hasLoad: false })\n                                }\n                            }}\n                            hasMore={hasLoad}\n                            loader={<></>}\n                            style={{ overflowX: 'hidden' }}\n                            className={`detail_col element-side-scroll hide_scroll`}>\n                            {/* // className={`detail_col element-side-scroll hide_scroll`}> */}\n                            {jobtype === 'past' && (\n                                <PastJobsComponent\n                                    isLoading={isLoading}\n                                    dataItems={pastJobs}\n                                    jobType={jobtype}\n                                    activeType={activeType}\n                                    history={props.history}\n                                    getPastJobsBuilder={props?.getPastJobsBuilder}\n                                />)}\n                            {jobtype === 'active' && (\n                                <ActiveJobsComponent\n                                    isLoading={isLoading}\n                                    dataItems={activeJobs}\n                                    jobType={jobtype}\n                                    activeType={activeType}\n                                    setJobLabel={setSelected}\n                                    history={props.history}\n                                    globalJobId={globalJobId}\n                                    enableEditMilestone={enableEditMilestone}\n                                    enableLodgeDispute={enableLodgeDispute}\n                                    enableCancelJob={enableCancelJob}\n                                    enableMakMilestone={enableMakMilestone}\n                                />)}\n                            {jobtype === 'open' && (\n                                <OpenJobsComponent\n                                    isLoading={isLoading}\n                                    dataItems={openJobs}\n                                    jobType={jobtype}\n                                    setJobLabel={setSelected}\n                                    activeType={activeType}\n                                    history={props.history}\n                                />)}\n                            {jobtype === 'applicant' && (\n                                <NewApplicantComponent\n                                    isLoading={isLoading}\n                                    dataItems={applicantJobs}\n                                    jobType={jobtype}\n                                    setJobLabel={setSelected}\n                                    history={props.history}\n                                />)}\n                            {jobtype === 'approval' && (\n                                <NeedApproval\n                                    isLoading={isLoading}\n                                    dataItems={approvalJobs}\n                                    jobType={jobtype}\n                                    setJobLabel={setSelected}\n                                    activeType={activeType}\n                                    history={props.history}\n                                />\n                            )}\n                            {jobtype === 'applicantList' && (\n                                <ApplicantsList\n                                    isLoading={isLoading}\n                                    items={applicantsListJobs}\n                                    jobid={jobid}\n                                    specializationId={specializationId}\n                                    setJobLabel={setSelected}\n                                    activeType={activeType}\n                                    history={props.history}\n                                />)}\n\n                        </InfiniteScroll>\n\n\n\n                        {/* <div className=\"detail_col element-side-scroll\">\n\n                            {jobtype === 'past' && (\n                                <PastJobsComponent\n                                    isLoading={isLoading}\n                                    dataItems={pastJobs}\n                                    jobType={jobtype}\n                                    activeType={activeType}\n                                    history={props.history}\n                                    getPastJobsBuilder={props?.getPastJobsBuilder}\n                                />)}\n                            {jobtype === 'active' && (\n                                <ActiveJobsComponent\n                                    isLoading={isLoading}\n                                    dataItems={activeJobs}\n                                    jobType={jobtype}\n                                    activeType={activeType}\n                                    setJobLabel={setSelected}\n                                    history={props.history}\n                                    globalJobId={globalJobId}\n                                    enableEditMilestone={enableEditMilestone}\n                                    enableLodgeDispute={enableLodgeDispute}\n                                    enableCancelJob={enableCancelJob}\n                                />)}\n                            {jobtype === 'open' && (\n                                <OpenJobsComponent\n                                    isLoading={isLoading}\n                                    dataItems={openJobs}\n                                    jobType={jobtype}\n                                    setJobLabel={setSelected}\n                                    activeType={activeType}\n                                    history={props.history}\n                                />)}\n                            {jobtype === 'applicant' && (\n                                <NewApplicantComponent\n                                    isLoading={isLoading}\n                                    dataItems={applicantJobs}\n                                    jobType={jobtype}\n                                    setJobLabel={setSelected}\n                                    history={props.history}\n                                />)}\n                            {jobtype === 'approval' && (\n                                <NeedApproval\n                                    isLoading={isLoading}\n                                    dataItems={approvalJobs}\n                                    jobType={jobtype}\n                                    setJobLabel={setSelected}\n                                    activeType={activeType}\n                                    history={props.history}\n                                />\n                            )}\n                            {jobtype === 'applicantList' && (\n                                <ApplicantsList\n                                    isLoading={isLoading}\n                                    items={applicantsListJobs}\n                                    jobid={jobid}\n                                    specializationId={specializationId}\n                                    setJobLabel={setSelected}\n                                    activeType={activeType}\n                                    history={props.history}\n                                />)}\n                        </div> */}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default JobDashboard;"]},"metadata":{},"sourceType":"module"}