{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/openJobs.tsx\";\nimport React, { Component } from 'react';\nimport approved from '../../../assets/images/approved.png';\nimport noDataFound from '../../../assets/images/no-search-data.png';\nimport jobTypePlaceholder from '../../../assets/images/job-type-placeholder.png';\nimport { renderTime } from '../../../utils/common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OpenJobs extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.redirectToInfo = ({\n      jobId,\n      status\n    }) => {\n      let props = this.props;\n\n      if ((jobId === null || jobId === void 0 ? void 0 : jobId.length) && (status === null || status === void 0 ? void 0 : status.length)) {\n        // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&activeType=${props?.activeType}`)\n        let urlEncode = `?jobId=${jobId}&status=${status}&activeType=${props === null || props === void 0 ? void 0 : props.activeType}`;\n        this.props.history.push(`/job-detail?${urlEncode}`);\n      } else {\n        // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${'open'}&activeType=${props?.activeType}`)\n        let urlEncode = `?jobId=${jobId}&status=${'open'}&activeType=${props === null || props === void 0 ? void 0 : props.activeType}`;\n        this.props.history.push(`/job-detail?${urlEncode}`);\n      }\n    };\n\n    this.setToggle = () => this.setState({\n      isToggleApplicants: !this.state.isToggleApplicants\n    });\n\n    this.state = {\n      isToggleApplicants: false,\n      quotesData: [],\n      toggleQuoteSort: true\n    };\n  }\n\n  componentDidMount() {// this.preFetchForQuotes();\n  }\n\n  render() {\n    var _props$history, _props$history$locati;\n\n    // props defined & render by params\n    const props = this.props;\n    const params = new URLSearchParams(props === null || props === void 0 ? void 0 : (_props$history = props.history) === null || _props$history === void 0 ? void 0 : (_props$history$locati = _props$history.location) === null || _props$history$locati === void 0 ? void 0 : _props$history$locati.search);\n    const quotes_param = params.get('quotes');\n    const viewQuotesParam = params.get('viewQuotes');\n    const jobId = params.get('jobId');\n    const {\n      setJobLabel,\n      dataItems,\n      applicantsList,\n      jobType,\n      isLoading\n    } = this.props;\n    let listData = dataItems;\n    let {\n      isToggleApplicants,\n      quotesData,\n      toggleQuoteSort\n    } = this.state;\n\n    if (isLoading) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: [jobType.charAt(0).toUpperCase() + jobType.slice(1), \" Jobs\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row tradies_row\",\n        children: (listData === null || listData === void 0 ? void 0 : listData.length) ? listData.map(({\n          amount,\n          durations,\n          jobId,\n          jobName,\n          fromDate,\n          toDate,\n          milestoneNumber,\n          specializationId,\n          specializationName,\n          locationName,\n          status,\n          timeLeft,\n          total,\n          totalmem,\n          totalMilestones,\n          tradieListData,\n          tradeName,\n          quoteCount,\n          quoteJob,\n          tradieId,\n          location,\n          tradeSelectedUrl,\n          tradieImage\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tradie_card\",\n            \"data-aos\": \"fade-in\",\n            \"data-aos-delay\": \"250\",\n            \"data-aos-duration\": \"1000\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => {\n                this.redirectToInfo({\n                  jobId,\n                  status\n                });\n              },\n              className: \"more_detail circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user_wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                className: \"u_img icon\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: tradeSelectedUrl || jobTypePlaceholder,\n                  alt: \"traide-img\",\n                  onError: e => {\n                    var _e$target, _e$target2;\n\n                    if (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.onerror) {\n                      e.target.onerror = null;\n                    }\n\n                    if (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.src) {\n                      e.target.src = jobTypePlaceholder;\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"details\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: tradeName || '0'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"commn_para\",\n                  children: jobName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job_info\",\n              children: quoteJob ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon dollar\",\n                  children: amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon calendar\",\n                  children: renderTime(fromDate, toDate)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: timeLeft\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon dollar\",\n                  children: amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: total\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon calendar\",\n                  children: renderTime(fromDate, toDate)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: timeLeft\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job_progress_wrap\",\n              id: \"scroll-progress-bar\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress_wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"completed-digit\",\n                  id: \"digit-progress\",\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: `Job Milestones ${milestoneNumber} `\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 49\n                  }, this), `of ${totalMilestones}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"approval_info\",\n                  children: [status === \"Approved\" && /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: approved,\n                    alt: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 75\n                  }, this), status]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"progress_bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"done_progress\",\n                    id: \"progress-bar\",\n                    type: \"range\",\n                    min: \"0\",\n                    value: milestoneNumber / totalMilestones * 100\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 41\n              }, this), quoteJob ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  if ((quoteCount === null || quoteCount === void 0 ? void 0 : quoteCount.length) || quoteCount) {\n                    this.props.setJobLabel('listQuote');\n                    this.props.history.replace(`/jobs?active=open&quote=true&jobId=${jobId}`);\n                  }\n                },\n                className: \"fill_grey_btn full_btn btn-effect\",\n                children: `${quoteCount} Quote${quoteCount === 1 ? '' : 's'}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 45\n              }, this) : null, !quoteJob && (tradieId === null || tradieId === void 0 ? void 0 : tradieId.length) ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  this.setToggle();\n                  setJobLabel('applicantList', jobId, 1, specializationId);\n                },\n                className: \"fill_grey_btn full_btn btn-effect\",\n                children: 'Applications'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 45\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }, this)) : !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no_record  m-t-vh\",\n          children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n            className: \"no_img\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: noDataFound,\n              alt: \"data not found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: 'No Data Found'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default OpenJobs;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/openJobs.tsx"],"names":["React","Component","approved","noDataFound","jobTypePlaceholder","renderTime","OpenJobs","constructor","props","redirectToInfo","jobId","status","length","urlEncode","activeType","history","push","setToggle","setState","isToggleApplicants","state","quotesData","toggleQuoteSort","componentDidMount","render","params","URLSearchParams","location","search","quotes_param","get","viewQuotesParam","setJobLabel","dataItems","applicantsList","jobType","isLoading","listData","charAt","toUpperCase","slice","map","amount","durations","jobName","fromDate","toDate","milestoneNumber","specializationId","specializationName","locationName","timeLeft","total","totalmem","totalMilestones","tradieListData","tradeName","quoteCount","quoteJob","tradieId","tradeSelectedUrl","tradieImage","e","target","onerror","src","replace"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport dummy from '../../../assets/images/u_placeholder.jpg';\nimport approved from '../../../assets/images/approved.png';\nimport ApplicantsList from './applicantsList';\nimport { withRouter } from 'react-router-dom'\nimport noDataFound from '../../../assets/images/no-search-data.png';\nimport jobTypePlaceholder from '../../../assets/images/job-type-placeholder.png';\nimport moment from 'moment';\nimport { renderTime } from '../../../utils/common';\nimport ListQuotes from './quoteJobs/ListQuotes';\nimport ViewQuote from './quoteJobs/viewQuote';\n\nimport { quoteByJobId } from '../../../redux/quotes/actions';\n\ninterface Active {\n    amount: any,\n    durations: any,\n    jobId: any,\n    jobName: any,\n    fromDate: any,\n    toDate: any,\n    milestoneNumber: any,\n    specializationId: any,\n    specializationName: any,\n    status: any,\n    timeLeft: any,\n    total: any,\n    totalmem: any,\n    location: any,\n    locationName: any,\n    totalMilestones: any,\n    tradieListData: any,\n    quoteCount: any,\n    quoteJob: any,\n    tradeName: any,\n    tradieId: any,\n    tradeSelectedUrl: any,\n    tradieImage: any,\n}\ninterface State {\n    isToggleApplicants: boolean,\n    quotesData: any,\n    toggleQuoteSort: boolean,\n}\n\ninterface Props {\n    setJobLabel: any,\n    dataItems: any,\n    applicantsList?: any,\n    jobType: any,\n    history?: any,\n    isLoading: any,\n    activeType?: any\n}\n\nclass OpenJobs extends Component<Props, State> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isToggleApplicants: false,\n            quotesData: [],\n            toggleQuoteSort: true\n        }\n    }\n\n    redirectToInfo = ({ jobId, status }: any) => {\n        let props: any = this.props;\n        if (jobId?.length && status?.length) {\n            // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&activeType=${props?.activeType}`)\n            let urlEncode: any = `?jobId=${jobId}&status=${status}&activeType=${props?.activeType}`\n            this.props.history.push(`/job-detail?${urlEncode}`);\n        } else {\n            // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${'open'}&activeType=${props?.activeType}`)\n            let urlEncode: any = `?jobId=${jobId}&status=${'open'}&activeType=${props?.activeType}`\n            this.props.history.push(`/job-detail?${urlEncode}`);\n        }\n    }\n\n    componentDidMount() {\n        // this.preFetchForQuotes();\n    }\n\n    setToggle = () => this.setState({ isToggleApplicants: !this.state.isToggleApplicants });\n\n    render() {\n        // props defined & render by params\n        const props: any = this.props;\n        const params = new URLSearchParams(props?.history?.location?.search);\n        const quotes_param: any = params.get('quotes');\n        const viewQuotesParam: any = params.get('viewQuotes');\n        const jobId: any = params.get('jobId');\n\n        const { setJobLabel, dataItems, applicantsList, jobType, isLoading } = this.props;\n        let listData: any = dataItems\n        let { isToggleApplicants, quotesData, toggleQuoteSort } = this.state;\n\n\n        if (isLoading) {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <span className=\"sub_title\">{jobType.charAt(0).toUpperCase() + jobType.slice(1)} Jobs\n                    {/* {listData?.length} */}\n                </span>\n                <div className=\"flex_row tradies_row\">\n                    {listData?.length ?\n                        listData.map(({\n                            amount,\n                            durations,\n                            jobId,\n                            jobName,\n                            fromDate,\n                            toDate,\n                            milestoneNumber,\n                            specializationId,\n                            specializationName,\n                            locationName,\n                            status,\n                            timeLeft,\n                            total,\n                            totalmem,\n                            totalMilestones,\n                            tradieListData,\n                            tradeName,\n                            quoteCount,\n                            quoteJob,\n                            tradieId,\n                            location,\n                            tradeSelectedUrl,\n                            tradieImage,\n                        }: Active) => (\n                            <div className=\"flex_col_sm_6\">\n                                <div className=\"tradie_card\" data-aos=\"fade-in\" data-aos-delay=\"250\" data-aos-duration=\"1000\">\n                                    <span\n                                        onClick={() => {\n                                            this.redirectToInfo({ jobId, status })\n                                        }}\n                                        className=\"more_detail circle\">\n                                    </span>\n                                    <div className=\"user_wrap\">\n                                        <figure className=\"u_img icon\">\n                                            <img\n                                                src={tradeSelectedUrl || jobTypePlaceholder}\n                                                alt=\"traide-img\"\n                                                onError={(e: any) => {\n                                                    if (e?.target?.onerror) {\n                                                        e.target.onerror = null;\n                                                    }\n                                                    if (e?.target?.src) {\n                                                        e.target.src = jobTypePlaceholder;\n                                                    }\n                                                }}\n                                            />\n                                        </figure>\n                                        <div className=\"details\">\n                                            <span className=\"name\">{tradeName || '0'}</span>\n                                            <p className=\"commn_para\">{jobName}</p>\n                                        </div>\n                                    </div>\n                                    <div className=\"job_info\">\n                                        {quoteJob ? (\n                                            <ul>\n                                                <li className=\"icon dollar\">{amount}</li>\n                                                <li className=\"\">\n                                                </li>\n                                                <li className=\"icon calendar\">\n                                                    {renderTime(fromDate, toDate)}\n                                                </li>\n                                                <li>\n                                                    <span>\n                                                        {timeLeft}\n                                                    </span>\n                                                </li>\n                                            </ul>\n                                        ) : (\n                                            <ul>\n                                                <li className=\"icon dollar\">{amount}</li>\n                                                <li className=\"\">\n                                                    <span>\n                                                        {total}\n                                                    </span>\n                                                </li>\n                                                <li className=\"icon calendar\">\n                                                    {renderTime(fromDate, toDate)}\n                                                </li>\n                                                <li>\n                                                    <span>\n                                                        {timeLeft}\n                                                    </span>\n                                                </li>\n                                            </ul>\n                                        )}\n\n                                    </div>\n                                    <div className=\"job_progress_wrap\" id=\"scroll-progress-bar\">\n                                        <div className=\"progress_wrapper\">\n                                            <span className=\"completed-digit\" id=\"digit-progress\">\n                                                <b>{`Job Milestones ${milestoneNumber} `}</b>{`of ${totalMilestones}`}\n                                            </span>\n                                            <span className=\"approval_info\">\n                                                {status === \"Approved\" && <img src={approved} alt=\"icon\" />}\n                                                {status}\n                                            </span>\n                                            <span className=\"progress_bar\">\n                                                <input\n                                                    className=\"done_progress\"\n                                                    id=\"progress-bar\"\n                                                    type=\"range\"\n                                                    min=\"0\"\n                                                    value={milestoneNumber / totalMilestones * 100}\n                                                />\n                                            </span>\n                                        </div>\n\n                                        {quoteJob ? (\n                                            <button\n                                                onClick={() => {\n                                                    if (quoteCount?.length || quoteCount) {\n                                                        this.props.setJobLabel('listQuote');\n                                                        this.props.history.replace(`/jobs?active=open&quote=true&jobId=${jobId}`)\n                                                    }\n                                                }}\n                                                className=\"fill_grey_btn full_btn btn-effect\">\n                                                {`${quoteCount} Quote${quoteCount === 1 ? '' : 's'}`}\n                                            </button>\n                                        ) : null}\n                                        {!quoteJob && tradieId?.length ? (\n                                            <button\n                                                onClick={() => {\n                                                    this.setToggle();\n                                                    setJobLabel('applicantList', jobId, 1, specializationId);\n                                                }}\n                                                className=\"fill_grey_btn full_btn btn-effect\">\n                                                {'Applications'}\n                                            </button>\n                                        ) : null}\n                                    </div>\n                                </div>\n                            </div>\n                        )) : !isLoading && (\n                            <div className=\"no_record  m-t-vh\">\n                                <figure className=\"no_img\">\n                                    <img src={noDataFound} alt=\"data not found\" />\n                                </figure>\n                                <span>{'No Data Found'}</span>\n                            </div>\n                        )}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default OpenJobs;"]},"metadata":{},"sourceType":"module"}