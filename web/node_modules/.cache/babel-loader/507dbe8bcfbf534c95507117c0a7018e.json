{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/newApplicants.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport { withRouter } from \"react-router\";\nimport newApplicants from \"../../../assets/images/newApplicants.png\";\nimport { renderTime } from \"../../../utils/common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewApplicants = props => {\n  _s();\n\n  const {\n    dataItems,\n    jobType,\n    setJobLabel,\n    isLoading\n  } = props;\n  let listData = dataItems;\n  const [isRender, setRender] = useState(false);\n\n  const redirectToInfo = ({\n    jobId\n  }) => {\n    const props_ = props;\n\n    if (jobId === null || jobId === void 0 ? void 0 : jobId.length) {\n      // let urlEncode: any = window.btoa(`?jobId=${jobId}&activeType=${props_?.activeType || 'applicant'}`)\n      let urlEncode = `?jobId=${jobId}&activeType=${(props_ === null || props_ === void 0 ? void 0 : props_.activeType) || \"applicant\"}`;\n      props_.history.push(`/job-detail?${urlEncode}`);\n    }\n  };\n\n  useEffect(() => {\n    if (isLoading == false) {\n      setRender(true);\n    }\n  }, [isLoading]);\n\n  if (!isRender) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"sub_title\",\n      children: \"New Applicants\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_row tradies_row\",\n      children: (listData === null || listData === void 0 ? void 0 : listData.length) ? listData.map(({\n        amount,\n        builderId,\n        builderImage,\n        durations,\n        fromDate,\n        jobName,\n        jobDescription,\n        jobId,\n        quote,\n        quoteCount,\n        quoteJob,\n        location,\n        location_name,\n        specializationName,\n        specializationId,\n        timeLeft,\n        toDate,\n        total,\n        tradeId,\n        tradieId,\n        tradeName,\n        tradeSelectedUrl\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_col_sm_6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tradie_card\",\n          \"data-aos\": \"fade-in\",\n          \"data-aos-delay\": \"250\",\n          \"data-aos-duration\": \"1000\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => {\n              redirectToInfo({\n                jobId\n              });\n            },\n            className: \"more_detail circle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user_wrap\",\n            children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n              className: \"u_img icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: tradeSelectedUrl || dummy,\n                alt: \"traide-img\",\n                onError: e => {\n                  var _e$target, _e$target2;\n\n                  if (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.onerror) {\n                    e.target.onerror = null;\n                  }\n\n                  if (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.src) {\n                    e.target.src = dummy;\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"details\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"name\",\n                children: tradeName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"commn_para\",\n                children: jobName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"commn_para line-2\",\n            children: jobDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job_info\",\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"icon dollar\",\n                children: amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: total\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"icon calendar\",\n                children: renderTime(fromDate, toDate)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: timeLeft\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this), quoteJob ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if ((quoteCount === null || quoteCount === void 0 ? void 0 : quoteCount.length) || quoteCount) {\n                // setJobLabel('applicantList', jobId, 1, specializationId)\n                // props.history.push(`/jobs?active=open&quotes=true&jobId=${jobId}`);\n                setJobLabel(\"listQuote\");\n                props.history.replace(`/jobs?active=applicant&quote=true&jobId=${jobId}`);\n              }\n            },\n            className: \"fill_grey_btn full_btn btn-effect\",\n            children: `${(quoteCount === null || quoteCount === void 0 ? void 0 : quoteCount.length) || quoteCount} Application${quoteCount === 1 ? \"\" : \"s\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 23\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setJobLabel(\"applicantList\", jobId, 1, specializationId);\n            },\n            className: \"fill_grey_btn full_btn btn-effect\",\n            children: \"Applications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)) : !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no_record  m-t-vh\",\n        children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n          children: /*#__PURE__*/_jsxDEV(\"figure\", {\n            className: \"no_img\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: newApplicants,\n              alt: \"data not found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: \" 20px\",\n            alignItems: \"center\",\n            display: \"inline-block\",\n            lineHeight: \"20px\",\n            fontWeight: \"bold\",\n            color: \"#161D4A\",\n            marginTop: \"20px\",\n            maxWidth: \"200px\",\n            letterSpacing: \"0.5px\"\n          },\n          children: \"You don't have any applicants yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: \" 16px\",\n            alignItems: \"center\",\n            display: \"inline-block\",\n            lineHeight: \"20px\",\n            // fontWeight: \"bold\",\n            color: \"#161D4A\",\n            marginTop: \"20px\",\n            maxWidth: \"300px\",\n            letterSpacing: \"0.5px\"\n          },\n          children: \"As soon as someone will apply for your job post you will be notified\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewApplicants, \"PJVwJCYXHNk7ltefTdCSZAca1eQ=\");\n\n_c = NewApplicants;\nexport default _c2 = withRouter(NewApplicants);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NewApplicants\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/newApplicants.tsx"],"names":["React","useEffect","useState","dummy","withRouter","newApplicants","renderTime","NewApplicants","props","dataItems","jobType","setJobLabel","isLoading","listData","isRender","setRender","redirectToInfo","jobId","props_","length","urlEncode","activeType","history","push","map","amount","builderId","builderImage","durations","fromDate","jobName","jobDescription","quote","quoteCount","quoteJob","location","location_name","specializationName","specializationId","timeLeft","toDate","total","tradeId","tradieId","tradeName","tradeSelectedUrl","e","target","onerror","src","replace","fontSize","alignItems","display","lineHeight","fontWeight","color","marginTop","maxWidth","letterSpacing"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport approved from \"../../../assets/images/approved.png\";\nimport { withRouter } from \"react-router\";\nimport newApplicants from \"../../../assets/images/newApplicants.png\";\nimport noData from \"../../../assets/images/no-search-data.png\";\nimport moment from \"moment\";\nimport { renderTime } from \"../../../utils/common\";\ninterface Applicant {\n  amount: any;\n  builderId: any;\n  builderImage: any;\n  durations: any;\n  fromDate: any;\n  jobName: any;\n  jobDescription: any;\n  jobId: any;\n  quote: any;\n  quoteCount: any;\n  quoteJob: any;\n  specializationName: any;\n  timeLeft: any;\n  toDate: any;\n  total: any;\n  tradeId: any;\n  location: any;\n  location_name: any;\n  specializationId: any;\n  tradeName: any;\n  tradieId: any;\n  isLoading?: any;\n  tradeSelectedUrl: any;\n  activeType?: any;\n}\n\nconst NewApplicants = (props: any) => {\n  const { dataItems, jobType, setJobLabel, isLoading } = props;\n  let listData: any = dataItems;\n\n  const [isRender, setRender] = useState(false);\n\n  const redirectToInfo = ({ jobId }: any) => {\n    const props_: any = props;\n    if (jobId?.length) {\n      // let urlEncode: any = window.btoa(`?jobId=${jobId}&activeType=${props_?.activeType || 'applicant'}`)\n      let urlEncode: any = `?jobId=${jobId}&activeType=${\n        props_?.activeType || \"applicant\"\n      }`;\n      props_.history.push(`/job-detail?${urlEncode}`);\n    }\n  };\n\n  useEffect(() => {\n    if (isLoading == false) {\n      setRender(true);\n    }\n  }, [isLoading]);\n\n  if (!isRender) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      <span className=\"sub_title\">New Applicants</span>\n      <div className=\"flex_row tradies_row\">\n        {listData?.length\n          ? listData.map(\n              ({\n                amount,\n                builderId,\n                builderImage,\n                durations,\n                fromDate,\n                jobName,\n                jobDescription,\n                jobId,\n                quote,\n                quoteCount,\n                quoteJob,\n                location,\n                location_name,\n                specializationName,\n                specializationId,\n                timeLeft,\n                toDate,\n                total,\n                tradeId,\n                tradieId,\n                tradeName,\n                tradeSelectedUrl,\n              }: Applicant) => (\n                <div className=\"flex_col_sm_6\">\n                  <div\n                    className=\"tradie_card\"\n                    data-aos=\"fade-in\"\n                    data-aos-delay=\"250\"\n                    data-aos-duration=\"1000\"\n                  >\n                    <span\n                      onClick={() => {\n                        redirectToInfo({ jobId });\n                      }}\n                      className=\"more_detail circle\"\n                    ></span>\n                    <div className=\"user_wrap\">\n                      <figure className=\"u_img icon\">\n                        <img\n                          src={tradeSelectedUrl || dummy}\n                          alt=\"traide-img\"\n                          onError={(e: any) => {\n                            if (e?.target?.onerror) {\n                              e.target.onerror = null;\n                            }\n                            if (e?.target?.src) {\n                              e.target.src = dummy;\n                            }\n                          }}\n                        />\n                      </figure>\n                      <div className=\"details\">\n                        <span className=\"name\">{tradeName}</span>\n                        <p className=\"commn_para\">{jobName}</p>\n                      </div>\n                    </div>\n                    <p className=\"commn_para line-2\">{jobDescription}</p>\n                    <div className=\"job_info\">\n                      <ul>\n                        <li className=\"icon dollar\">{amount}</li>\n                        <li className=\"\">\n                          <span>{total}</span>\n                        </li>\n                        <li className=\"icon calendar\">\n                          {renderTime(fromDate, toDate)}\n                        </li>\n                        <li className=\"\">\n                          <span>{timeLeft}</span>\n                        </li>\n                      </ul>\n                    </div>\n\n                    {quoteJob ? (\n                      <button\n                        onClick={() => {\n                          if (quoteCount?.length || quoteCount) {\n                            // setJobLabel('applicantList', jobId, 1, specializationId)\n                            // props.history.push(`/jobs?active=open&quotes=true&jobId=${jobId}`);\n                            setJobLabel(\"listQuote\");\n                            props.history.replace(\n                              `/jobs?active=applicant&quote=true&jobId=${jobId}`\n                            );\n                          }\n                        }}\n                        className=\"fill_grey_btn full_btn btn-effect\"\n                      >\n                        {`${quoteCount?.length || quoteCount} Application${\n                          quoteCount === 1 ? \"\" : \"s\"\n                        }`}\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => {\n                          setJobLabel(\n                            \"applicantList\",\n                            jobId,\n                            1,\n                            specializationId\n                          );\n                        }}\n                        className=\"fill_grey_btn full_btn btn-effect\"\n                      >\n                        {\"Applications\"}\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )\n            )\n          : !isLoading && (\n              <div className=\"no_record  m-t-vh\">\n                <figure>\n                  <figure className=\"no_img\">\n                    <img src={newApplicants} alt=\"data not found\" />\n                  </figure>\n                </figure>\n                <span\n                  style={{\n                    fontSize: \" 20px\",\n                    alignItems: \"center\",\n                    display: \"inline-block\",\n                    lineHeight: \"20px\",\n                    fontWeight: \"bold\",\n                    color: \"#161D4A\",\n                    marginTop: \"20px\",\n                    maxWidth: \"200px\",\n                    letterSpacing: \"0.5px\",\n                  }}\n                >\n                  You don't have any applicants yet\n                </span>\n                <span\n                  style={{\n                    fontSize: \" 16px\",\n                    alignItems: \"center\",\n                    display: \"inline-block\",\n                    lineHeight: \"20px\",\n                    // fontWeight: \"bold\",\n                    color: \"#161D4A\",\n                    marginTop: \"20px\",\n                    maxWidth: \"300px\",\n                    letterSpacing: \"0.5px\",\n                  }}\n                >\n                  As soon as someone will apply for your job post you will be\n                  notified\n                </span>\n              </div>\n            )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(NewApplicants);\n"]},"metadata":{},"sourceType":"module"}