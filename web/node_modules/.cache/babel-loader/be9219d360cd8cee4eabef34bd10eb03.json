{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport Routes from \"./routes\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./redux/rootReducer\";\nimport rootSaga from \"./redux/rootSaga\";\nimport Loader from \"./common/loader\";\nimport Toast from \"./common/toast\";\nimport { useEffect } from \"react\";\nimport { useClearCache } from \"react-clear-cache\";\nimport AOS from \"aos\";\nimport \"aos/dist/aos.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleware = createSagaMiddleware(); // mount it on the Store\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware))); //run the saga\n\nsagaMiddleware.run(rootSaga);\n\nconst App = () => {\n  _s();\n\n  const {\n    isLatestVersion,\n    emptyCacheStorage\n  } = useClearCache();\n  useEffect(() => {\n    AOS.init({\n      duration: 2000\n    });\n\n    if (!isLatestVersion) {\n      emptyCacheStorage();\n    }\n  }, []);\n  useEffect(() => {\n    if (!isLatestVersion) {\n      emptyCacheStorage();\n    }\n  }, [isLatestVersion]);\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: [/*#__PURE__*/_jsxDEV(Routes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"rMBKmGYTb9KUov+0Fxi40z1Nx5Q=\", false, function () {\n  return [useClearCache];\n});\n\n_c = App;\nexport { store };\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/App.tsx"],"names":["Routes","Provider","createStore","applyMiddleware","compose","createSagaMiddleware","rootReducer","rootSaga","Loader","Toast","useEffect","useClearCache","AOS","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleware","store","run","App","isLatestVersion","emptyCacheStorage","init","duration"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAO,kBAAP;;AAQA,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CX,OAAxE;AAEA,MAAMY,cAAc,GAAGX,oBAAoB,EAA3C,C,CAEA;;AACA,MAAMY,KAAK,GAAGf,WAAW,CACvBI,WADuB,EAEvBO,gBAAgB,CAACV,eAAe,CAACa,cAAD,CAAhB,CAFO,CAAzB,C,CAKA;;AACAA,cAAc,CAACE,GAAf,CAAmBX,QAAnB;;AAEA,MAAMY,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAyCV,aAAa,EAA5D;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,GAAG,CAACU,IAAJ,CAAS;AACPC,MAAAA,QAAQ,EAAE;AADH,KAAT;;AAIA,QAAI,CAACH,eAAL,EAAsB;AACpBC,MAAAA,iBAAiB;AAClB;AACF,GARQ,EAQN,EARM,CAAT;AAUAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,eAAL,EAAsB;AACpBC,MAAAA,iBAAiB;AAClB;AACF,GAJQ,EAIN,CAACD,eAAD,CAJM,CAAT;AAMA,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,KAAjB;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA1BD;;GAAME,G;UAC2CR,a;;;KAD3CQ,G;AA4BN,SAASF,KAAT;AACA,eAAeE,GAAf","sourcesContent":["import Routes from \"./routes\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootReducer from \"./redux/rootReducer\";\nimport rootSaga from \"./redux/rootSaga\";\nimport Loader from \"./common/loader\";\nimport Toast from \"./common/toast\";\n\nimport { useEffect } from \"react\";\nimport { useClearCache } from \"react-clear-cache\";\n\nimport AOS from \"aos\";\nimport \"aos/dist/aos.css\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// mount it on the Store\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\n//run the saga\nsagaMiddleware.run(rootSaga);\n\nconst App = () => {\n  const { isLatestVersion, emptyCacheStorage } = useClearCache();\n\n  useEffect(() => {\n    AOS.init({\n      duration: 2000,\n    });\n\n    if (!isLatestVersion) {\n      emptyCacheStorage();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isLatestVersion) {\n      emptyCacheStorage();\n    }\n  }, [isLatestVersion]);\n\n  return (\n    <Provider store={store}>\n      <Routes />\n      <Loader />\n      <Toast />\n    </Provider>\n  );\n};\n\nexport { store };\nexport default App;\n"]},"metadata":{},"sourceType":"module"}