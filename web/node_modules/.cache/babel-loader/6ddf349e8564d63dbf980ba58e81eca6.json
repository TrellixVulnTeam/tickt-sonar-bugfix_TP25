{"ast":null,"code":"import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport NetworkOps from \"../../network/NetworkOps\";\nimport Urls from \"../../network/Urls\";\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading } from '../common/actions';\nimport * as selectors from './selectors';\n\nfunction* setHomeBuilder(action) {\n  const {\n    data\n  } = action;\n  let url = `${Urls.home}?lat=${data.lat}&long=${data.long}`;\n  const response = yield NetworkOps.get(url);\n  console.log({\n    response\n  }, '---------------!!!!!!!!');\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.SET_FETCH_HOME_BUILDER,\n      payload: response.result\n    });\n  } else {\n    yield put({\n      type: actionTypes.SET_FETCH_HOME_BUILDER,\n      payload: null\n    });\n  }\n}\n\nfunction* setLocalChanges(action) {\n  yield put({\n    type: actionTypes.SET_LOCAL_CHANGES,\n    payload: action\n  });\n}\n\nfunction* getActiveJobList({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.activeJobList}?page=${page}`);\n\n  if (page === 1) {\n    setLoading(false);\n  }\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.GET_ACTIVE_JOBS_END,\n      payload: response.result\n    });\n  } else {\n    yield put({\n      type: actionTypes.GET_ACTIVE_JOBS_END,\n      payload: {\n        active: []\n      }\n    });\n  }\n}\n\nfunction* getAppliedJobList({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.appliedJobList}?page=${page}`);\n\n  if (page === 1) {\n    setLoading(false);\n  }\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.GET_APPLIED_JOBS_END,\n      payload: response.result\n    });\n  } else {\n    yield put({\n      type: actionTypes.GET_APPLIED_JOBS_END,\n      payload: {\n        applied: []\n      }\n    });\n  }\n}\n\nfunction* getPastJobList({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.pastJobList}?page=${page}`);\n\n  if (page === 1) {\n    setLoading(false);\n  }\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.GET_PAST_JOBS_END,\n      payload: response.result\n    });\n  } else {\n    yield put({\n      type: actionTypes.GET_PAST_JOBS_END,\n      payload: {\n        completed: []\n      }\n    });\n  }\n}\n\nfunction* resetActiveJobList() {\n  const milestonesCount = yield select(selectors.milestonesCount);\n  const newJobsCount = yield select(selectors.newJobsCount);\n  yield put({\n    type: actionTypes.GET_ACTIVE_JOBS_END,\n    payload: {\n      active: null,\n      milestonesCount: milestonesCount,\n      newJobsCount: newJobsCount\n    }\n  });\n}\n\nfunction* resetAppliedJobList() {\n  const milestonesCount = yield select(selectors.milestonesCount);\n  const newJobsCount = yield select(selectors.newJobsCount);\n  yield put({\n    type: actionTypes.GET_APPLIED_JOBS_END,\n    payload: {\n      applied: null,\n      milestonesCount: milestonesCount,\n      newJobsCount: newJobsCount\n    }\n  });\n}\n\nfunction* resetPastJobList() {\n  const milestonesCount = yield select(selectors.milestonesCount);\n  const newJobsCount = yield select(selectors.newJobsCount);\n  yield put({\n    type: actionTypes.GET_PAST_JOBS_END,\n    payload: {\n      completed: null,\n      milestonesCount: milestonesCount,\n      newJobsCount: newJobsCount\n    }\n  });\n}\n\nfunction* resetNewJobList() {\n  yield put({\n    type: actionTypes.GET_NEW_JOBS_END,\n    payload: null\n  });\n}\n\nfunction* resetApprovedMilestoneList() {\n  yield put({\n    type: actionTypes.GET_APPROVED_MILESTONE_END,\n    payload: null\n  });\n}\n\nfunction* getNewJobList({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.newJobList}?page=${page}`);\n\n  if (page === 1) {\n    setLoading(false);\n  }\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.GET_NEW_JOBS_END,\n      payload: response.result\n    });\n  } else {\n    yield put({\n      type: actionTypes.GET_NEW_JOBS_END,\n      payload: []\n    });\n  }\n}\n\nfunction* getApprovedMilestoneList({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.approvedMilestoneList}?page=${page}`);\n\n  if (page === 1) {\n    setLoading(false);\n  }\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.GET_APPROVED_MILESTONE_END,\n      payload: response.result\n    });\n  } else {\n    yield put({\n      type: actionTypes.GET_APPROVED_MILESTONE_END,\n      payload: []\n    });\n  }\n} // milestoneList\n\n\nfunction* getMilestoneList({\n  jobId\n}) {\n  yield put({\n    type: actionTypes.GET_MILESTONES_END,\n    payload: {}\n  });\n  setLoading(true);\n  const response = yield NetworkOps.get(`${Urls.milestoneList}?jobId=${jobId}`);\n  setLoading(false);\n  console.log({\n    response\n  });\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.GET_MILESTONES_END,\n      payload: response.result\n    });\n  } else {\n    yield put({\n      type: actionTypes.GET_MILESTONES_END,\n      payload: [{\n        sucess: false,\n        status: response.status_code\n      }]\n    });\n    return;\n  }\n} // milestoneList\n\n\nfunction* markMilestoneComplete({\n  data,\n  callback\n}) {\n  setLoading(true);\n  const response = yield NetworkOps.postToJson(Urls.markComplete, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    if (callback) {\n      var _response$result;\n\n      yield call(callback, (_response$result = response.result) === null || _response$result === void 0 ? void 0 : _response$result.jobCompletedCount);\n    }\n\n    return;\n  }\n\n  setShowToast(true, response.message);\n}\n\nfunction* getActiveJobsBuilder({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.activeJobListBuilder}?page=${page}`);\n\n  if (response.status_code === 200) {\n    var _response$result2, _response$result3, _response$result4, _response$result4$act;\n\n    if ((response === null || response === void 0 ? void 0 : (_response$result2 = response.result) === null || _response$result2 === void 0 ? void 0 : _response$result2.active) && Array.isArray(response === null || response === void 0 ? void 0 : (_response$result3 = response.result) === null || _response$result3 === void 0 ? void 0 : _response$result3.active) && (response === null || response === void 0 ? void 0 : (_response$result4 = response.result) === null || _response$result4 === void 0 ? void 0 : (_response$result4$act = _response$result4.active) === null || _response$result4$act === void 0 ? void 0 : _response$result4$act.length)) {\n      response.result.active[0]['page'] = page;\n      response.result.active[0]['mathrandom'] = Math.random();\n    }\n\n    if (page === 1) {\n      setLoading(false);\n    }\n\n    yield put({\n      type: actionTypes.SET_BUILDER_ACTIVE_JOBS,\n      payload: response.result\n    });\n    return;\n  }\n\n  if (page === 1) {\n    setLoading(false);\n  }\n}\n\nfunction* getPastJobsBuilder({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.pastJobListBuilder}?page=${page}`);\n\n  if (response.status_code === 200) {\n    var _response$result5, _response$result6, _response$result7, _response$result7$pas;\n\n    if ((response === null || response === void 0 ? void 0 : (_response$result5 = response.result) === null || _response$result5 === void 0 ? void 0 : _response$result5.past) && Array.isArray(response === null || response === void 0 ? void 0 : (_response$result6 = response.result) === null || _response$result6 === void 0 ? void 0 : _response$result6.past) && (response === null || response === void 0 ? void 0 : (_response$result7 = response.result) === null || _response$result7 === void 0 ? void 0 : (_response$result7$pas = _response$result7.past) === null || _response$result7$pas === void 0 ? void 0 : _response$result7$pas.length)) {\n      response.result.past[0]['page'] = page;\n    }\n\n    if (page === 1) {\n      setLoading(false);\n    }\n\n    yield put({\n      type: actionTypes.SET_BUILDER_PAST_JOBS,\n      payload: response.result\n    });\n    return;\n  }\n\n  if (page === 1) {\n    setLoading(false);\n  }\n}\n\nfunction* getOpenJobsBuilder({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.OpenJobLisBuilder}?page=${page}`);\n\n  if (response.status_code === 200) {\n    var _response$result8, _response$result9, _response$result10, _response$result10$op;\n\n    if ((response === null || response === void 0 ? void 0 : (_response$result8 = response.result) === null || _response$result8 === void 0 ? void 0 : _response$result8.open) && Array.isArray(response === null || response === void 0 ? void 0 : (_response$result9 = response.result) === null || _response$result9 === void 0 ? void 0 : _response$result9.open) && (response === null || response === void 0 ? void 0 : (_response$result10 = response.result) === null || _response$result10 === void 0 ? void 0 : (_response$result10$op = _response$result10.open) === null || _response$result10$op === void 0 ? void 0 : _response$result10$op.length)) {\n      response.result.open[0]['page'] = page;\n      response.result.open[0]['mathrandom'] = Math.random();\n    }\n\n    if (page === 1) {\n      setLoading(false);\n    }\n\n    yield put({\n      type: actionTypes.SET_BUILDER_OPEN_JOBS,\n      payload: response.result\n    });\n    return;\n  }\n\n  if (page === 1) {\n    setLoading(false);\n  }\n}\n\nfunction* getBuilderNewApplicants({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.newApplicantsBuilder}?page=${page}`);\n\n  if (response.status_code === 200) {\n    var _response$result11;\n\n    if ((response === null || response === void 0 ? void 0 : response.result) && Array.isArray(response === null || response === void 0 ? void 0 : response.result) && (response === null || response === void 0 ? void 0 : (_response$result11 = response.result) === null || _response$result11 === void 0 ? void 0 : _response$result11.length)) {\n      response.result[0]['page'] = page;\n    }\n\n    if (page === 1) {\n      setLoading(false);\n    }\n\n    yield put({\n      type: actionTypes.SET_BUILDER_NEW_APPLICANTS,\n      payload: response.result\n    });\n    return;\n  }\n\n  if (page === 1) {\n    setLoading(false);\n  }\n}\n\nfunction* getnewJobApplicationListBuilder({\n  item\n}) {\n  setLoading(true);\n  const response = yield NetworkOps.postToJson(Urls.newJobApplicationListBuilder, item); // const response: FetchResponse = yield NetworkOps.get(`${Urls.newJobApplicationListBuilder}?page=${page}`);\n\n  if (response.status_code === 200) {\n    setLoading(false);\n    yield put({\n      type: actionTypes.SET_BUILDER_NEW_APPLICANTS_LIST,\n      payload: response.result\n    });\n    return;\n  }\n\n  setLoading(false);\n} // function* getTradieReviewList({ data }: any) {\n//   const response: FetchResponse = yield NetworkOps.get(Urls.tradieReviewList + `?builderId=${data.builderId}&page=${data.page}`);\n//   console.log(response.result, \"response.result\")\n//   if (response.status_code === 200) {\n//     yield put({ type: actionTypes.SET_TRADIE_REVIEW_LIST, payload: response.result });\n//   } else {\n//     yield put({ type: actionTypes.SET_TRADIE_REVIEW_LIST, payload: [] });\n//   }\n// }\n\n\nfunction* getTradieReviewListOnBuilder({\n  data\n}) {\n  const response = yield NetworkOps.get(Urls.reviewList + `?tradieId=${data.tradieId}&page=${data.page}`);\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.SET_TRADIE_REVIEWS_LIST_ON_BUILDER,\n      payload: response.result\n    });\n  } else {\n    yield put({\n      type: actionTypes.SET_TRADIE_REVIEWS_LIST_ON_BUILDER,\n      payload: []\n    });\n  }\n}\n\nfunction* getAcceptDeclineTradie({\n  data\n}) {\n  const response = yield NetworkOps.putToJson(Urls.acceptDeclineRequest, data);\n  setShowToast(true, response.message);\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.SET_ACCEPT_DECLINE_TRADIE_REQUEST,\n      payload: true\n    });\n  } else {\n    yield put({\n      type: actionTypes.SET_ACCEPT_DECLINE_TRADIE_REQUEST,\n      payload: false\n    });\n  }\n}\n\nfunction* getNewApprovalList({\n  page\n}) {\n  if (page === 1) {\n    setLoading(true);\n  }\n\n  const response = yield NetworkOps.get(`${Urls.needApproval}?page=${page}`);\n\n  if (response.status_code === 200) {\n    var _response$result12;\n\n    if ((response === null || response === void 0 ? void 0 : response.result) && Array.isArray(response === null || response === void 0 ? void 0 : response.result) && (response === null || response === void 0 ? void 0 : (_response$result12 = response.result) === null || _response$result12 === void 0 ? void 0 : _response$result12.length)) {\n      response.result[0]['page'] = page;\n    }\n\n    if (page === 1) {\n      setLoading(false);\n    }\n\n    yield put({\n      type: actionTypes.SET_BUILDER_NEW_APPROVAL_LIST,\n      payload: response.result\n    });\n  } else {\n    if (page === 1) {\n      setLoading(false);\n    }\n\n    yield put({\n      type: actionTypes.SET_BUILDER_NEW_APPROVAL_LIST,\n      payload: false\n    });\n  }\n}\n\nfunction* getClearJobs() {\n  yield put({\n    type: actionTypes.SET_CLEAR_JOBS,\n    payload: true\n  });\n}\n\nfunction* postJobWatcher() {\n  try {\n    yield takeLatest(actionTypes.FETCH_HOME_BUILDER, setHomeBuilder);\n    yield takeLatest(actionTypes.GET_LOCAL_CHANGES, setLocalChanges);\n    yield takeLatest(actionTypes.GET_ACTIVE_JOBS_START, getActiveJobList);\n    yield takeLatest(actionTypes.GET_APPLIED_JOBS_START, getAppliedJobList);\n    yield takeLatest(actionTypes.GET_PAST_JOBS_START, getPastJobList);\n    yield takeLatest(actionTypes.GET_NEW_JOBS_START, getNewJobList);\n    yield takeLatest(actionTypes.GET_APPROVED_MILESTONE_START, getApprovedMilestoneList);\n    yield takeLatest(actionTypes.GET_MILESTONES_START, getMilestoneList);\n    yield takeLatest(actionTypes.MARK_MILESTONE_COMPLETE, markMilestoneComplete);\n    yield takeLatest(actionTypes.RESET_PAST_JOBS_START, resetPastJobList);\n    yield takeLatest(actionTypes.RESET_ACTIVE_JOBS_START, resetActiveJobList);\n    yield takeLatest(actionTypes.RESET_APPLIED_JOBS_START, resetAppliedJobList);\n    yield takeLatest(actionTypes.RESET_NEW_JOBS_START, resetNewJobList);\n    yield takeLatest(actionTypes.RESET_APPROVED_MILESTONE_START, resetApprovedMilestoneList);\n    yield takeLatest(actionTypes.GET_BUILDER_ACTIVE_JOBS, getActiveJobsBuilder);\n    yield takeLatest(actionTypes.GET_BUILDER_PAST_JOBS, getPastJobsBuilder);\n    yield takeLatest(actionTypes.GET_BUILDER_OPEN_JOBS, getOpenJobsBuilder);\n    yield takeLatest(actionTypes.GET_BUILDER_NEW_APPLICANTS, getBuilderNewApplicants);\n    yield takeLatest(actionTypes.GET_BUILDER_NEW_APPLICANTS_LIST, getnewJobApplicationListBuilder);\n    yield takeLatest(actionTypes.GET_TRADIE_REVIEWS_LIST_ON_BUILDER, getTradieReviewListOnBuilder);\n    yield takeLatest(actionTypes.GET_ACCEPT_DECLINE_TRADIE_REQUEST, getAcceptDeclineTradie);\n    yield takeLatest(actionTypes.GET_BUILDER_NEW_APPROVAL_LIST, getNewApprovalList);\n    yield takeLatest(actionTypes.GET_CLEAR_JOBS, getClearJobs);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport default postJobWatcher;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/redux/jobs/sagas.ts"],"names":["call","put","takeLatest","select","NetworkOps","Urls","actionTypes","setShowToast","setLoading","selectors","setHomeBuilder","action","data","url","home","lat","long","response","get","console","log","status_code","type","SET_FETCH_HOME_BUILDER","payload","result","setLocalChanges","SET_LOCAL_CHANGES","getActiveJobList","page","activeJobList","GET_ACTIVE_JOBS_END","active","getAppliedJobList","appliedJobList","GET_APPLIED_JOBS_END","applied","getPastJobList","pastJobList","GET_PAST_JOBS_END","completed","resetActiveJobList","milestonesCount","newJobsCount","resetAppliedJobList","resetPastJobList","resetNewJobList","GET_NEW_JOBS_END","resetApprovedMilestoneList","GET_APPROVED_MILESTONE_END","getNewJobList","newJobList","getApprovedMilestoneList","approvedMilestoneList","getMilestoneList","jobId","GET_MILESTONES_END","milestoneList","sucess","status","markMilestoneComplete","callback","postToJson","markComplete","jobCompletedCount","message","getActiveJobsBuilder","activeJobListBuilder","Array","isArray","length","Math","random","SET_BUILDER_ACTIVE_JOBS","getPastJobsBuilder","pastJobListBuilder","past","SET_BUILDER_PAST_JOBS","getOpenJobsBuilder","OpenJobLisBuilder","open","SET_BUILDER_OPEN_JOBS","getBuilderNewApplicants","newApplicantsBuilder","SET_BUILDER_NEW_APPLICANTS","getnewJobApplicationListBuilder","item","newJobApplicationListBuilder","SET_BUILDER_NEW_APPLICANTS_LIST","getTradieReviewListOnBuilder","reviewList","tradieId","SET_TRADIE_REVIEWS_LIST_ON_BUILDER","getAcceptDeclineTradie","putToJson","acceptDeclineRequest","SET_ACCEPT_DECLINE_TRADIE_REQUEST","getNewApprovalList","needApproval","SET_BUILDER_NEW_APPROVAL_LIST","getClearJobs","SET_CLEAR_JOBS","postJobWatcher","FETCH_HOME_BUILDER","GET_LOCAL_CHANGES","GET_ACTIVE_JOBS_START","GET_APPLIED_JOBS_START","GET_PAST_JOBS_START","GET_NEW_JOBS_START","GET_APPROVED_MILESTONE_START","GET_MILESTONES_START","MARK_MILESTONE_COMPLETE","RESET_PAST_JOBS_START","RESET_ACTIVE_JOBS_START","RESET_APPLIED_JOBS_START","RESET_NEW_JOBS_START","RESET_APPROVED_MILESTONE_START","GET_BUILDER_ACTIVE_JOBS","GET_BUILDER_PAST_JOBS","GET_BUILDER_OPEN_JOBS","GET_BUILDER_NEW_APPLICANTS","GET_BUILDER_NEW_APPLICANTS_LIST","GET_TRADIE_REVIEWS_LIST_ON_BUILDER","GET_ACCEPT_DECLINE_TRADIE_REQUEST","GET_BUILDER_NEW_APPROVAL_LIST","GET_CLEAR_JOBS","e"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,MAAhC,QAA8C,oBAA9C;AACA,OAAOC,UAAP,MAA0C,0BAA1C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAO,KAAKC,WAAZ,MAA6B,aAA7B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,mBAAzC;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;;AAEA,UAAUC,cAAV,CAAyBC,MAAzB,EAAsC;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAWD,MAAjB;AACA,MAAIE,GAAG,GAAI,GAAER,IAAI,CAACS,IAAK,QAAOF,IAAI,CAACG,GAAI,SAAQH,IAAI,CAACI,IAAK,EAAzD;AACA,QAAMC,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAeL,GAAf,CAAtC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ,EAA0B,yBAA1B;;AACA,MAAIA,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACiB,sBAApB;AAA4CC,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAA9D,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMxB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACiB,sBAApB;AAA4CC,MAAAA,OAAO,EAAE;AAArD,KAAD,CAAT;AACD;AACF;;AAED,UAAUE,eAAV,CAA0Bf,MAA1B,EAAuC;AACrC,QAAMV,GAAG,CAAC;AAAEqB,IAAAA,IAAI,EAAEhB,WAAW,CAACqB,iBAApB;AAAuCH,IAAAA,OAAO,EAAEb;AAAhD,GAAD,CAAT;AACD;;AAED,UAAUiB,gBAAV,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAA0C;AACxC,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CACnC,GAAEb,IAAI,CAACyB,aAAc,SAAQD,IAAK,EADC,CAAtC;;AAGA,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,MAAIS,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACyB,mBAApB;AAAyCP,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAA3D,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMxB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACyB,mBAApB;AAAyCP,MAAAA,OAAO,EAAE;AAAEQ,QAAAA,MAAM,EAAE;AAAV;AAAlD,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,iBAAV,CAA4B;AAAEJ,EAAAA;AAAF,CAA5B,EAA2C;AACzC,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CACnC,GAAEb,IAAI,CAAC6B,cAAe,SAAQL,IAAK,EADA,CAAtC;;AAGA,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,MAAIS,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC6B,oBAApB;AAA0CX,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAA5D,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMxB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC6B,oBAApB;AAA0CX,MAAAA,OAAO,EAAE;AAAEY,QAAAA,OAAO,EAAE;AAAX;AAAnD,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,cAAV,CAAyB;AAAER,EAAAA;AAAF,CAAzB,EAAwC;AACtC,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CACnC,GAAEb,IAAI,CAACiC,WAAY,SAAQT,IAAK,EADG,CAAtC;;AAGA,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,MAAIS,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACiC,iBAApB;AAAuCf,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAAzD,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMxB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACiC,iBAApB;AAAuCf,MAAAA,OAAO,EAAE;AAAEgB,QAAAA,SAAS,EAAE;AAAb;AAAhD,KAAD,CAAT;AACD;AACF;;AAGD,UAAUC,kBAAV,GAA+B;AAC7B,QAAMC,eAAwC,GAAG,MAAMvC,MAAM,CAACM,SAAS,CAACiC,eAAX,CAA7D;AACA,QAAMC,YAAqC,GAAG,MAAMxC,MAAM,CAACM,SAAS,CAACkC,YAAX,CAA1D;AACA,QAAM1C,GAAG,CAAC;AAAEqB,IAAAA,IAAI,EAAEhB,WAAW,CAACyB,mBAApB;AAAyCP,IAAAA,OAAO,EAAE;AAAEQ,MAAAA,MAAM,EAAE,IAAV;AAAgBU,MAAAA,eAAe,EAAEA,eAAjC;AAAkDC,MAAAA,YAAY,EAAEA;AAAhE;AAAlD,GAAD,CAAT;AACD;;AAED,UAAUC,mBAAV,GAAgC;AAC9B,QAAMF,eAAwC,GAAG,MAAMvC,MAAM,CAACM,SAAS,CAACiC,eAAX,CAA7D;AACA,QAAMC,YAAqC,GAAG,MAAMxC,MAAM,CAACM,SAAS,CAACkC,YAAX,CAA1D;AACA,QAAM1C,GAAG,CAAC;AAAEqB,IAAAA,IAAI,EAAEhB,WAAW,CAAC6B,oBAApB;AAA0CX,IAAAA,OAAO,EAAE;AAAEY,MAAAA,OAAO,EAAE,IAAX;AAAiBM,MAAAA,eAAe,EAAEA,eAAlC;AAAmDC,MAAAA,YAAY,EAAEA;AAAjE;AAAnD,GAAD,CAAT;AACD;;AAED,UAAUE,gBAAV,GAA6B;AAC3B,QAAMH,eAAwC,GAAG,MAAMvC,MAAM,CAACM,SAAS,CAACiC,eAAX,CAA7D;AACA,QAAMC,YAAqC,GAAG,MAAMxC,MAAM,CAACM,SAAS,CAACkC,YAAX,CAA1D;AACA,QAAM1C,GAAG,CAAC;AAAEqB,IAAAA,IAAI,EAAEhB,WAAW,CAACiC,iBAApB;AAAuCf,IAAAA,OAAO,EAAE;AAAEgB,MAAAA,SAAS,EAAE,IAAb;AAAmBE,MAAAA,eAAe,EAAEA,eAApC;AAAqDC,MAAAA,YAAY,EAAEA;AAAnE;AAAhD,GAAD,CAAT;AACD;;AAED,UAAUG,eAAV,GAA4B;AAC1B,QAAM7C,GAAG,CAAC;AAAEqB,IAAAA,IAAI,EAAEhB,WAAW,CAACyC,gBAApB;AAAsCvB,IAAAA,OAAO,EAAE;AAA/C,GAAD,CAAT;AACD;;AAED,UAAUwB,0BAAV,GAAuC;AACrC,QAAM/C,GAAG,CAAC;AAAEqB,IAAAA,IAAI,EAAEhB,WAAW,CAAC2C,0BAApB;AAAgDzB,IAAAA,OAAO,EAAE;AAAzD,GAAD,CAAT;AACD;;AAED,UAAU0B,aAAV,CAAwB;AAAErB,EAAAA;AAAF,CAAxB,EAAuC;AACrC,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CACnC,GAAEb,IAAI,CAAC8C,UAAW,SAAQtB,IAAK,EADI,CAAtC;;AAGA,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,MAAIS,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACyC,gBAApB;AAAsCvB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAAxD,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMxB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACyC,gBAApB;AAAsCvB,MAAAA,OAAO,EAAE;AAA/C,KAAD,CAAT;AACD;AACF;;AAED,UAAU4B,wBAAV,CAAmC;AAAEvB,EAAAA;AAAF,CAAnC,EAAkD;AAChD,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CACnC,GAAEb,IAAI,CAACgD,qBAAsB,SAAQxB,IAAK,EADP,CAAtC;;AAGA,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,MAAIS,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC2C,0BAApB;AAAgDzB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAAlE,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMxB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC2C,0BAApB;AAAgDzB,MAAAA,OAAO,EAAE;AAAzD,KAAD,CAAT;AACD;AACF,C,CAED;;;AACA,UAAU8B,gBAAV,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAA2C;AACzC,QAAMtD,GAAG,CAAC;AAAEqB,IAAAA,IAAI,EAAEhB,WAAW,CAACkD,kBAApB;AAAwChC,IAAAA,OAAO,EAAE;AAAjD,GAAD,CAAT;AACAhB,EAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAgB,GAAEb,IAAI,CAACoD,aAAc,UAASF,KAAM,EAApD,CAAtC;AACA/C,EAAAA,UAAU,CAAC,KAAD,CAAV;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ;;AACA,MAAIA,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEhB,WAAW,CAACkD,kBADV;AAERhC,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFV,KAAD,CAAT;AAID,GALD,MAKO;AACL,UAAMxB,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEhB,WAAW,CAACkD,kBADV;AAERhC,MAAAA,OAAO,EAAE,CAAC;AAAEkC,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,MAAM,EAAE1C,QAAQ,CAACI;AAAlC,OAAD;AAFD,KAAD,CAAT;AAIA;AACD;AACF,C,CAED;;;AACA,UAAUuC,qBAAV,CAAgC;AAAEhD,EAAAA,IAAF;AAAQiD,EAAAA;AAAR,CAAhC,EAAyD;AACvDrD,EAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAAC0D,UAAX,CAAsBzD,IAAI,CAAC0D,YAA3B,EAAyCnD,IAAzC,CAAtC;AACAJ,EAAAA,UAAU,CAAC,KAAD,CAAV;;AAEA,MAAIS,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,QAAIwC,QAAJ,EAAc;AAAA;;AACZ,YAAM7D,IAAI,CAAC6D,QAAD,sBAAW5C,QAAQ,CAACQ,MAApB,qDAAW,iBAAiBuC,iBAA5B,CAAV;AACD;;AAED;AACD;;AAEDzD,EAAAA,YAAY,CAAC,IAAD,EAAOU,QAAQ,CAACgD,OAAhB,CAAZ;AACD;;AAED,UAAUC,oBAAV,CAA+B;AAAErC,EAAAA;AAAF,CAA/B,EAA8C;AAC5C,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAgB,GAAEb,IAAI,CAAC8D,oBAAqB,SAAQtC,IAAK,EAAzD,CAAtC;;AACA,MAAIZ,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAAA;;AAChC,QAAI,CAAAJ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,iCAAAA,QAAQ,CAAEQ,MAAV,wEAAkBO,MAAlB,KAA4BoC,KAAK,CAACC,OAAN,CAAcpD,QAAd,aAAcA,QAAd,4CAAcA,QAAQ,CAAEQ,MAAxB,sDAAc,kBAAkBO,MAAhC,CAA5B,KAAuEf,QAAvE,aAAuEA,QAAvE,4CAAuEA,QAAQ,CAAEQ,MAAjF,+EAAuE,kBAAkBO,MAAzF,0DAAuE,sBAA0BsC,MAAjG,CAAJ,EAA6G;AAC3GrD,MAAAA,QAAQ,CAACQ,MAAT,CAAgBO,MAAhB,CAAuB,CAAvB,EAA0B,MAA1B,IAAoCH,IAApC;AACAZ,MAAAA,QAAQ,CAACQ,MAAT,CAAgBO,MAAhB,CAAuB,CAAvB,EAA0B,YAA1B,IAA0CuC,IAAI,CAACC,MAAL,EAA1C;AACD;;AACD,QAAI3C,IAAI,KAAK,CAAb,EAAgB;AAAErB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,UAAMP,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEhB,WAAW,CAACmE,uBADV;AAERjD,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFV,KAAD,CAAT;AAKA;AACD;;AACD,MAAII,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;AACvC;;AAED,UAAUkE,kBAAV,CAA6B;AAAE7C,EAAAA;AAAF,CAA7B,EAA4C;AAC1C,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAgB,GAAEb,IAAI,CAACsE,kBAAmB,SAAQ9C,IAAK,EAAvD,CAAtC;;AACA,MAAIZ,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAAA;;AAChC,QAAI,CAAAJ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,iCAAAA,QAAQ,CAAEQ,MAAV,wEAAkBmD,IAAlB,KAA0BR,KAAK,CAACC,OAAN,CAAcpD,QAAd,aAAcA,QAAd,4CAAcA,QAAQ,CAAEQ,MAAxB,sDAAc,kBAAkBmD,IAAhC,CAA1B,KAAmE3D,QAAnE,aAAmEA,QAAnE,4CAAmEA,QAAQ,CAAEQ,MAA7E,+EAAmE,kBAAkBmD,IAArF,0DAAmE,sBAAwBN,MAA3F,CAAJ,EAAuG;AACrGrD,MAAAA,QAAQ,CAACQ,MAAT,CAAgBmD,IAAhB,CAAqB,CAArB,EAAwB,MAAxB,IAAkC/C,IAAlC;AACD;;AACD,QAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,UAAMP,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEhB,WAAW,CAACuE,qBADV;AAERrD,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFV,KAAD,CAAT;AAKA;AACD;;AACD,MAAII,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;AAEvC;;AAED,UAAUsE,kBAAV,CAA6B;AAAEjD,EAAAA;AAAF,CAA7B,EAA4C;AAC1C,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAgB,GAAEb,IAAI,CAAC0E,iBAAkB,SAAQlD,IAAK,EAAtD,CAAtC;;AAEA,MAAIZ,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAAA;;AAChC,QAAI,CAAAJ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,iCAAAA,QAAQ,CAAEQ,MAAV,wEAAkBuD,IAAlB,KAA0BZ,KAAK,CAACC,OAAN,CAAcpD,QAAd,aAAcA,QAAd,4CAAcA,QAAQ,CAAEQ,MAAxB,sDAAc,kBAAkBuD,IAAhC,CAA1B,KAAmE/D,QAAnE,aAAmEA,QAAnE,6CAAmEA,QAAQ,CAAEQ,MAA7E,gFAAmE,mBAAkBuD,IAArF,0DAAmE,sBAAwBV,MAA3F,CAAJ,EAAuG;AACrGrD,MAAAA,QAAQ,CAACQ,MAAT,CAAgBuD,IAAhB,CAAqB,CAArB,EAAwB,MAAxB,IAAkCnD,IAAlC;AACAZ,MAAAA,QAAQ,CAACQ,MAAT,CAAgBuD,IAAhB,CAAqB,CAArB,EAAwB,YAAxB,IAAwCT,IAAI,CAACC,MAAL,EAAxC;AACD;;AACD,QAAI3C,IAAI,KAAK,CAAb,EAAgB;AAAErB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,UAAMP,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC2E,qBADV;AAERzD,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,MAAII,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;AACvC;;AAED,UAAU0E,uBAAV,CAAkC;AAAErD,EAAAA;AAAF,CAAlC,EAAiD;AAC/C,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAgB,GAAEb,IAAI,CAAC8E,oBAAqB,SAAQtD,IAAK,EAAzD,CAAtC;;AAEA,MAAIZ,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAAA;;AAChC,QAAI,CAAAJ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEQ,MAAV,KAAoB2C,KAAK,CAACC,OAAN,CAAcpD,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAEQ,MAAxB,CAApB,KAAuDR,QAAvD,aAAuDA,QAAvD,6CAAuDA,QAAQ,CAAEQ,MAAjE,uDAAuD,mBAAkB6C,MAAzE,CAAJ,EAAqF;AACnFrD,MAAAA,QAAQ,CAACQ,MAAT,CAAgB,CAAhB,EAAmB,MAAnB,IAA6BI,IAA7B;AACD;;AACD,QAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,UAAMP,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC8E,0BADV;AAER5D,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFV,KAAD,CAAT;AAIA;AACD;;AACD,MAAII,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;AACvC;;AAED,UAAU6E,+BAAV,CAA0C;AAAEC,EAAAA;AAAF,CAA1C,EAAyD;AACvD9E,EAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAAC0D,UAAX,CAAsBzD,IAAI,CAACkF,4BAA3B,EAAyDD,IAAzD,CAAtC,CAFuD,CAGvD;;AAEA,MAAIrE,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChCb,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,UAAMP,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEhB,WAAW,CAACkF,+BADV;AAERhE,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFV,KAAD,CAAT;AAIA;AACD;;AACDjB,EAAAA,UAAU,CAAC,KAAD,CAAV;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAUiF,4BAAV,CAAuC;AAAE7E,EAAAA;AAAF,CAAvC,EAAsD;AACpD,QAAMK,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAeb,IAAI,CAACqF,UAAL,GAAmB,aAAY9E,IAAI,CAAC+E,QAAS,SAAQ/E,IAAI,CAACiB,IAAK,EAA9E,CAAtC;;AACA,MAAIZ,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACsF,kCAApB;AAAwDpE,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAA1E,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMxB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAACsF,kCAApB;AAAwDpE,MAAAA,OAAO,EAAE;AAAjE,KAAD,CAAT;AACD;AACF;;AAED,UAAUqE,sBAAV,CAAiC;AAAEjF,EAAAA;AAAF,CAAjC,EAAgD;AAC9C,QAAMK,QAAuB,GAAG,MAAMb,UAAU,CAAC0F,SAAX,CAAqBzF,IAAI,CAAC0F,oBAA1B,EAAgDnF,IAAhD,CAAtC;AACAL,EAAAA,YAAY,CAAC,IAAD,EAAOU,QAAQ,CAACgD,OAAhB,CAAZ;;AACA,MAAIhD,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC0F,iCAApB;AAAuDxE,MAAAA,OAAO,EAAE;AAAhE,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMvB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC0F,iCAApB;AAAuDxE,MAAAA,OAAO,EAAE;AAAhE,KAAD,CAAT;AACD;AACF;;AAED,UAAUyE,kBAAV,CAA6B;AAAEpE,EAAAA;AAAF,CAA7B,EAA4C;AAC1C,MAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAAmB;;AACrC,QAAMS,QAAuB,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAgB,GAAEb,IAAI,CAAC6F,YAAa,SAAQrE,IAAK,EAAjD,CAAtC;;AAEA,MAAIZ,QAAQ,CAACI,WAAT,KAAyB,GAA7B,EAAkC;AAAA;;AAChC,QAAI,CAAAJ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEQ,MAAV,KAAoB2C,KAAK,CAACC,OAAN,CAAcpD,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAEQ,MAAxB,CAApB,KAAuDR,QAAvD,aAAuDA,QAAvD,6CAAuDA,QAAQ,CAAEQ,MAAjE,uDAAuD,mBAAkB6C,MAAzE,CAAJ,EAAqF;AACnFrD,MAAAA,QAAQ,CAACQ,MAAT,CAAgB,CAAhB,EAAmB,MAAnB,IAA6BI,IAA7B;AACD;;AACD,QAAIA,IAAI,KAAK,CAAb,EAAgB;AAAErB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,UAAMP,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC6F,6BAApB;AAAmD3E,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAArE,KAAD,CAAT;AACD,GAND,MAMO;AACL,QAAII,IAAI,KAAK,CAAb,EAAgB;AAAErB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAoB;;AACtC,UAAMP,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEhB,WAAW,CAAC6F,6BAApB;AAAmD3E,MAAAA,OAAO,EAAE;AAA5D,KAAD,CAAT;AACD;AACF;;AAED,UAAU4E,YAAV,GAAyB;AACvB,QAAMnG,GAAG,CAAC;AAAEqB,IAAAA,IAAI,EAAEhB,WAAW,CAAC+F,cAApB;AAAoC7E,IAAAA,OAAO,EAAE;AAA7C,GAAD,CAAT;AACD;;AAED,UAAU8E,cAAV,GAA2B;AACzB,MAAI;AACF,UAAMpG,UAAU,CAACI,WAAW,CAACiG,kBAAb,EAAiC7F,cAAjC,CAAhB;AACA,UAAMR,UAAU,CAACI,WAAW,CAACkG,iBAAb,EAAgC9E,eAAhC,CAAhB;AACA,UAAMxB,UAAU,CAACI,WAAW,CAACmG,qBAAb,EAAoC7E,gBAApC,CAAhB;AACA,UAAM1B,UAAU,CAACI,WAAW,CAACoG,sBAAb,EAAqCzE,iBAArC,CAAhB;AACA,UAAM/B,UAAU,CAACI,WAAW,CAACqG,mBAAb,EAAkCtE,cAAlC,CAAhB;AACA,UAAMnC,UAAU,CAACI,WAAW,CAACsG,kBAAb,EAAiC1D,aAAjC,CAAhB;AACA,UAAMhD,UAAU,CAACI,WAAW,CAACuG,4BAAb,EAA2CzD,wBAA3C,CAAhB;AACA,UAAMlD,UAAU,CAACI,WAAW,CAACwG,oBAAb,EAAmCxD,gBAAnC,CAAhB;AACA,UAAMpD,UAAU,CAACI,WAAW,CAACyG,uBAAb,EAAsCnD,qBAAtC,CAAhB;AAEA,UAAM1D,UAAU,CAACI,WAAW,CAAC0G,qBAAb,EAAoCnE,gBAApC,CAAhB;AACA,UAAM3C,UAAU,CAACI,WAAW,CAAC2G,uBAAb,EAAsCxE,kBAAtC,CAAhB;AACA,UAAMvC,UAAU,CAACI,WAAW,CAAC4G,wBAAb,EAAuCtE,mBAAvC,CAAhB;AACA,UAAM1C,UAAU,CAACI,WAAW,CAAC6G,oBAAb,EAAmCrE,eAAnC,CAAhB;AACA,UAAM5C,UAAU,CAACI,WAAW,CAAC8G,8BAAb,EAA6CpE,0BAA7C,CAAhB;AAEA,UAAM9C,UAAU,CAACI,WAAW,CAAC+G,uBAAb,EAAsCnD,oBAAtC,CAAhB;AACA,UAAMhE,UAAU,CAACI,WAAW,CAACgH,qBAAb,EAAoC5C,kBAApC,CAAhB;AACA,UAAMxE,UAAU,CAACI,WAAW,CAACiH,qBAAb,EAAoCzC,kBAApC,CAAhB;AACA,UAAM5E,UAAU,CAACI,WAAW,CAACkH,0BAAb,EAAyCtC,uBAAzC,CAAhB;AACA,UAAMhF,UAAU,CAACI,WAAW,CAACmH,+BAAb,EAA8CpC,+BAA9C,CAAhB;AAEA,UAAMnF,UAAU,CAACI,WAAW,CAACoH,kCAAb,EAAiDjC,4BAAjD,CAAhB;AACA,UAAMvF,UAAU,CAACI,WAAW,CAACqH,iCAAb,EAAgD9B,sBAAhD,CAAhB;AAEA,UAAM3F,UAAU,CAACI,WAAW,CAACsH,6BAAb,EAA4C3B,kBAA5C,CAAhB;AACA,UAAM/F,UAAU,CAACI,WAAW,CAACuH,cAAb,EAA6BzB,YAA7B,CAAhB;AAED,GA7BD,CA6BE,OAAO0B,CAAP,EAAU;AACV3G,IAAAA,OAAO,CAACC,GAAR,CAAY0G,CAAZ;AACD;AACF;;AAED,eAAexB,cAAf","sourcesContent":["import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport NetworkOps, { FetchResponse } from \"../../network/NetworkOps\";\nimport Urls from \"../../network/Urls\";\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading } from '../common/actions';\nimport * as selectors from './selectors';\n\nfunction* setHomeBuilder(action: any) {\n  const { data } = action;\n  let url = `${Urls.home}?lat=${data.lat}&long=${data.long}`\n  const response: FetchResponse = yield NetworkOps.get(url);\n  console.log({ response }, '---------------!!!!!!!!')\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.SET_FETCH_HOME_BUILDER, payload: response.result });\n  } else {\n    yield put({ type: actionTypes.SET_FETCH_HOME_BUILDER, payload: null });\n  }\n}\n\nfunction* setLocalChanges(action: any) {\n  yield put({ type: actionTypes.SET_LOCAL_CHANGES, payload: action });\n}\n\nfunction* getActiveJobList({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(\n    `${Urls.activeJobList}?page=${page}`\n  );\n  if (page === 1) { setLoading(false); }\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.GET_ACTIVE_JOBS_END, payload: response.result });\n  } else {\n    yield put({ type: actionTypes.GET_ACTIVE_JOBS_END, payload: { active: [] } });\n  }\n}\n\nfunction* getAppliedJobList({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(\n    `${Urls.appliedJobList}?page=${page}`\n  );\n  if (page === 1) { setLoading(false); }\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.GET_APPLIED_JOBS_END, payload: response.result });\n  } else {\n    yield put({ type: actionTypes.GET_APPLIED_JOBS_END, payload: { applied: [] } });\n  }\n}\n\nfunction* getPastJobList({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(\n    `${Urls.pastJobList}?page=${page}`\n  );\n  if (page === 1) { setLoading(false); }\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.GET_PAST_JOBS_END, payload: response.result });\n  } else {\n    yield put({ type: actionTypes.GET_PAST_JOBS_END, payload: { completed: [] } });\n  }\n}\n\n\nfunction* resetActiveJobList() {\n  const milestonesCount: selectors.FetchResponse = yield select(selectors.milestonesCount);\n  const newJobsCount: selectors.FetchResponse = yield select(selectors.newJobsCount);\n  yield put({ type: actionTypes.GET_ACTIVE_JOBS_END, payload: { active: null, milestonesCount: milestonesCount, newJobsCount: newJobsCount } });\n}\n\nfunction* resetAppliedJobList() {\n  const milestonesCount: selectors.FetchResponse = yield select(selectors.milestonesCount);\n  const newJobsCount: selectors.FetchResponse = yield select(selectors.newJobsCount);\n  yield put({ type: actionTypes.GET_APPLIED_JOBS_END, payload: { applied: null, milestonesCount: milestonesCount, newJobsCount: newJobsCount } });\n}\n\nfunction* resetPastJobList() {\n  const milestonesCount: selectors.FetchResponse = yield select(selectors.milestonesCount);\n  const newJobsCount: selectors.FetchResponse = yield select(selectors.newJobsCount);\n  yield put({ type: actionTypes.GET_PAST_JOBS_END, payload: { completed: null, milestonesCount: milestonesCount, newJobsCount: newJobsCount } });\n}\n\nfunction* resetNewJobList() {\n  yield put({ type: actionTypes.GET_NEW_JOBS_END, payload: null });\n}\n\nfunction* resetApprovedMilestoneList() {\n  yield put({ type: actionTypes.GET_APPROVED_MILESTONE_END, payload: null });\n}\n\nfunction* getNewJobList({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(\n    `${Urls.newJobList}?page=${page}`\n  );\n  if (page === 1) { setLoading(false); }\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.GET_NEW_JOBS_END, payload: response.result });\n  } else {\n    yield put({ type: actionTypes.GET_NEW_JOBS_END, payload: [] });\n  }\n}\n\nfunction* getApprovedMilestoneList({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(\n    `${Urls.approvedMilestoneList}?page=${page}`\n  );\n  if (page === 1) { setLoading(false); }\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.GET_APPROVED_MILESTONE_END, payload: response.result });\n  } else {\n    yield put({ type: actionTypes.GET_APPROVED_MILESTONE_END, payload: [] });\n  }\n}\n\n// milestoneList\nfunction* getMilestoneList({ jobId }: any) {\n  yield put({ type: actionTypes.GET_MILESTONES_END, payload: {} });\n  setLoading(true);\n  const response: FetchResponse = yield NetworkOps.get(`${Urls.milestoneList}?jobId=${jobId}`);\n  setLoading(false);\n  console.log({ response })\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.GET_MILESTONES_END,\n      payload: response.result,\n    });\n  } else {\n    yield put({\n      type: actionTypes.GET_MILESTONES_END,\n      payload: [{ sucess: false, status: response.status_code }],\n    });\n    return;\n  }\n}\n\n// milestoneList\nfunction* markMilestoneComplete({ data, callback }: any) {\n  setLoading(true);\n  const response: FetchResponse = yield NetworkOps.postToJson(Urls.markComplete, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    if (callback) {\n      yield call(callback, response.result?.jobCompletedCount);\n    }\n\n    return;\n  }\n\n  setShowToast(true, response.message);\n}\n\nfunction* getActiveJobsBuilder({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(`${Urls.activeJobListBuilder}?page=${page}`);\n  if (response.status_code === 200) {\n    if (response?.result?.active && Array.isArray(response?.result?.active) && response?.result?.active?.length) {\n      response.result.active[0]['page'] = page;\n      response.result.active[0]['mathrandom'] = Math.random();\n    }\n    if (page === 1) { setLoading(false); }\n    yield put({\n      type: actionTypes.SET_BUILDER_ACTIVE_JOBS,\n      payload: response.result,\n    });\n\n    return;\n  }\n  if (page === 1) { setLoading(false); }\n}\n\nfunction* getPastJobsBuilder({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(`${Urls.pastJobListBuilder}?page=${page}`);\n  if (response.status_code === 200) {\n    if (response?.result?.past && Array.isArray(response?.result?.past) && response?.result?.past?.length) {\n      response.result.past[0]['page'] = page;\n    }\n    if (page === 1) { setLoading(false); }\n    yield put({\n      type: actionTypes.SET_BUILDER_PAST_JOBS,\n      payload: response.result,\n    });\n\n    return;\n  }\n  if (page === 1) { setLoading(false); }\n\n}\n\nfunction* getOpenJobsBuilder({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(`${Urls.OpenJobLisBuilder}?page=${page}`);\n\n  if (response.status_code === 200) {\n    if (response?.result?.open && Array.isArray(response?.result?.open) && response?.result?.open?.length) {\n      response.result.open[0]['page'] = page;\n      response.result.open[0]['mathrandom'] = Math.random();\n    }\n    if (page === 1) { setLoading(false); }\n    yield put({\n      type: actionTypes.SET_BUILDER_OPEN_JOBS,\n      payload: response.result,\n    });\n    return;\n  }\n  if (page === 1) { setLoading(false); }\n}\n\nfunction* getBuilderNewApplicants({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(`${Urls.newApplicantsBuilder}?page=${page}`);\n\n  if (response.status_code === 200) {\n    if (response?.result && Array.isArray(response?.result) && response?.result?.length) {\n      response.result[0]['page'] = page;\n    }\n    if (page === 1) { setLoading(false); }\n    yield put({\n      type: actionTypes.SET_BUILDER_NEW_APPLICANTS,\n      payload: response.result,\n    });\n    return;\n  }\n  if (page === 1) { setLoading(false); }\n}\n\nfunction* getnewJobApplicationListBuilder({ item }: any) {\n  setLoading(true);\n  const response: FetchResponse = yield NetworkOps.postToJson(Urls.newJobApplicationListBuilder, item);\n  // const response: FetchResponse = yield NetworkOps.get(`${Urls.newJobApplicationListBuilder}?page=${page}`);\n\n  if (response.status_code === 200) {\n    setLoading(false);\n    yield put({\n      type: actionTypes.SET_BUILDER_NEW_APPLICANTS_LIST,\n      payload: response.result,\n    });\n    return;\n  }\n  setLoading(false);\n}\n\n// function* getTradieReviewList({ data }: any) {\n//   const response: FetchResponse = yield NetworkOps.get(Urls.tradieReviewList + `?builderId=${data.builderId}&page=${data.page}`);\n//   console.log(response.result, \"response.result\")\n//   if (response.status_code === 200) {\n//     yield put({ type: actionTypes.SET_TRADIE_REVIEW_LIST, payload: response.result });\n//   } else {\n//     yield put({ type: actionTypes.SET_TRADIE_REVIEW_LIST, payload: [] });\n//   }\n// }\n\nfunction* getTradieReviewListOnBuilder({ data }: any) {\n  const response: FetchResponse = yield NetworkOps.get(Urls.reviewList + `?tradieId=${data.tradieId}&page=${data.page}`);\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.SET_TRADIE_REVIEWS_LIST_ON_BUILDER, payload: response.result });\n  } else {\n    yield put({ type: actionTypes.SET_TRADIE_REVIEWS_LIST_ON_BUILDER, payload: [] });\n  }\n}\n\nfunction* getAcceptDeclineTradie({ data }: any) {\n  const response: FetchResponse = yield NetworkOps.putToJson(Urls.acceptDeclineRequest, data);\n  setShowToast(true, response.message);\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.SET_ACCEPT_DECLINE_TRADIE_REQUEST, payload: true });\n  } else {\n    yield put({ type: actionTypes.SET_ACCEPT_DECLINE_TRADIE_REQUEST, payload: false });\n  }\n}\n\nfunction* getNewApprovalList({ page }: any) {\n  if (page === 1) { setLoading(true); }\n  const response: FetchResponse = yield NetworkOps.get(`${Urls.needApproval}?page=${page}`);\n\n  if (response.status_code === 200) {\n    if (response?.result && Array.isArray(response?.result) && response?.result?.length) {\n      response.result[0]['page'] = page;\n    }\n    if (page === 1) { setLoading(false); }\n    yield put({ type: actionTypes.SET_BUILDER_NEW_APPROVAL_LIST, payload: response.result });\n  } else {\n    if (page === 1) { setLoading(false); }\n    yield put({ type: actionTypes.SET_BUILDER_NEW_APPROVAL_LIST, payload: false });\n  }\n}\n\nfunction* getClearJobs() {\n  yield put({ type: actionTypes.SET_CLEAR_JOBS, payload: true });\n}\n\nfunction* postJobWatcher() {\n  try {\n    yield takeLatest(actionTypes.FETCH_HOME_BUILDER, setHomeBuilder);\n    yield takeLatest(actionTypes.GET_LOCAL_CHANGES, setLocalChanges);\n    yield takeLatest(actionTypes.GET_ACTIVE_JOBS_START, getActiveJobList);\n    yield takeLatest(actionTypes.GET_APPLIED_JOBS_START, getAppliedJobList);\n    yield takeLatest(actionTypes.GET_PAST_JOBS_START, getPastJobList);\n    yield takeLatest(actionTypes.GET_NEW_JOBS_START, getNewJobList);\n    yield takeLatest(actionTypes.GET_APPROVED_MILESTONE_START, getApprovedMilestoneList);\n    yield takeLatest(actionTypes.GET_MILESTONES_START, getMilestoneList);\n    yield takeLatest(actionTypes.MARK_MILESTONE_COMPLETE, markMilestoneComplete);\n\n    yield takeLatest(actionTypes.RESET_PAST_JOBS_START, resetPastJobList);\n    yield takeLatest(actionTypes.RESET_ACTIVE_JOBS_START, resetActiveJobList);\n    yield takeLatest(actionTypes.RESET_APPLIED_JOBS_START, resetAppliedJobList);\n    yield takeLatest(actionTypes.RESET_NEW_JOBS_START, resetNewJobList);\n    yield takeLatest(actionTypes.RESET_APPROVED_MILESTONE_START, resetApprovedMilestoneList);\n\n    yield takeLatest(actionTypes.GET_BUILDER_ACTIVE_JOBS, getActiveJobsBuilder);\n    yield takeLatest(actionTypes.GET_BUILDER_PAST_JOBS, getPastJobsBuilder);\n    yield takeLatest(actionTypes.GET_BUILDER_OPEN_JOBS, getOpenJobsBuilder);\n    yield takeLatest(actionTypes.GET_BUILDER_NEW_APPLICANTS, getBuilderNewApplicants);\n    yield takeLatest(actionTypes.GET_BUILDER_NEW_APPLICANTS_LIST, getnewJobApplicationListBuilder);\n\n    yield takeLatest(actionTypes.GET_TRADIE_REVIEWS_LIST_ON_BUILDER, getTradieReviewListOnBuilder);\n    yield takeLatest(actionTypes.GET_ACCEPT_DECLINE_TRADIE_REQUEST, getAcceptDeclineTradie)\n\n    yield takeLatest(actionTypes.GET_BUILDER_NEW_APPROVAL_LIST, getNewApprovalList);\n    yield takeLatest(actionTypes.GET_CLEAR_JOBS, getClearJobs);\n\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport default postJobWatcher;"]},"metadata":{},"sourceType":"module"}