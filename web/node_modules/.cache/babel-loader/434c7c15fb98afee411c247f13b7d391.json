{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/cancelJobs/cancelJob.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport close from '../../../../assets/images/icon-close-1.png';\nimport { onFileUpload } from '../../../../redux/auth/actions';\nimport { setShowToast } from '../../../../redux/common/actions';\nimport { withRouter } from 'react-router-dom'; //@ts-ignore\n\nimport FsLightbox from 'fslightbox-react';\nimport { CancelJob } from '../../../../redux/jobs/actions';\nimport { JobCancelReasons } from '../../../../utils/common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imageFormats = [\"jpeg\", \"jpg\", \"png\"];\n\nconst LodgeDispute = props => {\n  _s();\n\n  const {\n    item: {\n      jobId,\n      jobName\n    },\n    history\n  } = props;\n  const [stateData, setStateData] = useState({\n    reason: 0,\n    detail: '',\n    upload: []\n  });\n  const [errorData, setErrorData] = useState({\n    reason: '',\n    detail: '',\n    upload: ''\n  });\n  const [filesUrl, setFilesUrl] = useState([]);\n  const [localFiles, setLocalFiles] = useState({});\n  const [update, forceUpdate] = useState({});\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n  const {\n    reason,\n    detail,\n    upload\n  } = stateData;\n\n  const isValid = ({\n    name,\n    value,\n    title\n  }) => {\n    if (name === 'reason') {\n      return value === 0 ? `${title} is required.` : '';\n    }\n\n    return !(value === null || value === void 0 ? void 0 : value.length) ? `${title} is required.` : '';\n  };\n\n  const checkErrors = () => {\n    let error_1 = isValid({\n      name: 'reason',\n      value: reason,\n      title: 'Reason'\n    });\n    let error_2 = isValid({\n      name: 'detail',\n      value: detail,\n      title: 'Detail'\n    }); // if (!error_1?.length && !error_2?.length) {\n\n    if (!(error_1 === null || error_1 === void 0 ? void 0 : error_1.length)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  useEffect(() => {\n    setErrorData(prev => {\n      var _stateData$detail;\n\n      return { ...prev,\n        detail: (stateData === null || stateData === void 0 ? void 0 : (_stateData$detail = stateData.detail) === null || _stateData$detail === void 0 ? void 0 : _stateData$detail.length) > 250 ? 'Maximum 250 characters are allowed.' : ''\n      };\n    });\n  }, [stateData]);\n\n  const removeFromItem = index => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async e => {\n    var _newFile$type, _newFile$type$split$;\n\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    if ((filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) === 6) {\n      setShowToast(true, \"Max files upload limit is 6.\");\n      return;\n    }\n\n    var fileType = newFile === null || newFile === void 0 ? void 0 : (_newFile$type = newFile.type) === null || _newFile$type === void 0 ? void 0 : (_newFile$type$split$ = _newFile$type.split('/')[1]) === null || _newFile$type$split$ === void 0 ? void 0 : _newFile$type$split$.toLowerCase();\n    var selectedFileSize = (newFile === null || newFile === void 0 ? void 0 : newFile.size) / 1024 / 1024; // size in mib\n\n    if (imageFormats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size.\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 MB.\");\n      return;\n    }\n\n    formData.append('file', newFile);\n    const res = await onFileUpload(formData);\n\n    if (res.success) {\n      let link = res.imgUrl;\n      let check_type = 1;\n      setFilesUrl(prev => [...prev, {\n        \"mediaType\": check_type,\n        \"link\": link\n      }]);\n      setLocalFiles(prev => ({ ...prev,\n        [filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length]: URL.createObjectURL(newFile)\n      }));\n    }\n  };\n\n  const setItemToggle = index => {\n    setToggler(prev => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item, index) => {\n    let split_item_format = item.split('.');\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n    let split_item_name = item.split('/');\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render = null;\n\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            setItemToggle(index);\n          },\n          title: get_split_name,\n          src: item,\n          alt: \"media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 32\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"figure\", {\n        className: \"img_video\",\n        children: [image_render, /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            removeFromItem(index);\n          },\n          src: close,\n          alt: \"remove\",\n          className: \"remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  const handleSubmit = async () => {\n    let data = {\n      \"jobId\": jobId,\n      \"reason\": reason\n    };\n\n    if (detail === null || detail === void 0 ? void 0 : detail.length) {\n      data['note'] = detail;\n    }\n\n    let response = await CancelJob(data);\n\n    if (response === null || response === void 0 ? void 0 : response.success) {\n      history.push('/cancel-job-success');\n    }\n  };\n\n  const renderTypes = ({\n    id\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"checkbox_wrap agree_check\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: reason,\n        onClick: () => {\n          setStateData(prev => ({ ...prev,\n            reason: id\n          }));\n        },\n        checked: reason === id,\n        name: \"Reason\",\n        className: \"filter-type filled-in\",\n        type: \"checkbox\",\n        id: `reason${id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `reason${id}`,\n        children: JobCancelReasons(id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderFilteredItems = () => {\n    let sources = [];\n    let types = [];\n\n    if (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) {\n      filesUrl.forEach(item => {\n        if ((item === null || item === void 0 ? void 0 : item.mediaType) === 1) {\n          sources.push(item.link);\n          types.push('image');\n        }\n      });\n    }\n\n    return {\n      sources,\n      types\n    };\n  };\n\n  const {\n    sources,\n    types\n  } = renderFilteredItems();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex_row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_col_sm_8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relate\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            props.backTab('cancel');\n          },\n          className: \"back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"xs_sub_title\",\n          children: jobName || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: 'Your reason for canceling job'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"commn_para\",\n        children: 'Let the tradesperson and Tickt know why you are cancelling the job.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FsLightbox, {\n        toggler: toggler,\n        slide: selectedSlide,\n        sources: sources,\n        types: types\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reason_wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_spacebw\",\n          children: [renderTypes({\n            id: 1\n          }), renderTypes({\n            id: 2\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_spacebw\",\n          children: [renderTypes({\n            id: 3\n          }), renderTypes({\n            id: 4\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_spacebw\",\n          children: renderTypes({\n            id: 5\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_col_sm_9\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form_label\",\n          children: \"Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text_field\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: detail,\n            onChange: e => {\n              setStateData(prev => ({ ...prev,\n                detail: e.target.value.trimLeft()\n              }));\n            },\n            placeholder: \"It\\u2019s really bad work, because...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errorData.detail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: `fill_btn full_btn btn-effect ${checkErrors() ? 'disable_btn' : ''}`,\n        children: 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LodgeDispute, \"F6kRetK8z1PVcgaLh+81TZAIyCU=\");\n\n_c = LodgeDispute;\nexport default _c2 = withRouter(LodgeDispute);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LodgeDispute\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/cancelJobs/cancelJob.tsx"],"names":["React","useState","useEffect","close","onFileUpload","setShowToast","withRouter","FsLightbox","CancelJob","JobCancelReasons","imageFormats","LodgeDispute","props","item","jobId","jobName","history","stateData","setStateData","reason","detail","upload","errorData","setErrorData","filesUrl","setFilesUrl","localFiles","setLocalFiles","update","forceUpdate","toggler","setToggler","selectedSlide","setSelectSlide","isValid","name","value","title","length","checkErrors","error_1","error_2","prev","removeFromItem","index","splice","Array","isArray","onFileChange","e","formData","FormData","newFile","target","files","fileType","type","split","toLowerCase","selectedFileSize","size","indexOf","includes","append","res","success","link","imgUrl","check_type","URL","createObjectURL","setItemToggle","renderbyFileFormat","split_item_format","get_split_fromat","split_item_name","get_split_name","image_render","handleSubmit","data","response","push","renderTypes","id","renderFilteredItems","sources","types","forEach","mediaType","backTab","trimLeft"],"mappings":"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","sourcesContent":["import React, { ReactElement, useState, useEffect } from 'react'\nimport dummy from '../../../../assets/images/u_placeholder.jpg';\nimport approved from '../../../../assets/images/approved.png';\nimport waiting from '../../../../assets/images/exclamation.png';\nimport close from '../../../../assets/images/icon-close-1.png';\nimport addMedia from \"../../../../assets/images/add-image.png\";\nimport noDataFound from \"../../../../assets/images/no-search-data.png\";\n\nimport { onFileUpload } from '../../../../redux/auth/actions';\nimport { setShowToast } from '../../../../redux/common/actions';\n\nimport { withRouter } from 'react-router-dom';\n\n//@ts-ignore\nimport FsLightbox from 'fslightbox-react';\n\nimport { CancelJob } from '../../../../redux/jobs/actions';\n\nimport { JobCancelReasons } from '../../../../utils/common';\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\n\nconst LodgeDispute = (props: any) => {\n    const { item: { jobId, jobName }, history } = props;\n    const [stateData, setStateData] = useState({ reason: 0, detail: '', upload: [] });\n    const [errorData, setErrorData] = useState({ reason: '', detail: '', upload: '' });\n    const [filesUrl, setFilesUrl] = useState([] as any);\n    const [localFiles, setLocalFiles] = useState({});\n\n    const [update, forceUpdate] = useState({});\n    const [toggler, setToggler] = useState(false);\n    const [selectedSlide, setSelectSlide] = useState(1);\n\n\n    const { reason, detail, upload } = stateData;\n\n    const isValid = ({ name, value, title }: any) => {\n        if (name === 'reason') {\n            return value === 0 ? `${title} is required.` : '';\n        }\n        return !value?.length ? `${title} is required.` : '';\n    }\n\n    const checkErrors = () => {\n        let error_1 = isValid({ name: 'reason', value: reason, title: 'Reason' });\n        let error_2 = isValid({ name: 'detail', value: detail, title: 'Detail' });\n\n        // if (!error_1?.length && !error_2?.length) {\n        if (!error_1?.length) {\n            return false;\n        }\n        return true;\n    }\n\n\n    useEffect(() => {\n        setErrorData((prev: any) => ({\n            ...prev,\n            detail: stateData?.detail?.length > 250 ? 'Maximum 250 characters are allowed.' : ''\n        }))\n    }, [stateData]);\n\n    const removeFromItem = (index: any) => {\n        filesUrl.splice(index, 1);\n        setFilesUrl(filesUrl);\n        Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n    }\n\n    const onFileChange = async (e: any) => {\n        const formData = new FormData();\n        const newFile = e.target.files[0];\n\n        if (filesUrl?.length === 6) {\n            setShowToast(true, \"Max files upload limit is 6.\")\n            return;\n        }\n\n        var fileType = (newFile?.type?.split('/')[1])?.toLowerCase();\n        var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n        if (imageFormats.indexOf(fileType) < 0 || (selectedFileSize > 10)) {\n            setShowToast(true, \"The file must be in proper format or size.\")\n            return;\n        }\n\n        if (imageFormats.includes(fileType) && selectedFileSize > 10) { // image validations\n            setShowToast(true, \"The image file size must be below 10 MB.\")\n            return;\n        }\n\n        formData.append('file', newFile);\n        const res = await onFileUpload(formData)\n        if (res.success) {\n            let link: string = res.imgUrl;\n            let check_type: any = 1;\n            setFilesUrl((prev: Array<any>) => [...prev, {\n                \"mediaType\": check_type,\n                \"link\": link\n            }]);\n            setLocalFiles((prev: any) => ({ ...prev, [filesUrl?.length]: URL.createObjectURL(newFile) }));\n        }\n    }\n\n    const setItemToggle = (index: any) => {\n        setToggler((prev: boolean) => !prev);\n        setSelectSlide(index + 1);\n    }\n\n    const renderbyFileFormat = (item: any, index: any) => {\n        let split_item_format = item.split('.');\n        let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n        let split_item_name = item.split('/');\n        let get_split_name = split_item_name[split_item_name.length - 1];\n        let image_render: any = null;\n        if (get_split_fromat) {\n            if (imageFormats.includes(get_split_fromat)) {\n                image_render = <img onClick={() => { setItemToggle(index) }} title={get_split_name} src={item} alt=\"media\" />\n            }\n            return (\n                <figure className=\"img_video\">\n                    {image_render}\n                    <img\n                        onClick={() => { removeFromItem(index) }}\n                        src={close} alt=\"remove\" className=\"remove\" />\n                    {/* <span style={{ fontSize: '10px' }}>{get_split_name}</span> */}\n                </figure>\n            )\n        }\n    }\n\n    const handleSubmit = async () => {\n        let data: any = {\n            \"jobId\": jobId,\n            \"reason\": reason,\n        }\n\n        if (detail?.length) {\n            data['note'] = detail;\n        }\n\n        let response: any = await CancelJob(data);\n        if (response?.success) {\n            history.push('/cancel-job-success');\n        }\n    }\n\n\n    const renderTypes = ({ id, }: any) => {\n        return (\n            <div className=\"checkbox_wrap agree_check\">\n                <input\n                    value={reason}\n                    onClick={() => { setStateData((prev: any) => ({ ...prev, reason: id })) }}\n                    checked={reason === id}\n                    name=\"Reason\" className=\"filter-type filled-in\" type=\"checkbox\" id={`reason${id}`} />\n                <label htmlFor={`reason${id}`}>\n                    {JobCancelReasons(id)}\n                </label>\n            </div>\n        )\n    }\n\n    const renderFilteredItems = () => {\n        let sources: any = [];\n        let types: any = [];\n\n        if (filesUrl?.length) {\n            filesUrl.forEach((item: any) => {\n                if (item?.mediaType === 1) {\n                    sources.push(item.link);\n                    types.push('image');\n                }\n            })\n        }\n\n        return { sources, types };\n    }\n\n    const { sources, types } = renderFilteredItems();\n    return (\n        <div className=\"flex_row\">\n            <div className=\"flex_col_sm_8\">\n                <div className=\"relate\">\n                    <button\n                        onClick={() => { props.backTab('cancel') }}\n                        className=\"back\"></button>\n                    <span className=\"xs_sub_title\">\n                        {jobName || ''}\n                    </span>\n                </div>\n\n                <span className=\"sub_title\">\n                    {'Your reason for canceling job'}\n                </span>\n                <p className=\"commn_para\">\n                    {'Let the tradesperson and Tickt know why you are cancelling the job.'}\n                </p>\n\n                <FsLightbox\n                    toggler={toggler}\n                    slide={selectedSlide}\n                    sources={sources}\n                    types={types}\n                />\n\n                <div className=\"reason_wrap\">\n                    <div className=\"f_spacebw\">\n                        {renderTypes({ id: 1 })}\n                        {renderTypes({ id: 2 })}\n\n                    </div>\n                    <div className=\"f_spacebw\">\n                        {renderTypes({ id: 3 })}\n                        {renderTypes({ id: 4 })}\n                    </div>\n\n                    <div className=\"f_spacebw\">\n                        {renderTypes({ id: 5 })}\n                    </div>\n                </div>\n\n            </div>\n\n            <div className=\"flex_col_sm_9\">\n                <div className=\"form_field\">\n                    <label className=\"form_label\">Details</label>\n                    <div className=\"text_field\">\n                        <textarea\n                            value={detail}\n                            onChange={(e: any) => {\n                                setStateData((prev: any) => ({ ...prev, detail: (e.target.value).trimLeft() }))\n                            }}\n                            placeholder=\"It’s really bad work, because...\"></textarea>\n                    </div>\n                    <span className=\"error_msg\">\n                        {errorData.detail}\n                    </span>\n                </div>\n                <button\n                    onClick={handleSubmit}\n                    className={`fill_btn full_btn btn-effect ${checkErrors() ? 'disable_btn' : ''}`}>\n                    {'Send'}\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(LodgeDispute);"]},"metadata":{},"sourceType":"module"}