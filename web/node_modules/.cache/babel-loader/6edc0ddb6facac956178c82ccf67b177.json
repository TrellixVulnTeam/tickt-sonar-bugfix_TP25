{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/editMileStone.tsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// for error messages\nconst label = {\n  milestone_name: 'Milestone Name',\n  from_date: 'From Date',\n  recommended_hours: 'Recommended Hours'\n};\nconst pattern = \"^([0-9][0-9]?[0-9]?[0-9]?[0-9]):[0-9][0-9]$\";\nexport default class EditMilestone extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkIsDateValid = (milestones, time) => {\n      const {\n        editMileStone\n      } = this.props;\n      let checkIsValid = true;\n      let isSkip = true;\n      let filterMilestone = [];\n\n      if (milestones.length > 1) {\n        filterMilestone = milestones.filter((mile_item, index) => index !== editMileStone);\n        filterMilestone.forEach(mile => {\n          let validStart = moment(mile.from_date).isValid();\n          let validEnd = moment(mile.to_date).isValid();\n          let validStartInput = moment(time.from_date).isValid();\n          let validEndInput = moment(time.to_date).isValid();\n\n          if (validStart && validEnd) {\n            if (validStartInput && validEndInput) {\n              if (moment(time.from_date).isSameOrAfter(mile.from_date) && (moment(time.to_date).isSameOrBefore(mile.to_date) || moment(time.to_date).isSameOrAfter(mile.from_date))) {\n                checkIsValid = false;\n                isSkip = false;\n              }\n            }\n\n            if (validStartInput && !validEndInput) {\n              if (moment(time.from_date).isSameOrAfter(mile.from_date) && moment(time.from_date).isSameOrBefore(mile.to_date)) {\n                checkIsValid = false;\n                isSkip = false;\n              }\n            }\n          }\n\n          if (validStart && validStartInput && !validEnd) {\n            if (moment(time.from_date).isSame(mile.from_date) || moment(time.to_date).isSame(mile.from_date)) {\n              checkIsValid = false;\n              isSkip = false;\n            }\n          }\n\n          if (validEnd && validEndInput) {\n            if (moment(time.to_date).isSame(mile.to_date)) {\n              checkIsValid = false;\n              isSkip = false;\n            }\n          }\n        });\n      }\n\n      return {\n        checkIsValid,\n        skip: isSkip\n      };\n    };\n\n    this.handleChange = (name, value) => {\n      let error_clone = this.state.errors;\n\n      if (name === \"milestone_name\") {\n        value = value.trimLeft().replace(/[^a-zA-Z|0-9 ]/g, \"\");\n      }\n\n      if (name === \"recommended_hours\") {\n        value = value.trimLeft();\n      }\n\n      if (['milestone_name', 'from_date', 'recommended_hours'].includes(name)) {\n        error_clone[name] = this.isInvalid(name, value);\n      }\n\n      this.setState({ ...this.state,\n        [name]: value,\n        errors: error_clone\n      });\n    };\n\n    this.handleContinue = () => {\n      this.setItems();\n      this.props.handleStepForward(6);\n    };\n\n    this.setItems = () => {\n      const {\n        handleStepMileStone,\n        editMileStone\n      } = this.props;\n      let {\n        milestone_name,\n        from_date,\n        to_date,\n        isPhotoevidence,\n        recommended_hours\n      } = this.state;\n      let milestone_index = editMileStone;\n      handleStepMileStone({\n        \"milestone_name\": milestone_name,\n        \"isPhotoevidence\": isPhotoevidence,\n        \"from_date\": from_date,\n        // milestones[milestone_index]?.from_date || '',\n        \"to_date\": to_date,\n        //milestones[milestone_index]?.to_date || '',\n        \"recommended_hours\": recommended_hours\n      }, milestone_index);\n    };\n\n    this.checkHoursVal = (value, lable, name) => {\n      if (value === null || value === void 0 ? void 0 : value.length) {\n        if (value.match(pattern) !== null) {\n          let splitItem = value.split(':')[1];\n          let IntItem = +splitItem;\n          let conditionItem = IntItem % 15 === 0;\n\n          if (!conditionItem) {\n            return 'Time should be in mutiples of 15 like 10:15, 10:30';\n          }\n        } else {\n          return 'Please enter a valid pattern like : 10:15';\n        }\n      } else {\n        return `${label[name]} is required.`;\n      }\n    };\n\n    this.isInvalid = (name, value) => {\n      switch (name) {\n        case 'milestone_name':\n          return !value.length ? `${label[name]} is required.` : value.length > 50 ? 'Maximum 50 characters are allowed.' : '';\n\n        case 'from_date':\n          return !value.length ? `${label[name]} is required.` : '';\n\n        case 'recommended_hours':\n          return this.checkHoursVal(value, label, name);\n      }\n    };\n\n    this.checkErrors = () => {\n      const {\n        milestones\n      } = this.props;\n      let {\n        milestone_name,\n        recommended_hours,\n        errors: {\n          pattern_error\n        }\n      } = this.state;\n\n      if (milestone_name === null || milestone_name === void 0 ? void 0 : milestone_name.length) {\n        let errorItems = {};\n        let error_1 = this.isInvalid('milestone_name', milestone_name);\n        let error_3 = this.isInvalid('recommended_hours', recommended_hours);\n        errorItems['milestone_name'] = error_1; // errorItems['from_date'] = error_2;\n\n        if (milestone_name === null || milestone_name === void 0 ? void 0 : milestone_name.length) {\n          errorItems['milestone_name'] = error_1;\n        }\n\n        if ((recommended_hours === null || recommended_hours === void 0 ? void 0 : recommended_hours.length) && (error_3 === null || error_3 === void 0 ? void 0 : error_3.length)) {\n          errorItems['recommended_hours'] = error_3;\n        }\n\n        if (JSON.stringify(this.state.errors) !== JSON.stringify(errorItems)) {\n          this.setState({\n            errors: errorItems\n          });\n        }\n\n        if (!(error_1 === null || error_1 === void 0 ? void 0 : error_1.length) && ((recommended_hours === null || recommended_hours === void 0 ? void 0 : recommended_hours.length) === 0 || !(pattern_error === null || pattern_error === void 0 ? void 0 : pattern_error.length))) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.renderTimeWithCustomFormat = (fromDate, toDate, format, formatSet) => {\n      if (moment(fromDate, format).isValid() && !moment(toDate, format).isValid()) {\n        return `${moment(fromDate, format).format('DD MMM')}`;\n      }\n\n      if (moment(fromDate, format).isValid() && moment(toDate, format).isValid()) {\n        let yearEnd = moment().endOf(\"year\").toISOString();\n        let monthEnd = moment(fromDate, format).endOf(\"month\").toISOString();\n        let item = moment(toDate, format).diff(moment(fromDate, format), 'months', true);\n        let item_year = moment(toDate, format).diff(moment(fromDate, format), 'years', true);\n        let monthDiff = parseInt(item.toString());\n        let yearDiff = parseInt(item_year.toString());\n\n        if (yearDiff > 0 || moment(toDate, format).isAfter(yearEnd) || moment(toDate, format).isAfter(yearEnd)) {\n          return `${moment(fromDate, format).format(formatSet[1])} - ${moment(toDate, format).format(formatSet[1])}`;\n        }\n\n        if (monthDiff > 0 || moment(toDate, format).isAfter(monthEnd)) {\n          return `${moment(fromDate, format).format(formatSet[0])} - ${moment(toDate, format).format(formatSet[0])}`;\n        }\n\n        return `${moment(fromDate, format).format(formatSet[0])} - ${moment(toDate, format).format(formatSet[0])}`;\n      }\n\n      return 'Choose';\n    };\n\n    this.state = {\n      milestone_name: '',\n      isPhotoevidence: true,\n      from_date: '',\n      to_date: '',\n      recommended_hours: '',\n      errors: {\n        milestone_name: '',\n        from_date: '',\n        recommended_hours: '',\n        pattern_error: ''\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      editMileStone,\n      milestones,\n      editMilestoneTiming\n    } = this.props;\n    let item = milestones[editMileStone];\n\n    if (item && Object.keys(item).length) {\n      let {\n        milestone_name,\n        isPhotoevidence,\n        from_date,\n        to_date,\n        recommended_hours\n      } = item;\n      let isValid = null;\n      let isSkip = null;\n\n      if (editMilestoneTiming && Object.keys(editMilestoneTiming).length) {\n        const {\n          checkIsValid,\n          skip\n        } = this.checkIsDateValid(milestones, editMilestoneTiming);\n        isValid = checkIsValid;\n        isSkip = skip;\n\n        if (isValid) {\n          if ('from_date' in editMilestoneTiming) {\n            from_date = editMilestoneTiming === null || editMilestoneTiming === void 0 ? void 0 : editMilestoneTiming.from_date;\n          }\n\n          if ('to_date' in editMilestoneTiming) {\n            to_date = editMilestoneTiming === null || editMilestoneTiming === void 0 ? void 0 : editMilestoneTiming.to_date;\n          }\n        }\n      }\n\n      this.setState({\n        from_date: from_date,\n        isPhotoevidence: isPhotoevidence === undefined ? false : isPhotoevidence,\n        milestone_name: milestone_name,\n        recommended_hours: recommended_hours,\n        to_date: to_date\n      }, () => {\n        if (isValid !== null) {\n          this.props.addTimeToMileStone({\n            from_date,\n            to_date\n          }, editMileStone, isSkip);\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      handleStepForward,\n      handleStepBack,\n      milestones,\n      editMileStone\n    } = this.props;\n    let {\n      milestone_name,\n      isPhotoevidence,\n      recommended_hours,\n      from_date,\n      to_date,\n      errors\n    } = this.state;\n    let from_date_format = from_date;\n    let to_date_format = to_date;\n    let check_errors = this.checkErrors();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section_wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_field\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex_row\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex_col_sm_5\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"relate\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"back\",\n                    onClick: () => {\n                      handleStepForward(6);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"title\",\n                    children: `Edit Milestone ${editMileStone + 1}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex_col_sm_5\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form_field\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form_label\",\n                  children: \"Milestone name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text_field\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    placeholder: \"Enter Milestone name\",\n                    onChange: e => {\n                      this.handleChange('milestone_name', e.target.value);\n                    },\n                    value: milestone_name,\n                    name: \"milestone_name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"error_msg\",\n                  children: errors === null || errors === void 0 ? void 0 : errors.milestone_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form_field\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"checkbox_wrap agree_check\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    onChange: () => {\n                      this.handleChange('isPhotoevidence', !isPhotoevidence);\n                    },\n                    checked: isPhotoevidence,\n                    className: \"filter-type filled-in\",\n                    type: \"checkbox\",\n                    id: \"milestone1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"milestone1\",\n                    children: /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: 'Photo evidence required'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 330,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 329,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form_field\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"f_spacebw\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form_label\",\n                    children: \"Duration of milestone (optional)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 338,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      handleStepForward(8);\n                    },\n                    className: \"fill_btn fill_grey_btn choose_btn\",\n                    children: this.renderTimeWithCustomFormat(from_date_format, to_date_format, 'MM-DD-YYYY', ['DD MMM', 'DD MMM YYYY'] // ['MMM DD', 'MMM DD YYYY'] // to keep the date format stable on front-end (TIC-2467)\n                    )\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form_field\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form_label\",\n                  children: \"Estimated hours (optional)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text_field\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    onChange: e => {\n                      this.setState({\n                        recommended_hours: e.target.value.trimLeft()\n                      }, () => {\n                        let rh_value = this.state.recommended_hours;\n                        let error_item = this.state.errors; // \"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$\";\n\n                        if (!(rh_value === null || rh_value === void 0 ? void 0 : rh_value.length) || rh_value.match(pattern) !== null) {\n                          error_item['pattern_error'] = '';\n                          let splitItem = rh_value.split(':')[1];\n                          let IntItem = +splitItem;\n                          let conditionItem = IntItem % 15 === 0;\n\n                          if (!conditionItem) {\n                            error_item['pattern_error'] = 'Time should be in multiples of 15 like 10:15, 10:30';\n                          }\n                        } else {\n                          error_item['pattern_error'] = 'Please enter a valid pattern like : 10:15';\n                        }\n\n                        this.setState({\n                          errors: error_item\n                        });\n                      });\n                    } // onChange={(e) => { this.handleChange('recommended_hours', e.target.value) }}\n                    ,\n                    value: recommended_hours,\n                    autoComplete: \"off\",\n                    type: \"text\",\n                    placeholder: \"Enter Estimated hours\",\n                    name: \"recommended_hours\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 359,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"error_msg\",\n                  children: (recommended_hours === null || recommended_hours === void 0 ? void 0 : recommended_hours.length) === 0 ? '' : errors.recommended_hours\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"error_msg\",\n                  children: (recommended_hours === null || recommended_hours === void 0 ? void 0 : recommended_hours.length) === 0 ? '' : errors.pattern_error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form_field\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.handleContinue // className=\"fill_btn full_btn\">\n                  ,\n                  className: `fill_btn full_btn btn-effect ${check_errors ? 'disable_btn' : ''}`,\n                  children: 'Continue'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/editMileStone.tsx"],"names":["React","Component","moment","label","milestone_name","from_date","recommended_hours","pattern","EditMilestone","constructor","props","checkIsDateValid","milestones","time","editMileStone","checkIsValid","isSkip","filterMilestone","length","filter","mile_item","index","forEach","mile","validStart","isValid","validEnd","to_date","validStartInput","validEndInput","isSameOrAfter","isSameOrBefore","isSame","skip","handleChange","name","value","error_clone","state","errors","trimLeft","replace","includes","isInvalid","setState","handleContinue","setItems","handleStepForward","handleStepMileStone","isPhotoevidence","milestone_index","checkHoursVal","lable","match","splitItem","split","IntItem","conditionItem","checkErrors","pattern_error","errorItems","error_1","error_3","JSON","stringify","renderTimeWithCustomFormat","fromDate","toDate","format","formatSet","yearEnd","endOf","toISOString","monthEnd","item","diff","item_year","monthDiff","parseInt","toString","yearDiff","isAfter","componentDidMount","editMilestoneTiming","Object","keys","undefined","addTimeToMileStone","render","handleStepBack","from_date_format","to_date_format","check_errors","e","target","rh_value","error_item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\n\ninterface Props {\n    data: any;\n    stepCompleted: boolean;\n    editMileStone: any;\n    editMilestoneTiming: any;\n    handleStepComplete: (data: any) => void;\n    addTimeToMileStone: (data: any, index: any, skip?: any) => void;\n    handleStepForward: (data: any) => void;\n    newMileStoneScreen: (data: any) => void;\n    handleStepMileStone: (data: any, index: any) => void;\n    handleStepBack: () => void;\n    milestones: any;\n}\n\ninterface State {\n    milestone_name: string,\n    isPhotoevidence: boolean,\n    from_date: string,\n    to_date: string,\n    recommended_hours: any\n    errors: any;\n}\n\n// for error messages\nconst label: { [index: string]: string } = {\n    milestone_name: 'Milestone Name',\n    from_date: 'From Date',\n    recommended_hours: 'Recommended Hours',\n}\n\nconst pattern = \"^([0-9][0-9]?[0-9]?[0-9]?[0-9]):[0-9][0-9]$\";\nexport default class EditMilestone extends Component<Props, State> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            milestone_name: '',\n            isPhotoevidence: true,\n            from_date: '',\n            to_date: '',\n            recommended_hours: '',\n            errors: {\n                milestone_name: '',\n                from_date: '',\n                recommended_hours: '',\n                pattern_error: ''\n            }\n        }\n    }\n\n    checkIsDateValid = (milestones: any, time: any) => {\n        const { editMileStone } = this.props;\n        let checkIsValid: any = true;\n        let isSkip: any = true;\n\n        let filterMilestone: any = [];\n\n        if (milestones.length > 1) {\n            filterMilestone = milestones.filter((mile_item: any, index: any) => index !== editMileStone);\n            filterMilestone.forEach((mile: any) => {\n                let validStart = moment(mile.from_date).isValid();\n                let validEnd = moment(mile.to_date).isValid();\n\n                let validStartInput = moment(time.from_date).isValid();\n                let validEndInput = moment(time.to_date).isValid();\n\n                if (validStart && validEnd) {\n                    if (validStartInput && validEndInput) {\n                        if (moment(time.from_date).isSameOrAfter(mile.from_date) && (moment(time.to_date).isSameOrBefore(mile.to_date) ||\n                            moment(time.to_date).isSameOrAfter(mile.from_date))\n                        ) {\n                            checkIsValid = false;\n                            isSkip = false;\n                        }\n                    }\n\n                    if (validStartInput && !validEndInput) {\n                        if (\n                            moment(time.from_date).isSameOrAfter(mile.from_date) &&\n                            moment(time.from_date).isSameOrBefore(mile.to_date)) {\n                            checkIsValid = false;\n                            isSkip = false;\n                        }\n                    }\n                }\n\n                if (validStart && validStartInput && !validEnd) {\n                    if (moment(time.from_date).isSame(mile.from_date) || moment(time.to_date).isSame(mile.from_date)) {\n                        checkIsValid = false;\n                        isSkip = false;\n                    }\n                }\n\n                if (validEnd && validEndInput) {\n                    if (moment(time.to_date).isSame(mile.to_date)) {\n                        checkIsValid = false;\n                        isSkip = false;\n                    }\n                }\n\n            });\n        }\n        return { checkIsValid, skip: isSkip };\n    }\n\n    componentDidMount() {\n        const { editMileStone, milestones, editMilestoneTiming } = this.props;\n        let item = milestones[editMileStone];\n\n        if (item && Object.keys(item).length) {\n            let { milestone_name, isPhotoevidence, from_date, to_date, recommended_hours } = item;\n\n            let isValid: any = null;\n            let isSkip: any = null;\n\n            if (editMilestoneTiming && Object.keys(editMilestoneTiming).length) {\n                const { checkIsValid, skip } = this.checkIsDateValid(milestones, editMilestoneTiming);\n                isValid = checkIsValid;\n                isSkip = skip;\n\n                if (isValid) {\n                    if ('from_date' in editMilestoneTiming) {\n                        from_date = editMilestoneTiming?.from_date;\n                    }\n                    if ('to_date' in editMilestoneTiming) {\n                        to_date = editMilestoneTiming?.to_date;\n                    }\n                }\n            }\n\n            this.setState({\n                from_date: from_date,\n                isPhotoevidence: isPhotoevidence === undefined ? false : isPhotoevidence,\n                milestone_name: milestone_name,\n                recommended_hours: recommended_hours,\n                to_date: to_date,\n            }, () => {\n                if (isValid !== null) {\n                    this.props.addTimeToMileStone(\n                        { from_date, to_date },\n                        editMileStone,\n                        isSkip\n                    )\n                }\n            })\n        }\n    }\n\n    handleChange = (name: string, value: any) => {\n        let error_clone: any = this.state.errors;\n\n\n        if (name === \"milestone_name\") {\n            value = (value).trimLeft().replace(/[^a-zA-Z|0-9 ]/g, \"\")\n        }\n\n        if (name === \"recommended_hours\") {\n            value = (value).trimLeft();\n        }\n\n\n        if (['milestone_name', 'from_date', 'recommended_hours'].includes(name)) {\n            error_clone[name] = this.isInvalid(name, value)\n        }\n        this.setState({ ...this.state, [name]: value, errors: error_clone });\n    }\n\n    handleContinue = () => {\n        this.setItems();\n        this.props.handleStepForward(6);\n    }\n\n\n    setItems = () => {\n        const {  handleStepMileStone, editMileStone } = this.props;\n        let { milestone_name, from_date, to_date, isPhotoevidence, recommended_hours } = this.state;\n        let milestone_index = editMileStone;\n        handleStepMileStone({\n            \"milestone_name\": milestone_name,\n            \"isPhotoevidence\": isPhotoevidence,\n            \"from_date\": from_date, // milestones[milestone_index]?.from_date || '',\n            \"to_date\": to_date, //milestones[milestone_index]?.to_date || '',\n            \"recommended_hours\": recommended_hours\n        }, milestone_index);\n    }\n\n\n    checkHoursVal = (value: any, lable: any, name: any) => {\n        if (value?.length) {\n            if (value.match(pattern) !== null) {\n                let splitItem = value.split(':')[1];\n                let IntItem = +splitItem;\n                let conditionItem = IntItem % 15 === 0;\n\n                if (!conditionItem) {\n                    return 'Time should be in mutiples of 15 like 10:15, 10:30';\n                }\n            } else {\n                return 'Please enter a valid pattern like : 10:15';\n            }\n        } else {\n            return `${label[name]} is required.`\n        }\n    }\n\n    isInvalid = (name: string, value: string) => {\n        switch (name) {\n            case 'milestone_name':\n                return !value.length ? `${label[name]} is required.` : value.length > 50 ? 'Maximum 50 characters are allowed.' : '';\n            case 'from_date':\n                return !value.length ? `${label[name]} is required.` : '';\n            case 'recommended_hours':\n                return this.checkHoursVal(value, label, name);\n        }\n    }\n\n    checkErrors = () => {\n        const { milestones } = this.props;\n\n    \n\n        let { milestone_name, recommended_hours, errors: { pattern_error } } = this.state;\n        if (milestone_name?.length) {\n            let errorItems: any = {};\n            let error_1 = this.isInvalid('milestone_name', milestone_name);\n            let error_3 = this.isInvalid('recommended_hours', recommended_hours);\n            errorItems['milestone_name'] = error_1;\n            // errorItems['from_date'] = error_2;\n\n            if (milestone_name?.length) {\n                errorItems['milestone_name'] = error_1;\n            }\n\n            if (recommended_hours?.length && error_3?.length) {\n                errorItems['recommended_hours'] = error_3;\n            }\n\n            if (JSON.stringify(this.state.errors) !== JSON.stringify(errorItems)) {\n                this.setState({ errors: errorItems })\n            }\n\n            if (!error_1?.length && (recommended_hours?.length === 0 || !pattern_error?.length)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    renderTimeWithCustomFormat = (fromDate: any, toDate: any, format: any, formatSet?: any) => {\n\n        if (moment(fromDate, format).isValid() && !moment(toDate, format).isValid()) {\n            return `${moment(fromDate, format).format('DD MMM')}`\n        }\n\n        if (moment(fromDate, format).isValid() && moment(toDate, format).isValid()) {\n            let yearEnd = moment().endOf(\"year\").toISOString();\n            let monthEnd = moment(fromDate, format).endOf(\"month\").toISOString();\n\n            let item: any = moment(toDate, format).diff(moment(fromDate, format), 'months', true);\n            let item_year: any = moment(toDate, format).diff(moment(fromDate, format), 'years', true);\n\n            let monthDiff = parseInt(item.toString());\n            let yearDiff = parseInt(item_year.toString());\n\n            if (yearDiff > 0 || moment(toDate, format).isAfter(yearEnd) || moment(toDate, format).isAfter(yearEnd)) {\n                return `${moment(fromDate, format).format(formatSet[1])} - ${moment(toDate, format).format(formatSet[1])}`\n            }\n            if (monthDiff > 0 || moment(toDate, format).isAfter(monthEnd)) {\n                return `${moment(fromDate, format).format(formatSet[0])} - ${moment(toDate, format).format(formatSet[0])}`\n            }\n            return `${moment(fromDate, format).format(formatSet[0])} - ${moment(toDate, format).format(formatSet[0])}`\n        }\n\n        return 'Choose';\n    }\n\n    render() {\n        const { handleStepForward, handleStepBack, milestones, editMileStone } = this.props;\n        let { milestone_name, isPhotoevidence, recommended_hours, from_date, to_date, errors } = this.state;\n        let from_date_format = from_date;\n        let to_date_format = to_date;\n\n        let check_errors = this.checkErrors();\n\n        return (\n            <div className=\"app_wrapper\">\n                <div className=\"section_wrapper\">\n                    <div className=\"custom_container\">\n                        <div className=\"form_field\">\n                            <div className=\"flex_row\">\n                                <div className=\"flex_col_sm_5\">\n                                    <div className=\"relate\">\n                                        <button\n                                            className=\"back\"\n                                            onClick={() => { handleStepForward(6) }}>\n                                        </button>\n                                        <span className=\"title\">\n                                            {`Edit Milestone ${editMileStone + 1}`}\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"flex_row\">\n                            <div className=\"flex_col_sm_5\">\n                                <div className=\"form_field\">\n                                    <label className=\"form_label\">Milestone name</label>\n                                    <div className=\"text_field\">\n                                        <input\n                                            type=\"text\"\n                                            placeholder=\"Enter Milestone name\"\n                                            onChange={(e) => { this.handleChange('milestone_name', e.target.value) }}\n                                            value={milestone_name}\n                                            name=\"milestone_name\" />\n                                    </div>\n                                    <span className=\"error_msg\">{errors?.milestone_name}</span>\n                                </div>\n                                <div className=\"form_field\">\n\n                                    <div className=\"checkbox_wrap agree_check\">\n                                        <input\n                                            onChange={() => { this.handleChange('isPhotoevidence', !isPhotoevidence) }}\n                                            checked={isPhotoevidence}\n                                            className=\"filter-type filled-in\"\n                                            type=\"checkbox\"\n                                            id=\"milestone1\" />\n                                        <label htmlFor=\"milestone1\">\n                                            <b>\n                                                {'Photo evidence required'}\n                                            </b>\n                                        </label>\n                                    </div>\n                                </div>\n                                <div className=\"form_field\">\n                                    <div className=\"f_spacebw\">\n                                        <label className=\"form_label\">Duration of milestone (optional)</label>\n                                        <button\n                                            onClick={() => { handleStepForward(8) }}\n                                            className=\"fill_btn fill_grey_btn choose_btn\">\n                                            {this.renderTimeWithCustomFormat(\n                                                from_date_format,\n                                                to_date_format,\n                                                'MM-DD-YYYY',\n                                                ['DD MMM', 'DD MMM YYYY']\n                                                // ['MMM DD', 'MMM DD YYYY'] // to keep the date format stable on front-end (TIC-2467)\n                                            )}\n                                            {/* {!to_date_format.length && from_date_format.length\n                                                ? `${from_date_format}` : to_date_format.length\n                                                    ? `${from_date_format} - ${to_date_format}`\n                                                    : 'Choose'} */}\n                                        </button>\n                                    </div>\n                                </div>\n                                <div className=\"form_field\">\n                                    <label className=\"form_label\">Estimated hours (optional)</label>\n                                    <div className=\"text_field\">\n                                        <input\n                                            onChange={(e) => {\n                                                this.setState({ recommended_hours: (e.target.value).trimLeft() }, () => {\n                                                    let rh_value = this.state.recommended_hours;\n                                                    let error_item = this.state.errors;\n\n                                                    // \"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$\";\n\n                                                    if (!rh_value?.length || rh_value.match(pattern) !== null) {\n                                                        error_item['pattern_error'] = '';\n                                                        let splitItem = rh_value.split(':')[1];\n                                                        let IntItem = +splitItem;\n                                                        let conditionItem = IntItem % 15 === 0;\n                                                        if (!conditionItem) {\n                                                            error_item['pattern_error'] = 'Time should be in multiples of 15 like 10:15, 10:30';\n                                                        }\n                                                    } else {\n                                                        error_item['pattern_error'] = 'Please enter a valid pattern like : 10:15';\n                                                    }\n                                                    this.setState({ errors: error_item });\n                                                });\n                                            }}\n                                            // onChange={(e) => { this.handleChange('recommended_hours', e.target.value) }}\n                                            value={recommended_hours}\n                                            autoComplete=\"off\"\n                                            type=\"text\"\n                                            placeholder=\"Enter Estimated hours\"\n                                            name=\"recommended_hours\" />\n                                    </div>\n                                    <span className=\"error_msg\">{recommended_hours?.length === 0 ? '' : errors.recommended_hours}</span>\n                                    <span className=\"error_msg\">{recommended_hours?.length === 0 ? '' : errors.pattern_error}</span>\n                                </div>\n\n                                <div className=\"form_field\">\n                                    <button\n                                        onClick={this.handleContinue}\n                                        // className=\"fill_btn full_btn\">\n                                        className={`fill_btn full_btn btn-effect ${check_errors ? 'disable_btn' : ''}`}>\n                                        {'Continue'}\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}