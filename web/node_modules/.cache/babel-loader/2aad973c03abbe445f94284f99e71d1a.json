{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/lodgeDispute/lodgeDispute.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport close from '../../../../assets/images/icon-close-1.png';\nimport addMedia from \"../../../../assets/images/add-image.png\";\nimport { onFileUpload } from '../../../../redux/auth/actions';\nimport { setShowToast, setLoading } from '../../../../redux/common/actions';\nimport { withRouter } from 'react-router-dom'; //@ts-ignore\n\nimport FsLightbox from 'fslightbox-react';\nimport { lodgeDispute } from '../../../../redux/jobs/actions';\nimport { JobLodgeReasons } from '../../../../utils/common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imageFormats = [\"jpeg\", \"jpg\", \"png\"];\n\nconst LodgeDispute = props => {\n  _s();\n\n  var _props$item, _props$item2;\n\n  let item = props === null || props === void 0 ? void 0 : props.item;\n  let jobId = props === null || props === void 0 ? void 0 : (_props$item = props.item) === null || _props$item === void 0 ? void 0 : _props$item.jobId;\n  let jobName = props === null || props === void 0 ? void 0 : (_props$item2 = props.item) === null || _props$item2 === void 0 ? void 0 : _props$item2.jobName;\n  let history = props === null || props === void 0 ? void 0 : props.history;\n  const [stateData, setStateData] = useState({\n    reason: 0,\n    detail: '',\n    upload: []\n  });\n  const [errorData, setErrorData] = useState({\n    reason: '',\n    detail: '',\n    upload: ''\n  });\n  const [filesUrl, setFilesUrl] = useState([]);\n  const [localFiles, setLocalFiles] = useState({});\n  const [update, forceUpdate] = useState({});\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n  const [isItemsLoad, setLoadItems] = useState({});\n  const {\n    reason,\n    detail,\n    upload\n  } = stateData;\n\n  const isValid = ({\n    name,\n    value,\n    title\n  }) => {\n    if (name === 'reason') {\n      return value === 0 ? `${title} is required.` : '';\n    }\n\n    return !(value === null || value === void 0 ? void 0 : value.length) ? `${title} is required.` : '';\n  };\n\n  const checkErrors = () => {\n    let error_1 = isValid({\n      name: 'reason',\n      value: reason,\n      title: 'Reason'\n    });\n    let error_2 = isValid({\n      name: 'detail',\n      value: detail,\n      title: 'Detail'\n    });\n    let error_3 = isValid({\n      name: 'upload',\n      value: filesUrl,\n      title: 'Media file'\n    }); // if (!error_1?.length && !error_2?.length && !error_3?.length) {\n\n    if (!(error_1 === null || error_1 === void 0 ? void 0 : error_1.length)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  useEffect(() => {\n    setErrorData(prev => {\n      var _stateData$detail;\n\n      return { ...prev,\n        detail: (stateData === null || stateData === void 0 ? void 0 : (_stateData$detail = stateData.detail) === null || _stateData$detail === void 0 ? void 0 : _stateData$detail.length) > 250 ? 'Maximum 250 characters are allowed.' : ''\n      };\n    });\n  }, [stateData]);\n  useEffect(() => {\n    var _Object$values;\n\n    let IsRenderValues = null;\n\n    if ((_Object$values = Object.values(isItemsLoad)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) {\n      IsRenderValues = Array.isArray(Object.values(isItemsLoad)) && Object.values(isItemsLoad)[0] === true ? Object.values(isItemsLoad)[0] : false;\n    }\n\n    if (IsRenderValues === false) {\n      setLoading(true);\n    }\n\n    if (IsRenderValues === true) {\n      setLoading(false);\n    }\n  }, [isItemsLoad]);\n\n  const removeFromItem = index => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async e => {\n    var _newFile$type, _newFile$type$split$;\n\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n\n    if ((filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) === 6) {\n      setShowToast(true, \"Max files upload limit is 6\");\n      return;\n    }\n\n    var fileType = newFile === null || newFile === void 0 ? void 0 : (_newFile$type = newFile.type) === null || _newFile$type === void 0 ? void 0 : (_newFile$type$split$ = _newFile$type.split('/')[1]) === null || _newFile$type$split$ === void 0 ? void 0 : _newFile$type$split$.toLowerCase();\n    var selectedFileSize = (newFile === null || newFile === void 0 ? void 0 : newFile.size) / 1024 / 1024; // size in mib\n\n    if (imageFormats.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    formData.append('file', newFile);\n    setLoadItems({});\n    const res = await onFileUpload(formData);\n\n    if (res.success) {\n      let link = res.imgUrl;\n      let check_type = 1;\n      setFilesUrl(prev => [...prev, {\n        \"mediaType\": check_type,\n        \"link\": link\n      }]);\n      setLoadItems(prev => ({\n        [filesUrl.length - 1]: false\n      }));\n      setLocalFiles(prev => ({ ...prev,\n        [filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length]: URL.createObjectURL(newFile)\n      }));\n    }\n  };\n\n  const setItemToggle = index => {\n    setToggler(prev => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item, index) => {\n    let split_item_format = item.split('.');\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n    let split_item_name = item.split('/');\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render = null;\n\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            setItemToggle(index);\n          },\n          title: get_split_name,\n          src: item,\n          alt: \"media\",\n          onLoad: () => {\n            setLoadItems(prev => ({\n              [index]: true\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 32\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"figure\", {\n        className: \"img_video\",\n        children: [image_render, /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            removeFromItem(index);\n          },\n          src: close,\n          alt: \"remove\",\n          className: \"remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  const handleSubmit = async () => {\n    let data = {\n      \"jobId\": jobId,\n      \"reason\": reason\n    };\n\n    if (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) {\n      data['photos'] = filesUrl;\n    }\n\n    if (detail === null || detail === void 0 ? void 0 : detail.length) {\n      data['details'] = detail;\n    }\n\n    let response = await lodgeDispute(data);\n\n    if (response === null || response === void 0 ? void 0 : response.success) {\n      history.push('/lodge-success');\n    }\n  };\n\n  const renderTypes = ({\n    id\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"checkbox_wrap agree_check\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: reason,\n        onClick: () => {\n          setStateData(prev => ({ ...prev,\n            reason: id\n          }));\n        },\n        checked: reason === id,\n        name: \"Reason\",\n        className: \"filter-type filled-in\",\n        type: \"checkbox\",\n        id: `reason${id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `reason${id}`,\n        children: JobLodgeReasons(id, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderFilteredItems = () => {\n    let sources = [];\n    let types = [];\n\n    if (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) {\n      filesUrl.forEach(item => {\n        if ((item === null || item === void 0 ? void 0 : item.mediaType) === 1) {\n          sources.push(item.link);\n          types.push('image');\n        }\n      });\n    }\n\n    return {\n      sources,\n      types\n    };\n  };\n\n  const {\n    sources,\n    types\n  } = renderFilteredItems();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex_row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_col_sm_8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relate\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            props.backTab('lodge');\n          },\n          className: \"back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"xs_sub_title\",\n          children: jobName || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: \"Lodge dispute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"commn_para\",\n        children: \"Enter reason text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FsLightbox, {\n        toggler: toggler,\n        slide: selectedSlide,\n        sources: sources,\n        types: types\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reason_wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_spacebw\",\n          children: [renderTypes({\n            id: 1\n          }), renderTypes({\n            id: 2\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_spacebw\",\n          children: [renderTypes({\n            id: 3\n          }), renderTypes({\n            id: 4\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_spacebw\",\n          children: [renderTypes({\n            id: 5\n          }), renderTypes({\n            id: 6\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_spacebw\",\n          children: renderTypes({\n            id: 7\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_col_sm_9\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form_label\",\n          children: \"Details (optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text_field\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: detail,\n            onChange: e => {\n              setStateData(prev => ({ ...prev,\n                detail: e.target.value.trimLeft()\n              }));\n            },\n            placeholder: \"It\\u2019s really bad work, because...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errorData.detail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_col_sm_12\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload_img_video\",\n        children: [(filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) ? filesUrl.map((item, index) => renderbyFileFormat(item.link, index)) : null, (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) < 6 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"upload_media\",\n            htmlFor: \"upload_img_video\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: addMedia,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: onFileChange,\n            type: \"file\",\n            accept: \"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\",\n            style: {\n              display: \"none\"\n            },\n            id: \"upload_img_video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: `fill_btn full_btn btn-effect ${checkErrors() ? 'disable_btn' : ''}`,\n        children: 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LodgeDispute, \"o8UCQISuwmSbRaQuw1KVRaaWp0M=\");\n\n_c = LodgeDispute;\nexport default _c2 = withRouter(LodgeDispute);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LodgeDispute\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/lodgeDispute/lodgeDispute.tsx"],"names":["React","useState","useEffect","close","addMedia","onFileUpload","setShowToast","setLoading","withRouter","FsLightbox","lodgeDispute","JobLodgeReasons","imageFormats","LodgeDispute","props","item","jobId","jobName","history","stateData","setStateData","reason","detail","upload","errorData","setErrorData","filesUrl","setFilesUrl","localFiles","setLocalFiles","update","forceUpdate","toggler","setToggler","selectedSlide","setSelectSlide","isItemsLoad","setLoadItems","isValid","name","value","title","length","checkErrors","error_1","error_2","error_3","prev","IsRenderValues","Object","values","Array","isArray","removeFromItem","index","splice","onFileChange","e","formData","FormData","newFile","target","files","fileType","type","split","toLowerCase","selectedFileSize","size","indexOf","includes","append","res","success","link","imgUrl","check_type","URL","createObjectURL","setItemToggle","renderbyFileFormat","split_item_format","get_split_fromat","split_item_name","get_split_name","image_render","handleSubmit","data","response","push","renderTypes","id","renderFilteredItems","sources","types","forEach","mediaType","backTab","trimLeft","map","display"],"mappings":"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","sourcesContent":["import React, { ReactElement, useState, useEffect } from 'react'\nimport dummy from '../../../../assets/images/u_placeholder.jpg';\nimport approved from '../../../../assets/images/approved.png';\nimport waiting from '../../../../assets/images/exclamation.png';\nimport close from '../../../../assets/images/icon-close-1.png';\nimport addMedia from \"../../../../assets/images/add-image.png\";\nimport noDataFound from \"../../../../assets/images/no-search-data.png\";\n\nimport { onFileUpload } from '../../../../redux/auth/actions';\nimport { setShowToast, setLoading } from '../../../../redux/common/actions';\n\nimport { withRouter } from 'react-router-dom';\n\n//@ts-ignore\nimport FsLightbox from 'fslightbox-react';\n\nimport { lodgeDispute } from '../../../../redux/jobs/actions';\n\nimport { JobLodgeReasons } from '../../../../utils/common';\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\n\nconst LodgeDispute = (props: any) => {\n\n    let item = props?.item;\n    let jobId = props?.item?.jobId;\n    let jobName = props?.item?.jobName;\n    let history = props?.history;\n    const [stateData, setStateData] = useState({ reason: 0, detail: '', upload: [] });\n    const [errorData, setErrorData] = useState({ reason: '', detail: '', upload: '' });\n    const [filesUrl, setFilesUrl] = useState([] as any);\n    const [localFiles, setLocalFiles] = useState({});\n\n    const [update, forceUpdate] = useState({});\n    const [toggler, setToggler] = useState(false);\n    const [selectedSlide, setSelectSlide] = useState(1);\n\n    const [isItemsLoad, setLoadItems] = useState({});\n\n\n    const { reason, detail, upload } = stateData;\n\n    const isValid = ({ name, value, title }: any) => {\n        if (name === 'reason') {\n            return value === 0 ? `${title} is required.` : '';\n        }\n        return !value?.length ? `${title} is required.` : '';\n    }\n\n    const checkErrors = () => {\n        let error_1 = isValid({ name: 'reason', value: reason, title: 'Reason' });\n        let error_2 = isValid({ name: 'detail', value: detail, title: 'Detail' });\n        let error_3 = isValid({ name: 'upload', value: filesUrl, title: 'Media file' });\n\n        // if (!error_1?.length && !error_2?.length && !error_3?.length) {\n        if (!error_1?.length) {\n            return false;\n        }\n        return true;\n    }\n\n\n    useEffect(() => {\n        setErrorData((prev: any) => ({\n            ...prev,\n            detail: stateData?.detail?.length > 250 ? 'Maximum 250 characters are allowed.' : ''\n        }))\n    }, [stateData]);\n\n\n    useEffect(() => {\n        let IsRenderValues = null;\n        if (Object.values(isItemsLoad)?.length) {\n            IsRenderValues = Array.isArray(Object.values(isItemsLoad)) && Object.values(isItemsLoad)[0] === true ? Object.values(isItemsLoad)[0] : false;\n        }\n\n        if (IsRenderValues === false) {\n            setLoading(true);\n        }\n\n        if (IsRenderValues === true) {\n            setLoading(false);\n        }\n\n    }, [isItemsLoad])\n\n    const removeFromItem = (index: any) => {\n        filesUrl.splice(index, 1);\n        setFilesUrl(filesUrl);\n        Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n    }\n\n    const onFileChange = async (e: any) => {\n        const formData = new FormData();\n        const newFile = e.target.files[0];\n\n        if (filesUrl?.length === 6) {\n            setShowToast(true, \"Max files upload limit is 6\")\n            return;\n        }\n\n        var fileType = (newFile?.type?.split('/')[1])?.toLowerCase();\n        var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n        if (imageFormats.indexOf(fileType) < 0 || (selectedFileSize > 10)) {\n            setShowToast(true, \"The file must be in proper format or size\")\n            return;\n        }\n\n        if (imageFormats.includes(fileType) && selectedFileSize > 10) { // image validations\n            setShowToast(true, \"The image file size must be below 10 mb\")\n            return;\n        }\n\n        formData.append('file', newFile);\n        setLoadItems({});\n        const res = await onFileUpload(formData)\n        if (res.success) {\n            let link: string = res.imgUrl;\n            let check_type: any = 1;\n            setFilesUrl((prev: Array<any>) => [...prev, {\n                \"mediaType\": check_type,\n                \"link\": link\n            }]);\n            setLoadItems((prev: any) => ({\n                [filesUrl.length - 1]: false\n            }))\n            setLocalFiles((prev: any) => ({ ...prev, [filesUrl?.length]: URL.createObjectURL(newFile) }));\n        }\n    }\n\n    const setItemToggle = (index: any) => {\n        setToggler((prev: boolean) => !prev);\n        setSelectSlide(index + 1);\n    }\n\n    const renderbyFileFormat = (item: any, index: any) => {\n        let split_item_format = item.split('.');\n        let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n        let split_item_name = item.split('/');\n        let get_split_name = split_item_name[split_item_name.length - 1];\n        let image_render: any = null;\n        if (get_split_fromat) {\n            if (imageFormats.includes(get_split_fromat)) {\n                image_render = <img\n                    onClick={() => { setItemToggle(index) }}\n                    title={get_split_name}\n                    src={item}\n                    alt=\"media\"\n                    onLoad={() => {\n                        setLoadItems((prev: any) => ({\n                            [index]: true\n                        }))\n                    }}\n                />\n            }\n            return (\n                <figure className=\"img_video\">\n                    {image_render}\n                    <img\n                        onClick={() => { removeFromItem(index) }}\n                        src={close} alt=\"remove\" className=\"remove\" />\n                    {/* <span style={{ fontSize: '10px' }}>{get_split_name}</span> */}\n                </figure>\n            )\n        }\n    }\n\n    const handleSubmit = async () => {\n        let data: any = {\n            \"jobId\": jobId,\n            \"reason\": reason\n        }\n\n        if (filesUrl?.length) {\n            data['photos'] = filesUrl;\n        }\n\n        if (detail?.length) {\n            data['details'] = detail;\n        }\n\n        let response: any = await lodgeDispute(data);\n\n        if (response?.success) {\n            history.push('/lodge-success');\n        }\n    }\n\n\n\n    const renderTypes = ({ id, }: any) => {\n        return (\n            <div className=\"checkbox_wrap agree_check\">\n                <input\n                    value={reason}\n                    onClick={() => { setStateData((prev: any) => ({ ...prev, reason: id })) }}\n                    checked={reason === id}\n                    name=\"Reason\" className=\"filter-type filled-in\" type=\"checkbox\" id={`reason${id}`} />\n                <label htmlFor={`reason${id}`}>\n                    {JobLodgeReasons(id, true)}\n                </label>\n            </div>\n        )\n    }\n\n    const renderFilteredItems = () => {\n        let sources: any = [];\n        let types: any = [];\n\n        if (filesUrl?.length) {\n            filesUrl.forEach((item: any) => {\n                if (item?.mediaType === 1) {\n                    sources.push(item.link);\n                    types.push('image');\n                }\n            })\n        }\n\n        return { sources, types };\n    }\n\n    const { sources, types } = renderFilteredItems();\n\n\n    return (\n        <div className=\"flex_row\">\n            <div className=\"flex_col_sm_8\">\n                <div className=\"relate\">\n                    <button\n                        onClick={() => { props.backTab('lodge') }}\n                        className=\"back\"></button>\n                    <span className=\"xs_sub_title\">\n                        {jobName || ''}\n                    </span>\n                </div>\n                <span className=\"sub_title\">Lodge dispute</span>\n                <p className=\"commn_para\">Enter reason text</p>\n\n                <FsLightbox\n                    toggler={toggler}\n                    slide={selectedSlide}\n                    sources={sources}\n                    types={types}\n                />\n\n\n                <div className=\"reason_wrap\">\n                    <div className=\"f_spacebw\">\n                        {renderTypes({ id: 1 })}\n                        {renderTypes({ id: 2 })}\n                    </div>\n\n                    <div className=\"f_spacebw\">\n                        {renderTypes({ id: 3 })}\n                        {renderTypes({ id: 4 })}\n                    </div>\n\n                    <div className=\"f_spacebw\">\n                        {renderTypes({ id: 5 })}\n                        {renderTypes({ id: 6 })}\n                    </div>\n\n                    <div className=\"f_spacebw\">\n                        {renderTypes({ id: 7 })}\n                    </div>\n\n                </div>\n\n            </div>\n\n            <div className=\"flex_col_sm_9\">\n                <div className=\"form_field\">\n                    <label className=\"form_label\">Details (optional)</label>\n                    <div className=\"text_field\">\n                        <textarea\n                            value={detail}\n                            onChange={(e: any) => {\n                                setStateData((prev: any) => ({ ...prev, detail: (e.target.value).trimLeft() }))\n                            }}\n                            placeholder=\"It’s really bad work, because...\"></textarea>\n                    </div>\n                    <span className=\"error_msg\">\n                        {errorData.detail}\n                    </span>\n                </div>\n            </div>\n            <div className=\"flex_col_sm_12\">\n                <div className=\"upload_img_video\">\n                    {filesUrl?.length ?\n                        filesUrl.map((item: any, index: number) => (renderbyFileFormat(item.link, index)))\n                        : null}\n\n                    {filesUrl?.length < 6 ? (\n                        <React.Fragment>\n                            <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                                <img src={addMedia} alt=\"\" />\n                            </label>\n                            <input\n                                onChange={onFileChange}\n                                type=\"file\"\n                                accept=\"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"\n                                style={{ display: \"none\" }}\n                                id=\"upload_img_video\"\n                            />\n                        </React.Fragment>\n                    ) : null}\n                </div>\n                <button\n                    onClick={handleSubmit}\n                    className={`fill_btn full_btn btn-effect ${checkErrors() ? 'disable_btn' : ''}`}>\n                    {'Send'}\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(LodgeDispute);"]},"metadata":{},"sourceType":"module"}