{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/uploadMedia.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport remove from \"../../../assets/images/icon-close-1.png\";\nimport addMedia from \"../../../assets/images/add-image.png\";\nimport docThumbnail from '../../../assets/images/add-document.png';\nimport { onFileUpload } from '../../../redux/auth/actions';\nimport { setLoading, setShowToast } from '../../../redux/common/actions'; //@ts-ignore\n\nimport { thumbnailExtract } from '../../../common/thumbnail'; //@ts-ignore\n\nimport DropboxChooser from 'react-dropbox-chooser';\nimport Menu from '@material-ui/core/Menu';\nimport Fade from '@material-ui/core/Fade';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst imageFormats = [\"jpeg\", \"jpg\", \"png\"];\nconst videoFormats = [\"mp4\", \"wmv\", \"avi\"];\nconst docTypes = [\"jpeg\", \"jpg\", \"png\", \"mp4\", \"wmv\", \"avi\", \"pdf\", \"doc\", \"docx\", \"msword\"];\nconst docformats = [\"pdf\", \"doc\", \"docx\", \"msword\"];\n\nconst UploadMedia = ({\n  jobName,\n  title,\n  para,\n  hasDescription,\n  data,\n  stepCompleted,\n  handleStepForward,\n  handleStepComplete,\n  handleStepBack\n}) => {\n  _s();\n\n  var _Object$values;\n\n  const [localFiles, setLocalFiles] = useState({});\n  const [update, forceUpdate] = useState({});\n  const [filesUrl, setFilesUrl] = useState([]);\n  const [description, setDescription] = useState('');\n  const [submitClicked, setSubmitClicked] = useState(false);\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n  const [isItemsLoad, setLoadItems] = useState({});\n  const [countMedia, setCountMedia] = useState({\n    photos: 0,\n    video: 0\n  });\n  const [renderAsyncLoad, setAsyncLoad] = useState(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const isFileChoser = Boolean(anchorEl);\n\n  const fileChoserClicked = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const fileChoserClosed = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    if (stepCompleted) {\n      setFilesUrl(data === null || data === void 0 ? void 0 : data.urls);\n      setSubmitClicked(true);\n    }\n  }, [stepCompleted, data]);\n  useEffect(() => {// filesUrl\n  }, []);\n\n  const randomDelay = (item, index) => new Promise(resolve => {\n    let split_item_format = item.split('.');\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n    let split_item_name = item.split('/');\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render = null;\n    let loadByIndex = {\n      [index]: true\n    };\n\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          id: `media_${index}`,\n          onClick: () => {\n            setItemToggle(index);\n          },\n          title: get_split_name,\n          src: item,\n          onLoad: () => {\n            loadByIndex[index] = false;\n            console.log('image_render', '--->', {\n              loadByIndex\n            });\n          },\n          alt: \"media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this);\n      }\n    }\n\n    if (!loadByIndex[index]) {\n      console.log('Hered!!!');\n      resolve(image_render);\n    }\n  });\n\n  const calc = async (item, index) => {\n    let result = await randomDelay(item, index);\n    console.log({\n      result\n    });\n    return result;\n  };\n\n  const asyncFunc = async () => {\n    const p = filesUrl.map((item, index) => calc(item.link, index));\n    const results = await Promise.all(p);\n    setAsyncLoad(results);\n  };\n\n  useEffect(() => {\n    asyncFunc();\n  }, [filesUrl]);\n\n  const checkErrors = () => {\n    if (!(filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length)) {\n      return true;\n    }\n\n    if (hasDescription && (!description.trim() || description.length > 1000)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const removeFromItem = index => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const checkIfVideoExist = () => {\n    let videoItems = [];\n    let ImageItems = [];\n    let concatFormat = [...imageFormats, ...docformats];\n    filesUrl.forEach(element => {\n      let split_items = element.link.split('.');\n      let format_split_items = split_items[(split_items === null || split_items === void 0 ? void 0 : split_items.length) - 1];\n\n      if (videoFormats.includes(format_split_items)) {\n        videoItems.push(format_split_items);\n      }\n\n      if (concatFormat.includes(format_split_items)) {\n        ImageItems.push(format_split_items);\n      }\n    });\n    console.log({\n      concatFormat,\n      ImageItems,\n      videoItems\n    });\n\n    if ((ImageItems === null || ImageItems === void 0 ? void 0 : ImageItems.length) === 6) {\n      return \".mp4, .wmv, .avi\";\n    }\n\n    if ((videoItems === null || videoItems === void 0 ? void 0 : videoItems.length) == 2) {\n      return \".png,.jpg,.jpeg,.pdf,.doc\";\n    }\n\n    return \".png,.jpg,.jpeg,.pdf,.doc,.mp4,.wmv,.avi\";\n  };\n\n  const checkIfVideoExist_ = () => {\n    let videoItems = [];\n    let ImageItems = [];\n    filesUrl.forEach(element => {\n      let split_items = element.link.split('.');\n      let format_split_items = split_items[(split_items === null || split_items === void 0 ? void 0 : split_items.length) - 1];\n\n      if (videoFormats.includes(format_split_items)) {\n        videoItems.push(format_split_items);\n      }\n\n      if ([...imageFormats, ...docformats].includes(format_split_items)) {\n        ImageItems.push(format_split_items);\n      }\n    });\n    return {\n      videoCount: videoItems.length,\n      imageCount: ImageItems.length\n    };\n  };\n\n  const onDropBoxSuccess = files => {\n    onFileChange('', true, files[0]);\n  };\n\n  const onDropBoxCancel = err => {\n    console.log(err, \"err --- Dropbox\");\n  };\n\n  const onFileChange = async (e, isDropbox, dropBoxFile) => {\n    const formData = new FormData();\n    var fileType;\n    const newFile = isDropbox ? dropBoxFile === null || dropBoxFile === void 0 ? void 0 : dropBoxFile.link : e.target.files[0];\n\n    if (isDropbox) {\n      var _dropBoxArr;\n\n      let dropBoxArr = newFile === null || newFile === void 0 ? void 0 : newFile.split(\".\");\n      fileType = (_dropBoxArr = dropBoxArr[dropBoxArr.length - 1]) === null || _dropBoxArr === void 0 ? void 0 : _dropBoxArr.toLowerCase();\n    } else {\n      var _newFile$type, _newFile$type$split$;\n\n      fileType = newFile === null || newFile === void 0 ? void 0 : (_newFile$type = newFile.type) === null || _newFile$type === void 0 ? void 0 : (_newFile$type$split$ = _newFile$type.split('/')[1]) === null || _newFile$type$split$ === void 0 ? void 0 : _newFile$type$split$.toLowerCase();\n    }\n\n    fileChoserClosed();\n\n    if (hasDescription && !imageFormats.includes(fileType)) {\n      setShowToast(true, \"The file must be in proper format\");\n      return;\n    }\n\n    if ((filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) === 8) {\n      setShowToast(true, \"Max files upload limit is 6\");\n      return;\n    }\n\n    let checkCounts = checkIfVideoExist_();\n\n    if ((checkCounts === null || checkCounts === void 0 ? void 0 : checkCounts.videoCount) === 2) {\n      if (videoFormats.includes(fileType)) {\n        return;\n      }\n    }\n\n    if ((checkCounts === null || checkCounts === void 0 ? void 0 : checkCounts.imageCount) >= 6) {\n      let concatFormats = [...imageFormats, ...docformats];\n\n      if (concatFormats.includes(fileType)) {\n        return;\n      }\n    }\n\n    let filesUrlClone = filesUrl;\n    let countVideoFormats = filesUrlClone.map(item => {\n      let split_items = item.link.split('.');\n      let format_split_items = split_items[(split_items === null || split_items === void 0 ? void 0 : split_items.length) - 1];\n\n      if (videoFormats.includes(format_split_items)) {\n        return format_split_items;\n      }\n    }).filter(item => item !== undefined);\n    var selectedFileSize = isDropbox ? (dropBoxFile === null || dropBoxFile === void 0 ? void 0 : dropBoxFile.bytes) / 1024 / 1024 : (newFile === null || newFile === void 0 ? void 0 : newFile.size) / 1024 / 1024; // size in mb\n\n    if (docTypes.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 mb\");\n      return;\n    }\n\n    if (videoFormats.includes(fileType)) {\n      // video validations\n      if (selectedFileSize > 10) {\n        setShowToast(true, \"The video file size must be below 20 mb\");\n        return;\n      }\n\n      if ((countVideoFormats === null || countVideoFormats === void 0 ? void 0 : countVideoFormats.length) > 1) {\n        setShowToast(true, \"Max video file upload limit is 2\");\n        return;\n      }\n    }\n\n    !isDropbox && formData.append('file', newFile);\n    setLoadItems({});\n    const res = isDropbox ? {\n      success: true\n    } : await onFileUpload(formData);\n    setLoading(true);\n\n    if (res.success) {\n      let link = isDropbox ? dropBoxFile === null || dropBoxFile === void 0 ? void 0 : dropBoxFile.link : res === null || res === void 0 ? void 0 : res.imgUrl;\n      let check_type = imageFormats.includes(fileType) ? 1 : videoFormats.includes(fileType) ? 2 : [\"doc\", \"docx\", \"msword\"].includes(fileType) ? 3 : 4;\n      setFilesUrl(prev => [...prev, {\n        \"mediaType\": check_type,\n        \"link\": link\n      }]);\n      setLoadItems(prev => ({\n        [filesUrl.length - 1]: false\n      }));\n      setLocalFiles(prev => ({ ...prev,\n        [filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length]: isDropbox ? dropBoxFile === null || dropBoxFile === void 0 ? void 0 : dropBoxFile.link : URL.createObjectURL(newFile)\n      }));\n    }\n  };\n\n  const setItemToggle = index => {\n    setToggler(prev => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item, index, base64) => {\n    let split_item_format = item.split('.');\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n    let split_item_name = item.split('/');\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render = null;\n    let loadByIndex = {\n      [index]: true\n    }; // setLoading(true);\n\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          id: `media_${index}` // onClick={() => { setItemToggle(index) }}\n          ,\n          title: get_split_name,\n          src: item,\n          \"async-src\": item,\n          decoding: \"async\",\n          loading: \"lazy\",\n          onLoad: () => {\n            console.log('Loaded!');\n            loadByIndex[index] = false;\n            console.log('image_render', '--->', {\n              loadByIndex\n            });\n            setLoadItems(prev => ({\n              [index]: true\n            }));\n          },\n          alt: \"media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this);\n      }\n\n      if (videoFormats.includes(get_split_fromat)) {\n        if (base64) {\n          image_render = /*#__PURE__*/_jsxDEV(\"video\", {\n            id: `media_${index}`,\n            title: get_split_name,\n            crossOrigin: \"anonymous\",\n            src: item,\n            poster: base64,\n            controls: false,\n            onLoadedData: () => {\n              console.log('Loaded!');\n              setLoadItems(prev => ({\n                [index]: true\n              }));\n            } // onClick={() => { setItemToggle(index) }}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 25\n          }, this);\n        } else {\n          image_render = /*#__PURE__*/_jsxDEV(\"video\", {\n            id: `media_${index}`,\n            crossOrigin: \"anonymous\",\n            src: item,\n            controls: false,\n            title: get_split_name,\n            onLoadedData: () => {\n              console.log('Loaded!');\n              setLoadItems(prev => ({\n                [index]: true\n              }));\n            } // onClick={() => { setItemToggle(index) }}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 25\n          }, this);\n        }\n      }\n\n      if (docformats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          id: `media_${index}`,\n          title: get_split_name,\n          src: docThumbnail,\n          \"async-src\": item,\n          decoding: \"async\",\n          loading: \"lazy\",\n          onLoad: () => {\n            loadByIndex[index] = false;\n            console.log('Loaded!');\n            setLoadItems(prev => ({\n              [index]: true\n            }));\n          },\n          alt: \"media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 21\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"figure\", {\n        className: \"img_video\",\n        children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: image_render && /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [image_render, /*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: () => {\n                removeFromItem(index);\n              },\n              src: remove,\n              alt: \"remove\",\n              className: \"remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this); // }\n    }\n  }; // const { sources, types } = renderFilteredItems();\n\n\n  let IsRenderValues = null;\n\n  if ((_Object$values = Object.values(isItemsLoad)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) {\n    IsRenderValues = Array.isArray(Object.values(isItemsLoad)) && Object.values(isItemsLoad)[0] === true ? Object.values(isItemsLoad)[0] : false;\n  }\n\n  if (IsRenderValues === false) {\n    setLoading(true);\n  }\n\n  if (IsRenderValues === true) {\n    setLoading(false);\n  }\n\n  let checkErrors_ = checkErrors();\n  console.log({\n    IsRenderValues,\n    isItemsLoad,\n    check: checkErrors_\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app_wrapper${jobName ? ' padding_0' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `section_wrapper${jobName ? ' padding_0' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"canvas-extractor\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `flex_col_sm_${jobName ? '7' : '6'}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relate\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    hasDescription ? handleStepBack() : handleStepForward(6);\n                  },\n                  className: \"back\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: jobName ? \"xs_sub_title\" : \"title\",\n                  children: jobName || 'Photos and documents'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 33\n              }, this), title && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"sub_title\",\n                children: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"commn_para\",\n                children: para || 'Record a short video (up to 30 seconds) or add up to 6 photos and files to demonstrate your job and any unique requirements.'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 29\n            }, this), !jobName && !(filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) && !hasDescription ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex_col_sm_5 text-right\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: () => {\n                  handleStepForward(14);\n                },\n                className: \"link\",\n                children: 'Skip'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload_img_video\",\n              children: [(filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) ? filesUrl.map((item, index) => renderbyFileFormat(item === null || item === void 0 ? void 0 : item.link, index, item === null || item === void 0 ? void 0 : item.base64)) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"media_btn\",\n                id: \"fade-button\",\n                \"aria-controls\": isFileChoser ? 'fade-menu' : undefined,\n                \"aria-haspopup\": \"true\",\n                \"aria-expanded\": isFileChoser ? 'true' : undefined,\n                onClick: fileChoserClicked,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: addMedia,\n                  alt: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Menu, {\n                className: \"fsp_modal range dropbox\",\n                id: \"fade-menu\",\n                MenuListProps: {\n                  'aria-labelledby': 'fade-button'\n                },\n                anchorEl: anchorEl,\n                open: isFileChoser,\n                onClose: fileChoserClosed,\n                TransitionComponent: Fade,\n                anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'center'\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'left'\n                },\n                children: (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) < 8 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"upload_media\",\n                    htmlFor: \"upload_img_video\",\n                    children: \"Upload from files\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 512,\n                    columnNumber: 45\n                  }, this), !hasDescription ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      onChange: onFileChange,\n                      type: \"file\",\n                      accept: checkIfVideoExist(),\n                      style: {\n                        display: \"none\"\n                      },\n                      id: \"upload_img_video\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 518,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(DropboxChooser, {\n                      appKey: process.env.REACT_APP_DROPBOX_APP_KEY,\n                      success: files => onDropBoxSuccess(files),\n                      cancel: err => onDropBoxCancel(err),\n                      multiselect: false,\n                      linkType: 'direct',\n                      children: /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"dropbox-button\",\n                        children: \"Upload from Dropbox\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 532,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 525,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      onChange: onFileChange,\n                      type: \"file\",\n                      accept: hasDescription ? \"image/png,image/jpg,image/jpeg\" : \"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\",\n                      style: {\n                        display: \"none\"\n                      },\n                      id: \"upload_img_video\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 537,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(DropboxChooser, {\n                      appKey: process.env.REACT_APP_DROPBOX_APP_KEY,\n                      success: files => onDropBoxSuccess(files),\n                      cancel: err => onDropBoxCancel(err),\n                      multiselect: false,\n                      linkType: 'direct',\n                      children: /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"dropbox-button\",\n                        children: \"Upload from Dropbox\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 551,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 544,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 41\n                }, this) : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_8\",\n            children: [hasDescription && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_field\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form_label\",\n                children: \"Photo Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text_field\",\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  placeholder: \"The item has..\",\n                  value: description,\n                  onChange: ({\n                    target: {\n                      value\n                    }\n                  }) => setDescription(value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 568,\n                  columnNumber: 41\n                }, this), description.length ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"char_count\",\n                  children: `character length : ${description.length} / 1000`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 45\n                }, this) : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error_msg\",\n                children: submitClicked && !description.trim() ? 'Photo Description is required.' : description.length > 1000 ? 'Maximum 1000 characters are allowed.' : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_field\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setSubmitClicked(true);\n                  let filteredItems = [];\n                  let isRender = false;\n                  filesUrl.forEach((item, index) => {\n                    if ((item === null || item === void 0 ? void 0 : item.mediaType) === 2) {\n                      if (!(item === null || item === void 0 ? void 0 : item.base64)) {\n                        let base64 = thumbnailExtract({\n                          canvasId: '#canvas-extractor',\n                          videoId: `#media_${index}`\n                        });\n                        item['base64'] = base64;\n                      }\n                    }\n\n                    filteredItems.push(item);\n                  });\n\n                  if (!isRender) {\n                    setFilesUrl(filteredItems);\n                    handleStepComplete({\n                      urls: filteredItems,\n                      description: hasDescription ? description : undefined\n                    });\n                  }\n                },\n                className: `fill_btn full_btn btn-effect ${checkErrors_ && IsRenderValues == null ? 'disable_btn' : !checkErrors_ && !IsRenderValues ? 'disable_btn' : ''}`,\n                children: 'Submit'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 579,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UploadMedia, \"Fh3kK8nzkG5iaQkCsTMP3KbY1I0=\");\n\n_c = UploadMedia;\nexport default UploadMedia;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadMedia\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/uploadMedia.tsx"],"names":["React","useEffect","useState","remove","addMedia","docThumbnail","onFileUpload","setLoading","setShowToast","thumbnailExtract","DropboxChooser","Menu","Fade","imageFormats","videoFormats","docTypes","docformats","UploadMedia","jobName","title","para","hasDescription","data","stepCompleted","handleStepForward","handleStepComplete","handleStepBack","localFiles","setLocalFiles","update","forceUpdate","filesUrl","setFilesUrl","description","setDescription","submitClicked","setSubmitClicked","toggler","setToggler","selectedSlide","setSelectSlide","isItemsLoad","setLoadItems","countMedia","setCountMedia","photos","video","renderAsyncLoad","setAsyncLoad","anchorEl","setAnchorEl","isFileChoser","Boolean","fileChoserClicked","event","currentTarget","fileChoserClosed","urls","randomDelay","item","index","Promise","resolve","split_item_format","split","get_split_fromat","length","split_item_name","get_split_name","image_render","loadByIndex","includes","setItemToggle","console","log","calc","result","asyncFunc","p","map","link","results","all","checkErrors","trim","removeFromItem","splice","Array","isArray","checkIfVideoExist","videoItems","ImageItems","concatFormat","forEach","element","split_items","format_split_items","push","checkIfVideoExist_","videoCount","imageCount","onDropBoxSuccess","files","onFileChange","onDropBoxCancel","err","e","isDropbox","dropBoxFile","formData","FormData","fileType","newFile","target","dropBoxArr","toLowerCase","type","checkCounts","concatFormats","filesUrlClone","countVideoFormats","filter","undefined","selectedFileSize","bytes","size","indexOf","append","res","success","imgUrl","check_type","prev","URL","createObjectURL","renderbyFileFormat","base64","IsRenderValues","Object","values","checkErrors_","check","display","vertical","horizontal","process","env","REACT_APP_DROPBOX_APP_KEY","value","filteredItems","isRender","mediaType","canvasId","videoId"],"mappings":"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","sourcesContent":["import React, { SyntheticEvent, useRef, useEffect, useState } from 'react';\nimport colorLogo from '../../../assets/images/ic-logo-yellow.png';\nimport menu from '../../../assets/images/menu-line-white.svg';\nimport bell from '../../../assets/images/ic-notification.png';\nimport dummy from '../../../assets/images/u_placeholder.jpg';\nimport remove from \"../../../assets/images/icon-close-1.png\";\nimport addMedia from \"../../../assets/images/add-image.png\";\nimport videoThumbnail from '../../../assets/images/add-video.png';\nimport docThumbnail from '../../../assets/images/add-document.png'\nimport { onFileUpload } from '../../../redux/auth/actions';\nimport { setLoading, setShowToast } from '../../../redux/common/actions';\n//@ts-ignore\nimport FsLightbox from 'fslightbox-react';\n//@ts-ignore\nimport Skeleton from 'react-loading-skeleton';\nimport { thumbnailExtract } from '../../../common/thumbnail';\n//@ts-ignore\nimport DropboxChooser from 'react-dropbox-chooser';\nimport Menu from '@material-ui/core/Menu';\nimport Fade from '@material-ui/core/Fade';\n\ninterface Proptypes {\n    jobName?: string;\n    title?: string;\n    para?: string;\n    hasDescription?: boolean;\n    data: any;\n    stepCompleted: Boolean;\n    handleStepComplete: (data: any) => void;\n    handleStepForward: (data: any) => void;\n    handleStepBack: () => void;\n}\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\nconst videoFormats: Array<any> = [\"mp4\", \"wmv\", \"avi\"];\nconst docTypes: Array<any> = [\"jpeg\", \"jpg\", \"png\", \"mp4\", \"wmv\", \"avi\", \"pdf\", \"doc\", \"docx\", \"msword\"];\nconst docformats: Array<any> = [\"pdf\", \"doc\", \"docx\", \"msword\"];\n\nconst UploadMedia = ({ jobName, title, para, hasDescription, data, stepCompleted, handleStepForward, handleStepComplete, handleStepBack }: Proptypes) => {\n    const [localFiles, setLocalFiles] = useState({});\n    const [update, forceUpdate] = useState({});\n    const [filesUrl, setFilesUrl] = useState([] as any);\n    const [description, setDescription] = useState('');\n    const [submitClicked, setSubmitClicked] = useState(false);\n    const [toggler, setToggler] = useState(false);\n    const [selectedSlide, setSelectSlide] = useState(1);\n    const [isItemsLoad, setLoadItems] = useState({});\n    const [countMedia, setCountMedia] = useState({ photos: 0, video: 0 });\n    const [renderAsyncLoad, setAsyncLoad] = useState<any>(null);\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const isFileChoser = Boolean(anchorEl);\n\n    const fileChoserClicked = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const fileChoserClosed = () => {\n        setAnchorEl(null);\n    };\n\n    useEffect(() => {\n        if (stepCompleted) {\n            setFilesUrl(data?.urls);\n            setSubmitClicked(true);\n        }\n    }, [stepCompleted, data]);\n\n    useEffect(() => {\n        // filesUrl\n    }, []);\n\n    const randomDelay = (item: any, index: any) => new Promise(resolve => {\n\n        let split_item_format = item.split('.');\n        let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n        let split_item_name = item.split('/');\n        let get_split_name = split_item_name[split_item_name.length - 1];\n        let image_render: any = null;\n        let loadByIndex = { [index]: true };\n\n        if (get_split_fromat) {\n            if (imageFormats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        onClick={() => { setItemToggle(index) }}\n                        title={get_split_name}\n                        src={item}\n                        onLoad={() => {\n                            loadByIndex[index] = false;\n                            console.log('image_render', '--->', { loadByIndex })\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n        }\n\n        if (!loadByIndex[index]) {\n            console.log('Hered!!!')\n            resolve(image_render);\n        }\n    });\n\n\n    const calc = async (item: any, index: any) => {\n        let result = await randomDelay(item, index);\n        console.log({ result });\n        return result;\n    };\n\n    const asyncFunc = async () => {\n        const p = filesUrl.map((item: any, index: any) => calc(item.link, index));\n        const results = await Promise.all(p);\n        setAsyncLoad(results);\n    };\n\n    useEffect(() => {\n        asyncFunc();\n    }, [filesUrl])\n\n    const checkErrors = () => {\n        if (!filesUrl?.length) {\n            return true;\n        }\n\n        if (hasDescription && (!description.trim() || description.length > 1000)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    const removeFromItem = (index: any) => {\n        filesUrl.splice(index, 1);\n        setFilesUrl(filesUrl);\n        Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n    }\n\n\n    const checkIfVideoExist = () => {\n        let videoItems: any = [];\n        let ImageItems: any = [];\n        let concatFormat = [...imageFormats, ...docformats];\n        filesUrl.forEach((element: any) => {\n            let split_items = element.link.split('.');\n            let format_split_items = split_items[split_items?.length - 1];\n            if (videoFormats.includes(format_split_items)) {\n                videoItems.push(format_split_items);\n            }\n\n            if (concatFormat.includes(format_split_items)) {\n                ImageItems.push(format_split_items);\n            }\n        });\n        console.log({\n            concatFormat,\n            ImageItems,\n            videoItems\n        })\n        if (ImageItems?.length === 6) {\n            return \".mp4, .wmv, .avi\";\n        }\n\n        if (videoItems?.length == 2) {\n            return \".png,.jpg,.jpeg,.pdf,.doc\";\n        }\n\n        return \".png,.jpg,.jpeg,.pdf,.doc,.mp4,.wmv,.avi\";\n    }\n\n    const checkIfVideoExist_ = () => {\n        let videoItems = [];\n        let ImageItems = [];\n        filesUrl.forEach((element: any) => {\n            let split_items = element.link.split('.');\n            let format_split_items = split_items[split_items?.length - 1];\n            if (videoFormats.includes(format_split_items)) {\n                videoItems.push(format_split_items);\n            }\n\n            if ([...imageFormats, ...docformats].includes(format_split_items)) {\n                ImageItems.push(format_split_items);\n            }\n        });\n\n\n        return {\n            videoCount: videoItems.length,\n            imageCount: ImageItems.length\n        }\n\n    }\n\n    const onDropBoxSuccess = (files: any) => {\n        onFileChange('', true, files[0]);\n    }\n\n    const onDropBoxCancel = (err: any) => {\n        console.log(err, \"err --- Dropbox\");\n    }\n\n    const onFileChange = async (e: any, isDropbox?: boolean, dropBoxFile?: any) => {\n        const formData = new FormData();\n        var fileType;\n        const newFile = isDropbox ? dropBoxFile?.link : e.target.files[0];\n        if (isDropbox) {\n            let dropBoxArr: any = newFile?.split(\".\");\n            fileType = dropBoxArr[dropBoxArr.length - 1]?.toLowerCase();\n        } else {\n            fileType = (newFile?.type?.split('/')[1])?.toLowerCase();\n        }\n\n        fileChoserClosed();\n\n        if (hasDescription && !imageFormats.includes(fileType)) {\n            setShowToast(true, \"The file must be in proper format\");\n            return;\n        }\n\n        if (filesUrl?.length === 8) {\n            setShowToast(true, \"Max files upload limit is 6\")\n            return;\n        }\n\n        let checkCounts: any = checkIfVideoExist_();\n\n        if (checkCounts?.videoCount === 2) {\n            if (videoFormats.includes(fileType)) {\n                return\n            }\n        }\n\n        if (checkCounts?.imageCount >= 6) {\n            let concatFormats = [...imageFormats, ...docformats];\n            if (concatFormats.includes(fileType)) {\n                return\n            }\n        }\n\n        let filesUrlClone: any = filesUrl;\n\n        let countVideoFormats = filesUrlClone.map((item: any) => {\n            let split_items = item.link.split('.');\n\n            let format_split_items = split_items[split_items?.length - 1];\n\n            if (videoFormats.includes(format_split_items)) {\n                return format_split_items;\n            }\n        }).filter((item: any) => item !== undefined);\n\n        var selectedFileSize = isDropbox ? dropBoxFile?.bytes / 1024 / 1024 : newFile?.size / 1024 / 1024; // size in mb\n\n        if (docTypes.indexOf(fileType) < 0 || (selectedFileSize > 10)) {\n            setShowToast(true, \"The file must be in proper format or size\")\n            return;\n        }\n\n        if (imageFormats.includes(fileType) && selectedFileSize > 10) { // image validations\n            setShowToast(true, \"The image file size must be below 10 mb\")\n            return;\n        }\n\n        if (videoFormats.includes(fileType)) { // video validations\n            if (selectedFileSize > 10) {\n                setShowToast(true, \"The video file size must be below 20 mb\")\n                return;\n            }\n            if (countVideoFormats?.length > 1) {\n                setShowToast(true, \"Max video file upload limit is 2\")\n                return;\n            }\n        }\n\n        !isDropbox && formData.append('file', newFile);\n        setLoadItems({});\n        const res: any = isDropbox ? { success: true } : await onFileUpload(formData);\n        setLoading(true);\n        if (res.success) {\n            let link: string = isDropbox ? dropBoxFile?.link : res?.imgUrl;\n            let check_type: any = imageFormats.includes(fileType) ? 1 : videoFormats.includes(fileType) ? 2 : [\"doc\", \"docx\", \"msword\"].includes(fileType) ? 3 : 4\n            setFilesUrl((prev: Array<any>) => [...prev, {\n                \"mediaType\": check_type,\n                \"link\": link\n            }]);\n            setLoadItems((prev: any) => ({\n                [filesUrl.length - 1]: false\n            }))\n            setLocalFiles((prev: any) => ({ ...prev, [filesUrl?.length]: isDropbox ? dropBoxFile?.link : URL.createObjectURL(newFile) }));\n        }\n    }\n\n\n    const setItemToggle = (index: any) => {\n        setToggler((prev: boolean) => !prev);\n        setSelectSlide(index + 1);\n    }\n\n    const renderbyFileFormat = (item: any, index: any, base64?: any) => {\n        let split_item_format = item.split('.');\n        let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n        let split_item_name = item.split('/');\n        let get_split_name = split_item_name[split_item_name.length - 1];\n        let image_render: any = null;\n        let loadByIndex = { [index]: true };\n        // setLoading(true);\n        if (get_split_fromat) {\n            if (imageFormats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        // onClick={() => { setItemToggle(index) }}\n                        title={get_split_name}\n                        src={item}\n                        async-src={item}\n                        decoding=\"async\"\n                        loading=\"lazy\"\n                        onLoad={() => {\n                            console.log('Loaded!')\n                            loadByIndex[index] = false;\n                            console.log('image_render', '--->', { loadByIndex })\n                            setLoadItems((prev: any) => ({\n                                [index]: true\n                            }))\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n\n            if (videoFormats.includes(get_split_fromat)) {\n                if (base64) {\n                    image_render = (\n                        <video\n                            id={`media_${index}`}\n                            title={get_split_name}\n                            crossOrigin=\"anonymous\"\n                            src={item}\n                            poster={base64}\n                            controls={false}\n                            onLoadedData={() => {\n                                console.log('Loaded!')\n                                setLoadItems((prev: any) => ({\n                                    [index]: true\n                                }))\n                            }}\n                        // onClick={() => { setItemToggle(index) }}\n                        />\n                    )\n                } else {\n                    image_render = (\n                        <video id={`media_${index}`} crossOrigin=\"anonymous\"\n                            src={item}\n                            controls={false}\n                            title={get_split_name}\n                            onLoadedData={() => {\n                                console.log('Loaded!')\n                                setLoadItems((prev: any) => ({\n                                    [index]: true\n                                }))\n                            }}\n                        // onClick={() => { setItemToggle(index) }}\n                        />\n                    )\n                }\n            }\n\n            if (docformats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        title={get_split_name}\n                        src={docThumbnail}\n                        async-src={item}\n                        decoding=\"async\"\n                        loading=\"lazy\"\n                        onLoad={() => {\n                            loadByIndex[index] = false;\n                            console.log('Loaded!')\n                            setLoadItems((prev: any) => ({\n                                [index]: true\n                            }))\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n            return (\n                <figure className=\"img_video\">\n                    <React.Fragment>\n                        {image_render && (\n                            <React.Fragment>\n                                {image_render}\n                                <img\n                                    onClick={() => { removeFromItem(index) }}\n                                    src={remove}\n                                    alt=\"remove\"\n                                    className=\"remove\"\n                                />\n                            </React.Fragment>\n                        )}\n                    </React.Fragment>\n                </figure>\n            )\n            // }\n        }\n    }\n\n    // const { sources, types } = renderFilteredItems();\n    let IsRenderValues = null;\n    if (Object.values(isItemsLoad)?.length) {\n        IsRenderValues = Array.isArray(Object.values(isItemsLoad)) && Object.values(isItemsLoad)[0] === true ? Object.values(isItemsLoad)[0] : false;\n    }\n\n    if (IsRenderValues === false) {\n        setLoading(true);\n    }\n\n    if (IsRenderValues === true) {\n        setLoading(false);\n    }\n\n    let checkErrors_: any = checkErrors();\n    console.log({ IsRenderValues, isItemsLoad, check: checkErrors_ })\n    return (\n        <div className={`app_wrapper${jobName ? ' padding_0' : ''}`}>\n            <div className={`section_wrapper${jobName ? ' padding_0' : ''}`}>\n                <div className=\"custom_container\">\n\n                    {/* <FsLightbox\n                        toggler={toggler}\n                        slide={selectedSlide}\n                        sources={sources}\n                        types={types}\n                        key={sources?.length}\n                        onClose={() => {\n                            setSelectSlide(1)\n                        }}\n                    /> */}\n\n                    <canvas id=\"canvas-extractor\" style={{ display: 'none' }}></canvas>\n\n                    <div className=\"form_field\">\n                        <div className=\"flex_row\">\n                            <div className={`flex_col_sm_${jobName ? '7' : '6'}`}>\n                                <div className=\"relate\">\n                                    <button\n                                        onClick={() => { hasDescription ? handleStepBack() : handleStepForward(6) }}\n                                        className=\"back\"></button>\n                                    <span className={jobName ? \"xs_sub_title\" : \"title\"}>{jobName || 'Photos and documents'}</span>\n                                </div>\n                                {title && <span className=\"sub_title\">{title}</span>}\n                                <p className=\"commn_para\">\n                                    {/* {para || \"Record maximum 2 short videos or 6 doc files/images to demonstrate your job and any unique requirements.\"} */}\n                                    {para || 'Record a short video (up to 30 seconds) or add up to 6 photos and files to demonstrate your job and any unique requirements.'}\n                                </p>\n                            </div>\n                            {!jobName && !filesUrl?.length && !hasDescription ? (\n                                <div className=\"flex_col_sm_5 text-right\">\n                                    <span\n                                        onClick={() => {\n                                            handleStepForward(14)\n                                        }}\n                                        className=\"link\">\n                                        {'Skip'}\n                                    </span>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                    <div className=\"flex_row\">\n                        <div className=\"flex_col_sm_12\">\n                            <div className=\"upload_img_video\">\n                                {/* {renderAsyncLoad ? renderAsyncLoad : null} */}\n                                {filesUrl?.length ?\n                                    filesUrl.map((item: any, index: number) => (renderbyFileFormat(item?.link, index, item?.base64)))\n                                    : null}\n\n                                <button\n                                    className='media_btn'\n                                    id=\"fade-button\"\n                                    aria-controls={isFileChoser ? 'fade-menu' : undefined}\n                                    aria-haspopup=\"true\"\n                                    aria-expanded={isFileChoser ? 'true' : undefined}\n                                    onClick={fileChoserClicked}\n                                >\n                                    <img src={addMedia} alt=\"\" />\n                                </button>\n\n                                <Menu\n                                    className=\"fsp_modal range dropbox\"\n                                    id=\"fade-menu\"\n                                    MenuListProps={{\n                                        'aria-labelledby': 'fade-button',\n                                    }}\n                                    anchorEl={anchorEl}\n                                    open={isFileChoser}\n                                    onClose={fileChoserClosed}\n                                    TransitionComponent={Fade}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'center',\n                                    }}\n                                    transformOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    {filesUrl?.length < 8 ? (\n                                        <React.Fragment>\n                                            <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                                                {/* <img src={addMedia} alt=\"\" /> */}\n                                                Upload from files\n                                            </label>\n                                            {!hasDescription ? (\n                                                <>\n                                                    <input\n                                                        onChange={onFileChange}\n                                                        type=\"file\"\n                                                        accept={checkIfVideoExist()}\n                                                        style={{ display: \"none\" }}\n                                                        id=\"upload_img_video\"\n                                                    />\n                                                    <DropboxChooser\n                                                        appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n                                                        success={(files: any) => onDropBoxSuccess(files)}\n                                                        cancel={(err: any) => onDropBoxCancel(err)}\n                                                        multiselect={false}\n                                                        linkType={'direct'}\n                                                    >\n                                                        <button className=\"dropbox-button\">Upload from Dropbox</button>\n                                                    </DropboxChooser>\n                                                </>\n                                            ) : (\n                                                <>\n                                                    <input\n                                                        onChange={onFileChange}\n                                                        type=\"file\"\n                                                        accept={hasDescription ? \"image/png,image/jpg,image/jpeg\" : \"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"}\n                                                        style={{ display: \"none\" }}\n                                                        id=\"upload_img_video\"\n                                                    />\n                                                    <DropboxChooser\n                                                        appKey={process.env.REACT_APP_DROPBOX_APP_KEY}\n                                                        success={(files: any) => onDropBoxSuccess(files)}\n                                                        cancel={(err: any) => onDropBoxCancel(err)}\n                                                        multiselect={false}\n                                                        linkType={'direct'}\n                                                    >\n                                                        <button className=\"dropbox-button\">Upload from Dropbox</button>\n                                                    </DropboxChooser>\n                                                </>\n                                            )}\n                                        </React.Fragment>\n                                    ) : null}\n                                </Menu>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"flex_row\">\n                        <div className=\"flex_col_sm_8\">\n                            {hasDescription && (\n                                <div className=\"form_field\">\n                                    <label className=\"form_label\">Photo Description</label>\n                                    <div className=\"text_field\">\n                                        <textarea placeholder=\"The item has..\" value={description} onChange={({ target: { value } }: any) => setDescription(value)} />\n                                        {description.length ?\n                                            <span className=\"char_count\">\n                                                {`character length : ${description.length} / 1000`}\n                                            </span>\n                                            : ''}\n                                    </div>\n                                    <span className=\"error_msg\">{submitClicked && !description.trim() ? 'Photo Description is required.' : description.length > 1000 ? 'Maximum 1000 characters are allowed.' : ''}</span>\n                                </div>\n                            )}\n                            <div className=\"form_field\">\n                                <button\n                                    onClick={() => {\n                                        setSubmitClicked(true);\n                                        let filteredItems: any = [];\n                                        let isRender: boolean = false;\n                                        filesUrl.forEach((item: any, index: any) => {\n                                            if (item?.mediaType === 2) {\n                                                if (!item?.base64) {\n                                                    let base64 = thumbnailExtract({\n                                                        canvasId: '#canvas-extractor',\n                                                        videoId: `#media_${index}`\n                                                    });\n                                                    item['base64'] = base64;\n                                                }\n                                            }\n                                            filteredItems.push(item);\n                                        });\n                                        if (!isRender) {\n                                            setFilesUrl(filteredItems);\n                                            handleStepComplete({\n                                                urls: filteredItems,\n                                                description: hasDescription ? description : undefined,\n                                            })\n                                        }\n                                    }}\n                                    className={`fill_btn full_btn btn-effect ${checkErrors_ && IsRenderValues == null ? 'disable_btn' : !checkErrors_ && !IsRenderValues ? 'disable_btn' : ''}`}>\n                                    {'Submit'}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default UploadMedia\n"]},"metadata":{},"sourceType":"module"}