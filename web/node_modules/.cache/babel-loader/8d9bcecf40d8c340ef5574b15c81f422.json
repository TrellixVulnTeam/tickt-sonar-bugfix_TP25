{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport * as actionTypes from './constants';\nimport NetworkOps from '../../network/NetworkOps';\nimport Urls from '../../network/Urls'; // import * as commonActions from '../common/actions';\n\nfunction* postSignup({\n  data\n}) {\n  const response = yield NetworkOps.postToJson(Urls.signup, data);\n\n  if (response.status === 200) {\n    //yield put({type: actionTypes.FIRST_API_SUCCESSED, user: user});\n    return {\n      success: true\n    };\n  }\n\n  return {\n    success: false\n  };\n}\n\nfunction* callTradeList() {\n  // commonActions.setLoading(true);\n  const response = yield NetworkOps.get(Urls.tradeList); // commonActions.setLoading(false);\n\n  if (response.status_code === 200) {\n    yield put({\n      type: actionTypes.CALL_TRADE_LIST_SUCCESSED,\n      payload: response.result.trade\n    });\n  }\n}\n\nfunction* authWatcher() {\n  yield takeLatest(actionTypes.POST_SIGNUP_API, postSignup);\n  yield takeLatest(actionTypes.CALL_TRADE_LIST, callTradeList);\n}\n\nexport default authWatcher;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/sagas.ts"],"names":["put","takeLatest","actionTypes","NetworkOps","Urls","postSignup","data","response","postToJson","signup","status","success","callTradeList","get","tradeList","status_code","type","CALL_TRADE_LIST_SUCCESSED","payload","result","trade","authWatcher","POST_SIGNUP_API","CALL_TRADE_LIST"],"mappings":"AAAA,SAAUA,GAAV,EAAeC,UAAf,QAAiC,oBAAjC;AACA,OAAO,KAAKC,WAAZ,MAA6B,aAA7B;AACA,OAAOC,UAAP,MAA0C,0BAA1C;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CACA;;AAEA,UAAUC,UAAV,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAoC;AAClC,QAAMC,QAAuB,GAAG,MAAMJ,UAAU,CAACK,UAAX,CAAsBJ,IAAI,CAACK,MAA3B,EAAmCH,IAAnC,CAAtC;;AACA,MAAIC,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACA,WAAO;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD;;AACD,SAAO;AAAEA,IAAAA,OAAO,EAAE;AAAX,GAAP;AAED;;AAED,UAAUC,aAAV,GAA0B;AACxB;AACA,QAAML,QAAuB,GAAG,MAAMJ,UAAU,CAACU,GAAX,CAAeT,IAAI,CAACU,SAApB,CAAtC,CAFwB,CAGxB;;AACA,MAAIP,QAAQ,CAACQ,WAAT,KAAyB,GAA7B,EAAkC;AAChC,UAAMf,GAAG,CAAC;AAAEgB,MAAAA,IAAI,EAAEd,WAAW,CAACe,yBAApB;AAA+CC,MAAAA,OAAO,EAAEX,QAAQ,CAACY,MAAT,CAAgBC;AAAxE,KAAD,CAAT;AACD;AACF;;AAGD,UAAUC,WAAV,GAAwB;AACtB,QAAMpB,UAAU,CAACC,WAAW,CAACoB,eAAb,EAA8BjB,UAA9B,CAAhB;AACA,QAAMJ,UAAU,CAACC,WAAW,CAACqB,eAAb,EAA8BX,aAA9B,CAAhB;AACD;;AAED,eAAeS,WAAf","sourcesContent":["import {  put, takeLatest } from 'redux-saga/effects'\nimport * as actionTypes from './constants'\nimport NetworkOps, { FetchResponse } from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\n// import * as commonActions from '../common/actions';\n\nfunction* postSignup({ data }: any) {\n  const response: FetchResponse = yield NetworkOps.postToJson(Urls.signup, data);\n  if (response.status === 200) {\n    //yield put({type: actionTypes.FIRST_API_SUCCESSED, user: user});\n    return { success: true };\n  }\n  return { success: false };\n\n}\n\nfunction* callTradeList() {\n  // commonActions.setLoading(true);\n  const response: FetchResponse = yield NetworkOps.get(Urls.tradeList);\n  // commonActions.setLoading(false);\n  if (response.status_code === 200) {\n    yield put({ type: actionTypes.CALL_TRADE_LIST_SUCCESSED, payload: response.result.trade });\n  }\n}\n\n\nfunction* authWatcher() {\n  yield takeLatest(actionTypes.POST_SIGNUP_API, postSignup);\n  yield takeLatest(actionTypes.CALL_TRADE_LIST, callTradeList);\n}\n\nexport default authWatcher;"]},"metadata":{},"sourceType":"module"}