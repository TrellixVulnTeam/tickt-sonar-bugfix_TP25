{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/specialization.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { setShowToast } from '../../../redux/common/actions';\nimport noData from '../../../assets/images/no-search-data.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Specialization = props => {\n  _s();\n\n  var _props$tradeListData$;\n\n  const [specialization, setSpecialization] = useState(props.specialization);\n\n  const changeHandler = id => {\n    setSpecialization(prevData => {\n      const newData = [...prevData];\n      const itemIndex = newData.indexOf(id);\n\n      if (newData.indexOf(id) < 0) {\n        newData.push(id);\n      } else {\n        newData.splice(itemIndex, 1);\n      }\n\n      return newData;\n    });\n  };\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    if (specialization.length) {\n      props.updateSteps(props.step + 1, {\n        specialization\n      });\n    } else {\n      setShowToast(true, \"Please select atleast one specialisation\");\n    }\n  };\n\n  const specializationList = (_props$tradeListData$ = props.tradeListData.find(i => i._id === props.trade)) === null || _props$tradeListData$ === void 0 ? void 0 : _props$tradeListData$.specialisations;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form_wrapper tags_wrap\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: (specializationList === null || specializationList === void 0 ? void 0 : specializationList.length) ? specializationList.map(item => {\n          const active = specialization.indexOf(item._id) >= 0;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: active ? 'active' : '',\n            onClick: () => changeHandler(item._id),\n            children: item.name\n          }, item._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"no_data\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: noData,\n            alt: \"no-data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fill_btn btn-effect\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Specialization, \"y+akjJ2VL/iSZiWBvSbxicwt6cQ=\");\n\n_c = Specialization;\nexport default Specialization;\n\nvar _c;\n\n$RefreshReg$(_c, \"Specialization\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/signup/components/specialization.tsx"],"names":["useState","setShowToast","noData","Specialization","props","specialization","setSpecialization","changeHandler","id","prevData","newData","itemIndex","indexOf","push","splice","onSubmit","e","preventDefault","length","updateSteps","step","specializationList","tradeListData","find","i","_id","trade","specialisations","map","item","active","name"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,OAAOC,MAAP,MAAmB,2CAAnB;;;AAUA,MAAMC,cAAc,GAAIC,KAAD,IAAsB;AAAA;;AAAA;;AACzC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAACI,KAAK,CAACC,cAAP,CAApD;;AAEA,QAAME,aAAa,GAAIC,EAAD,IAAgB;AAClCF,IAAAA,iBAAiB,CAAEG,QAAD,IAA6B;AAC3C,YAAMC,OAAO,GAAG,CAAC,GAAGD,QAAJ,CAAhB;AACA,YAAME,SAAS,GAAGD,OAAO,CAACE,OAAR,CAAgBJ,EAAhB,CAAlB;;AACA,UAAIE,OAAO,CAACE,OAAR,CAAgBJ,EAAhB,IAAsB,CAA1B,EAA6B;AACzBE,QAAAA,OAAO,CAACG,IAAR,CAAaL,EAAb;AACH,OAFD,MAEO;AACHE,QAAAA,OAAO,CAACI,MAAR,CAAeH,SAAf,EAA0B,CAA1B;AACH;;AACD,aAAOD,OAAP;AACH,KATgB,CAAjB;AAUH,GAXD;;AAcA,QAAMK,QAAQ,GAAG,MAAOC,CAAP,IAAkB;AAC/BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIZ,cAAc,CAACa,MAAnB,EAA2B;AACvBd,MAAAA,KAAK,CAACe,WAAN,CAAkBf,KAAK,CAACgB,IAAN,GAAa,CAA/B,EAAkC;AAAEf,QAAAA;AAAF,OAAlC;AACH,KAFD,MAEO;AACHJ,MAAAA,YAAY,CAAC,IAAD,EAAO,0CAAP,CAAZ;AACH;AACJ,GAPD;;AASA,QAAMoB,kBAAkB,4BAAGjB,KAAK,CAACkB,aAAN,CAAoBC,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUrB,KAAK,CAACsB,KAA9C,CAAH,0DAAG,sBAAsDC,eAAjF;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEZ,QAAhB;AAAA,8BACI;AAAA,kBACK,CAAAM,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEH,MAApB,IAA6BG,kBAAkB,CAACO,GAAnB,CAAwBC,IAAD,IAAe;AAChE,gBAAMC,MAAM,GAAGzB,cAAc,CAACO,OAAf,CAAuBiB,IAAI,CAACJ,GAA5B,KAAoC,CAAnD;AACA,8BACI;AAAmB,YAAA,SAAS,EAAEK,MAAM,GAAG,QAAH,GAAc,EAAlD;AAAsD,YAAA,OAAO,EAAE,MAAMvB,aAAa,CAACsB,IAAI,CAACJ,GAAN,CAAlF;AAAA,sBAA+FI,IAAI,CAACE;AAApG,aAASF,IAAI,CAACJ,GAAd;AAAA;AAAA;AAAA;AAAA,kBADJ;AAGH,SAL6B,CAA7B,gBAKI;AAAI,UAAA,SAAS,EAAC,SAAd;AAAA,iCACG;AAAK,YAAA,GAAG,EAAEvB,MAAV;AAAkB,YAAA,GAAG,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AANT;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAQ,UAAA,SAAS,EAAC,qBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAhDD;;GAAMC,c;;KAAAA,c;AAkDN,eAAeA,cAAf","sourcesContent":["import { useState } from 'react';\nimport { setShowToast } from '../../../redux/common/actions';\nimport noData from '../../../assets/images/no-search-data.png'\n\ninterface Propstype {\n    updateSteps: (num: number, data: any) => void\n    step: number\n    tradeListData: Array<any>,\n    trade: string,\n    specialization: Array<string>\n}\n\nconst Specialization = (props: Propstype) => {\n    const [specialization, setSpecialization] = useState(props.specialization);\n\n    const changeHandler = (id: string) => {\n        setSpecialization((prevData: Array<string>) => {\n            const newData = [...prevData];\n            const itemIndex = newData.indexOf(id);\n            if (newData.indexOf(id) < 0) {\n                newData.push(id);\n            } else {\n                newData.splice(itemIndex, 1);\n            }\n            return newData;\n        })\n    }\n\n\n    const onSubmit = async (e: any) => {\n        e.preventDefault();\n        if (specialization.length) {\n            props.updateSteps(props.step + 1, { specialization })\n        } else {\n            setShowToast(true, \"Please select atleast one specialisation\")\n        }\n    }\n\n    const specializationList = props.tradeListData.find(i => i._id === props.trade)?.specialisations;\n\n    return (\n        <div className=\"form_wrapper tags_wrap\">\n            <form onSubmit={onSubmit}>\n                <ul>\n                    {specializationList?.length ? specializationList.map((item: any) => {\n                        const active = specialization.indexOf(item._id) >= 0;\n                        return (\n                            <li key={item._id} className={active ? 'active' : ''} onClick={() => changeHandler(item._id)}>{item.name}</li>\n                        )\n                    }) : <li className='no_data'>\n                            <img src={noData} alt=\"no-data\" />\n                        </li>}\n                </ul>\n\n                <div className=\"form_field\">\n                    <button className=\"fill_btn btn-effect\">Next</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Specialization"]},"metadata":{},"sourceType":"module"}