{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/common/customNotification.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setShowNotification } from \"../redux/common/actions\";\nimport { onNotificationClick } from \"../utils/common\";\nimport { markNotifAsRead } from \"../redux/auth/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport dummy from \"../assets/images/u_placeholder.jpg\";\nimport close from \"../assets/images/icon-close-1.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NOTIFICATION_TIMEOUT = 3750;\n\nconst CustomNotification = props => {\n  _s();\n\n  var _props$notificationDa;\n\n  const history = useHistory();\n  const notification = (_props$notificationDa = props.notificationData) === null || _props$notificationDa === void 0 ? void 0 : _props$notificationDa.data;\n  console.log(\"notification: \", notification, history);\n  useEffect(() => {\n    if (props === null || props === void 0 ? void 0 : props.showNotification) {\n      setTimeout(() => setShowNotification(false), NOTIFICATION_TIMEOUT);\n    }\n\n    return () => clearTimeout();\n  }, [props.showNotification]);\n\n  const displayNotifText = () => {\n    if ((notification === null || notification === void 0 ? void 0 : notification.notificationType) == 25) {\n      console.log(\"helllo!@#\");\n\n      if ((notification === null || notification === void 0 ? void 0 : notification.messageType) === \"text\") {\n        return notification === null || notification === void 0 ? void 0 : notification.messageText;\n      } else if ((notification === null || notification === void 0 ? void 0 : notification.messageType) === \"image\") {\n        return `Send you a Photo`;\n      } else if ((notification === null || notification === void 0 ? void 0 : notification.messageType) === \"video\") {\n        return `Send you a Video`;\n      }\n    } else {\n      return notification === null || notification === void 0 ? void 0 : notification.notificationText;\n    }\n  };\n\n  return !!props.showNotification && !((notification === null || notification === void 0 ? void 0 : notification.notificationType) == 25 && window.location.pathname === \"/chat\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body-message active\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"cross-icon\",\n      onClick: () => setShowNotification(false),\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: close,\n        alt: \"img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapppr\",\n      onClick: () => {\n        var _history$location, _history$location2;\n\n        markNotifAsRead({\n          notificationId: notification === null || notification === void 0 ? void 0 : notification._id\n        });\n        const url1 = onNotificationClick(notification);\n        const url2 = ((_history$location = history.location) === null || _history$location === void 0 ? void 0 : _history$location.pathname) + ((_history$location2 = history.location) === null || _history$location2 === void 0 ? void 0 : _history$location2.search);\n        setShowNotification(false);\n\n        if (url1 === url2) {\n          var _window$location;\n\n          (_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.reload();\n          return;\n        }\n\n        history.push(url1);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notif\",\n        children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n          className: \"not_img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: (notification === null || notification === void 0 ? void 0 : notification.image) || dummy,\n            alt: \"img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"who line-1\",\n            children: (notification === null || notification === void 0 ? void 0 : notification.notificationType) == 25 ? notification === null || notification === void 0 ? void 0 : notification.senderName : notification === null || notification === void 0 ? void 0 : notification.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"line-1\",\n            children: displayNotifText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"time\",\n          children: \"just now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this) : null;\n};\n\n_s(CustomNotification, \"1xG8E42zL1Z4zT+0oMSUtUkhDGU=\", false, function () {\n  return [useHistory];\n});\n\n_c = CustomNotification;\n\nconst mapStateToProps = state => {\n  return {\n    showNotification: state.common.showNotification,\n    notificationData: state.common.notificationData\n  };\n};\n\nexport default connect(mapStateToProps)(CustomNotification);\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomNotification\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/common/customNotification.tsx"],"names":["useEffect","connect","setShowNotification","onNotificationClick","markNotifAsRead","useHistory","dummy","close","NOTIFICATION_TIMEOUT","CustomNotification","props","history","notification","notificationData","data","console","log","showNotification","setTimeout","clearTimeout","displayNotifText","notificationType","messageType","messageText","notificationText","window","location","pathname","notificationId","_id","url1","url2","search","reload","push","image","senderName","title","mapStateToProps","state","common"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setShowNotification } from \"../redux/common/actions\";\nimport { formatNotificationTime } from \"../utils/common\";\nimport { onNotificationClick } from \"../utils/common\";\nimport { markNotifAsRead } from \"../redux/auth/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport dummy from \"../assets/images/u_placeholder.jpg\";\nimport close from \"../assets/images/icon-close-1.png\";\n\nconst NOTIFICATION_TIMEOUT = 3750;\n\nconst CustomNotification = (props: any) => {\n\n  const history: any = useHistory();\n  const notification = props.notificationData?.data;\n  console.log(\"notification: \", notification, history);\n\n  useEffect(() => {\n      if (props?.showNotification) {\n        \n      setTimeout(() => setShowNotification(false), NOTIFICATION_TIMEOUT);\n    }\n\n    return () => clearTimeout();\n  }, [props.showNotification]);\n\n  const displayNotifText = () => {\n    if (notification?.notificationType == 25) {\n      console.log(\"helllo!@#\");\n      if (notification?.messageType === \"text\") {\n        return notification?.messageText;\n      } else if (notification?.messageType === \"image\") {\n        return `Send you a Photo`;\n      } else if (notification?.messageType === \"video\") {\n        return `Send you a Video`;\n      }\n    } else {\n      return notification?.notificationText;\n    }\n  };\n\n  return !!props.showNotification &&\n    !(\n      notification?.notificationType == 25 &&\n      window.location.pathname === \"/chat\"\n    ) ? (\n    <div className=\"body-message active\">\n      <span className=\"cross-icon\" onClick={() => setShowNotification(false)}>\n        <img src={close} alt=\"img\" />\n      </span>\n      <div\n        className=\"wrapppr\"\n        onClick={() => {\n          markNotifAsRead({ notificationId: notification?._id });\n          const url1: string = onNotificationClick(notification);\n          const url2: string =\n            history.location?.pathname + history.location?.search;\n          setShowNotification(false);\n          if (url1 === url2) {\n            window.location?.reload();\n            return;\n          }\n          history.push(url1);\n        }}\n      >\n        <div className=\"notif\">\n          <figure className=\"not_img\">\n            <img src={notification?.image || dummy} alt=\"img\" />\n          </figure>\n          <div className=\"info\">\n            <span className=\"who line-1\">\n              {notification?.notificationType == 25\n                ? notification?.senderName\n                : notification?.title}\n            </span>\n            <span className=\"line-1\">{displayNotifText()}</span>\n          </div>\n          {/* <span className=\"time\">{formatNotificationTime(notification?.updatedAt, 'day')}</span> */}\n          <span className=\"time\">{\"just now\"}</span>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    showNotification: state.common.showNotification,\n    notificationData: state.common.notificationData,\n  };\n};\n\nexport default connect(mapStateToProps)(CustomNotification);\n"]},"metadata":{},"sourceType":"module"}