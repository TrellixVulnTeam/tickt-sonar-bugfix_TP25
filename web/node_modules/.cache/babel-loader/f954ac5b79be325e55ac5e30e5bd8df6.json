{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/newJobs.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport newJobs from \"../../../assets/images/newJobs.png\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewJobs = ({\n  loading,\n  getNewJobList,\n  newJobList,\n  newJobsCount,\n  resetNewJobList\n}) => {\n  _s();\n\n  const his;\n  const [jobList, setJobList] = useState([]);\n  const [pageNo, setPageNo] = useState(1);\n  const [hasMoreItems, setHasMoreItems] = useState(true);\n  const [isLoad, setIsLoad] = useState(true);\n  let totalJobsCount = newJobsCount;\n  console.log(totalJobsCount, \"totalJobsCount\", jobList, \"jobList\", hasMoreItems, \"hasMoreItems\");\n  useEffect(() => {\n    callJobList();\n    return () => resetNewJobList();\n  }, []);\n\n  const callJobList = async () => {\n    // if (newJobsCount && jobList.length >= totalJobsCount) {\n    //   setHasMoreItems(false);\n    //   return;\n    // }\n    getNewJobList(pageNo);\n  };\n\n  useEffect(() => {\n    if ((newJobList === null || newJobList === void 0 ? void 0 : newJobList.length) || Array.isArray(newJobList)) {\n      const allJobs = [...jobList, ...newJobList];\n      console.log(jobList, \"jobList\", newJobList, \"props.newJobList\", allJobs, \"allJobs\");\n      setJobList(allJobs);\n      setIsLoad(false);\n      setPageNo(pageNo + 1);\n\n      if (newJobList.length < 10) {\n        setHasMoreItems(false);\n      }\n\n      resetNewJobList();\n    }\n  }, [newJobList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"detail_col\",\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: jobList.length,\n      next: callJobList,\n      style: {\n        overflowX: \"hidden\"\n      },\n      hasMore: hasMoreItems,\n      loader: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: \"New Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row tradies_row\",\n        children: !isLoad && !loading && jobList.length ? jobList.map(({\n          jobId,\n          tradeId,\n          specializationId,\n          tradeSelectedUrl,\n          jobName,\n          tradeName,\n          jobDescription,\n          time,\n          amount,\n          locationName,\n          durations,\n          viewersCount,\n          questionsCount,\n          builderName,\n          builderImage\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tradie_card\",\n            \"data-aos\": \"fade-in\",\n            \"data-aos-delay\": \"250\",\n            \"data-aos-duration\": \"1000\",\n            children: [/*#__PURE__*/_jsxDEV(NavLink, {\n              to: `/job-details-page?jobId=${jobId}&redirect_from=jobs&jobAction=invite`,\n              className: \"more_detail circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user_wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                className: \"u_img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: builderImage || dummy,\n                  alt: \"\",\n                  onError: e => {\n                    var _e$target, _e$target2;\n\n                    if (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.onerror) {\n                      e.target.onerror = null;\n                    }\n\n                    if (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.src) {\n                      e.target.src = dummy;\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"details\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: jobName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"prof\",\n                  children: builderName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job_info\",\n              children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon clock\",\n                  children: time\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon dollar\",\n                  children: amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon location line-1\",\n                  children: locationName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon calendar\",\n                  children: durations\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"commn_para line-2\",\n              children: jobDescription\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"count_wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"icon view\",\n                children: viewersCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"icon comment\",\n                children: questionsCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 19\n        }, this)) : !isLoad && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no_record  m-t-vh\",\n          children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n            children: /*#__PURE__*/_jsxDEV(\"figure\", {\n              className: \"no_img\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: newJobs,\n                alt: \"data not found\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"empty_screen_text\",\n            children: \"You don't have any new job yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"empty_screen_button\",\n            onClick: () => props.history.push(\"/\"),\n            children: \"View recommened jobs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewJobs, \"r0MVBnUaJZG5w9gbge7u/58Qdc4=\");\n\n_c = NewJobs;\nexport default NewJobs;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewJobs\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/jobDashboard/components/newJobs.tsx"],"names":["useState","useEffect","NavLink","InfiniteScroll","dummy","newJobs","NewJobs","loading","getNewJobList","newJobList","newJobsCount","resetNewJobList","his","jobList","setJobList","pageNo","setPageNo","hasMoreItems","setHasMoreItems","isLoad","setIsLoad","totalJobsCount","console","log","callJobList","length","Array","isArray","allJobs","overflowX","map","jobId","tradeId","specializationId","tradeSelectedUrl","jobName","tradeName","jobDescription","time","amount","locationName","durations","viewersCount","questionsCount","builderName","builderImage","e","target","onerror","src","props","history","push"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport dummy from \"../../../assets/images/u_placeholder.jpg\";\nimport newJobs from \"../../../assets/images/newJobs.png\";\n\ninterface Proptypes {\n  loading: boolean;\n  newJobsCount: number;\n  newJobList: any;\n  getNewJobList: (page: number) => void;\n  resetNewJobList: () => void;\n}\n\nconst NewJobs = ({\n  loading,\n  getNewJobList,\n  newJobList,\n  newJobsCount,\n  resetNewJobList,\n}: Proptypes) => {\n  const his\n  const [jobList, setJobList] = useState<Array<any>>([]);\n  const [pageNo, setPageNo] = useState<number>(1);\n  const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n  const [isLoad, setIsLoad] = useState(true);\n\n  let totalJobsCount: number = newJobsCount;\n  console.log(\n    totalJobsCount,\n    \"totalJobsCount\",\n    jobList,\n    \"jobList\",\n    hasMoreItems,\n    \"hasMoreItems\"\n  );\n\n  useEffect(() => {\n    callJobList();\n\n    return () => resetNewJobList();\n  }, []);\n\n  const callJobList = async () => {\n    // if (newJobsCount && jobList.length >= totalJobsCount) {\n    //   setHasMoreItems(false);\n    //   return;\n    // }\n    getNewJobList(pageNo);\n  };\n\n  useEffect(() => {\n    if (newJobList?.length || Array.isArray(newJobList)) {\n      const allJobs = [...jobList, ...newJobList];\n      console.log(\n        jobList,\n        \"jobList\",\n        newJobList,\n        \"props.newJobList\",\n        allJobs,\n        \"allJobs\"\n      );\n      setJobList(allJobs);\n      setIsLoad(false);\n      setPageNo(pageNo + 1);\n      if (newJobList.length < 10) {\n        setHasMoreItems(false);\n      }\n      resetNewJobList();\n    }\n  }, [newJobList]);\n\n  return (\n    <div className=\"detail_col\">\n      <InfiniteScroll\n        dataLength={jobList.length}\n        next={callJobList}\n        style={{ overflowX: \"hidden\" }}\n        hasMore={hasMoreItems}\n        loader={<></>}\n      >\n        <span className=\"sub_title\">New Jobs</span>\n        <div className=\"flex_row tradies_row\">\n          {!isLoad && !loading && jobList.length\n            ? jobList.map(\n                ({\n                  jobId,\n                  tradeId,\n                  specializationId,\n                  tradeSelectedUrl,\n                  jobName,\n                  tradeName,\n                  jobDescription,\n                  time,\n                  amount,\n                  locationName,\n                  durations,\n                  viewersCount,\n                  questionsCount,\n                  builderName,\n                  builderImage,\n                }) => (\n                  <div className=\"flex_col_sm_6\">\n                    <div\n                      className=\"tradie_card\"\n                      data-aos=\"fade-in\"\n                      data-aos-delay=\"250\"\n                      data-aos-duration=\"1000\"\n                    >\n                      <NavLink\n                        to={`/job-details-page?jobId=${jobId}&redirect_from=jobs&jobAction=invite`}\n                        className=\"more_detail circle\"\n                      ></NavLink>\n                      <div className=\"user_wrap\">\n                        <figure className=\"u_img\">\n                          <img\n                            src={builderImage || dummy}\n                            alt=\"\"\n                            onError={(e: any) => {\n                              if (e?.target?.onerror) {\n                                e.target.onerror = null;\n                              }\n                              if (e?.target?.src) {\n                                e.target.src = dummy;\n                              }\n                            }}\n                          />\n                        </figure>\n                        <div className=\"details\">\n                          <span className=\"name\">{jobName}</span>\n                          <span className=\"prof\">{builderName}</span>\n                        </div>\n                      </div>\n                      <div className=\"job_info\">\n                        <ul>\n                          <li className=\"icon clock\">{time}</li>\n                          <li className=\"icon dollar\">{amount}</li>\n                          <li className=\"icon location line-1\">\n                            {locationName}\n                          </li>\n                          <li className=\"icon calendar\">{durations}</li>\n                        </ul>\n                      </div>\n                      <p className=\"commn_para line-2\">{jobDescription}</p>\n                      <ul className=\"count_wrap\">\n                        <li className=\"icon view\">{viewersCount}</li>\n                        <li className=\"icon comment\">{questionsCount}</li>\n                      </ul>\n                    </div>\n                  </div>\n                )\n              )\n            : !isLoad &&\n              !loading && (\n                <div className=\"no_record  m-t-vh\">\n                  <figure>\n                    <figure className=\"no_img\">\n                      <img src={newJobs} alt=\"data not found\" />\n                    </figure>\n                  </figure>\n\n                  <span className=\"empty_screen_text\">\n                    You don't have any new job yet\n                  </span>\n                  <button\n                    className=\"empty_screen_button\"\n                    onClick={() => props.history.push(\"/\")}\n                  >\n                    View recommened jobs\n                  </button>\n                </div>\n              )}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default NewJobs;\n"]},"metadata":{},"sourceType":"module"}