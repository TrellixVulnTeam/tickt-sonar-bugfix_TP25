{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/bannerSearch.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n// @ts-ignore\nimport PlacesAutocomplete from 'react-places-autocomplete';\n// @ts-ignore\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\n\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nimport Searchicon from \"../../assets/images/main-search.png\";\nimport search from \"../../assets/images/ic-search.png\";\nimport Location from \"../../assets/images/ic-location.png\";\nimport cross from \"../../assets/images/close-black.png\";\nimport icgps from \"../../assets/images/ic-gps.png\";\nimport residential from \"../../assets/images/ic-residential.png\";\nimport close from \"../../assets/images/icon-close-1.png\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { getSearchJobList, getRecentSearchList, postHomeSearchData, getRecentLocationList } from '../../redux/homeSearch/actions';\nimport { isHandleChanges } from '../../redux/jobs/actions'; // @ts-ignore\n\nimport { useDetectClickOutside } from 'react-detect-click-outside';\nimport moment from 'moment';\nimport Geocode from \"react-geocode\";\nimport { setShowToast } from '../../redux/common/actions';\nimport { deleteRecentSearch } from '../../redux/homeSearch/actions';\nimport { renderTimeWithCustomFormat } from '../../utils/common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyDKFFrKp0D_5gBsA_oztQUhrrgpKnUpyPo\");\nGeocode.setLanguage(\"en\");\nGeocode.setRegion(\"au\"); // Geocode?.setLocationType(\"ROOFTOP\");\n\nconst example_calender = {\n  startDate: '',\n  endDate: '',\n  key: 'selection1'\n};\nexport function useStateFromProp(initialValue) {\n  _s();\n\n  const [value, setValue] = useState(initialValue);\n  useEffect(() => setValue(initialValue), [initialValue]);\n  return [value, setValue];\n}\n\n_s(useStateFromProp, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\nconst BannerSearch = props => {\n  _s2();\n\n  var _props$recentLocation2, _props$recentLocation3;\n\n  let props_selected = props.selectedItem;\n  const {\n    selectedItem,\n    isHandleChanges,\n    localChanges,\n    getRecentSearchList,\n    getRecentLocationList\n  } = props;\n  const [checkOnChange, setOnChange] = useState(false);\n  const [locationStatus, setLocationStatus] = useState(null);\n  const [stateData, setStateData] = useState(null);\n  const [searchText, setSearchText] = useState('');\n  const [addressText, setAddressText] = useState('');\n  const [recentLocation, setRecentLocation] = useState([]); // recentLocation\n\n  const [selectedAddress, setSelectedAddress] = useState({});\n  const [enableCurrentLocation, setCurrentLocations] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [selectedTrade, setSelectedTrade] = useState({});\n  const [inputFocus1, setInputFocus1] = useState(false);\n  const [inputFocus2, setInputFocus2] = useState(false);\n  const [inputFocus3, setInputFocus3] = useState(false);\n  const [calenderRange1, setCalenderRange1] = useState(example_calender);\n  const [suggestionSelected, setSuggestion] = useState({});\n\n  const handleOnOutsideSearch = () => {\n    setOnChange(false);\n    setInputFocus1(false);\n  };\n\n  const handleOnOutsideLocation = () => {\n    setInputFocus2(false);\n  };\n\n  const handleOnOutsideCalender = () => setInputFocus3(false);\n\n  const [addressRef, setAddressRef] = useState('');\n  const searchRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideSearch\n  });\n  const locationRef = useDetectClickOutside({\n    onTriggered: () => {\n      // if (addressText?.length > 3) {\n      handleOnOutsideLocation(); // }\n    }\n  });\n  const locationRefClone = useDetectClickOutside({\n    onTriggered: () => {// if (!addressText || addressText?.length < 2) {\n      // handleOnOutsideLocation()\n      // }\n    }\n  });\n  const calenderRef = useDetectClickOutside({\n    onTriggered: handleOnOutsideCalender\n  });\n\n  const handleCalenderRange = item => {\n    setCalenderRange1(item.selection1);\n  };\n\n  useEffect(() => {\n    if (getRecentSearchList) {\n      getRecentSearchList();\n    }\n\n    if (getRecentLocationList) {\n      getRecentLocationList();\n    } // getRecentLocationData();\n\n  }, []);\n  useEffect(() => {\n    console.log('In local-changes', {\n      props: props.selectedItem\n    });\n    return () => {\n      console.log('local-changes', {\n        props: props.selectedItem\n      });\n    };\n  }, [props]); // useEffect(() => {\n  //     if (addressText?.length > 2) {\n  //         document.getElementById('location-input-tag')?.focus();\n  //     } else {\n  //         document.getElementById('location_search_static')?.focus();\n  //     }\n  // }, [addressText])\n\n  useEffect(() => {// if (props.recentLocationData?.length && JSON.stringify(props.recentLocationData[0]?.location?.coordinates) !== JSON.stringify(recentLocation[0]?.location?.coordinates)) {\n    //     getRecentLocationData();\n    // }\n  }, [props.recentLocationData, recentLocation]);\n  useEffect(() => {\n    if ((searchText === null || searchText === void 0 ? void 0 : searchText.length) > 2) {\n      props.getSearchJobList(searchText);\n    }\n\n    if (!(searchText === null || searchText === void 0 ? void 0 : searchText.length)) {\n      setSelectedTrade({});\n    }\n  }, [searchText]);\n\n  const getRecentLocationData = async () => {\n    var recentLocationDetails = [];\n    let recentLocationData = props.recentLocationData;\n\n    for (let index = 0; index < recentLocationData.length; index++) {\n      let item = recentLocationData[index];\n\n      try {\n        var _cityText, _cityText2, _cityText3, _cityText4, _cityText5, _cityText6, _cityText7, _cityText8, _item$location, _props$recentLocation;\n\n        let lat = item.location.coordinates[1];\n        let long = item.location.coordinates[0];\n        let response = await Geocode.fromLatLng(lat, long);\n        console.log({\n          results: response === null || response === void 0 ? void 0 : response.results\n        });\n        let formatedCityText = JSON.parse(JSON.stringify(response === null || response === void 0 ? void 0 : response.results[0]));\n        let cityText = null;\n\n        if (formatedCityText === null || formatedCityText === void 0 ? void 0 : formatedCityText.formatted_address.includes(',')) {\n          cityText = formatedCityText === null || formatedCityText === void 0 ? void 0 : formatedCityText.formatted_address.split(',');\n        } else {\n          cityText = formatedCityText === null || formatedCityText === void 0 ? void 0 : formatedCityText.formatted_address.split('-');\n        }\n\n        const newData = {\n          mainText: ((_cityText = cityText) === null || _cityText === void 0 ? void 0 : _cityText.length) > 3 ? (_cityText2 = cityText) === null || _cityText2 === void 0 ? void 0 : _cityText2.slice(0, 2).join(',') : (_cityText3 = cityText) === null || _cityText3 === void 0 ? void 0 : _cityText3.slice(0, 1).join(','),\n          secondaryText: ((_cityText4 = cityText) === null || _cityText4 === void 0 ? void 0 : _cityText4.length) > 3 ? (_cityText5 = cityText) === null || _cityText5 === void 0 ? void 0 : _cityText5.slice(2, (_cityText6 = cityText) === null || _cityText6 === void 0 ? void 0 : _cityText6.length).join(',') : (_cityText7 = cityText) === null || _cityText7 === void 0 ? void 0 : _cityText7.slice(1, (_cityText8 = cityText) === null || _cityText8 === void 0 ? void 0 : _cityText8.length).join(',')\n        };\n        recentLocationDetails[index] = {\n          formatted_address: formatedCityText === null || formatedCityText === void 0 ? void 0 : formatedCityText.formatted_address,\n          location: {\n            coordinates: item === null || item === void 0 ? void 0 : (_item$location = item.location) === null || _item$location === void 0 ? void 0 : _item$location.coordinates\n          },\n          allText: newData\n        };\n\n        if ((recentLocationDetails === null || recentLocationDetails === void 0 ? void 0 : recentLocationDetails.length) === ((_props$recentLocation = props.recentLocationData) === null || _props$recentLocation === void 0 ? void 0 : _props$recentLocation.length)) {\n          setRecentLocation(recentLocationDetails);\n        }\n      } catch (err) {\n        console.log({\n          err\n        });\n      }\n    }\n  };\n\n  const checkIfExist = _id => {\n    if (selectedTrade) {\n      let isLength = Object.keys(selectedTrade).length;\n\n      if (isLength) {\n        let item = selectedTrade;\n\n        if ((item === null || item === void 0 ? void 0 : item._id) === _id) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  const cleanRecentSearch = async (event, recentSearchId) => {\n    event.stopPropagation();\n    const data = {\n      id: recentSearchId,\n      status: 0\n    };\n    const res = await deleteRecentSearch(data);\n\n    if (res.success) {\n      if (getRecentSearchList) {\n        getRecentSearchList();\n      }\n    }\n  };\n\n  const recentJobSearches = () => {\n    var _props$recentSearchJo, _props$recentSearchJo2, _props$recentSearchJo3;\n\n    let props_Clone = props;\n    let tradeListData = props_Clone.tradeListData;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_autosuggestion\",\n        id: \"recent-job-search-div\",\n        children: [(props === null || props === void 0 ? void 0 : (_props$recentSearchJo = props.recentSearchJobData) === null || _props$recentSearchJo === void 0 ? void 0 : _props$recentSearchJo.length) ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sub_title\",\n            children: \"Recent searches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row recent_search\",\n            children: ((_props$recentSearchJo2 = props.recentSearchJobData) === null || _props$recentSearchJo2 === void 0 ? void 0 : _props$recentSearchJo2.length) > 0 && ((_props$recentSearchJo3 = props.recentSearchJobData) === null || _props$recentSearchJo3 === void 0 ? void 0 : _props$recentSearchJo3.slice(0, 4).map(item => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex_col_sm_3\",\n                onClick: () => {\n                  let selected_address = selectedAddress;\n                  props.history.push({\n                    pathname: `search-tradie-results`,\n                    state: {\n                      name: item === null || item === void 0 ? void 0 : item.name,\n                      tradeId: [item === null || item === void 0 ? void 0 : item._id],\n                      specializations: [item === null || item === void 0 ? void 0 : item.specializationsId],\n                      location: Object.keys(selected_address).length ? {\n                        \"coordinates\": [selected_address === null || selected_address === void 0 ? void 0 : selected_address.lng, selected_address === null || selected_address === void 0 ? void 0 : selected_address.lat]\n                      } : null,\n                      calender: calenderRange1,\n                      address: addressText\n                    }\n                  }); // setItemSearch(item);\n                  // setSelectedTrade({});\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card ico_txt_wrap\",\n                  children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                    className: \"ico\",\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: (item === null || item === void 0 ? void 0 : item.image) || residential,\n                      alt: \"icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 272,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"f_column\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 275,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"name\",\n                      children: item.trade_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"remove_card\",\n                    onClick: event => cleanRecentSearch(event, item.recentSearchId),\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: close,\n                      alt: \"remove\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 279,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 41\n              }, this);\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select_sphere recent_search\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sub_title\",\n            children: \"Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: tradeListData === null || tradeListData === void 0 ? void 0 : tradeListData.map(({\n              _id,\n              trade_name,\n              selected_url,\n              specialisations\n            }) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => {\n                let item_spec = specialisations;\n\n                if (item_spec === null || item_spec === void 0 ? void 0 : item_spec.length) {\n                  let getItem = item_spec[0];\n\n                  if (getItem) {\n                    setStateData({\n                      image: selected_url,\n                      name: getItem === null || getItem === void 0 ? void 0 : getItem.name,\n                      specializationsId: getItem === null || getItem === void 0 ? void 0 : getItem._id,\n                      trade_name: trade_name,\n                      _id: _id\n                    });\n                    setSearchText(getItem === null || getItem === void 0 ? void 0 : getItem.name);\n                  }\n\n                  setSelectedTrade({\n                    _id,\n                    trade_name,\n                    selected_url,\n                    specialisations\n                  });\n                }\n              },\n              className: checkIfExist(_id) ? 'active' : '',\n              children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: selected_url,\n                  alt: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"name\",\n                children: trade_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  };\n\n  const renderJobResult = () => {\n    var _props$searchJobListD;\n\n    if (props === null || props === void 0 ? void 0 : (_props$searchJobListD = props.searchJobListData) === null || _props$searchJobListD === void 0 ? void 0 : _props$searchJobListD.length) {\n      var _props$searchJobListD2;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_autosuggestion\",\n        id: \"fetched-custom-job-category-div\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recent_search\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"drop_data\",\n            children: (_props$searchJobListD2 = props.searchJobListData) === null || _props$searchJobListD2 === void 0 ? void 0 : _props$searchJobListD2.map(item => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                onClick: () => {\n                  setItemSearch(item);\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                  className: \"category\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: item.image ? item.image : residential,\n                    alt: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 336,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: item.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"prof\",\n                    children: item.trade_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this);\n    }\n\n    return null;\n  };\n\n  const onError = (status, clearSuggestions) => {\n    console.log('Google Maps API returned error with status: ', status);\n    clearSuggestions();\n  };\n\n  const validateForm = () => {\n    return true;\n  };\n\n  const setItemSearch = item => {\n    setStateData(item);\n    setSelectedTrade({});\n    setSearchText((item === null || item === void 0 ? void 0 : item.name) || '');\n  };\n\n  const bannerSearchClicked = () => {\n    let selected_address = selectedAddress;\n    let selected_trade = selectedTrade;\n    let selected_item = props === null || props === void 0 ? void 0 : props.selectedItem;\n    let props_trade = selected_item === null || selected_item === void 0 ? void 0 : selected_item.selectedTrade;\n\n    if (!(stateData === null || stateData === void 0 ? void 0 : stateData._id) && !(props_trade === null || props_trade === void 0 ? void 0 : props_trade._id)) {\n      setShowToast(true, 'please enter the valid search text.');\n      return;\n    }\n\n    if (validateForm()) {\n      var _data$address;\n\n      let data = {\n        page: 1,\n        isFiltered: false,\n        tradeId: [stateData === null || stateData === void 0 ? void 0 : stateData._id],\n        specializationId: [stateData === null || stateData === void 0 ? void 0 : stateData.specializationsId]\n      };\n\n      if (Object.keys(selectedAddress).length) {\n        data['location'] = {\n          \"coordinates\": [parseFloat(selected_address === null || selected_address === void 0 ? void 0 : selected_address.lng), parseFloat(selected_address === null || selected_address === void 0 ? void 0 : selected_address.lat)]\n        };\n\n        if (addressText) {\n          data['address'] = addressText && Object.keys(suggestionSelected).length ? JSON.stringify(suggestionSelected) : '';\n        }\n      } else {\n        delete data.location;\n      }\n\n      if (moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate).isValid()) {\n        data['from_date'] = moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate).format('YYYY-MM-DD');\n      } else {\n        delete data.from_date;\n      }\n\n      if (moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.endDate).isValid()) {\n        data['to_date'] = moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.endDate).format('YYYY-MM-DD');\n      } else {\n        delete data.to_date;\n      }\n\n      if (props_trade === null || props_trade === void 0 ? void 0 : props_trade._id) {\n        var _props_trade$speciali;\n\n        data['tradeId'] = [props_trade._id];\n\n        if (props_trade === null || props_trade === void 0 ? void 0 : (_props_trade$speciali = props_trade.specialisations) === null || _props_trade$speciali === void 0 ? void 0 : _props_trade$speciali.length) {\n          data['specializationId'] = props_trade.specialisations.map(item => {\n            if (item === null || item === void 0 ? void 0 : item._id) {\n              return item === null || item === void 0 ? void 0 : item._id;\n            }\n\n            return item;\n          });\n        }\n      } else {\n        if (selected_trade) {\n          if (Object.keys(selected_trade).length) {\n            var _selected_trade$speci;\n\n            data['tradeId'] = [selected_trade._id];\n\n            if (selected_trade === null || selected_trade === void 0 ? void 0 : (_selected_trade$speci = selected_trade.specialisations) === null || _selected_trade$speci === void 0 ? void 0 : _selected_trade$speci.length) {\n              data['specializationId'] = selected_trade.specialisations.map(item => item._id);\n            }\n          }\n        }\n      }\n\n      if (!(data === null || data === void 0 ? void 0 : data.address) || !(data === null || data === void 0 ? void 0 : (_data$address = data.address) === null || _data$address === void 0 ? void 0 : _data$address.length)) {\n        data === null || data === void 0 ? true : delete data.address;\n      }\n\n      if (!localChanges) {\n        props.postHomeSearchData(data);\n      }\n\n      isHandleChanges(false);\n      props.history.push({\n        pathname: `search-tradie-results`,\n        state: {\n          name: searchText,\n          tradeId: data.tradeId,\n          specializations: data.specializationId,\n          location: Object.keys(selected_address).length ? {\n            \"coordinates\": [selected_address === null || selected_address === void 0 ? void 0 : selected_address.lng, selected_address === null || selected_address === void 0 ? void 0 : selected_address.lat]\n          } : null,\n          calender: calenderRange1,\n          address: addressText,\n          suggestionSelected: suggestionSelected\n        }\n      });\n    }\n  };\n\n  const filterFromAddress = response => {\n    let city,\n        state,\n        country = null;\n\n    for (let i = 0; i < response.results[0].address_components.length; i++) {\n      for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n        switch (response.results[0].address_components[i].types[j]) {\n          case \"locality\":\n            city = response.results[0].address_components[i].long_name;\n            break;\n\n          case \"administrative_area_level_1\":\n            state = response.results[0].address_components[i].long_name;\n            break;\n\n          case \"country\":\n            country = response.results[0].address_components[i].long_name;\n            break;\n        }\n      }\n    }\n\n    return {\n      city,\n      state,\n      country: country.toLowerCase()\n    };\n  };\n\n  const getCurrentLocation = async () => {\n    let itemToggle = await navigator.permissions.query({\n      name: 'geolocation'\n    });\n    setLocationStatus(itemToggle.state);\n    let local_position = localStorage.getItem('position');\n    let position = JSON.parse(local_position);\n\n    if (position === null || position === void 0 ? void 0 : position.length) {\n      let long = position[0].toString();\n      let lat = position[1].toString();\n      let response = await Geocode.fromLatLng(lat, long);\n      const {\n        city,\n        state,\n        country\n      } = filterFromAddress(response);\n\n      if (response && [\"australia\", \"au\"].includes(country)) {\n        var _response$results;\n\n        if ((response === null || response === void 0 ? void 0 : response.results) && Array.isArray(response.results) && (response === null || response === void 0 ? void 0 : (_response$results = response.results) === null || _response$results === void 0 ? void 0 : _response$results.length)) {\n          const address = response.results[0].formatted_address;\n          setSelectedAddress({\n            lat,\n            long\n          });\n          setAddressText(address);\n          setInputFocus2(true);\n          setInputFocus1(false);\n          setInputFocus3(false);\n          setCurrentLocations(true);\n        }\n      } else {\n        if ((itemToggle === null || itemToggle === void 0 ? void 0 : itemToggle.state) !== \"denied\") {\n          setShowToast(true, \"Uh oh! we don't provide service currently in your location.\");\n        }\n      }\n    }\n  };\n\n  let selected_trade = selectedTrade;\n  let length_spec = 0;\n\n  if (props === null || props === void 0 ? void 0 : props.selectedItem) {\n    var _sProps$selectedTrade;\n\n    let sProps = props === null || props === void 0 ? void 0 : props.selectedItem;\n\n    if (Array.isArray(sProps === null || sProps === void 0 ? void 0 : (_sProps$selectedTrade = sProps.selectedTrade) === null || _sProps$selectedTrade === void 0 ? void 0 : _sProps$selectedTrade.specialisations)) {\n      var _sProps$selectedTrade2, _sProps$selectedTrade3;\n\n      length_spec = sProps === null || sProps === void 0 ? void 0 : (_sProps$selectedTrade2 = sProps.selectedTrade) === null || _sProps$selectedTrade2 === void 0 ? void 0 : (_sProps$selectedTrade3 = _sProps$selectedTrade2.specialisations) === null || _sProps$selectedTrade3 === void 0 ? void 0 : _sProps$selectedTrade3.length;\n    }\n  } else {\n    var _selected_trade$speci2;\n\n    length_spec = selected_trade === null || selected_trade === void 0 ? void 0 : (_selected_trade$speci2 = selected_trade.specialisations) === null || _selected_trade$speci2 === void 0 ? void 0 : _selected_trade$speci2.length;\n\n    if (!length_spec) {\n      var _stateData$specializa;\n\n      if (stateData === null || stateData === void 0 ? void 0 : (_stateData$specializa = stateData.specializationsId) === null || _stateData$specializa === void 0 ? void 0 : _stateData$specializa.length) {\n        length_spec = 1;\n      }\n    }\n  }\n\n  const checkPlaceholder = calenderRange1 => {\n    let fromDate = calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate;\n    let toDate = calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.endDate;\n    let result = renderTimeWithCustomFormat(fromDate, toDate, '', ['DD MMM', 'DD MMM YYYY'], 'When ?');\n\n    if (!result) {\n      return 'When ?';\n    }\n\n    return result;\n  };\n\n  let custom_name = searchText;\n\n  if (!checkOnChange) {\n    if (length_spec > 1) {\n      custom_name = `${custom_name} +${length_spec - 1}`;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home_search\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (props === null || props === void 0 ? void 0 : props.handleChangeToggle) {\n          props.handleChangeToggle(false);\n        }\n      },\n      className: \"modal_srch_close\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: close,\n        alt: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: `search_wrapr ${!length_spec ? 'first_input' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"categ_box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text_field\",\n            id: \"text-field-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ref: searchRef,\n              placeholder: \"What jobs are you after?\",\n              value: custom_name,\n              onChange: e => {\n                // isHandleChanges(true)\n                setOnChange(true);\n                setSearchText(e.target.value.trimLeft());\n              },\n              autoComplete: \"none\" // readOnly={props?.selectedItem ? true : false}\n              ,\n              onFocus: () => {\n                setInputFocus1(true);\n                setInputFocus2(false);\n                setInputFocus3(false);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"border_eff\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detect_icon_ltr\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: Searchicon,\n                alt: \"search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 581,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 29\n            }, this), (searchText === null || searchText === void 0 ? void 0 : searchText.length) && inputFocus1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detect_icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: cross,\n                alt: \"cross\",\n                onClick: () => {\n                  // clear here\n                  // isHandleChanges(true)\n                  setOnChange(false);\n                  setSearchText('');\n                  setStateData({});\n                  setSelectedTrade({});\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 25\n          }, this), !!errors.searchedJob && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error_msg\",\n            children: errors.searchedJob\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 50\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 21\n        }, this), !(searchText === null || searchText === void 0 ? void 0 : searchText.length) && inputFocus1 ? recentJobSearches() : null, (searchText === null || searchText === void 0 ? void 0 : searchText.length) > 2 && inputFocus1 ? renderJobResult() : null, /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"loc_box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"location-text-field-div\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n                value: addressText,\n                searchOptions: {\n                  componentRestrictions: {\n                    country: \"au\"\n                  },\n                  // types: [\"address\"]\n                  types: ['(cities)']\n                },\n                onChange: item => {\n                  setAddressText(item);\n\n                  if (!addressText.length) {\n                    setSelectedAddress({});\n                  }\n                },\n                shouldFetchSuggestions: (addressText === null || addressText === void 0 ? void 0 : addressText.length) > 2,\n                onSelect: async (address, placeId, suggestion) => {\n                  var _suggestion$formatted, _response$results2;\n\n                  console.log({\n                    address,\n                    placeId,\n                    suggestion\n                  });\n                  let selected_address = address;\n\n                  if (address.indexOf(',')) {\n                    selected_address = address.split(',')[0];\n                  }\n\n                  setSuggestion(suggestion === null || suggestion === void 0 ? void 0 : suggestion.formattedSuggestion);\n                  setAddressText(suggestion === null || suggestion === void 0 ? void 0 : (_suggestion$formatted = suggestion.formattedSuggestion) === null || _suggestion$formatted === void 0 ? void 0 : _suggestion$formatted.mainText);\n                  let response = await Geocode.fromAddress(address);\n                  console.log({\n                    selected_address\n                  });\n\n                  if (response === null || response === void 0 ? void 0 : (_response$results2 = response.results) === null || _response$results2 === void 0 ? void 0 : _response$results2.length) {\n                    const {\n                      lat,\n                      lng\n                    } = response.results[0].geometry.location;\n                    setSelectedAddress({\n                      lat,\n                      lng\n                    });\n                    setInputFocus2(false);\n                  }\n                },\n                highlightFirstSuggestion: true,\n                onError: onError,\n                debounce: 0,\n                children: ({\n                  getInputProps,\n                  suggestions,\n                  getSuggestionItemProps,\n                  loading\n                }) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `text_field`,\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                        placeholder: 'Where?',\n                        className: 'line-1'\n                      }),\n                      id: \"location-input-tag\",\n                      ref: locationRef,\n                      autoComplete: \"off\",\n                      onFocus: () => {\n                        setInputFocus2(true);\n                        setInputFocus1(false);\n                        setInputFocus3(false);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 670,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"detect_icon_ltr\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: Location,\n                        alt: \"location\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 682,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 681,\n                      columnNumber: 49\n                    }, this), inputFocus2 && (addressText === null || addressText === void 0 ? void 0 : addressText.length) > 2 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"detect_icon\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: cross,\n                        alt: \"cross\",\n                        onClick: () => {\n                          setAddressText('');\n                          setSelectedAddress({});\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 687,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 686,\n                      columnNumber: 53\n                    }, this) : null]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 667,\n                    columnNumber: 45\n                  }, this), (suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) && inputFocus2 && (addressText === null || addressText === void 0 ? void 0 : addressText.length) > 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"custom_autosuggestion location\",\n                    id: \"autocomplete-dropdown-container\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex_row recent_search auto_loc\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"flex_col_sm_4\",\n                        children: [!!errors.selectedMapLocation && /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"error_msg\",\n                          children: errors.selectedMapLocation\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 715,\n                          columnNumber: 65\n                        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: \"Loading...\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 719,\n                          columnNumber: 73\n                        }, this), suggestions.map(suggestion => {\n                          const className = 'autosuggestion_icon card loc name';\n                          const style = suggestion.active ? {\n                            backgroundColor: '#fafafa',\n                            cursor: 'pointer'\n                          } : {\n                            backgroundColor: '#ffffff',\n                            cursor: 'pointer'\n                          };\n                          return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                              className,\n                              style\n                            }),\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              children: suggestion.formattedSuggestion.mainText\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 729,\n                              columnNumber: 73\n                            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"name\",\n                              children: suggestion.formattedSuggestion.secondaryText\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 730,\n                              columnNumber: 73\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 727,\n                            columnNumber: 69\n                          }, this);\n                        })]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 713,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 712,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 711,\n                    columnNumber: 49\n                  }, this) : inputFocus2 && !(suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) && !Object.keys(selectedAddress).length ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      minHeight: '50px'\n                    },\n                    className: \"custom_autosuggestion location\",\n                    id: \"autocomplete-dropdown-container\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex_row recent_search auto_loc\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"flex_col_sm_4\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"loc_suggestions\",\n                          children: 'No Result Found.'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 744,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 743,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 742,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 738,\n                    columnNumber: 53\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 25\n          }, this), !!errors.selectedMapLocation && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error_msg\",\n            children: errors.selectedMapLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 58\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 21\n        }, this), !(addressText === null || addressText === void 0 ? void 0 : addressText.length) && inputFocus2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom_autosuggestion location\",\n          id: \"current-location-search-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"location-btn\",\n            onClick: getCurrentLocation,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"gps_icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: icgps,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 767,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 33\n            }, this), ' Use my current location']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 29\n          }, this), locationStatus === \"denied\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"blocked_note\",\n            children: 'You have blocked your location. To use this, change your location settings in browser.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 34\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row recent_search auto_loc\",\n            children: [(props === null || props === void 0 ? void 0 : (_props$recentLocation2 = props.recentLocationData) === null || _props$recentLocation2 === void 0 ? void 0 : _props$recentLocation2.length) > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sub_title\",\n              children: 'Recent searches'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 37\n            }, this), props === null || props === void 0 ? void 0 : (_props$recentLocation3 = props.recentLocationData) === null || _props$recentLocation3 === void 0 ? void 0 : _props$recentLocation3.map(item => {\n              var _item$address, _JSON$parse2, _JSON$parse3;\n\n              return (item === null || item === void 0 ? void 0 : (_item$address = item.address) === null || _item$address === void 0 ? void 0 : _item$address.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex_col_sm_4\",\n                onClick: () => {\n                  var _JSON$parse, _item$location2, _item$location3;\n\n                  setAddressText((_JSON$parse = JSON.parse(item === null || item === void 0 ? void 0 : item.address)) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.mainText);\n                  setSelectedAddress({\n                    lat: item === null || item === void 0 ? void 0 : (_item$location2 = item.location) === null || _item$location2 === void 0 ? void 0 : _item$location2.coordinates[1],\n                    lng: item === null || item === void 0 ? void 0 : (_item$location3 = item.location) === null || _item$location3 === void 0 ? void 0 : _item$location3.coordinates[0]\n                  });\n                  setSuggestion(JSON.parse(item === null || item === void 0 ? void 0 : item.address)); // let location_coordinates: any = item.location.coordinates\n                  // setAddressText(item.formatted_address);\n                  // setSelectedAddress({\n                  //     lat: location_coordinates[1],\n                  //     lng: location_coordinates[0]\n                  // });\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"autosuggestion_icon card loc name\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: (_JSON$parse2 = JSON.parse(item === null || item === void 0 ? void 0 : item.address)) === null || _JSON$parse2 === void 0 ? void 0 : _JSON$parse2.mainText\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 801,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: (_JSON$parse3 = JSON.parse(item === null || item === void 0 ? void 0 : item.address)) === null || _JSON$parse3 === void 0 ? void 0 : _JSON$parse3.secondaryText\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 802,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 800,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 783,\n                columnNumber: 41\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `date_box ${(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate) ? 'date_value' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: calenderRef,\n            className: \"custom_date_range\",\n            id: \"date-range-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text_field\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"detect_icon_ltr calendar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 814,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"calender-input\",\n                placeholder: checkPlaceholder(calenderRange1),\n                autoComplete: \"none\",\n                onFocus: () => {\n                  setInputFocus3(true);\n                  setInputFocus1(false);\n                  setInputFocus2(false);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 815,\n                columnNumber: 33\n              }, this), (calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate) && inputFocus3 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"detect_icon\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: cross,\n                  alt: \"cross\",\n                  onClick: () => {\n                    setCalenderRange1({\n                      startDate: '',\n                      endDate: '',\n                      key: 'selection1'\n                    });\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 828,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 827,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 29\n            }, this), inputFocus3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"custom_autosuggestion\",\n              id: \"custom-date-range-div\",\n              children: /*#__PURE__*/_jsxDEV(DateRange, {\n                onChange: handleCalenderRange,\n                ranges: !moment(calenderRange1 === null || calenderRange1 === void 0 ? void 0 : calenderRange1.startDate).isValid() ? [{\n                  startDate: new Date(),\n                  endDate: new Date(),\n                  key: 'selection1'\n                }] : [calenderRange1],\n                moveRangeOnFirstSelection: false,\n                rangeColors: [\"#fee600\", \"#b5b5b5\"],\n                showDateDisplay: false,\n                showSelectionPreview: true,\n                months: 2,\n                showPreview: true,\n                minDate: new Date(),\n                maxDate: moment().add(2, 'years').toDate(),\n                direction: \"horizontal\",\n                fixedHeight: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 841,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 838,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search_btn\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"fill_btn btn-effect\",\n            onClick: bannerSearchClicked,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: search,\n              alt: \"search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 861,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 860,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 546,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(BannerSearch, \"3AmygNGiQ176sZWS0l7ZY1r7Nyw=\", false, function () {\n  return [useDetectClickOutside, useDetectClickOutside, useDetectClickOutside, useDetectClickOutside];\n});\n\n_c = BannerSearch;\n\nconst mapStateToProps = state => {\n  return {\n    searchJobListData: state.homeSearch.searchJobListData,\n    recentSearchJobData: state.homeSearch.recentSearchJobData,\n    homeSearchJobData: state.homeSearch.homeSearchJobData,\n    tradeListData: state.auth.tradeListData,\n    localChanges: state.jobs.localChanges,\n    recentLocationData: state.homeSearch.recentLocationData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getSearchJobList,\n    getRecentSearchList,\n    postHomeSearchData,\n    isHandleChanges,\n    getRecentLocationList\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BannerSearch);\n/**\n\n    No-result found conditions\n    </div> : !loading || addressText?.length > 2 && !suggestions?.length && !enableCurrentLocation && !Object.keys(selectedAddress).length ? (\n\n **/\n\nvar _c;\n\n$RefreshReg$(_c, \"BannerSearch\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/shared/bannerSearch.tsx"],"names":["React","useState","useEffect","PlacesAutocomplete","DateRange","Searchicon","search","Location","cross","icgps","residential","close","connect","bindActionCreators","getSearchJobList","getRecentSearchList","postHomeSearchData","getRecentLocationList","isHandleChanges","useDetectClickOutside","moment","Geocode","setShowToast","deleteRecentSearch","renderTimeWithCustomFormat","setApiKey","setLanguage","setRegion","example_calender","startDate","endDate","key","useStateFromProp","initialValue","value","setValue","BannerSearch","props","props_selected","selectedItem","localChanges","checkOnChange","setOnChange","locationStatus","setLocationStatus","stateData","setStateData","searchText","setSearchText","addressText","setAddressText","recentLocation","setRecentLocation","selectedAddress","setSelectedAddress","enableCurrentLocation","setCurrentLocations","errors","setErrors","selectedTrade","setSelectedTrade","inputFocus1","setInputFocus1","inputFocus2","setInputFocus2","inputFocus3","setInputFocus3","calenderRange1","setCalenderRange1","suggestionSelected","setSuggestion","handleOnOutsideSearch","handleOnOutsideLocation","handleOnOutsideCalender","addressRef","setAddressRef","searchRef","onTriggered","locationRef","locationRefClone","calenderRef","handleCalenderRange","item","selection1","console","log","recentLocationData","length","getRecentLocationData","recentLocationDetails","index","lat","location","coordinates","long","response","fromLatLng","results","formatedCityText","JSON","parse","stringify","cityText","formatted_address","includes","split","newData","mainText","slice","join","secondaryText","allText","err","checkIfExist","_id","isLength","Object","keys","cleanRecentSearch","event","recentSearchId","stopPropagation","data","id","status","res","success","recentJobSearches","props_Clone","tradeListData","recentSearchJobData","map","selected_address","history","push","pathname","state","name","tradeId","specializations","specializationsId","lng","calender","address","image","trade_name","selected_url","specialisations","item_spec","getItem","renderJobResult","searchJobListData","setItemSearch","onError","clearSuggestions","validateForm","bannerSearchClicked","selected_trade","selected_item","props_trade","page","isFiltered","specializationId","parseFloat","isValid","format","from_date","to_date","filterFromAddress","city","country","i","address_components","j","types","long_name","toLowerCase","getCurrentLocation","itemToggle","navigator","permissions","query","local_position","localStorage","position","toString","Array","isArray","length_spec","sProps","checkPlaceholder","fromDate","toDate","result","custom_name","handleChangeToggle","e","target","trimLeft","searchedJob","componentRestrictions","placeId","suggestion","indexOf","formattedSuggestion","fromAddress","geometry","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","selectedMapLocation","style","active","backgroundColor","cursor","minHeight","Date","add","mapStateToProps","homeSearch","homeSearchJobData","auth","jobs","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Constants from '../../utils/constants';\n// @ts-ignore\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng, } from 'react-places-autocomplete';\nimport regex from '../../utils/regex';\n// @ts-ignore\nimport { format } from 'date-fns';\n// @ts-ignore\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nimport Searchicon from \"../../assets/images/main-search.png\";\nimport search from \"../../assets/images/ic-search.png\";\nimport Location from \"../../assets/images/ic-location.png\";\nimport cross from \"../../assets/images/close-black.png\";\nimport icgps from \"../../assets/images/ic-gps.png\";\nimport residential from \"../../assets/images/ic-residential.png\";\nimport close from \"../../assets/images/icon-close-1.png\";\n\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux';\nimport { getSearchJobList, getRecentSearchList, postHomeSearchData, getRecentLocationList } from '../../redux/homeSearch/actions';\nimport { isHandleChanges } from '../../redux/jobs/actions';\n// @ts-ignore\nimport { useDetectClickOutside } from 'react-detect-click-outside';\nimport moment from 'moment';\nimport Geocode from \"react-geocode\";\nimport { setShowToast } from '../../redux/common/actions';\n\nimport { deleteRecentSearch } from '../../redux/homeSearch/actions';\n\nimport { renderTime, renderTimeWithCustomFormat } from '../../utils/common';\n\nGeocode.setApiKey(\"AIzaSyDKFFrKp0D_5gBsA_oztQUhrrgpKnUpyPo\");\nGeocode.setLanguage(\"en\");\nGeocode.setRegion(\"au\");\n// Geocode?.setLocationType(\"ROOFTOP\");\n\ninterface PropsType {\n    history: any,\n    location?: any,\n    bannerData: any,\n    selectedItem: any,\n    selectedTrade: any,\n    current_address: any,\n    recentLocationData: Array<any>,\n\n    searchText: any,\n    stateData: any,\n    addressText: any,\n    selectedAddress: any,\n    isHandleChanges: (item: any) => void,\n    localChanges: boolean,\n    searchJobListData: Array<object>,\n    recentSearchJobData: Array<object>,\n    homeSearchJobData: Array<object>,\n    setBannerData: (data: any) => void,\n    getSearchJobList: (data: any) => void,\n    postHomeSearchData: (data: any) => void,\n    handleChangeToggle?: (data: any) => void,\n    getRecentSearchList?: () => void,\n    getRecentLocationList: () => void,\n}\n\nconst example_calender = { startDate: '', endDate: '', key: 'selection1' };\n\nexport function useStateFromProp(initialValue: any) {\n    const [value, setValue] = useState(initialValue);\n\n    useEffect(() => setValue(initialValue), [initialValue]);\n\n    return [value, setValue];\n}\n\n\n\nconst BannerSearch = (props: PropsType) => {\n    let props_selected = props.selectedItem;\n    const { selectedItem, isHandleChanges, localChanges, getRecentSearchList, getRecentLocationList } = props;\n\n    const [checkOnChange, setOnChange] = useState(false);\n\n    const [locationStatus, setLocationStatus] = useState(null);\n    const [stateData, setStateData] = useState<any>(null)\n    const [searchText, setSearchText] = useState('');\n    const [addressText, setAddressText] = useState<any>('');\n    const [recentLocation, setRecentLocation] = useState<any>([]); // recentLocation\n    const [selectedAddress, setSelectedAddress] = useState({});\n    const [enableCurrentLocation, setCurrentLocations] = useState<boolean>(false);\n    const [errors, setErrors] = useState<any>({});\n    const [selectedTrade, setSelectedTrade] = useState({});\n\n    const [inputFocus1, setInputFocus1] = useState<boolean>(false);\n    const [inputFocus2, setInputFocus2] = useState<boolean>(false);\n    const [inputFocus3, setInputFocus3] = useState<boolean>(false);\n\n    const [calenderRange1, setCalenderRange1] = useState<any>(example_calender);\n\n    const [suggestionSelected, setSuggestion] = useState({});\n\n    const handleOnOutsideSearch = () => {\n        setOnChange(false);\n        setInputFocus1(false)\n    };\n    const handleOnOutsideLocation = () => {\n        setInputFocus2(false)\n    };\n    const handleOnOutsideCalender = () => setInputFocus3(false);\n\n    const [addressRef, setAddressRef] = useState('');\n\n    const searchRef = useDetectClickOutside({ onTriggered: handleOnOutsideSearch });\n    const locationRef = useDetectClickOutside({\n        onTriggered: () => {\n            // if (addressText?.length > 3) {\n            handleOnOutsideLocation()\n            // }\n        }\n    });\n    const locationRefClone = useDetectClickOutside({\n        onTriggered: () => {\n            // if (!addressText || addressText?.length < 2) {\n            // handleOnOutsideLocation()\n            // }\n        }\n    });\n    const calenderRef = useDetectClickOutside({ onTriggered: handleOnOutsideCalender });\n\n    const handleCalenderRange = (item: any) => {\n        setCalenderRange1(item.selection1)\n    };\n\n    useEffect(() => {\n        if (getRecentSearchList) {\n            getRecentSearchList();\n        }\n        if (getRecentLocationList) {\n            getRecentLocationList();\n        }\n        // getRecentLocationData();\n    }, [])\n\n    useEffect(() => {\n        console.log('In local-changes', { props: props.selectedItem })\n        return () => {\n            console.log('local-changes', { props: props.selectedItem })\n        }\n    }, [props])\n\n    // useEffect(() => {\n    //     if (addressText?.length > 2) {\n    //         document.getElementById('location-input-tag')?.focus();\n    //     } else {\n    //         document.getElementById('location_search_static')?.focus();\n    //     }\n    // }, [addressText])\n\n    useEffect(() => {\n        // if (props.recentLocationData?.length && JSON.stringify(props.recentLocationData[0]?.location?.coordinates) !== JSON.stringify(recentLocation[0]?.location?.coordinates)) {\n        //     getRecentLocationData();\n        // }\n    }, [props.recentLocationData, recentLocation]);\n\n    useEffect(() => {\n        if (searchText?.length > 2) {\n            props.getSearchJobList(searchText);\n        }\n        if (!searchText?.length) {\n            setSelectedTrade({});\n        }\n    }, [searchText])\n\n    const getRecentLocationData = async () => {\n        var recentLocationDetails: any = [];\n\n        let recentLocationData = props.recentLocationData\n        for (let index = 0; index < recentLocationData.length; index++) {\n            let item = recentLocationData[index];\n            try {\n                let lat = item.location.coordinates[1];\n                let long = item.location.coordinates[0];\n                let response = await Geocode.fromLatLng(lat, long);\n                console.log({\n                    results: response?.results\n                })\n                let formatedCityText = JSON.parse(JSON.stringify(response?.results[0]));\n                let cityText: any = null;\n                if (formatedCityText?.formatted_address.includes(',')) {\n                    cityText = formatedCityText?.formatted_address.split(',')\n                } else {\n                    cityText = formatedCityText?.formatted_address.split('-');\n                }\n                const newData = {\n                    mainText: cityText?.length > 3 ? cityText?.slice(0, 2).join(',') : cityText?.slice(0, 1).join(','),\n                    secondaryText: cityText?.length > 3 ? cityText?.slice(2, cityText?.length).join(',') : cityText?.slice(1, cityText?.length).join(','),\n                }\n                recentLocationDetails[index] = {\n                    formatted_address: formatedCityText?.formatted_address,\n                    location: { coordinates: item?.location?.coordinates },\n                    allText: newData\n                };\n\n                if (recentLocationDetails?.length === props.recentLocationData?.length) {\n                    setRecentLocation(recentLocationDetails);\n                }\n            } catch (err) {\n                console.log({ err });\n            }\n        }\n    }\n\n    const checkIfExist = (_id: any) => {\n        if (selectedTrade) {\n            let isLength = Object.keys(selectedTrade).length;\n            if (isLength) {\n                let item: any = selectedTrade;\n                if (item?._id === _id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    const cleanRecentSearch = async (event: any, recentSearchId: string) => {\n        event.stopPropagation();\n        const data = {\n            id: recentSearchId,\n            status: 0\n        }\n        const res = await deleteRecentSearch(data);\n        if (res.success) {\n            if (getRecentSearchList) {\n                getRecentSearchList();\n            }\n        }\n    }\n\n    const recentJobSearches = () => {\n        let props_Clone: any = props;\n        let tradeListData = props_Clone.tradeListData;\n        return (\n            <>\n                <div className=\"custom_autosuggestion\" id=\"recent-job-search-div\">\n                    {props?.recentSearchJobData?.length ?\n                        <React.Fragment>\n                            <span className=\"sub_title\">Recent searches</span>\n                            <div className=\"flex_row recent_search\">\n                                {props.recentSearchJobData?.length > 0 && props.recentSearchJobData?.slice(0, 4).map((item: any) => {\n                                    return (\n                                        <div\n                                            className=\"flex_col_sm_3\"\n                                            onClick={() => {\n                                                let selected_address: any = selectedAddress;\n                                                props.history.push({\n                                                    pathname: `search-tradie-results`,\n                                                    state: {\n                                                        name: item?.name,\n                                                        tradeId: [item?._id],\n                                                        specializations: [item?.specializationsId],\n                                                        location: Object.keys(selected_address).length ? { \"coordinates\": [selected_address?.lng, selected_address?.lat] } : null,\n                                                        calender: calenderRange1,\n                                                        address: addressText,\n                                                    }\n                                                })\n                                                // setItemSearch(item);\n                                                // setSelectedTrade({});\n                                            }}>\n                                            <div className=\"card ico_txt_wrap\">\n                                                <figure className=\"ico\">\n                                                    <img src={item?.image || residential} alt=\"icon\" />\n                                                </figure>\n                                                <div className=\"f_column\">\n                                                    <span>{item.name}</span>\n                                                    <span className=\"name\">{item.trade_name}</span>\n                                                </div>\n                                                <span className=\"remove_card\" onClick={(event) => cleanRecentSearch(event, item.recentSearchId)}>\n                                                    <img src={close} alt=\"remove\" />\n                                                </span>\n                                            </div>\n                                        </div>)\n                                })}\n                            </div>\n                        </React.Fragment>\n                        : null}\n\n                    <div className=\"select_sphere recent_search\">\n                        <span className=\"sub_title\">Categories</span>\n                        <ul>\n                            {tradeListData?.map(({ _id, trade_name, selected_url, specialisations }: { _id: string, trade_name: string, selected_url: string, specialisations: [] }) =>\n                                <li\n                                    onClick={() => {\n                                        let item_spec: any = specialisations;\n                                        if (item_spec?.length) {\n                                            let getItem = item_spec[0];\n                                            if (getItem) {\n                                                setStateData({\n                                                    image: selected_url,\n                                                    name: getItem?.name,\n                                                    specializationsId: getItem?._id,\n                                                    trade_name: trade_name,\n                                                    _id: _id,\n                                                })\n                                                setSearchText(getItem?.name);\n                                            }\n                                            setSelectedTrade({ _id, trade_name, selected_url, specialisations });\n                                        }\n                                    }}\n                                    className={checkIfExist(_id) ? 'active' : ''}>\n                                    <figure>\n                                        <img src={selected_url} alt=\"\" />\n                                    </figure>\n                                    <span className=\"name\">{trade_name}</span>\n                                </li>\n                            )}\n                        </ul>\n                    </div>\n                </div >\n            </>\n        )\n    }\n\n    const renderJobResult = () => {\n        if (props?.searchJobListData?.length) {\n            return (\n                <div className=\"custom_autosuggestion\" id=\"fetched-custom-job-category-div\">\n                    <div className=\"recent_search\">\n                        <ul className=\"drop_data\">\n                            {props.searchJobListData?.map((item: any) => {\n                                return (\n                                    <li onClick={() => {\n                                        setItemSearch(item);\n                                    }}>\n                                        <figure className=\"category\">\n                                            <img src={item.image ? item.image : residential} alt=\"icon\" />\n                                        </figure>\n                                        <div className=\"details\">\n                                            <span className=\"name\">{item.name}</span>\n                                            <span className=\"prof\">{item.trade_name}</span>\n                                        </div>\n                                    </li>)\n                            })}\n                        </ul>\n                    </div>\n                </div>\n            )\n        }\n        return null;\n    }\n\n    const onError = (status: string, clearSuggestions: Function) => {\n        console.log('Google Maps API returned error with status: ', status)\n        clearSuggestions();\n    }\n\n    const validateForm = () => {\n        return true;\n    }\n\n    const setItemSearch = (item: any) => {\n        setStateData(item);\n        setSelectedTrade({});\n        setSearchText(item?.name || '');\n    }\n\n    const bannerSearchClicked = () => {\n        let selected_address: any = selectedAddress;\n        let selected_trade: any = selectedTrade;\n        let selected_item: any = props?.selectedItem;\n        let props_trade: any = selected_item?.selectedTrade;\n\n        if (!stateData?._id && !props_trade?._id) {\n            setShowToast(true, 'please enter the valid search text.');\n            return;\n        }\n\n        if (validateForm()) {\n            let data: any = {\n                page: 1,\n                isFiltered: false,\n                tradeId: [stateData?._id],\n                specializationId: [stateData?.specializationsId],\n            }\n\n            if (Object.keys(selectedAddress).length) {\n                data['location'] = {\n                    \"coordinates\": [\n                        parseFloat(selected_address?.lng),\n                        parseFloat(selected_address?.lat)\n                    ]\n                }\n                if (addressText) {\n                    data['address'] = addressText && Object.keys(suggestionSelected).length ? JSON.stringify(suggestionSelected) : '';\n                }\n            } else {\n                delete data.location;\n            }\n\n            if (moment(calenderRange1?.startDate).isValid()) {\n                data['from_date'] = moment(calenderRange1?.startDate).format('YYYY-MM-DD')\n            } else {\n                delete data.from_date;\n            }\n\n            if (moment(calenderRange1?.endDate).isValid()) {\n                data['to_date'] = moment(calenderRange1?.endDate).format('YYYY-MM-DD')\n            } else {\n                delete data.to_date;\n            }\n\n\n            if (props_trade?._id) {\n                data['tradeId'] = [props_trade._id];\n                if (props_trade?.specialisations?.length) {\n                    data['specializationId'] = props_trade.specialisations.map((item: any) => {\n                        if (item?._id) {\n                            return item?._id;\n                        }\n                        return item;\n                    });\n                }\n            } else {\n                if (selected_trade) {\n                    if (Object.keys(selected_trade).length) {\n                        data['tradeId'] = [selected_trade._id];\n                        if (selected_trade?.specialisations?.length) {\n                            data['specializationId'] = selected_trade.specialisations.map((item: any) => item._id);\n                        }\n                    }\n                }\n            }\n\n    \n            if(!data?.address || !data?.address?.length){\n                delete data?.address;\n            }\n\n            if (!localChanges) {\n                props.postHomeSearchData(data);\n            }\n            isHandleChanges(false)\n            props.history.push({\n                pathname: `search-tradie-results`,\n                state: {\n                    name: searchText,\n                    tradeId: data.tradeId,\n                    specializations: data.specializationId,\n                    location: Object.keys(selected_address).length ? { \"coordinates\": [selected_address?.lng, selected_address?.lat] } : null,\n                    calender: calenderRange1,\n                    address: addressText,\n                    suggestionSelected: suggestionSelected\n                }\n            })\n        }\n    }\n\n    const filterFromAddress = (response: any) => {\n        let city, state, country = null;\n        for (let i = 0; i < response.results[0].address_components.length; i++) {\n            for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n                switch (response.results[0].address_components[i].types[j]) {\n                    case \"locality\":\n                        city = response.results[0].address_components[i].long_name;\n                        break;\n                    case \"administrative_area_level_1\":\n                        state = response.results[0].address_components[i].long_name;\n                        break;\n                    case \"country\":\n                        country = response.results[0].address_components[i].long_name;\n                        break;\n                }\n            }\n        }\n        return { city, state, country: country.toLowerCase() };\n    }\n\n    const getCurrentLocation = async () => {\n        let itemToggle: any = await navigator.permissions.query({ name: 'geolocation' });\n        setLocationStatus(itemToggle.state);\n        let local_position: any = localStorage.getItem('position');\n        let position: any = JSON.parse(local_position);\n        if (position?.length) {\n            let long = (position[0]).toString();\n            let lat = (position[1]).toString();\n            let response: any = await Geocode.fromLatLng(lat, long);\n            const { city, state, country } = filterFromAddress(response);\n\n            if (response && [\"australia\", \"au\"].includes(country)) {\n                if (response?.results && Array.isArray(response.results) && response?.results?.length) {\n                    const address = response.results[0].formatted_address;\n                    setSelectedAddress({ lat, long });\n                    setAddressText(address);\n                    setInputFocus2(true);\n                    setInputFocus1(false);\n                    setInputFocus3(false);\n                    setCurrentLocations(true);\n                }\n            } else {\n                if (itemToggle?.state !== \"denied\") {\n                    setShowToast(true, \"Uh oh! we don't provide service currently in your location.\");\n                }\n            }\n        }\n    }\n\n    let selected_trade: any = selectedTrade;\n    let length_spec = 0;\n\n    if (props?.selectedItem) {\n        let sProps = props?.selectedItem;\n        if (Array.isArray(sProps?.selectedTrade?.specialisations)) {\n            length_spec = sProps?.selectedTrade?.specialisations?.length\n        }\n    } else {\n        length_spec = selected_trade?.specialisations?.length;\n        if (!length_spec) {\n            if (stateData?.specializationsId?.length) {\n                length_spec = 1;\n            }\n        }\n    }\n\n    const checkPlaceholder = (calenderRange1: any) => {\n        let fromDate: any = calenderRange1?.startDate;\n        let toDate: any = calenderRange1?.endDate;\n        let result = renderTimeWithCustomFormat(fromDate, toDate, '', ['DD MMM', 'DD MMM YYYY'], 'When ?');\n\n        if (!result) {\n            return 'When ?'\n        }\n\n        return result;\n    }\n\n\n    let custom_name = searchText;\n\n    if (!checkOnChange) {\n        if (length_spec > 1) {\n            custom_name = `${custom_name} +${length_spec - 1}`;\n        }\n    }\n\n    return (\n        <div className=\"home_search\">\n            <button\n                onClick={() => {\n                    if (props?.handleChangeToggle) {\n                        props.handleChangeToggle(false)\n                    }\n                }}\n                className=\"modal_srch_close\">\n                <img src={close} alt=\"close\" />\n            </button>\n            <form className={`search_wrapr ${!length_spec ? 'first_input' : ''}`}>\n                {/* first_input */}\n                <ul>\n                    <li className=\"categ_box\">\n                        <div className=\"text_field\" id=\"text-field-div\">\n                            <input\n                                type=\"text\"\n                                ref={searchRef}\n                                placeholder=\"What jobs are you after?\"\n                                value={custom_name}\n                                onChange={(e) => {\n                                    // isHandleChanges(true)\n                                    setOnChange(true);\n                                    setSearchText((e.target.value).trimLeft());\n                                }}\n                                autoComplete=\"none\"\n                                // readOnly={props?.selectedItem ? true : false}\n                                onFocus={() => {\n                                    setInputFocus1(true);\n                                    setInputFocus2(false);\n                                    setInputFocus3(false);\n                                }}\n                            />\n                            <div className=\"border_eff\"></div>\n                            <span className=\"detect_icon_ltr\">\n                                <img src={Searchicon} alt=\"search\" />\n                            </span>\n                            {searchText?.length && inputFocus1 ? (\n                                <span className=\"detect_icon\" >\n                                    <img\n                                        src={cross}\n                                        alt=\"cross\"\n                                        onClick={() => {\n                                            // clear here\n                                            // isHandleChanges(true)\n                                            setOnChange(false);\n                                            setSearchText('');\n                                            setStateData({});\n                                            setSelectedTrade({})\n                                        }} />\n                                </span>\n                            ) : null}\n                        </div>\n                        {!!errors.searchedJob && <span className=\"error_msg\">{errors.searchedJob}</span>}\n                    </li>\n                    {!searchText?.length && inputFocus1 ? recentJobSearches() : null}\n                    {searchText?.length > 2 && inputFocus1 ? renderJobResult() : null}\n\n                    {/* {'location search start here!'} */}\n                    <li className=\"loc_box\">\n                        <div id=\"location-text-field-div\">\n                            {/* <div\n                                className={`text_field ${addressText?.length > 2 ? 'none' : ''}`}>\n                                <input\n                                    id=\"location_search_static\"\n                                    placeholder='Where?'\n                                    ref={locationRefClone}\n                                    value={addressText}\n                                    autoComplete=\"off\"\n                                    className={'line-1'}\n                                    onChange={(e: any) => { setAddressText((e.target.value).trimLeft()) }}\n                                    onFocus={() => {\n                                        setInputFocus2(true);\n                                        setInputFocus1(false);\n                                        setInputFocus3(false);\n                                    }}\n                                />\n                                <span className=\"detect_icon_ltr\">\n                                    <img src={Location} alt=\"location\" />\n                                </span>\n                            </div> */}\n\n                            <div>\n                                <PlacesAutocomplete\n                                    value={addressText}\n                                    searchOptions={{\n                                        componentRestrictions: {\n                                            country: \"au\"\n                                        },\n                                        // types: [\"address\"]\n                                        types: ['(cities)']\n                                    }}\n                                    onChange={(item: any) => {\n                                        setAddressText(item)\n                                        if (!addressText.length) {\n                                            setSelectedAddress({});\n                                        }\n                                    }}\n                                    shouldFetchSuggestions={addressText?.length > 2}\n                                    onSelect={async (address: string, placeId?: any, suggestion?: any) => {\n                                        console.log({ address, placeId, suggestion });\n                                        let selected_address: any = address;\n                                        if (address.indexOf(',')) {\n                                            selected_address = address.split(',')[0];\n                                        }\n                                        setSuggestion(suggestion?.formattedSuggestion)\n                                        setAddressText(suggestion?.formattedSuggestion?.mainText);\n                                        let response = await Geocode.fromAddress(address);\n                                        console.log({ selected_address })\n                                        if (response?.results?.length) {\n                                            const { lat, lng } = response.results[0].geometry.location;\n                                            setSelectedAddress({ lat, lng });\n                                            setInputFocus2(false);\n                                        }\n                                    }}\n                                    highlightFirstSuggestion={true}\n                                    onError={onError}\n                                    debounce={0}\n                                >\n                                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }: any) => (\n                                        <div>\n                                            <div\n                                                className={`text_field`}>\n                                                {/* className={`text_field ${addressText?.length > 2 ? '' : 'none'}`}> */}\n                                                <input\n                                                    {...getInputProps({ placeholder: 'Where?', className: 'line-1' })}\n                                                    id=\"location-input-tag\"\n                                                    ref={locationRef}\n                                                    autoComplete=\"off\"\n                                                    onFocus={() => {\n                                                        setInputFocus2(true);\n                                                        setInputFocus1(false);\n                                                        setInputFocus3(false);\n                                                    }}\n                                                />\n                                                <span className=\"detect_icon_ltr\">\n                                                    <img src={Location} alt=\"location\" />\n                                                </span>\n\n                                                {inputFocus2 && addressText?.length > 2 ?\n                                                    <span className=\"detect_icon\" >\n                                                        <img\n                                                            src={cross}\n                                                            alt=\"cross\"\n                                                            onClick={() => {\n                                                                setAddressText('');\n                                                                setSelectedAddress({});\n                                                            }}\n                                                        />\n                                                    </span> : null}\n\n                                                {/* {inputFocus2 && addressText?.length > 2 ?\n                                                    <span className=\"detect_icon\" >\n                                                        <img\n                                                            src={cross}\n                                                            alt=\"cross\"\n                                                            onClick={() => {\n                                                                setAddressText('');\n                                                                setSelectedAddress({});\n                                                            }}\n                                                        />\n                                                    </span> : null} */}\n                                            </div>\n\n                                            {suggestions?.length && inputFocus2 && addressText?.length > 2 ?\n                                                <div className=\"custom_autosuggestion location\" id=\"autocomplete-dropdown-container\">\n                                                    <div className=\"flex_row recent_search auto_loc\">\n                                                        <div className=\"flex_col_sm_4\">\n                                                            {!!errors.selectedMapLocation &&\n                                                                <span className=\"error_msg\">\n                                                                    {errors.selectedMapLocation}\n                                                                </span>\n                                                            }\n                                                            {loading && <div>Loading...</div>}\n\n                                                            {suggestions.map((suggestion: any) => {\n                                                                const className = 'autosuggestion_icon card loc name';\n                                                                const style = suggestion.active\n                                                                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                                                                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                                                                return (\n                                                                    <div\n                                                                        {...getSuggestionItemProps(suggestion, { className, style, })}>\n                                                                        <span>{suggestion.formattedSuggestion.mainText}</span>\n                                                                        <span className=\"name\">{suggestion.formattedSuggestion.secondaryText}</span>\n\n                                                                    </div>\n                                                                );\n                                                            })}\n                                                        </div>\n                                                    </div>\n                                                </div> : inputFocus2 && !suggestions?.length && !Object.keys(selectedAddress).length ? (\n                                                    <div\n                                                        style={{ minHeight: '50px' }}\n                                                        className=\"custom_autosuggestion location\"\n                                                        id=\"autocomplete-dropdown-container\">\n                                                        <div className=\"flex_row recent_search auto_loc\">\n                                                            <div className=\"flex_col_sm_4\">\n                                                                <div className=\"loc_suggestions\">\n                                                                    {'No Result Found.'}\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                ) : null}\n                                        </div>\n                                    )}\n                                </PlacesAutocomplete>\n                            </div>\n                        </div>\n                        {!!errors.selectedMapLocation && <span className=\"error_msg\">{errors.selectedMapLocation}</span>}\n                    </li>\n\n                    {/* {'location search end here!'} */}\n\n                    {!addressText?.length && inputFocus2 ?\n                        <div className=\"custom_autosuggestion location\" id=\"current-location-search-div\">\n                            <span\n                                className=\"location-btn\"\n                                onClick={getCurrentLocation}>\n                                <span className=\"gps_icon\">\n                                    <img src={icgps} alt=\"\" />\n                                </span>\n                                {' Use my current location'}\n                            </span>\n                            {locationStatus === \"denied\" &&\n                                (<span className=\"blocked_note\">\n                                    {'You have blocked your location. To use this, change your location settings in browser.'}\n                                </span>)}\n                            <div className=\"flex_row recent_search auto_loc\">\n\n                                {props?.recentLocationData?.length > 0 &&\n                                    <span className=\"sub_title\">\n                                        {'Recent searches'}\n                                    </span>}\n                                {props?.recentLocationData?.map((item: any) => {\n                                    return item?.address?.length > 0 && (\n                                        <div className=\"flex_col_sm_4\"\n                                            onClick={() => {\n                                                setAddressText(JSON.parse(item?.address)?.mainText);\n                                                setSelectedAddress({\n                                                    lat: item?.location?.coordinates[1],\n                                                    lng: item?.location?.coordinates[0],\n                                                });\n\n                                                setSuggestion(JSON.parse(item?.address));\n\n                                                // let location_coordinates: any = item.location.coordinates\n                                                // setAddressText(item.formatted_address);\n                                                // setSelectedAddress({\n                                                //     lat: location_coordinates[1],\n                                                //     lng: location_coordinates[0]\n                                                // });\n                                            }}>\n                                            <div className=\"autosuggestion_icon card loc name\">\n                                                <span>{JSON.parse(item?.address)?.mainText}</span>\n                                                <span className=\"name\">{JSON.parse(item?.address)?.secondaryText}</span>\n                                            </div>\n                                        </div>)\n                                })}\n                            </div>\n                        </div>\n                        : null}\n                    <li className={`date_box ${calenderRange1?.startDate ? 'date_value' : ''}`}>\n                        <div\n                            ref={calenderRef}\n                            className=\"custom_date_range\" id=\"date-range-div\">\n                            <div className=\"text_field\">\n                                <span className=\"detect_icon_ltr calendar\"></span>\n                                <input\n                                    type=\"text\"\n                                    id=\"calender-input\"\n                                    placeholder={checkPlaceholder(calenderRange1)}\n                                    autoComplete=\"none\"\n                                    onFocus={() => {\n                                        setInputFocus3(true);\n                                        setInputFocus1(false);\n                                        setInputFocus2(false);\n                                    }}\n                                />\n                                {calenderRange1?.startDate && inputFocus3 &&\n                                    <span className=\"detect_icon\" >\n                                        <img\n                                            src={cross}\n                                            alt=\"cross\"\n                                            onClick={() => {\n                                                setCalenderRange1({ startDate: '', endDate: '', key: 'selection1' })\n                                            }} />\n                                    </span>}\n                            </div>\n                            {/* {inputFocus3 && */}\n                            {inputFocus3 ? (\n                                <div\n                                    className=\"custom_autosuggestion\"\n                                    id=\"custom-date-range-div\">\n                                    <DateRange\n                                        onChange={handleCalenderRange}\n                                        ranges={!moment(calenderRange1?.startDate).isValid() ? [{ startDate: new Date(), endDate: new Date(), key: 'selection1' }] : [calenderRange1]}\n                                        moveRangeOnFirstSelection={false}\n                                        rangeColors={[\"#fee600\", \"#b5b5b5\"]}\n                                        showDateDisplay={false}\n                                        showSelectionPreview={true}\n                                        months={2}\n                                        showPreview={true}\n                                        minDate={new Date()}\n                                        maxDate={moment().add(2, 'years').toDate()}\n                                        direction=\"horizontal\"\n                                        fixedHeight={true}\n                                    />\n                                </div>\n                            ) : null}\n                        </div>\n                    </li>\n                    <div className=\"search_btn\">\n                        <button type=\"button\" className=\"fill_btn btn-effect\" onClick={bannerSearchClicked}>\n                            <img src={search} alt=\"search\" />\n                        </button>\n                    </div>\n                </ul>\n            </form>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        searchJobListData: state.homeSearch.searchJobListData,\n        recentSearchJobData: state.homeSearch.recentSearchJobData,\n        homeSearchJobData: state.homeSearch.homeSearchJobData,\n        tradeListData: state.auth.tradeListData,\n        localChanges: state.jobs.localChanges,\n        recentLocationData: state.homeSearch.recentLocationData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return bindActionCreators({\n        getSearchJobList,\n        getRecentSearchList,\n        postHomeSearchData,\n        isHandleChanges,\n        getRecentLocationList\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BannerSearch);\n\n/**\n\n    No-result found conditions\n    </div> : !loading || addressText?.length > 2 && !suggestions?.length && !enableCurrentLocation && !Object.keys(selectedAddress).length ? (\n\n **/"]},"metadata":{},"sourceType":"module"}