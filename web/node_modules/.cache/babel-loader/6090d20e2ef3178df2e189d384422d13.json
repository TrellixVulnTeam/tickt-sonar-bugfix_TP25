{"ast":null,"code":"import NetworkOps from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading } from './../common/actions';\nimport storageService from '../../utils/storageService';\nimport { callTradieProfileData as getProfileTradie, getProfileBuilder } from '../profile/actions';\nimport { store } from '../../App';\nexport const callTradeList = () => ({\n  type: actionTypes.CALL_TRADE_LIST\n});\nexport const postSignup = async data => {\n  console.log(data);\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response = await NetworkOps.postToJson(Urls.signup, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    var _response$result, _response$result2, _response$result3, _response$result4, _response$result5, _response$result6;\n\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": (_response$result = response.result) === null || _response$result === void 0 ? void 0 : _response$result.email,\n      \"user_image\": (_response$result2 = response.result) === null || _response$result2 === void 0 ? void 0 : _response$result2.user_image,\n      \"user_type\": (_response$result3 = response.result) === null || _response$result3 === void 0 ? void 0 : _response$result3.user_type,\n      \"userName\": (_response$result4 = response.result) === null || _response$result4 === void 0 ? void 0 : _response$result4.firstName,\n      \"_id\": (_response$result5 = response.result) === null || _response$result5 === void 0 ? void 0 : _response$result5._id,\n      \"accountType\": (_response$result6 = response.result) === null || _response$result6 === void 0 ? void 0 : _response$result6.accountType,\n      \"deviceId\": uniqueToken\n    });\n    return {\n      success: true,\n      result: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const checkEmailId = async (email, hideToast) => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.checkEmailId + `?email=${email}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      isProfileCompleted: response.result.isProfileCompleted,\n      message: response.message\n    };\n  }\n\n  if (!hideToast) {\n    setShowToast(true, response.message);\n  }\n\n  return {\n    success: false\n  };\n};\nexport const checkMobileNumber = async mobile => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.checkMobileNumber + `?mobileNumber=${mobile}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      isProfileCompleted: response.result.isProfileCompleted,\n      message: response.message\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const verifyOtp = async data => {\n  setLoading(true);\n  const response = await NetworkOps.postToJson(Urls.verifyOTP, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      message: response.message\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const createPassword = async passwordInfo => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(Urls.createPassword, passwordInfo);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      message: response.message\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false,\n    message: response.message\n  };\n};\nexport const callLogin = async data => {\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response = await NetworkOps.postToJson(Urls.login, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    var _response$result7, _response$result8, _response$result9, _response$result10, _response$result11, _response$result12;\n\n    const firstLogin = storageService.getItem('firstLogin');\n\n    if (!firstLogin) {\n      storageService.setItem('firstLogin', 'true');\n    } else if (firstLogin === 'true') {\n      storageService.setItem('firstLogin', 'false');\n    }\n\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": (_response$result7 = response.result) === null || _response$result7 === void 0 ? void 0 : _response$result7.email,\n      \"user_image\": (_response$result8 = response.result) === null || _response$result8 === void 0 ? void 0 : _response$result8.user_image,\n      \"user_type\": (_response$result9 = response.result) === null || _response$result9 === void 0 ? void 0 : _response$result9.user_type,\n      \"userName\": (_response$result10 = response.result) === null || _response$result10 === void 0 ? void 0 : _response$result10.userName,\n      \"_id\": (_response$result11 = response.result) === null || _response$result11 === void 0 ? void 0 : _response$result11._id,\n      \"accountType\": (_response$result12 = response.result) === null || _response$result12 === void 0 ? void 0 : _response$result12.accountType,\n      \"deviceId\": uniqueToken\n    });\n\n    if (response.result.user_type === 1) {\n      store.dispatch(getProfileTradie());\n    }\n\n    if (response.result.user_type === 2) {\n      store.dispatch(getProfileBuilder());\n    }\n\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const callForgotPassword = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(Urls.forgotPassword, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const checkSocialId = async data => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.checkSocialId + `?socialId=${data.socialId}` + `&email=${data.email}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      isProfileCompleted: response.result.isProfileCompleted\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const socialSignupLogin = async data => {\n  console.log(data);\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response = await NetworkOps.postToJson(Urls.SocialAuth, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    var _response$result13, _response$result14, _response$result15, _response$result16, _response$result17;\n\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": (_response$result13 = response.result) === null || _response$result13 === void 0 ? void 0 : _response$result13.email,\n      \"user_image\": (_response$result14 = response.result) === null || _response$result14 === void 0 ? void 0 : _response$result14.user_image,\n      \"user_type\": (_response$result15 = response.result) === null || _response$result15 === void 0 ? void 0 : _response$result15.user_type,\n      \"userName\": ((_response$result16 = response.result) === null || _response$result16 === void 0 ? void 0 : _response$result16.firstName) || 'name',\n      \"_id\": (_response$result17 = response.result) === null || _response$result17 === void 0 ? void 0 : _response$result17._id,\n      \"deviceId\": uniqueToken\n    });\n    return {\n      success: true,\n      successToken: response.result.token,\n      result: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const getLinkedinProfile = async data => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.linkedInAuth + `?code=${data.code}&redirect_uri=${data.redirect_uri}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      result: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const onFileUpload = async data => {\n  setLoading(true);\n  const options = {\n    headerOverrides: {\n      'Content-Type': 'multipart/form-data'\n    }\n  };\n  const response = await NetworkOps.postRaw(Urls.upload, data, options);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      imgUrl: response.result.url[0]\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const addFCMNotifToken = async data => {\n  const response = await NetworkOps.putToJson(Urls.addFCMNotifToken, data);\n\n  if (response.status_code === 200) {\n    return {\n      success: true\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const markNotifAsRead = async data => {\n  const response = await NetworkOps.putToJson(Urls.unReadNotification, data);\n\n  if (response.status_code === 200) {\n    return {\n      success: true\n    };\n  }\n\n  return {\n    success: false\n  };\n};","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/redux/auth/actions.ts"],"names":["NetworkOps","Urls","actionTypes","setShowToast","setLoading","storageService","callTradieProfileData","getProfileTradie","getProfileBuilder","store","callTradeList","type","CALL_TRADE_LIST","postSignup","data","console","log","today","Date","uniqueToken","getFullYear","getMonth","getDate","getMinutes","getHours","getSeconds","getMilliseconds","deviceToken","response","postToJson","signup","status_code","setItem","result","token","user_type","email","user_image","firstName","_id","accountType","success","message","checkEmailId","hideToast","get","isProfileCompleted","checkMobileNumber","mobile","verifyOtp","verifyOTP","createPassword","passwordInfo","putToJson","callLogin","login","firstLogin","getItem","userName","dispatch","callForgotPassword","forgotPassword","checkSocialId","socialId","socialSignupLogin","SocialAuth","successToken","getLinkedinProfile","linkedInAuth","code","redirect_uri","onFileUpload","options","headerOverrides","postRaw","upload","imgUrl","url","addFCMNotifToken","markNotifAsRead","unReadNotification"],"mappings":"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","sourcesContent":["import NetworkOps, { FetchResponse } from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading } from './../common/actions';\nimport storageService from '../../utils/storageService';\n\nimport {\n  callTradieProfileData as getProfileTradie,\n  getProfileBuilder\n} from '../profile/actions';\nimport { store } from '../../App';\n\nexport const callTradeList = () => ({ type: actionTypes.CALL_TRADE_LIST })\n\nexport const postSignup = async (data: any) => {\n  console.log(data);\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.signup, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": response.result?.email,\n      \"user_image\": response.result?.user_image,\n      \"user_type\": response.result?.user_type,\n      \"userName\": response.result?.firstName,\n      \"_id\": response.result?._id,\n      \"accountType\": response.result?.accountType,\n      \"deviceId\": uniqueToken\n    });\n    return { success: true, result: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const checkEmailId = async (email: string, hideToast?: boolean) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.checkEmailId + `?email=${email}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, isProfileCompleted: response.result.isProfileCompleted, message: response.message };\n  }\n  if (!hideToast) {\n    setShowToast(true, response.message);\n  }\n  return { success: false };\n};\n\nexport const checkMobileNumber = async (mobile: string | number) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.checkMobileNumber + `?mobileNumber=${mobile}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, isProfileCompleted: response.result.isProfileCompleted, message: response.message };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const verifyOtp = async (data: object) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.verifyOTP, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, message: response.message };\n  }\n  setShowToast(true, response.message);\n  return { success: false }\n};\n\nexport const createPassword = async (passwordInfo: object) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.createPassword, passwordInfo);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, message: response.message };\n  }\n  setShowToast(true, response.message);\n  return { success: false, message: response.message };\n};\n\n\nexport const callLogin = async (data: any) => {\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.login, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    const firstLogin = storageService.getItem('firstLogin');\n\n    if (!firstLogin) {\n      storageService.setItem('firstLogin', 'true');\n    } else if (firstLogin === 'true') {\n      storageService.setItem('firstLogin', 'false');\n    }\n\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": response.result?.email,\n      \"user_image\": response.result?.user_image,\n      \"user_type\": response.result?.user_type,\n      \"userName\": response.result?.userName,\n      \"_id\": response.result?._id,\n      \"accountType\": response.result?.accountType,\n      \"deviceId\": uniqueToken\n    });\n\n    if (response.result.user_type === 1) {\n      store.dispatch(getProfileTradie());\n    }\n\n    if (response.result.user_type === 2) {\n      store.dispatch(getProfileBuilder());\n    }\n    return { success: true, data: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const callForgotPassword = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.forgotPassword, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const checkSocialId = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.checkSocialId + `?socialId=${data.socialId}` + `&email=${data.email}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, isProfileCompleted: response.result.isProfileCompleted };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const socialSignupLogin = async (data: any) => {\n  console.log(data);\n  var today = new Date();\n  var uniqueToken = today.getFullYear() + \":\" + today.getMonth() + \":\" + today.getDate() + \":\" + today.getMinutes() + \":\" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds() + \":\" + today.getMilliseconds();\n  data.deviceToken = uniqueToken;\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(Urls.SocialAuth, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    storageService.setItem(\"jwtToken\", response.result.token);\n    storageService.setItem(\"userType\", response.result.user_type);\n    storageService.setItem(\"userInfo\", {\n      \"email\": response.result?.email,\n      \"user_image\": response.result?.user_image,\n      \"user_type\": response.result?.user_type,\n      \"userName\": response.result?.firstName || 'name',\n      \"_id\": response.result?._id,\n      \"deviceId\": uniqueToken\n    });\n    return { success: true, successToken: response.result.token, result: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const getLinkedinProfile = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.linkedInAuth + `?code=${data.code}&redirect_uri=${data.redirect_uri}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, result: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const onFileUpload = async (data: any) => {\n  setLoading(true);\n  const options = {\n    headerOverrides: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }\n  const response: FetchResponse = await NetworkOps.postRaw(Urls.upload, data, options);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, imgUrl: response.result.url[0] };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n};\n\nexport const addFCMNotifToken = async (data: object) => {\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.addFCMNotifToken, data);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  return { success: false };\n};\n\nexport const markNotifAsRead = async (data: any) => {\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.unReadNotification, data);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  return { success: false };\n};\n"]},"metadata":{},"sourceType":"module"}