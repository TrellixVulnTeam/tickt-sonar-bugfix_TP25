{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/recommendedJobs/recommendedJobs.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { getRecommendedJobs } from '../../redux/homeSearch/actions';\nimport TradieJobInfoBox from '../../common/tradieJobInfoBox';\nimport noData from '../../assets/images/no-search-data.png';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nconst RecommendedJobs = props => {\n  _s();\n\n  var _props$history, _props$history$locati, _props$history$locati2, _props$history2, _props$history2$locat, _props$history2$locat2, _props$history3, _props$history3$locat, _props$history3$locat2, _props$history4, _props$history4$locat, _props$history4$locat2;\n\n  const [jobList, setJobList] = useState([]);\n  const [totalCount, setTotalCount] = useState(1);\n  const [pageNo, setPageNo] = useState(1);\n  const [hasMoreItems, setHasMoreItems] = useState(true);\n  const lat = ((_props$history = props.history) === null || _props$history === void 0 ? void 0 : (_props$history$locati = _props$history.location) === null || _props$history$locati === void 0 ? void 0 : (_props$history$locati2 = _props$history$locati.state) === null || _props$history$locati2 === void 0 ? void 0 : _props$history$locati2.coordinates[1]) ? (_props$history2 = props.history) === null || _props$history2 === void 0 ? void 0 : (_props$history2$locat = _props$history2.location) === null || _props$history2$locat === void 0 ? void 0 : (_props$history2$locat2 = _props$history2$locat.state) === null || _props$history2$locat2 === void 0 ? void 0 : _props$history2$locat2.coordinates[1] : -37.8136;\n  const long = ((_props$history3 = props.history) === null || _props$history3 === void 0 ? void 0 : (_props$history3$locat = _props$history3.location) === null || _props$history3$locat === void 0 ? void 0 : (_props$history3$locat2 = _props$history3$locat.state) === null || _props$history3$locat2 === void 0 ? void 0 : _props$history3$locat2.coordinates[0]) ? (_props$history4 = props.history) === null || _props$history4 === void 0 ? void 0 : (_props$history4$locat = _props$history4.location) === null || _props$history4$locat === void 0 ? void 0 : (_props$history4$locat2 = _props$history4$locat.state) === null || _props$history4$locat2 === void 0 ? void 0 : _props$history4$locat2.coordinates[0] : 144.9631;\n  useEffect(() => {\n    callJobList();\n  }, []);\n\n  const callJobList = async () => {\n    if (jobList.length >= totalCount) {\n      setHasMoreItems(false);\n      return;\n    }\n\n    const data = {\n      long: long,\n      lat: lat,\n      page: pageNo,\n      perPage: 10\n    };\n    const res = await getRecommendedJobs(data);\n\n    if (res.success) {\n      var _res$result, _res$result2, _res$result2$data, _res$result3;\n\n      const allJobs = [...jobList, ...((_res$result = res.result) === null || _res$result === void 0 ? void 0 : _res$result.data)];\n\n      if (((_res$result2 = res.result) === null || _res$result2 === void 0 ? void 0 : (_res$result2$data = _res$result2.data) === null || _res$result2$data === void 0 ? void 0 : _res$result2$data.length) < 10) {\n        setHasMoreItems(false);\n      }\n\n      setJobList(allJobs);\n      setPageNo(pageNo + 1);\n\n      if (((_res$result3 = res.result) === null || _res$result3 === void 0 ? void 0 : _res$result3.totalCount) !== totalCount) {\n        var _res$result4;\n\n        setTotalCount((_res$result4 = res.result) === null || _res$result4 === void 0 ? void 0 : _res$result4.totalCount);\n      }\n    }\n  };\n\n  const backButtonClicked = () => {\n    var _props$history5;\n\n    (_props$history5 = props.history) === null || _props$history5 === void 0 ? void 0 : _props$history5.goBack();\n  };\n\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: jobList.length,\n    next: callJobList,\n    style: {\n      overflowX: 'hidden'\n    },\n    hasMore: hasMoreItems,\n    loader: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'app_wrapper',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section_wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relate\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"back\",\n              onClick: backButtonClicked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"title\",\n              children: \"Recommended jobs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row tradies_row\",\n            children: (jobList === null || jobList === void 0 ? void 0 : jobList.length) > 0 || props.isLoading ? jobList === null || jobList === void 0 ? void 0 : jobList.map(jobData => {\n              return /*#__PURE__*/_createElement(TradieJobInfoBox, {\n                item: jobData,\n                ...props,\n                key: jobData.jobId,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 44\n                }\n              });\n            }) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no_record\",\n              children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                className: \"no_img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: noData,\n                  alt: \"data not found\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Data not found\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 39\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RecommendedJobs, \"qJUTK140Dpvf4+O/Zw9I3necEUc=\");\n\n_c = RecommendedJobs;\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.common.isLoading\n  };\n};\n\nexport default connect(mapStateToProps, null)(RecommendedJobs);\n\nvar _c;\n\n$RefreshReg$(_c, \"RecommendedJobs\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/recommendedJobs/recommendedJobs.tsx"],"names":["useState","useEffect","connect","InfiniteScroll","getRecommendedJobs","TradieJobInfoBox","noData","RecommendedJobs","props","jobList","setJobList","totalCount","setTotalCount","pageNo","setPageNo","hasMoreItems","setHasMoreItems","lat","history","location","state","coordinates","long","callJobList","length","data","page","perPage","res","success","allJobs","result","backButtonClicked","goBack","overflowX","isLoading","map","jobData","jobId","mapStateToProps","common"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { getRecommendedJobs } from '../../redux/homeSearch/actions';\nimport TradieJobInfoBox from '../../common/tradieJobInfoBox';\n\nimport noData from '../../assets/images/no-search-data.png';\n\nconst RecommendedJobs = (props: any) => {\n    const [jobList, setJobList] = useState<Array<any>>([]);\n    const [totalCount, setTotalCount] = useState<number>(1);\n    const [pageNo, setPageNo] = useState<number>(1);\n    const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n    const lat: string = props.history?.location?.state?.coordinates[1] ? props.history?.location?.state?.coordinates[1] : -37.8136;\n    const long: string = props.history?.location?.state?.coordinates[0] ? props.history?.location?.state?.coordinates[0] : 144.9631;\n\n    useEffect(() => {\n        callJobList();\n    }, []);\n\n    const callJobList = async () => {\n        if (jobList.length >= totalCount) {\n            setHasMoreItems(false);\n            return;\n        }\n        const data = {\n            long: long,\n            lat: lat,\n            page: pageNo,\n            perPage: 10\n        }\n        const res = await getRecommendedJobs(data);\n        if (res.success) {\n            const allJobs = [...jobList, ...res.result?.data];\n            if (res.result?.data?.length < 10) {\n                setHasMoreItems(false);\n            }\n            setJobList(allJobs);\n            setPageNo(pageNo + 1);\n            if (res.result?.totalCount !== totalCount) {\n                setTotalCount(res.result?.totalCount);\n            }\n        }\n    }\n    const backButtonClicked = () => {\n        props.history?.goBack();\n    }\n\n    return (\n        <InfiniteScroll\n            dataLength={jobList.length}\n            next={callJobList}\n            style={{ overflowX: 'hidden' }}\n            hasMore={hasMoreItems}\n            loader={<></>}\n        >\n            <div className={'app_wrapper'} >\n                <div className=\"section_wrapper\">\n                    <div className=\"custom_container\">\n                        <div className=\"relate\">\n                            <button className=\"back\" onClick={backButtonClicked}></button>\n                            <span className=\"title\">Recommended jobs</span>\n                        </div>\n                        <div className=\"flex_row tradies_row\">\n                            {(jobList?.length > 0 || props.isLoading) ?\n                                (jobList?.map((jobData: any) => {\n                                    return <TradieJobInfoBox item={jobData} {...props} key={jobData.jobId} />\n                                })) : <div className=\"no_record\">\n                                    <figure className=\"no_img\">\n                                        <img src={noData} alt=\"data not found\" />\n                                    </figure>\n                                    <span>Data not found</span>\n                                </div>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </InfiniteScroll>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        isLoading: state.common.isLoading,\n    }\n}\n\nexport default connect(mapStateToProps, null)(RecommendedJobs);\n"]},"metadata":{},"sourceType":"module"}