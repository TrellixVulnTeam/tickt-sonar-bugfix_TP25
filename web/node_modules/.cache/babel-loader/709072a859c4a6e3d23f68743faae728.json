{"ast":null,"code":"import _defineProperty from\"/home/appinventiv/Documents/Project/tickt/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/appinventiv/Documents/Project/tickt/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/appinventiv/Documents/Project/tickt/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import Constants from\"../../../utils/constants\";import{useLocation}from\"react-router-dom\";//@ts-ignore\n//@ts-ignore\nimport\"quill/dist/quill.snow.css\";// Add css for snow theme\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PostNewJob=function PostNewJob(_ref){var data=_ref.data,jobUpdateParam=_ref.jobUpdateParam,editDetailPage=_ref.editDetailPage,stepCompleted=_ref.stepCompleted,handleStepJustUpdate=_ref.handleStepJustUpdate,handleStepForward=_ref.handleStepForward,handleStepComplete=_ref.handleStepComplete;var errorStrings=Constants.errorStrings;var _useState=useState({jobName:\"\",job_description:\"\"}),_useState2=_slicedToArray(_useState,2),basicDetails=_useState2[0],setBasicDetails=_useState2[1];var _useState3=useState({jobName:\"\",job_description:\"\"}),_useState4=_slicedToArray(_useState3,2),errors=_useState4[0],setErrors=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),continueClicked=_useState6[0],setContinueClicked=_useState6[1];var jobName=basicDetails.jobName,job_description=basicDetails.job_description;var location=useLocation();var jobId=null;var update=null;if(location.search){var urlParams=new URLSearchParams(location.search);jobId=urlParams.get(\"jobId\");update=urlParams.get(\"update\");}useEffect(function(){if(stepCompleted){setBasicDetails({jobName:data===null||data===void 0?void 0:data.jobName,job_description:data===null||data===void 0?void 0:data.job_description});}},[stepCompleted,data]);// for error messages\nvar label={jobName:\"Job Name\",job_description:\"Job Details\"};// const isEmpty = (name: string, value: string) => !value ? errorStrings.pleaseEnter + label[name] : '';\nvar isInvalid=function isInvalid(name,value){switch(name){case\"jobName\":return!value.length?\"\".concat(label[name],\" is required.\"):value.length>100?\"Maximum 100 characters are allowed.\":\"\";case\"job_description\":return!value.length?\"\".concat(label[name],\" is required.\"):value.length>1000?\"Maximum 1000 characters are allowed.\":\"\";}};// return isEmpty(name, value);\nvar capitalize=function capitalize(str){return str.charAt(0).toUpperCase()+str.slice(1);};var handleChange=function handleChange(_ref2){var _ref2$target=_ref2.target,value=_ref2$target.value,name=_ref2$target.name;var valueElem=value.trimLeft();var alphaNumericPunctuation=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 1234567890~!@#$%^&*()_+=-`{}|[]:;<>?,./\";if(name===\"jobName\"||name===\"job_description\"){if(name===\"jobName\"){valueElem=valueElem.replace(alphaNumericPunctuation,\"\");}// valueElem = capitalize(valueElem); //.charAt(0).toUpperCase() + valueElem.substring(1);\n}// if (stepCompleted || continueClicked) {\nsetErrors(function(prevErrors){return _objectSpread(_objectSpread({},prevErrors),{},_defineProperty({},name,isInvalid(name,valueElem)));});// }\nsetBasicDetails(function(prevDetails){return _objectSpread(_objectSpread({},prevDetails),{},_defineProperty({},name,valueElem));});};var handleContinue=function handleContinue(){var hasErrors;if(!continueClicked){setContinueClicked(true);hasErrors=Object.keys(basicDetails).reduce(function(prevError,name){var hasError=!!isInvalid(name,basicDetails[name]);setErrors(function(prevErrors){return _objectSpread(_objectSpread({},prevErrors),{},_defineProperty({},name,isInvalid(name,basicDetails[name])));});return hasError||prevError;},false);}if(!hasErrors){if(editDetailPage===null||editDetailPage===void 0?void 0:editDetailPage.currentScreen){handleStepJustUpdate(basicDetails,true);}else{handleStepComplete(basicDetails);}}else{setContinueClicked(false);}};var checkErrors=function checkErrors(){var error_1=isInvalid(\"jobName\",basicDetails[\"jobName\"]);var error_2=isInvalid(\"job_description\",basicDetails[\"job_description\"]);if(!(error_1===null||error_1===void 0?void 0:error_1.length)){return false;}return true;};console.log({jobUpdateParam:jobUpdateParam,jobId:jobId});return/*#__PURE__*/_jsx(\"div\",{className:\"app_wrapper\",children:/*#__PURE__*/_jsx(\"div\",{className:\"section_wrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"custom_container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"form_field\",children:/*#__PURE__*/_jsx(\"div\",{className:\"flex_row\",children:/*#__PURE__*/_jsx(\"div\",{className:\"flex_col_sm_5\",children:(editDetailPage===null||editDetailPage===void 0?void 0:editDetailPage.currentScreen)?/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"relate\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"back\",onClick:function onClick(){handleStepForward(14);}}),/*#__PURE__*/_jsx(\"span\",{className:\"title\",children:!jobUpdateParam&&jobId?\"Republish a job\":update?\"Update job\":\"Post new job\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"commn_para\",children:\"Write the job name and try to describe all details for better comprehension.\"})]}):/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"title\",children:!jobUpdateParam&&jobId?\"Republish a job\":update?\"Update job\":\"Post new job\"}),/*#__PURE__*/_jsx(\"p\",{className:\"commn_para\",children:\"Write the job name and try to describe all details for better comprehension.\"})]})})})}),/*#__PURE__*/_jsx(\"div\",{className:\"flex_row\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex_col_sm_5\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"form_field\",children:/*#__PURE__*/_jsx(\"span\",{className:\"xs_sub_title\",children:\"Job\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"form_field\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form_label\",children:\"Job Name\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text_field\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter Job Name\",name:\"jobName\",value:jobName,onChange:handleChange})}),/*#__PURE__*/_jsx(\"span\",{className:\"error_msg\",children:errors.jobName})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form_field\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form_label\",children:\"Job Description\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text_field\",children:[/*#__PURE__*/_jsx(\"textarea\",{placeholder:\"Please give a general description of your job.\",name:\"job_description\",value:job_description,onChange:handleChange,maxLength:1000,onBlur:function onBlur(){if(job_description===null||job_description===void 0?void 0:job_description.length){var stringItem=job_description;if(job_description){stringItem=job_description.split(\". \").join(\". \");}stringItem=stringItem.split(\".\").map(capitalize).join(\".\");stringItem=stringItem.split(\". \").map(capitalize).join(\". \");setBasicDetails(function(prev){return _objectSpread(_objectSpread({},prev),{},{job_description:stringItem});});}}}),job_description.length?/*#__PURE__*/_jsx(\"span\",{className:\"char_count\",children:\"character length : \".concat(job_description.length,\" / 1000\")}):\"\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"error_msg\",children:errors.job_description})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form_field\",children:/*#__PURE__*/_jsx(\"button\",{className:\"fill_btn full_btn btn-effect \".concat(checkErrors()?\"disable_btn\":\"\"),onClick:handleContinue,children:\"Continue\"})})]})})]})})});};export default PostNewJob;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/postNewJob.tsx"],"names":["React","useEffect","useState","Constants","useLocation","PostNewJob","data","jobUpdateParam","editDetailPage","stepCompleted","handleStepJustUpdate","handleStepForward","handleStepComplete","errorStrings","jobName","job_description","basicDetails","setBasicDetails","errors","setErrors","continueClicked","setContinueClicked","location","jobId","update","search","urlParams","URLSearchParams","get","label","isInvalid","name","value","length","capitalize","str","charAt","toUpperCase","slice","handleChange","target","valueElem","trimLeft","alphaNumericPunctuation","replace","prevErrors","prevDetails","handleContinue","hasErrors","Object","keys","reduce","prevError","hasError","currentScreen","checkErrors","error_1","error_2","console","log","stringItem","split","join","map","prev"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Constants from \"../../../utils/constants\";\nimport { useLocation } from \"react-router-dom\";\n//@ts-ignore\nimport _ from \"lodash\";\n//@ts-ignore\nimport \"quill/dist/quill.snow.css\"; // Add css for snow theme\n\ninterface Proptypes {\n  data: any;\n  jobUpdateParam?: any;\n  editDetailPage: any;\n  stepCompleted: Boolean;\n  handleStepComplete: (data: any) => void;\n  handleStepJustUpdate: (data: any, goto: any) => void;\n  handleStepForward: (data: any) => void;\n}\n\nconst PostNewJob = ({\n  data,\n  jobUpdateParam,\n  editDetailPage,\n  stepCompleted,\n  handleStepJustUpdate,\n  handleStepForward,\n  handleStepComplete,\n}: Proptypes) => {\n  const { errorStrings } = Constants;\n\n  const [basicDetails, setBasicDetails] = useState<{ [index: string]: string }>(\n    { jobName: \"\", job_description: \"\" }\n  );\n  const [errors, setErrors] = useState({ jobName: \"\", job_description: \"\" });\n  const [continueClicked, setContinueClicked] = useState(false);\n  const { jobName, job_description } = basicDetails;\n\n  let location = useLocation();\n  let jobId: any = null;\n  let update: any = null;\n  if (location.search) {\n    let urlParams = new URLSearchParams(location.search);\n    jobId = urlParams.get(\"jobId\");\n    update = urlParams.get(\"update\");\n  }\n\n  useEffect(() => {\n    if (stepCompleted) {\n      setBasicDetails({\n        jobName: data?.jobName,\n        job_description: data?.job_description,\n      });\n    }\n  }, [stepCompleted, data]);\n\n  // for error messages\n  const label: { [index: string]: string } = {\n    jobName: \"Job Name\",\n    job_description: \"Job Details\",\n  };\n\n  // const isEmpty = (name: string, value: string) => !value ? errorStrings.pleaseEnter + label[name] : '';\n  const isInvalid = (name: string, value: string) => {\n    switch (name) {\n      case \"jobName\":\n        return !value.length\n          ? `${label[name]} is required.`\n          : value.length > 100\n          ? \"Maximum 100 characters are allowed.\"\n          : \"\";\n      case \"job_description\":\n        return !value.length\n          ? `${label[name]} is required.`\n          : value.length > 1000\n          ? \"Maximum 1000 characters are allowed.\"\n          : \"\";\n    }\n  };\n  // return isEmpty(name, value);\n  const capitalize = (str: any) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  const handleChange = ({\n    target: { value, name },\n  }: {\n    target: { value: string; name: string };\n  }) => {\n    let valueElem: any = value.trimLeft();\n    let alphaNumericPunctuation =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 1234567890~!@#$%^&*()_+=-`{}|[]:;<>?,./\";\n    if (name === \"jobName\" || name === \"job_description\") {\n      if (name === \"jobName\") {\n        valueElem = valueElem.replace(alphaNumericPunctuation, \"\");\n      }\n      // valueElem = capitalize(valueElem); //.charAt(0).toUpperCase() + valueElem.substring(1);\n    }\n\n    // if (stepCompleted || continueClicked) {\n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [name]: isInvalid(name, valueElem),\n    }));\n    // }\n\n    setBasicDetails((prevDetails) => ({\n      ...prevDetails,\n      [name]: valueElem,\n    }));\n  };\n\n  const handleContinue = () => {\n    let hasErrors;\n\n    if (!continueClicked) {\n      setContinueClicked(true);\n\n      hasErrors = Object.keys(basicDetails).reduce((prevError, name) => {\n        const hasError = !!isInvalid(name, basicDetails[name]);\n\n        setErrors((prevErrors) => ({\n          ...prevErrors,\n          [name]: isInvalid(name, basicDetails[name]),\n        }));\n\n        return hasError || prevError;\n      }, false);\n    }\n\n    if (!hasErrors) {\n      if (editDetailPage?.currentScreen) {\n        handleStepJustUpdate(basicDetails, true);\n      } else {\n        handleStepComplete(basicDetails);\n      }\n    } else {\n      setContinueClicked(false);\n    }\n  };\n\n  const checkErrors = () => {\n    let error_1 = isInvalid(\"jobName\", basicDetails[\"jobName\"]);\n    let error_2 = isInvalid(\"job_description\", basicDetails[\"job_description\"]);\n    if (!error_1?.length) {\n      return false;\n    }\n    return true;\n  };\n\n  console.log({ jobUpdateParam, jobId });\n  return (\n    <div className=\"app_wrapper\">\n      <div className=\"section_wrapper\">\n        <div className=\"custom_container\">\n          <div className=\"form_field\">\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_5\">\n                {editDetailPage?.currentScreen ? (\n                  <React.Fragment>\n                    <div className=\"relate\">\n                      <button\n                        className=\"back\"\n                        onClick={() => {\n                          handleStepForward(14);\n                        }}\n                      ></button>\n                      <span className=\"title\">\n                        {!jobUpdateParam && jobId\n                          ? \"Republish a job\"\n                          : update\n                          ? \"Update job\"\n                          : \"Post new job\"}\n                      </span>\n                    </div>\n                    <p className=\"commn_para\">\n                      Write the job name and try to describe all details for\n                      better comprehension.\n                    </p>\n                  </React.Fragment>\n                ) : (\n                  <React.Fragment>\n                    <span className=\"title\">\n                      {!jobUpdateParam && jobId\n                        ? \"Republish a job\"\n                        : update\n                        ? \"Update job\"\n                        : \"Post new job\"}\n                    </span>\n                    <p className=\"commn_para\">\n                      Write the job name and try to describe all details for\n                      better comprehension.\n                    </p>\n                  </React.Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_5\">\n              <div className=\"form_field\">\n                <span className=\"xs_sub_title\">Job</span>\n              </div>\n              <div className=\"form_field\">\n                <label className=\"form_label\">Job Name</label>\n                <div className=\"text_field\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter Job Name\"\n                    name=\"jobName\"\n                    value={jobName}\n                    onChange={handleChange}\n                  />\n                </div>\n                <span className=\"error_msg\">{errors.jobName}</span>\n              </div>\n              <div className=\"form_field\">\n                <label className=\"form_label\">Job Description</label>\n                <div className=\"text_field\">\n                  <textarea\n                    placeholder=\"Please give a general description of your job.\"\n                    name=\"job_description\"\n                    value={job_description}\n                    onChange={handleChange}\n                    maxLength={1000}\n                    onBlur={() => {\n                      if (job_description?.length) {\n                        let stringItem = job_description;\n                        if (job_description) {\n                          stringItem = job_description.split(\". \").join(\". \");\n                        }\n                        stringItem = stringItem\n                          .split(\".\")\n                          .map(capitalize)\n                          .join(\".\");\n                        stringItem = stringItem\n                          .split(\". \")\n                          .map(capitalize)\n                          .join(\". \");\n                        setBasicDetails((prev: any) => ({\n                          ...prev,\n                          job_description: stringItem,\n                        }));\n                      }\n                    }}\n                  />\n                  {job_description.length ? (\n                    <span className=\"char_count\">\n                      {`character length : ${job_description.length} / 1000`}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n                <span className=\"error_msg\">{errors.job_description}</span>\n              </div>\n              <div className=\"form_field\">\n                <button\n                  className={`fill_btn full_btn btn-effect ${\n                    checkErrors() ? \"disable_btn\" : \"\"\n                  }`}\n                  onClick={handleContinue}\n                >\n                  {\"Continue\"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostNewJob;\n"]},"metadata":{},"sourceType":"module"}