{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/jobDashboard.tsx\";\nimport { Component } from 'react';\nimport menu from '../../assets/images/menu-line-blue.png';\nimport close from '../../assets/images/ic-cancel-blue.png';\nimport ActiveJobsComponent from './components/activeJobs';\nimport OpenJobsComponent from './components/openJobs';\nimport PastJobsComponent from './components/pastJobs';\nimport NewApplicantComponent from './components/newApplicants';\nimport NeedApproval from './components/needApproval';\nimport ApplicantsList from './components/applicantsList'; //@ts-ignore\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport ViewQuote from './components/quoteJobs/viewQuote';\nimport ListQuotes from './components/quoteJobs/ListQuotes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass JobDashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAndUpdateCount = ({\n      needApprovalCount,\n      newApplicantsCount\n    }) => {\n      var _this$state;\n\n      let {\n        approveCount,\n        applicantCount\n      } = (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.count;\n\n      if (needApprovalCount !== approveCount || newApplicantsCount !== applicantCount) {\n        this.setState({\n          count: {\n            approveCount: needApprovalCount,\n            applicantCount: newApplicantsCount\n          }\n        });\n      }\n    };\n\n    this.toggleSidebar = () => this.setState({\n      isToggleSidebar: !this.state.isToggleSidebar\n    });\n\n    this.setSelected = (jobtype, jobid, sortby, specializationId) => {\n      let {\n        currentPage\n      } = this.state;\n      let item_position = localStorage.getItem('position');\n      let locationLocal = JSON.parse(item_position);\n      let dataItemsAddons = {\n        page: currentPage,\n        jobId: jobid,\n        sortBy: sortby\n      };\n\n      if (sortby === 2) {\n        dataItemsAddons['location'] = {\n          \"type\": \"Point\",\n          \"coordinates\": [locationLocal[1], locationLocal[0]]\n        };\n      }\n\n      if (['active', 'past', 'open', 'applicant', 'approval'].includes(jobtype)) {\n        this.setState({\n          activeType: jobtype,\n          currentPage: 1,\n          hasLoad: true,\n          activeJobs: [],\n          pastJobs: [],\n          openJobs: [],\n          applicantJobs: [],\n          approvalJobs: [],\n          applicantsListJobs: [],\n          actualLoad: false,\n          selectedItem: {\n            jobtype,\n            jobid,\n            sortby,\n            specializationId\n          }\n        }, () => {\n          this.props.getClearJobs();\n          this.props.history.push(`/jobs?active=${jobtype}`);\n          window.scrollTo(0, 0);\n          this.setAfterItems({\n            jobtype,\n            currentPage: this.state.currentPage,\n            dataItemsAddons\n          });\n        });\n      } else {\n        this.setState({\n          selectedItem: {\n            jobtype,\n            jobid,\n            sortby,\n            specializationId\n          },\n          applicantsListJobs: []\n        }, () => {\n          this.props.getClearJobs();\n          this.setAfterItems({\n            jobtype,\n            currentPage: this.state.currentPage,\n            dataItemsAddons\n          });\n        });\n      }\n    };\n\n    this.setAfterItems = ({\n      jobtype,\n      currentPage,\n      dataItemsAddons\n    }) => {\n      const {\n        getActiveJobsBuilder,\n        getPastJobsBuilder,\n        getOpenJobsBuilder,\n        getNewApplicantsBuilder,\n        getnewJobApplicationListBuilder,\n        getNewApprovalList\n      } = this.props;\n\n      if (jobtype === 'active') {\n        getActiveJobsBuilder(currentPage);\n      }\n\n      if (jobtype === 'past') {\n        getPastJobsBuilder(currentPage);\n      }\n\n      if (jobtype === 'open') {\n        getOpenJobsBuilder(currentPage);\n      }\n\n      if (jobtype === 'applicant') {\n        getNewApplicantsBuilder(currentPage);\n      }\n\n      if (jobtype === 'approval') {\n        getNewApprovalList(currentPage);\n      }\n\n      if (jobtype === 'applicantList') {\n        getnewJobApplicationListBuilder(dataItemsAddons);\n      }\n    };\n\n    this.setToggleActiveToFalse = () => {\n      this.setState({\n        toggleClearActiveChecks: false\n      });\n    };\n\n    this.state = {\n      currentPage: 1,\n      isToggleSidebar: false,\n      activeType: 'active',\n      selectedItem: {\n        jobtype: 'active',\n        jobid: null,\n        sortby: 1,\n        specializationId: ''\n      },\n      count: {\n        applicantCount: 0,\n        approveCount: 0\n      },\n      activeJobs: [],\n      pastJobs: [],\n      openJobs: [],\n      applicantJobs: [],\n      approvalJobs: [],\n      applicantsListJobs: [],\n      enableEditMilestone: false,\n      enableLodgeDispute: false,\n      enableCancelJob: false,\n      enableMakMilestone: false,\n      globalJobId: '',\n      hasLoad: true,\n      actualLoad: false,\n      toggleClearActiveChecks: false\n    };\n  }\n\n  componentDidMount() {\n    var _nextProps$location;\n\n    let {\n      activeType,\n      selectedItem: {\n        jobtype\n      }\n    } = this.state;\n    let nextProps = this.props;\n\n    if (nextProps === null || nextProps === void 0 ? void 0 : (_nextProps$location = nextProps.location) === null || _nextProps$location === void 0 ? void 0 : _nextProps$location.search) {\n      var _nextProps$location2;\n\n      let urlParams = new URLSearchParams(nextProps === null || nextProps === void 0 ? void 0 : (_nextProps$location2 = nextProps.location) === null || _nextProps$location2 === void 0 ? void 0 : _nextProps$location2.search);\n      let activeType_ = urlParams.get('active');\n      let ListQuote = urlParams.get('quotes');\n      let viewQuotes = urlParams.get('viewQuotes');\n      let activeTypeByUrl = activeType_;\n\n      if (ListQuote === \"true\") {\n        activeTypeByUrl = 'listQuote';\n      }\n\n      if (viewQuotes === \"true\") {\n        activeTypeByUrl = 'quotes';\n      }\n\n      if (activeTypeByUrl) {\n        if (activeTypeByUrl !== activeType) {\n          this.setState({\n            activeType: activeTypeByUrl,\n            selectedItem: {\n              jobtype: activeTypeByUrl,\n              jobid: null,\n              sortby: 1,\n              specializationId: ''\n            }\n          }, () => {\n            this.setAfterItems({\n              jobtype: activeTypeByUrl,\n              currentPage: 1,\n              dataItemsAddons: {\n                page: 1,\n                jobId: null,\n                sortBy: 1\n              }\n            });\n          });\n        } else {\n          this.props.getActiveJobsBuilder(1);\n        }\n      }\n    } else {\n      this.props.getActiveJobsBuilder(1);\n    }\n  }\n\n  // milestone dates should be lie betwwn job details\n  componentDidUpdate(prevProps) {\n    var _nextProps$location3, _activeJobs$active, _this$state2, _activeJobs$active2, _this$state3, _this$state4, _this$state4$activeJo, _this$state5, _this$state5$activeJo, _openJobs$open, _this$state11, _this$state12, _this$state12$openJob, _pastJobs$past, _this$state17, _this$state18, _this$state18$pastJob, _this$state23, _this$state24, _this$state24$applica, _this$state29, _this$state30, _this$state30$approva;\n\n    let nextProps = this.props;\n    let {\n      activeJobs,\n      pastJobs,\n      openJobs,\n      applicantsListJobs,\n      applicantJobs,\n      approvalJobs\n    } = nextProps;\n    let {\n      selectedItem: {\n        jobtype\n      },\n      currentPage,\n      hasLoad\n    } = this.state;\n    let urlParams = new URLSearchParams(nextProps === null || nextProps === void 0 ? void 0 : (_nextProps$location3 = nextProps.location) === null || _nextProps$location3 === void 0 ? void 0 : _nextProps$location3.search);\n    let jobId_ = urlParams.get('jobId');\n    let editMilestone_ = urlParams.get('editMilestone');\n    let lodgeDispute_ = urlParams.get('lodgeDispute');\n    let cancelJob_ = urlParams.get('cancelJob');\n    let markMilestone_ = urlParams.get('markMilestone');\n    let stateActive = this.state.activeJobs;\n    console.log({\n      activeJobs,\n      pastJobs,\n      openJobs,\n      applicantsListJobs,\n      applicantJobs,\n      approvalJobs,\n      1: jobtype === 'active',\n      2: !(activeJobs === null || activeJobs === void 0 ? void 0 : (_activeJobs$active = activeJobs.active) === null || _activeJobs$active === void 0 ? void 0 : _activeJobs$active.length) ? true : JSON.stringify(activeJobs === null || activeJobs === void 0 ? void 0 : activeJobs.active) !== JSON.stringify((_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.activeJobs),\n      3: (stateActive === null || stateActive === void 0 ? void 0 : stateActive.length) < currentPage * 10,\n      stateActive: stateActive,\n      currentPage\n    });\n\n    if (jobtype === 'active' && !(activeJobs === null || activeJobs === void 0 ? void 0 : (_activeJobs$active2 = activeJobs.active) === null || _activeJobs$active2 === void 0 ? void 0 : _activeJobs$active2.length) ? true : JSON.stringify(activeJobs === null || activeJobs === void 0 ? void 0 : activeJobs.active) !== JSON.stringify((_this$state3 = this.state) === null || _this$state3 === void 0 ? void 0 : _this$state3.activeJobs) && (((_this$state4 = this.state) === null || _this$state4 === void 0 ? void 0 : (_this$state4$activeJo = _this$state4.activeJobs) === null || _this$state4$activeJo === void 0 ? void 0 : _this$state4$activeJo.length) < currentPage * 10 || ((_this$state5 = this.state) === null || _this$state5 === void 0 ? void 0 : (_this$state5$activeJo = _this$state5.activeJobs) === null || _this$state5$activeJo === void 0 ? void 0 : _this$state5$activeJo.length) === currentPage * 10)) {\n      if (activeJobs === null || activeJobs === void 0 ? void 0 : activeJobs.active) {\n        var _this$state6, _this$state7, _this$state7$activeJo, _this$state9, _this$state9$activeJo;\n\n        let {\n          active,\n          needApprovalCount,\n          newApplicantsCount\n        } = activeJobs;\n        let page_get = 0;\n        let prevValues = [];\n\n        if (Array.isArray(active) && (active === null || active === void 0 ? void 0 : active.length)) {\n          var _active$;\n\n          page_get = (_active$ = active[0]) === null || _active$ === void 0 ? void 0 : _active$.page;\n        }\n\n        if (Array.isArray((_this$state6 = this.state) === null || _this$state6 === void 0 ? void 0 : _this$state6.activeJobs) && ((_this$state7 = this.state) === null || _this$state7 === void 0 ? void 0 : (_this$state7$activeJo = _this$state7.activeJobs) === null || _this$state7$activeJo === void 0 ? void 0 : _this$state7$activeJo.length)) {\n          var _this$state8;\n\n          prevValues = (_this$state8 = this.state) === null || _this$state8 === void 0 ? void 0 : _this$state8.activeJobs;\n        }\n\n        if (hasLoad && !(active === null || active === void 0 ? void 0 : active.length) && page_get === 0 && ((_this$state9 = this.state) === null || _this$state9 === void 0 ? void 0 : (_this$state9$activeJo = _this$state9.activeJobs) === null || _this$state9$activeJo === void 0 ? void 0 : _this$state9$activeJo.length) !== 0) {\n          if (this.state.hasLoad !== false) {\n            this.setState({\n              hasLoad: false\n            });\n          }\n        } else if (hasLoad && (active === null || active === void 0 ? void 0 : active.length) && page_get === currentPage) {\n          var _this$state10, _this$state$activeJob, _result;\n\n          let result = [];\n\n          if (JSON.stringify(prevValues) === JSON.stringify(active) && page_get === currentPage) {// same data items here!\n          } else {\n            var _firstItem;\n\n            let concatedItems = prevValues;\n            let firstItem = null;\n\n            if (Array.isArray(active) && (active === null || active === void 0 ? void 0 : active.length)) {\n              firstItem = active[0];\n            }\n\n            if ((_firstItem = firstItem) === null || _firstItem === void 0 ? void 0 : _firstItem.jobId) {\n              let ifMatch = prevValues.find(item => {\n                var _firstItem2;\n\n                return item.jobId === ((_firstItem2 = firstItem) === null || _firstItem2 === void 0 ? void 0 : _firstItem2.jobId);\n              });\n\n              if (!ifMatch) {\n                concatedItems = [...prevValues, ...active];\n              }\n            }\n\n            result = page_get > 0 && page_get === currentPage ? page_get == 1 && currentPage == 1 ? active : concatedItems : active;\n          }\n\n          let globalJobId = jobId_ && (jobId_ === null || jobId_ === void 0 ? void 0 : jobId_.length) ? jobId_ : '';\n          let enableEditMilestone = editMilestone_ === \"true\" ? true : false;\n          let enableLodgeDispute = lodgeDispute_ === \"true\" ? true : false;\n          let enableCancelJob = cancelJob_ === \"true\" ? true : false;\n          let enableMakMilestone = markMilestone_ === \"true\" ? true : false;\n          let {\n            approveCount,\n            applicantCount\n          } = (_this$state10 = this.state) === null || _this$state10 === void 0 ? void 0 : _this$state10.count;\n          let randomState = this.state.activeJobs && Array.isArray(this.state.activeJobs) && this.state.activeJobs[0] && this.state.activeJobs[0].mathrandom ? this.state.activeJobs[0].mathrandom : '';\n          let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n          if (needApprovalCount !== approveCount || newApplicantsCount !== applicantCount || this.state.globalJobId !== globalJobId || this.state.enableEditMilestone !== enableEditMilestone || this.state.enableLodgeDispute !== enableLodgeDispute || this.state.enableCancelJob !== enableCancelJob || this.state.enableCancelJob !== enableCancelJob || this.state.enableMakMilestone !== enableMakMilestone || ((_this$state$activeJob = this.state.activeJobs) === null || _this$state$activeJob === void 0 ? void 0 : _this$state$activeJob.length) !== ((_result = result) === null || _result === void 0 ? void 0 : _result.length) || randomState !== randomResult) {\n            this.setState({\n              globalJobId: jobId_ && (jobId_ === null || jobId_ === void 0 ? void 0 : jobId_.length) ? jobId_ : '',\n              enableEditMilestone: editMilestone_ === \"true\" ? true : false,\n              enableLodgeDispute: lodgeDispute_ === \"true\" ? true : false,\n              enableCancelJob: cancelJob_ === \"true\" ? true : false,\n              enableMakMilestone: markMilestone_ === \"true\" ? true : false,\n              activeJobs: result,\n              count: {\n                approveCount: needApprovalCount,\n                applicantCount: newApplicantsCount\n              },\n              actualLoad: true\n            });\n          }\n        } else {\n          this.checkAndUpdateCount({\n            needApprovalCount,\n            newApplicantsCount\n          });\n        }\n      }\n    }\n\n    if (jobtype === 'open' && !(openJobs === null || openJobs === void 0 ? void 0 : (_openJobs$open = openJobs.open) === null || _openJobs$open === void 0 ? void 0 : _openJobs$open.length) ? true : JSON.stringify(openJobs === null || openJobs === void 0 ? void 0 : openJobs.open) !== JSON.stringify((_this$state11 = this.state) === null || _this$state11 === void 0 ? void 0 : _this$state11.openJobs) && ((_this$state12 = this.state) === null || _this$state12 === void 0 ? void 0 : (_this$state12$openJob = _this$state12.openJobs) === null || _this$state12$openJob === void 0 ? void 0 : _this$state12$openJob.length) < currentPage * 10) {\n      if (openJobs === null || openJobs === void 0 ? void 0 : openJobs.open) {\n        var _this$state13, _this$state14, _this$state14$openJob, _this$state16, _this$state16$openJob;\n\n        let {\n          open,\n          needApprovalCount,\n          newApplicantsCount\n        } = openJobs;\n        let page_get = 0;\n        let prevValues = [];\n\n        if (Array.isArray(open) && (open === null || open === void 0 ? void 0 : open.length)) {\n          var _open$;\n\n          page_get = (_open$ = open[0]) === null || _open$ === void 0 ? void 0 : _open$.page;\n        }\n\n        if (Array.isArray((_this$state13 = this.state) === null || _this$state13 === void 0 ? void 0 : _this$state13.openJobs) && ((_this$state14 = this.state) === null || _this$state14 === void 0 ? void 0 : (_this$state14$openJob = _this$state14.openJobs) === null || _this$state14$openJob === void 0 ? void 0 : _this$state14$openJob.length)) {\n          var _this$state15;\n\n          prevValues = (_this$state15 = this.state) === null || _this$state15 === void 0 ? void 0 : _this$state15.openJobs;\n        }\n\n        if (hasLoad && !(open === null || open === void 0 ? void 0 : open.length) && page_get === 0 && ((_this$state16 = this.state) === null || _this$state16 === void 0 ? void 0 : (_this$state16$openJob = _this$state16.openJobs) === null || _this$state16$openJob === void 0 ? void 0 : _this$state16$openJob.length) !== 0) {\n          if (this.state.hasLoad !== false) {\n            this.setState({\n              hasLoad: false\n            });\n          }\n        } else if (hasLoad && (open === null || open === void 0 ? void 0 : open.length) && page_get === currentPage) {\n          var _this$state$openJobs, _result2;\n\n          let result = [];\n\n          if (JSON.stringify(prevValues) === JSON.stringify(open) && page_get === currentPage) {\n            // same data items here!\n            alert('Ok!');\n          } else {\n            var _firstItem3;\n\n            let concatedItems = prevValues;\n            let firstItem = null;\n\n            if (Array.isArray(open) && (open === null || open === void 0 ? void 0 : open.length)) {\n              firstItem = open[0];\n            }\n\n            if ((_firstItem3 = firstItem) === null || _firstItem3 === void 0 ? void 0 : _firstItem3.jobId) {\n              let ifMatch = prevValues.find(item => {\n                var _firstItem4;\n\n                return item.jobId === ((_firstItem4 = firstItem) === null || _firstItem4 === void 0 ? void 0 : _firstItem4.jobId);\n              });\n\n              if (!ifMatch) {\n                concatedItems = [...prevValues, ...open];\n              }\n            }\n\n            result = page_get > 0 && page_get === currentPage ? page_get == 1 && currentPage == 1 ? open : concatedItems : open;\n          }\n\n          let randomState = this.state.openJobs && Array.isArray(this.state.openJobs) && this.state.openJobs[0] && this.state.openJobs[0].mathrandom ? this.state.openJobs[0].mathrandom : '';\n          let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n          if (this.state.count.approveCount !== needApprovalCount || this.state.count.applicantCount !== newApplicantsCount || ((_this$state$openJobs = this.state.openJobs) === null || _this$state$openJobs === void 0 ? void 0 : _this$state$openJobs.length) !== ((_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.length) || randomState !== randomResult) {\n            this.setState({\n              openJobs: result,\n              count: {\n                approveCount: needApprovalCount,\n                applicantCount: newApplicantsCount\n              },\n              actualLoad: true\n            });\n          }\n        } else {\n          this.checkAndUpdateCount({\n            needApprovalCount,\n            newApplicantsCount\n          });\n        }\n      }\n    }\n\n    if (jobtype === 'past' && !(pastJobs === null || pastJobs === void 0 ? void 0 : (_pastJobs$past = pastJobs.past) === null || _pastJobs$past === void 0 ? void 0 : _pastJobs$past.length) ? true : JSON.stringify(pastJobs === null || pastJobs === void 0 ? void 0 : pastJobs.past) !== JSON.stringify((_this$state17 = this.state) === null || _this$state17 === void 0 ? void 0 : _this$state17.pastJobs) && ((_this$state18 = this.state) === null || _this$state18 === void 0 ? void 0 : (_this$state18$pastJob = _this$state18.pastJobs) === null || _this$state18$pastJob === void 0 ? void 0 : _this$state18$pastJob.length) < currentPage * 10) {\n      if (pastJobs === null || pastJobs === void 0 ? void 0 : pastJobs.past) {\n        var _this$state19, _this$state20, _this$state20$pastJob, _this$state22, _this$state22$pastJob;\n\n        let {\n          past,\n          needApprovalCount,\n          newApplicantsCount\n        } = pastJobs;\n        let page_get = 0;\n        let prevValues = [];\n\n        if (Array.isArray(past) && (past === null || past === void 0 ? void 0 : past.length)) {\n          var _past$;\n\n          page_get = (_past$ = past[0]) === null || _past$ === void 0 ? void 0 : _past$.page;\n        }\n\n        if (Array.isArray((_this$state19 = this.state) === null || _this$state19 === void 0 ? void 0 : _this$state19.pastJobs) && ((_this$state20 = this.state) === null || _this$state20 === void 0 ? void 0 : (_this$state20$pastJob = _this$state20.pastJobs) === null || _this$state20$pastJob === void 0 ? void 0 : _this$state20$pastJob.length)) {\n          var _this$state21;\n\n          prevValues = (_this$state21 = this.state) === null || _this$state21 === void 0 ? void 0 : _this$state21.pastJobs;\n        }\n\n        ;\n\n        if (hasLoad && !(past === null || past === void 0 ? void 0 : past.length) && page_get === 0 && ((_this$state22 = this.state) === null || _this$state22 === void 0 ? void 0 : (_this$state22$pastJob = _this$state22.pastJobs) === null || _this$state22$pastJob === void 0 ? void 0 : _this$state22$pastJob.length) !== 0) {\n          if (this.state.hasLoad !== false) {\n            this.setState({\n              hasLoad: false\n            });\n          }\n        } else if (hasLoad && (past === null || past === void 0 ? void 0 : past.length) && page_get === currentPage) {\n          var _firstItem5, _this$state$pastJobs, _result3;\n\n          let result = [];\n          let concatedItems = prevValues;\n          let firstItem = null;\n\n          if (Array.isArray(past) && (past === null || past === void 0 ? void 0 : past.length)) {\n            firstItem = past[0];\n          }\n\n          if ((_firstItem5 = firstItem) === null || _firstItem5 === void 0 ? void 0 : _firstItem5.jobId) {\n            let ifMatch = prevValues.find(item => {\n              var _firstItem6;\n\n              return item.jobId === ((_firstItem6 = firstItem) === null || _firstItem6 === void 0 ? void 0 : _firstItem6.jobId);\n            });\n\n            if (!ifMatch) {\n              concatedItems = [...prevValues, ...past];\n            }\n          }\n\n          result = page_get > 0 && page_get === currentPage ? page_get == 1 && currentPage == 1 ? past : concatedItems : past;\n          let randomState = this.state.pastJobs && Array.isArray(this.state.pastJobs) && this.state.pastJobs[0] && this.state.pastJobs[0].mathrandom ? this.state.pastJobs[0].mathrandom : '';\n          let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n          if (this.state.count.approveCount !== needApprovalCount || this.state.count.applicantCount !== newApplicantsCount || ((_this$state$pastJobs = this.state.pastJobs) === null || _this$state$pastJobs === void 0 ? void 0 : _this$state$pastJobs.length) !== ((_result3 = result) === null || _result3 === void 0 ? void 0 : _result3.length) || randomState !== randomResult) {\n            this.setState({\n              pastJobs: result,\n              count: {\n                approveCount: needApprovalCount,\n                applicantCount: newApplicantsCount\n              },\n              actualLoad: true\n            });\n          }\n        } else {\n          this.checkAndUpdateCount({\n            needApprovalCount,\n            newApplicantsCount\n          });\n        }\n      }\n    }\n\n    if (jobtype === 'applicantList' && JSON.stringify(applicantsListJobs) !== JSON.stringify(this.state.applicantsListJobs)) {\n      this.setState({\n        applicantsListJobs\n      });\n    }\n\n    if (jobtype === 'applicant' && JSON.stringify(applicantJobs) !== JSON.stringify((_this$state23 = this.state) === null || _this$state23 === void 0 ? void 0 : _this$state23.applicantJobs) && ((_this$state24 = this.state) === null || _this$state24 === void 0 ? void 0 : (_this$state24$applica = _this$state24.applicantJobs) === null || _this$state24$applica === void 0 ? void 0 : _this$state24$applica.length) < currentPage * 10) {\n      var _this$state25, _this$state26, _this$state26$applica, _this$state28, _this$state28$applica;\n\n      let page_get = 0;\n      let prevValues = [];\n\n      if (Array.isArray(applicantJobs) && (applicantJobs === null || applicantJobs === void 0 ? void 0 : applicantJobs.length)) {\n        var _applicantJobs$;\n\n        page_get = (_applicantJobs$ = applicantJobs[0]) === null || _applicantJobs$ === void 0 ? void 0 : _applicantJobs$.page;\n      }\n\n      if (Array.isArray((_this$state25 = this.state) === null || _this$state25 === void 0 ? void 0 : _this$state25.applicantJobs) && ((_this$state26 = this.state) === null || _this$state26 === void 0 ? void 0 : (_this$state26$applica = _this$state26.applicantJobs) === null || _this$state26$applica === void 0 ? void 0 : _this$state26$applica.length)) {\n        var _this$state27;\n\n        prevValues = (_this$state27 = this.state) === null || _this$state27 === void 0 ? void 0 : _this$state27.applicantJobs;\n      }\n\n      ;\n\n      if (hasLoad && !(applicantJobs === null || applicantJobs === void 0 ? void 0 : applicantJobs.length) && page_get === 0 && ((_this$state28 = this.state) === null || _this$state28 === void 0 ? void 0 : (_this$state28$applica = _this$state28.applicantJobs) === null || _this$state28$applica === void 0 ? void 0 : _this$state28$applica.length) !== 0) {\n        if (this.state.hasLoad !== false) {\n          this.setState({\n            hasLoad: false\n          });\n        }\n      } else {\n        if (hasLoad && (applicantJobs === null || applicantJobs === void 0 ? void 0 : applicantJobs.length) && page_get === currentPage) {\n          this.setState({\n            applicantJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...applicantJobs] : applicantJobs,\n            actualLoad: true\n          });\n        }\n      }\n    }\n\n    if (jobtype === 'approval' && JSON.stringify(approvalJobs) !== JSON.stringify((_this$state29 = this.state) === null || _this$state29 === void 0 ? void 0 : _this$state29.approvalJobs) && ((_this$state30 = this.state) === null || _this$state30 === void 0 ? void 0 : (_this$state30$approva = _this$state30.approvalJobs) === null || _this$state30$approva === void 0 ? void 0 : _this$state30$approva.length) < currentPage * 10) {\n      var _this$state31, _this$state32, _this$state32$approva, _this$state34, _this$state34$approva;\n\n      let page_get = 0;\n      let prevValues = [];\n\n      if (Array.isArray(approvalJobs) && (approvalJobs === null || approvalJobs === void 0 ? void 0 : approvalJobs.length)) {\n        var _approvalJobs$;\n\n        page_get = (_approvalJobs$ = approvalJobs[0]) === null || _approvalJobs$ === void 0 ? void 0 : _approvalJobs$.page;\n      }\n\n      if (Array.isArray((_this$state31 = this.state) === null || _this$state31 === void 0 ? void 0 : _this$state31.approvalJobs) && ((_this$state32 = this.state) === null || _this$state32 === void 0 ? void 0 : (_this$state32$approva = _this$state32.approvalJobs) === null || _this$state32$approva === void 0 ? void 0 : _this$state32$approva.length)) {\n        var _this$state33;\n\n        prevValues = (_this$state33 = this.state) === null || _this$state33 === void 0 ? void 0 : _this$state33.approvalJobs;\n      }\n\n      ;\n\n      if (hasLoad && !(approvalJobs === null || approvalJobs === void 0 ? void 0 : approvalJobs.length) && page_get === 0 && ((_this$state34 = this.state) === null || _this$state34 === void 0 ? void 0 : (_this$state34$approva = _this$state34.approvalJobs) === null || _this$state34$approva === void 0 ? void 0 : _this$state34$approva.length) !== 0) {\n        if (this.state.hasLoad !== false) {\n          this.setState({\n            hasLoad: false\n          });\n        }\n      } else {\n        if (hasLoad && (approvalJobs === null || approvalJobs === void 0 ? void 0 : approvalJobs.length) && page_get === currentPage) {\n          this.setState({\n            approvalJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...approvalJobs] : approvalJobs,\n            actualLoad: true\n          });\n        }\n      }\n    }\n  }\n\n  render() {\n    let {\n      actualLoad,\n      hasLoad,\n      currentPage,\n      enableEditMilestone,\n      enableLodgeDispute,\n      enableCancelJob,\n      enableMakMilestone,\n      globalJobId,\n      isToggleSidebar,\n      activeType,\n      selectedItem: {\n        jobtype,\n        jobid,\n        specializationId\n      },\n      count: {\n        applicantCount,\n        approveCount\n      },\n      activeJobs,\n      pastJobs,\n      openJobs,\n      applicantJobs,\n      applicantsListJobs,\n      approvalJobs\n    } = this.state;\n    const {\n      toggleSidebar,\n      setSelected\n    } = this;\n    let props = this.props;\n    let isLoading = props.isLoading;\n    let totalCount = 0;\n\n    if (jobtype === 'active') {\n      totalCount = activeJobs === null || activeJobs === void 0 ? void 0 : activeJobs.length;\n    }\n\n    if (jobtype === 'past') {\n      totalCount = pastJobs === null || pastJobs === void 0 ? void 0 : pastJobs.length;\n    }\n\n    if (jobtype === 'open') {\n      totalCount = openJobs === null || openJobs === void 0 ? void 0 : openJobs.length;\n    }\n\n    if (jobtype === 'applicant') {\n      totalCount = applicantJobs === null || applicantJobs === void 0 ? void 0 : applicantJobs.length;\n    }\n\n    if (jobtype === 'approval') {\n      totalCount = approvalJobs === null || approvalJobs === void 0 ? void 0 : approvalJobs.length;\n    }\n\n    if (jobtype === 'applicantList') {\n      totalCount = applicantsListJobs === null || applicantsListJobs === void 0 ? void 0 : applicantsListJobs.length;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mob_side_nav\",\n          onClick: () => {\n            toggleSidebar();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: menu,\n            alt: \"mob-side-nav\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"f_row h-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `side_nav_col${isToggleSidebar ? \" active\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close_nav\",\n              onClick: () => {\n                toggleSidebar();\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: close,\n                alt: \"close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stick\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"title\",\n                children: \"Job Dashboard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"dashboard_menu\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon star ${activeType === \"active\" ? \"active\" : \"\"}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        console.log(\"Here!!!!\"); // setResetItem(true);\n\n                        setSelected(\"active\");\n                        this.setState({\n                          toggleClearActiveChecks: true\n                        });\n                      },\n                      className: \"menu_txt\",\n                      children: \"Active\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 622,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon open ${activeType === \"open\" ? \"active\" : \"\"}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        setSelected(\"open\");\n                      },\n                      className: \"menu_txt\",\n                      children: \"Open\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 641,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 636,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 635,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon past ${activeType === \"past\" ? \"active\" : \"\"}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        setSelected(\"past\");\n                      },\n                      className: \"menu_txt\",\n                      children: \"Past\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 657,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 652,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon applicants ${activeType === \"applicant\" ? \"active\" : \"\"}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        setSelected(\"applicant\");\n                      },\n                      className: \"menu_txt\",\n                      children: [\"New applicants\", !!applicantCount && /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"badge_count\",\n                        children: applicantCount > 9 ? \"9+\" : applicantCount\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 682,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 674,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 669,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 668,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `icon approved ${activeType === \"approval\" ? \"active\" : \"\"}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      onClick: () => {\n                        setSelected(\"approval\");\n                      },\n                      className: \"menu_txt\",\n                      children: [\"Need approval\", !!approveCount && /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"badge_count\",\n                        children: approveCount > 9 ? \"9+\" : approveCount\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 704,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 696,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 691,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 689,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n            dataLength: totalCount,\n            next: () => {\n              if (totalCount == this.state.currentPage * 10) {\n                this.setState({\n                  currentPage: this.state.currentPage + 1\n                }, () => {\n                  let cp = this.state.currentPage;\n\n                  if (jobtype === \"active\") {\n                    this.props.getActiveJobsBuilder(cp);\n                  }\n\n                  if (jobtype === \"past\") {\n                    this.props.getPastJobsBuilder(cp);\n                  }\n\n                  if (jobtype === \"open\") {\n                    this.props.getOpenJobsBuilder(cp);\n                  }\n\n                  if (jobtype === \"applicant\") {\n                    this.props.getNewApplicantsBuilder(cp);\n                  }\n\n                  if (jobtype === \"approval\") {\n                    this.props.getNewApprovalList(cp);\n                  }\n                });\n              } else {// this.setState({ hasLoad: false })\n              }\n            },\n            hasMore: hasLoad,\n            loader: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false),\n            style: {\n              overflowX: \"hidden\"\n            },\n            className: `detail_col element-side-scroll hide_scroll`,\n            children: [jobtype === \"past\" && /*#__PURE__*/_jsxDEV(PastJobsComponent, {\n              isLoading: isLoading,\n              dataItems: pastJobs,\n              jobType: jobtype,\n              activeType: activeType,\n              history: props.history,\n              getPastJobsBuilder: props === null || props === void 0 ? void 0 : props.getPastJobsBuilder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 755,\n              columnNumber: 21\n            }, this), jobtype === \"active\" && /*#__PURE__*/_jsxDEV(ActiveJobsComponent, {\n              isLoading: isLoading,\n              dataItems: activeJobs,\n              jobType: jobtype,\n              activeType: activeType,\n              setJobLabel: setSelected,\n              setToggleActiveToFalse: this.setToggleActiveToFalse,\n              recallHeaderNotification: this.props.recallHeaderNotification,\n              toggleClearActiveChecks: this.state.toggleClearActiveChecks,\n              history: props.history,\n              globalJobId: globalJobId,\n              enableEditMilestone: enableEditMilestone,\n              enableLodgeDispute: enableLodgeDispute,\n              enableCancelJob: enableCancelJob,\n              enableMakMilestone: enableMakMilestone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 21\n            }, this), jobtype === \"open\" && /*#__PURE__*/_jsxDEV(OpenJobsComponent, {\n              isLoading: isLoading,\n              dataItems: openJobs,\n              jobType: jobtype,\n              setJobLabel: setSelected,\n              activeType: activeType,\n              history: props.history\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 21\n            }, this), jobtype === \"applicant\" && /*#__PURE__*/_jsxDEV(NewApplicantComponent, {\n              isLoading: isLoading,\n              dataItems: applicantJobs,\n              jobType: jobtype,\n              setJobLabel: setSelected,\n              history: props.history\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 797,\n              columnNumber: 21\n            }, this), jobtype === \"approval\" && /*#__PURE__*/_jsxDEV(NeedApproval, {\n              isLoading: isLoading,\n              dataItems: approvalJobs,\n              jobType: jobtype,\n              setJobLabel: setSelected,\n              activeType: activeType,\n              history: props.history\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 21\n            }, this), jobtype === \"applicantList\" && /*#__PURE__*/_jsxDEV(ApplicantsList, {\n              isLoading: isLoading,\n              items: applicantsListJobs,\n              jobid: jobid,\n              specializationId: specializationId,\n              setJobLabel: setSelected,\n              activeType: activeType,\n              history: props.history\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 21\n            }, this), jobtype === \"listQuote\" && /*#__PURE__*/_jsxDEV(ListQuotes, { ...props,\n              setJobLabel: setSelected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 827,\n              columnNumber: 21\n            }, this), jobtype === \"quotes\" && /*#__PURE__*/_jsxDEV(ViewQuote, { ...props,\n              setJobLabel: setSelected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 830,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default JobDashboard;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/jobDashboard.tsx"],"names":["Component","menu","close","ActiveJobsComponent","OpenJobsComponent","PastJobsComponent","NewApplicantComponent","NeedApproval","ApplicantsList","InfiniteScroll","ViewQuote","ListQuotes","JobDashboard","constructor","props","checkAndUpdateCount","needApprovalCount","newApplicantsCount","approveCount","applicantCount","state","count","setState","toggleSidebar","isToggleSidebar","setSelected","jobtype","jobid","sortby","specializationId","currentPage","item_position","localStorage","getItem","locationLocal","JSON","parse","dataItemsAddons","page","jobId","sortBy","includes","activeType","hasLoad","activeJobs","pastJobs","openJobs","applicantJobs","approvalJobs","applicantsListJobs","actualLoad","selectedItem","getClearJobs","history","push","window","scrollTo","setAfterItems","getActiveJobsBuilder","getPastJobsBuilder","getOpenJobsBuilder","getNewApplicantsBuilder","getnewJobApplicationListBuilder","getNewApprovalList","setToggleActiveToFalse","toggleClearActiveChecks","enableEditMilestone","enableLodgeDispute","enableCancelJob","enableMakMilestone","globalJobId","componentDidMount","nextProps","location","search","urlParams","URLSearchParams","activeType_","get","ListQuote","viewQuotes","activeTypeByUrl","componentDidUpdate","prevProps","jobId_","editMilestone_","lodgeDispute_","cancelJob_","markMilestone_","stateActive","console","log","active","length","stringify","page_get","prevValues","Array","isArray","result","concatedItems","firstItem","ifMatch","find","item","randomState","mathrandom","randomResult","open","alert","past","render","isLoading","totalCount","cp","overflowX","recallHeaderNotification"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport menu from '../../assets/images/menu-line-blue.png';\nimport close from '../../assets/images/ic-cancel-blue.png';\n\nimport ActiveJobsComponent from './components/activeJobs';\nimport OpenJobsComponent from './components/openJobs';\nimport PastJobsComponent from './components/pastJobs';\nimport NewApplicantComponent from './components/newApplicants';\nimport NeedApproval from './components/needApproval';\nimport ApplicantsList from './components/applicantsList';\n//@ts-ignore\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\n\nimport ViewQuote from './components/quoteJobs/viewQuote';\nimport ListQuotes from './components/quoteJobs/ListQuotes';\n\ninterface Props {\n    getActiveJobsBuilder: (page: number) => void,\n    getPastJobsBuilder: (page: number) => void,\n    getNewApplicantsBuilder: (page: number) => void,\n    getOpenJobsBuilder: (page: number) => void,\n    getnewJobApplicationListBuilder: (item: any) => void,\n    getNewApprovalList: (page: number) => void,\n    recallHeaderNotification: (data: boolean) => void,\n    getClearJobs: () => void,\n    activeJobs: any,\n    pastJobs: any,\n    openJobs: any\n    applicantJobs: any,\n    approvalJobs: any,\n    applicantsListJobs: any,\n    history: any,\n    isLoading: any\n}\ninterface State {\n    isToggleSidebar: any,\n    selectedItem: any,\n    count: any,\n    currentPage: any,\n    activeType: any,\n    activeJobs: any,\n    pastJobs: any,\n    openJobs: any\n    applicantJobs: any,\n    approvalJobs: any,\n    applicantsListJobs: any,\n    enableEditMilestone: any,\n    enableLodgeDispute: any,\n    enableCancelJob: any,\n    enableMakMilestone: any,\n    globalJobId: string,\n    hasLoad: boolean,\n    actualLoad: boolean,\n    toggleClearActiveChecks: boolean\n}\nclass JobDashboard extends Component<Props, State> {\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            currentPage: 1,\n            isToggleSidebar: false,\n            activeType: 'active',\n            selectedItem: { jobtype: 'active', jobid: null, sortby: 1, specializationId: '' },\n            count: { applicantCount: 0, approveCount: 0 },\n            activeJobs: [],\n            pastJobs: [],\n            openJobs: [],\n            applicantJobs: [],\n            approvalJobs: [],\n            applicantsListJobs: [],\n            enableEditMilestone: false,\n            enableLodgeDispute: false,\n            enableCancelJob: false,\n            enableMakMilestone: false,\n            globalJobId: '',\n            hasLoad: true,\n            actualLoad: false,\n            toggleClearActiveChecks: false\n        }\n    }\n\n    componentDidMount() {\n        let { activeType, selectedItem: { jobtype }} = this.state;\n        let nextProps: any = this.props;\n        if (nextProps?.location?.search) {\n\n            let urlParams = new URLSearchParams(nextProps?.location?.search);\n            let activeType_ = urlParams.get('active');\n            let ListQuote = urlParams.get('quotes');\n            let viewQuotes = urlParams.get('viewQuotes');\n\n            let activeTypeByUrl: any = activeType_;\n            if (ListQuote === \"true\") {\n                activeTypeByUrl = 'listQuote'\n            }\n\n            if (viewQuotes === \"true\") {\n                activeTypeByUrl = 'quotes'\n            }\n\n            if (activeTypeByUrl) {\n                if (activeTypeByUrl !== activeType) {\n                    this.setState({\n                        activeType: activeTypeByUrl,\n                        selectedItem: {\n                            jobtype: activeTypeByUrl,\n                            jobid: null,\n                            sortby: 1,\n                            specializationId: '',\n                        },\n                    }, () => {\n                        this.setAfterItems({\n                            jobtype: activeTypeByUrl,\n                            currentPage: 1,\n                            dataItemsAddons: { page: 1, jobId: null, sortBy: 1 }\n                        })\n                    })\n                } else {\n                    this.props.getActiveJobsBuilder(1);\n                }\n            }\n        } else {\n            this.props.getActiveJobsBuilder(1);\n        }\n    }\n\n\n    checkAndUpdateCount = ({\n        needApprovalCount,\n        newApplicantsCount\n    }: any) => {\n        let { approveCount, applicantCount } = this.state?.count\n        if (needApprovalCount !== approveCount ||\n            newApplicantsCount !== applicantCount) {\n            this.setState({\n                count: {\n                    approveCount: needApprovalCount,\n                    applicantCount: newApplicantsCount\n                },\n            })\n        }\n    }\n\n    // milestone dates should be lie betwwn job details\n    componentDidUpdate(prevProps: any) {\n        let nextProps: any = this.props;\n        let { activeJobs, pastJobs, openJobs, applicantsListJobs, applicantJobs, approvalJobs } = nextProps;\n        let { selectedItem: { jobtype }, currentPage, hasLoad } = this.state;\n       \n\n        let urlParams = new URLSearchParams(nextProps?.location?.search);\n        let jobId_ = urlParams.get('jobId');\n        let editMilestone_ = urlParams.get('editMilestone');\n        let lodgeDispute_ = urlParams.get('lodgeDispute');\n        let cancelJob_ = urlParams.get('cancelJob');\n        let markMilestone_ = urlParams.get('markMilestone');\n\n        let stateActive = this.state.activeJobs;\n\n        console.log({\n            activeJobs, pastJobs, openJobs, applicantsListJobs, applicantJobs, approvalJobs,\n            1: jobtype === 'active',\n            2: !activeJobs?.active?.length ? true : JSON.stringify(activeJobs?.active) !== JSON.stringify(this.state?.activeJobs),\n            3: (stateActive?.length < currentPage * 10),\n            stateActive: stateActive,\n            currentPage\n        })\n\n        if (\n            jobtype === 'active' &&\n                !activeJobs?.active?.length ? true : JSON.stringify(activeJobs?.active) !== JSON.stringify(this.state?.activeJobs) &&\n            (this.state?.activeJobs?.length < currentPage * 10 || this.state?.activeJobs?.length === currentPage * 10)\n        ) {\n            if (activeJobs?.active) {\n\n                let { active, needApprovalCount, newApplicantsCount } = activeJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(active) && active?.length) {\n                    page_get = active[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.activeJobs) && this.state?.activeJobs?.length) {\n                    prevValues = this.state?.activeJobs;\n                }\n\n                if (hasLoad && !active?.length && page_get === 0 && this.state?.activeJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && active?.length && page_get === currentPage) {\n                    let result = [];\n                    if (JSON.stringify(prevValues) === JSON.stringify(active) && page_get === currentPage) {\n                        // same data items here!\n                    } else {\n                        let concatedItems: any = prevValues;\n                        let firstItem: any = null;\n\n                        if (Array.isArray(active) && active?.length) {\n                            firstItem = active[0];\n                        }\n\n                        if (firstItem?.jobId) {\n                            let ifMatch = prevValues.find((item: any) => item.jobId === firstItem?.jobId);\n                            if (!ifMatch) {\n                                concatedItems = [...prevValues, ...active]\n                            }\n                        }\n\n                        result = page_get > 0 && page_get === currentPage ?\n                            page_get == 1 && currentPage == 1 ? active : concatedItems\n                            : active;\n                    }\n\n                    let globalJobId = jobId_ && jobId_?.length ? jobId_ : ''\n                    let enableEditMilestone = editMilestone_ === \"true\" ? true : false;\n                    let enableLodgeDispute = lodgeDispute_ === \"true\" ? true : false;\n                    let enableCancelJob = cancelJob_ === \"true\" ? true : false;\n                    let enableMakMilestone = markMilestone_ === \"true\" ? true : false;\n                    let { approveCount, applicantCount } = this.state?.count;\n\n                    let randomState = this.state.activeJobs && Array.isArray(this.state.activeJobs) && this.state.activeJobs[0] && this.state.activeJobs[0].mathrandom ? this.state.activeJobs[0].mathrandom : ''\n\n                    let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n                    if (needApprovalCount !== approveCount ||\n                        newApplicantsCount !== applicantCount ||\n                        this.state.globalJobId !== globalJobId ||\n                        this.state.enableEditMilestone !== enableEditMilestone ||\n                        this.state.enableLodgeDispute !== enableLodgeDispute ||\n                        this.state.enableCancelJob !== enableCancelJob ||\n                        this.state.enableCancelJob !== enableCancelJob ||\n                        this.state.enableMakMilestone !== enableMakMilestone ||\n                        this.state.activeJobs?.length !== result?.length ||\n                        randomState !== randomResult\n                    ) {\n                        this.setState({\n                            globalJobId: jobId_ && jobId_?.length ? jobId_ : '',\n                            enableEditMilestone: editMilestone_ === \"true\" ? true : false,\n                            enableLodgeDispute: lodgeDispute_ === \"true\" ? true : false,\n                            enableCancelJob: cancelJob_ === \"true\" ? true : false,\n                            enableMakMilestone: markMilestone_ === \"true\" ? true : false,\n                            activeJobs: result,\n                            count: {\n                                approveCount: needApprovalCount,\n                                applicantCount: newApplicantsCount\n                            },\n                            actualLoad: true\n                        });\n                    }\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n            }\n        }\n\n        if (\n            jobtype === 'open' &&\n                !openJobs?.open?.length ? true : JSON.stringify(openJobs?.open) !== JSON.stringify(this.state?.openJobs) &&\n            (this.state?.openJobs?.length < currentPage * 10)\n        ) {\n            if (openJobs?.open) {\n                let { open, needApprovalCount, newApplicantsCount } = openJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(open) && open?.length) {\n                    page_get = open[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.openJobs) && this.state?.openJobs?.length) {\n                    prevValues = this.state?.openJobs;\n                }\n\n\n                if (hasLoad && !open?.length && page_get === 0 && this.state?.openJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && open?.length && page_get === currentPage) {\n                    let result = [];\n                    if (JSON.stringify(prevValues) === JSON.stringify(open) && page_get === currentPage) {\n                        // same data items here!\n                        alert('Ok!')\n                    } else {\n                        let concatedItems: any = prevValues;\n                        let firstItem: any = null;\n\n                        if (Array.isArray(open) && open?.length) {\n                            firstItem = open[0];\n                        }\n\n                        if (firstItem?.jobId) {\n                            let ifMatch = prevValues.find((item: any) => item.jobId === firstItem?.jobId);\n                            if (!ifMatch) {\n                                concatedItems = [...prevValues, ...open]\n                            }\n                        }\n\n                        result = page_get > 0 && page_get === currentPage ?\n                            page_get == 1 && currentPage == 1 ? open : concatedItems\n                            : open;\n                    }\n\n                    let randomState = this.state.openJobs && Array.isArray(this.state.openJobs) && this.state.openJobs[0] && this.state.openJobs[0].mathrandom ? this.state.openJobs[0].mathrandom : ''\n\n                    let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n\n                    if (this.state.count.approveCount !== needApprovalCount ||\n                        this.state.count.applicantCount !== newApplicantsCount ||\n                        this.state.openJobs?.length !== result?.length ||\n                        randomState !== randomResult\n                    ) {\n                        this.setState({\n                            openJobs: result,\n                            count: {\n                                approveCount: needApprovalCount,\n                                applicantCount: newApplicantsCount\n                            },\n                            actualLoad: true\n                        });\n                    }\n\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n\n            }\n        }\n\n        if (\n            jobtype === 'past' &&\n                !pastJobs?.past?.length ? true : JSON.stringify(pastJobs?.past) !== JSON.stringify(this.state?.pastJobs) &&\n            (this.state?.pastJobs?.length < currentPage * 10)\n        ) {\n\n            if (pastJobs?.past) {\n\n                let { past, needApprovalCount, newApplicantsCount } = pastJobs;\n                let page_get = 0;\n                let prevValues = [];\n\n                if (Array.isArray(past) && past?.length) {\n                    page_get = past[0]?.page;\n                }\n\n                if (Array.isArray(this.state?.pastJobs) && this.state?.pastJobs?.length) {\n                    prevValues = this.state?.pastJobs;\n                };\n\n\n                if (hasLoad && !past?.length && page_get === 0 && this.state?.pastJobs?.length !== 0) {\n                    if (this.state.hasLoad !== false) {\n                        this.setState({ hasLoad: false });\n                    }\n                } else if (hasLoad && past?.length && page_get === currentPage) {\n                    let result = [];\n                    let concatedItems: any = prevValues;\n                    let firstItem: any = null;\n\n                    if (Array.isArray(past) && past?.length) {\n                        firstItem = past[0];\n                    }\n\n                    if (firstItem?.jobId) {\n                        let ifMatch = prevValues.find((item: any) => item.jobId === firstItem?.jobId);\n                        if (!ifMatch) {\n                            concatedItems = [...prevValues, ...past]\n                        }\n                    }\n\n                    result = page_get > 0 && page_get === currentPage ?\n                        page_get == 1 && currentPage == 1 ? past : concatedItems\n                        : past;\n\n                    let randomState = this.state.pastJobs && Array.isArray(this.state.pastJobs) && this.state.pastJobs[0] && this.state.pastJobs[0].mathrandom ? this.state.pastJobs[0].mathrandom : ''\n                    let randomResult = result && Array.isArray(result) && result[0] && result[0].mathrandom ? result[0].mathrandom : '';\n\n\n                    if (this.state.count.approveCount !== needApprovalCount ||\n                        this.state.count.applicantCount !== newApplicantsCount ||\n                        this.state.pastJobs?.length !== result?.length ||\n                        randomState !== randomResult\n                    ) {\n                        this.setState({\n                            pastJobs: result,\n                            count: {\n                                approveCount: needApprovalCount,\n                                applicantCount: newApplicantsCount\n                            },\n                            actualLoad: true\n                        });\n                    }\n                } else {\n                    this.checkAndUpdateCount({\n                        needApprovalCount,\n                        newApplicantsCount\n                    })\n                }\n            }\n        }\n\n        if (jobtype === 'applicantList' && JSON.stringify(applicantsListJobs) !== JSON.stringify(this.state.applicantsListJobs)) {\n            this.setState({ applicantsListJobs });\n        }\n\n        if (\n            jobtype === 'applicant' &&\n            JSON.stringify(applicantJobs) !== JSON.stringify(this.state?.applicantJobs) &&\n            (this.state?.applicantJobs?.length < currentPage * 10)\n        ) {\n            let page_get = 0;\n            let prevValues = [];\n\n            if (Array.isArray(applicantJobs) && applicantJobs?.length) {\n                page_get = applicantJobs[0]?.page;\n            }\n\n            if (Array.isArray(this.state?.applicantJobs) && this.state?.applicantJobs?.length) {\n                prevValues = this.state?.applicantJobs;\n            };\n\n\n            if (hasLoad && !applicantJobs?.length && page_get === 0 && this.state?.applicantJobs?.length !== 0) {\n                if (this.state.hasLoad !== false) {\n                    this.setState({ hasLoad: false });\n                }\n            } else {\n                if (hasLoad && applicantJobs?.length && page_get === currentPage) {\n                    this.setState({\n                        applicantJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...applicantJobs] : applicantJobs,\n                        actualLoad: true\n                    });\n                }\n            }\n        }\n\n\n        if (\n            jobtype === 'approval' &&\n            JSON.stringify(approvalJobs) !== JSON.stringify(this.state?.approvalJobs) &&\n            (this.state?.approvalJobs?.length < currentPage * 10)\n        ) {\n            let page_get = 0;\n            let prevValues = [];\n\n            if (Array.isArray(approvalJobs) && approvalJobs?.length) {\n                page_get = approvalJobs[0]?.page;\n            }\n\n            if (Array.isArray(this.state?.approvalJobs) && this.state?.approvalJobs?.length) {\n                prevValues = this.state?.approvalJobs;\n            };\n\n\n            if (hasLoad && !approvalJobs?.length && page_get === 0 && this.state?.approvalJobs?.length !== 0) {\n                if (this.state.hasLoad !== false) {\n                    this.setState({ hasLoad: false });\n                }\n            } else {\n                if (hasLoad && approvalJobs?.length && page_get === currentPage) {\n                    this.setState({\n                        approvalJobs: page_get > 0 && page_get === currentPage ? [...prevValues, ...approvalJobs] : approvalJobs,\n                        actualLoad: true\n                    });\n                }\n            }\n        }\n    }\n\n    toggleSidebar = () => this.setState({ isToggleSidebar: !this.state.isToggleSidebar });\n    setSelected = (jobtype: any, jobid?: any, sortby?: any, specializationId?: any) => {\n\n        let { currentPage } = this.state;\n        let item_position: any = localStorage.getItem('position');\n        let locationLocal: any = JSON.parse(item_position);\n\n        let dataItemsAddons: any = { page: currentPage, jobId: jobid, sortBy: sortby };\n        if (sortby === 2) {\n            dataItemsAddons['location'] = {\n                \"type\": \"Point\",\n                \"coordinates\": [\n                    locationLocal[1],\n                    locationLocal[0]\n                ]\n            };\n        }\n\n        if (['active', 'past', 'open', 'applicant', 'approval'].includes(jobtype)) {\n            this.setState({\n                activeType: jobtype,\n                currentPage: 1,\n                hasLoad: true,\n                activeJobs: [],\n                pastJobs: [],\n                openJobs: [],\n                applicantJobs: [],\n                approvalJobs: [],\n                applicantsListJobs: [],\n                actualLoad: false,\n                selectedItem: { jobtype, jobid, sortby, specializationId },\n            }, () => {\n                this.props.getClearJobs();\n                this.props.history.push(`/jobs?active=${jobtype}`);\n                window.scrollTo(0, 0);\n\n                this.setAfterItems({ jobtype, currentPage: this.state.currentPage, dataItemsAddons });\n            })\n        } else {\n            this.setState({\n                selectedItem: { jobtype, jobid, sortby, specializationId },\n                applicantsListJobs: [],\n            }, () => {\n                this.props.getClearJobs();\n                this.setAfterItems({ jobtype, currentPage: this.state.currentPage, dataItemsAddons });\n            });\n        }\n    }\n\n    setAfterItems = ({ jobtype, currentPage, dataItemsAddons }: any) => {\n        const { getActiveJobsBuilder, getPastJobsBuilder, getOpenJobsBuilder, getNewApplicantsBuilder, getnewJobApplicationListBuilder, getNewApprovalList } = this.props;\n\n        if (jobtype === 'active') { getActiveJobsBuilder(currentPage); }\n        if (jobtype === 'past') { getPastJobsBuilder(currentPage); }\n        if (jobtype === 'open') { getOpenJobsBuilder(currentPage); }\n        if (jobtype === 'applicant') { getNewApplicantsBuilder(currentPage); }\n        if (jobtype === 'approval') { getNewApprovalList(currentPage); }\n        if (jobtype === 'applicantList') { getnewJobApplicationListBuilder(dataItemsAddons); }\n    }\n\n    setToggleActiveToFalse = () => {\n        this.setState({ toggleClearActiveChecks: false });\n    }\n\n    render() {\n        let {\n            actualLoad,\n            hasLoad,\n            currentPage,\n            enableEditMilestone,\n            enableLodgeDispute,\n            enableCancelJob,\n            enableMakMilestone,\n            globalJobId,\n            isToggleSidebar,\n            activeType,\n            selectedItem: { jobtype, jobid, specializationId },\n            count: { applicantCount, approveCount },\n            activeJobs, pastJobs, openJobs, applicantJobs, applicantsListJobs, approvalJobs\n        } = this.state;\n        const { toggleSidebar, setSelected } = this;\n        let props: any = this.props;\n        let isLoading: any = props.isLoading;\n        let totalCount: any = 0;\n\n        if (jobtype === 'active') {\n            totalCount = activeJobs?.length;\n        }\n\n        if (jobtype === 'past') {\n            totalCount = pastJobs?.length;\n        }\n\n        if (jobtype === 'open') {\n            totalCount = openJobs?.length;\n        }\n\n        if (jobtype === 'applicant') {\n            totalCount = applicantJobs?.length;\n        }\n\n        if (jobtype === 'approval') {\n            totalCount = approvalJobs?.length;\n        }\n\n        if (jobtype === 'applicantList') {\n            totalCount = applicantsListJobs?.length;\n        }\n\n        return (\n          <div className=\"app_wrapper\">\n            <div className=\"custom_container\">\n              <span\n                className=\"mob_side_nav\"\n                onClick={() => {\n                  toggleSidebar();\n                }}\n              >\n                <img src={menu} alt=\"mob-side-nav\" />\n              </span>\n              <div className=\"f_row h-100\">\n                <div\n                  className={`side_nav_col${isToggleSidebar ? \" active\" : \"\"}`}\n                >\n                  <button\n                    className=\"close_nav\"\n                    onClick={() => {\n                      toggleSidebar();\n                    }}\n                  >\n                    <img src={close} alt=\"close\" />\n                  </button>\n                  <div className=\"stick\">\n                    <span className=\"title\">Job Dashboard</span>\n                    <ul className=\"dashboard_menu\">\n                      <li>\n                        <span\n                          className={`icon star ${\n                            activeType === \"active\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              console.log(\"Here!!!!\");\n                              // setResetItem(true);\n                              setSelected(\"active\");\n                              this.setState({ toggleClearActiveChecks: true });\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            Active\n                          </span>\n                        </span>\n                      </li>\n                      <li>\n                        <span\n                          className={`icon open ${\n                            activeType === \"open\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              setSelected(\"open\");\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            Open\n                          </span>\n                        </span>\n                      </li>\n                      <li>\n                        <span\n                          className={`icon past ${\n                            activeType === \"past\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              setSelected(\"past\");\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            Past\n                          </span>\n                        </span>\n                      </li>\n                      {/* <hr></hr> */}\n                      <li>\n                        <span\n                          className={`icon applicants ${\n                            activeType === \"applicant\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              setSelected(\"applicant\");\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            {\"New applicants\"}\n                            {!!applicantCount && (\n                              <span className=\"badge_count\">\n                                {applicantCount > 9 ? \"9+\" : applicantCount}\n                              </span>\n                            )}\n                          </span>\n                        </span>\n                      </li>\n                      <li>\n                        {/* <span className=\"icon approved\"> */}\n                        <span\n                          className={`icon approved ${\n                            activeType === \"approval\" ? \"active\" : \"\"\n                          }`}\n                        >\n                          <span\n                            onClick={() => {\n                              setSelected(\"approval\");\n                            }}\n                            className=\"menu_txt\"\n                          >\n                            {\"Need approval\"}\n                            {!!approveCount && (\n                              <span className=\"badge_count\">\n                                {approveCount > 9 ? \"9+\" : approveCount}\n                              </span>\n                            )}\n                          </span>\n                        </span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n\n                <InfiniteScroll\n                  dataLength={totalCount}\n                  next={() => {\n                    if (totalCount == this.state.currentPage * 10) {\n                      this.setState(\n                        { currentPage: this.state.currentPage + 1 },\n                        () => {\n                          let cp: any = this.state.currentPage;\n\n                          if (jobtype === \"active\") {\n                            this.props.getActiveJobsBuilder(cp);\n                          }\n\n                          if (jobtype === \"past\") {\n                            this.props.getPastJobsBuilder(cp);\n                          }\n\n                          if (jobtype === \"open\") {\n                            this.props.getOpenJobsBuilder(cp);\n                          }\n\n                          if (jobtype === \"applicant\") {\n                            this.props.getNewApplicantsBuilder(cp);\n                          }\n\n                          if (jobtype === \"approval\") {\n                            this.props.getNewApprovalList(cp);\n                          }\n                        }\n                      );\n                    } else {\n                      // this.setState({ hasLoad: false })\n                    }\n                  }}\n                  hasMore={hasLoad}\n                  loader={<></>}\n                  style={{ overflowX: \"hidden\" }}\n                  className={`detail_col element-side-scroll hide_scroll`}\n                >\n                  {jobtype === \"past\" && (\n                    <PastJobsComponent\n                      isLoading={isLoading}\n                      dataItems={pastJobs}\n                      jobType={jobtype}\n                      activeType={activeType}\n                      history={props.history}\n                      getPastJobsBuilder={props?.getPastJobsBuilder}\n                    />\n                  )}\n                  {jobtype === \"active\" && (\n                    <ActiveJobsComponent\n                      isLoading={isLoading}\n                      dataItems={activeJobs}\n                      jobType={jobtype}\n                      activeType={activeType}\n                      setJobLabel={setSelected}\n                      setToggleActiveToFalse={this.setToggleActiveToFalse}\n                      recallHeaderNotification={\n                        this.props.recallHeaderNotification\n                      }\n                      toggleClearActiveChecks={\n                        this.state.toggleClearActiveChecks\n                      }\n                      history={props.history}\n                      globalJobId={globalJobId}\n                      enableEditMilestone={enableEditMilestone}\n                      enableLodgeDispute={enableLodgeDispute}\n                      enableCancelJob={enableCancelJob}\n                      enableMakMilestone={enableMakMilestone}\n                    />\n                  )}\n                  {jobtype === \"open\" && (\n                    <OpenJobsComponent\n                      isLoading={isLoading}\n                      dataItems={openJobs}\n                      jobType={jobtype}\n                      setJobLabel={setSelected}\n                      activeType={activeType}\n                      history={props.history}\n                    />\n                  )}\n                  {jobtype === \"applicant\" && (\n                    <NewApplicantComponent\n                      isLoading={isLoading}\n                      dataItems={applicantJobs}\n                      jobType={jobtype}\n                      setJobLabel={setSelected}\n                      history={props.history}\n                    />\n                  )}\n                  {jobtype === \"approval\" && (\n                    <NeedApproval\n                      isLoading={isLoading}\n                      dataItems={approvalJobs}\n                      jobType={jobtype}\n                      setJobLabel={setSelected}\n                      activeType={activeType}\n                      history={props.history}\n                    />\n                  )}\n                  {jobtype === \"applicantList\" && (\n                    <ApplicantsList\n                      isLoading={isLoading}\n                      items={applicantsListJobs}\n                      jobid={jobid}\n                      specializationId={specializationId}\n                      setJobLabel={setSelected}\n                      activeType={activeType}\n                      history={props.history}\n                    />\n                  )}\n                  {jobtype === \"listQuote\" && (\n                    <ListQuotes {...props} setJobLabel={setSelected} />\n                  )}\n                  {jobtype === \"quotes\" && (\n                    <ViewQuote {...props} setJobLabel={setSelected} />\n                  )}\n                </InfiniteScroll>\n              </div>\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default JobDashboard;"]},"metadata":{},"sourceType":"module"}