{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar react = require('react');\n/**\r\n * Hook used to detect clicks outside a component (or an escape key press). onTriggered function is triggered on `click` or escape `keyup` event.\r\n *\r\n */\n\n\nfunction useDetectClickOutside(_a) {\n  var onTriggered = _a.onTriggered,\n      disableClick = _a.disableClick,\n      disableKeys = _a.disableKeys,\n      allowAnyKey = _a.allowAnyKey,\n      triggerKeys = _a.triggerKeys;\n  var ref = react.useRef(null);\n  var keyListener = react.useCallback(function (e) {\n    if (allowAnyKey) {\n      onTriggered(e);\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered(e);\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered(e);\n      }\n    }\n  }, []);\n  var clickListener = react.useCallback(function (e) {\n    if (ref && ref.current) {\n      if (!ref.current.contains(e.target)) {\n        onTriggered === null || onTriggered === void 0 ? void 0 : onTriggered(e);\n      }\n    }\n  }, [ref.current]);\n  react.useEffect(function () {\n    !disableClick && document.addEventListener('click', clickListener);\n    !disableKeys && document.addEventListener('keyup', keyListener);\n    return function () {\n      !disableClick && document.removeEventListener('click', clickListener);\n      !disableKeys && document.removeEventListener('keyup', keyListener);\n    };\n  }, []);\n  return ref;\n}\n\nexports.useDetectClickOutside = useDetectClickOutside;","map":{"version":3,"sources":["../src/useDetectClickOutside.tsx"],"names":["useRef","useCallback","useEffect"],"mappings":";;;;;AAUA;;;;;;SAIgB,qB,CAAsB,E,EAM9B;MALN,WAAW,GAAA,EAAA,CAAA,W;MACX,YAAY,GAAA,EAAA,CAAA,Y;MACZ,WAAW,GAAA,EAAA,CAAA,W;MACX,WAAW,GAAA,EAAA,CAAA,W;MACX,WAAW,GAAA,EAAA,CAAA,W;AAEX,MAAM,GAAG,GAAGA,KAAAA,CAAAA,MAAAA,CAAO,IAAPA,CAAZ;AAEA,MAAM,WAAW,GAAGC,KAAAA,CAAAA,WAAAA,CAAY,UAAC,CAAD,EAAiB;AAC/C,QAAI,WAAJ,EAAiB;AACf,MAAA,WAAW,CAAC,CAAD,CAAX;AACD,KAFD,MAEO,IAAI,WAAJ,EAAiB;AACtB,UAAI,WAAW,CAAC,QAAZ,CAAqB,CAAC,CAAC,GAAvB,CAAJ,EAAiC;AAC/B,QAAA,WAAW,CAAC,CAAD,CAAX;AACD;AACF,KAJM,MAIA;AACL,UAAI,CAAC,CAAC,GAAF,KAAU,QAAd,EAAwB;AACtB,QAAA,WAAW,CAAC,CAAD,CAAX;AACD;AACF;AACF,GAZmBA,EAYjB,EAZiBA,CAApB;AAcA,MAAM,aAAa,GAAGA,KAAAA,CAAAA,WAAAA,CACpB,UAAC,CAAD,EAAc;AACZ,QAAI,GAAG,IAAI,GAAG,CAAC,OAAf,EAAwB;AACtB,UAAI,CAAE,GAAG,CAAC,OAAJ,CAAqB,QAArB,CAA8B,CAAC,CAAC,MAAhC,CAAN,EAA+C;AAC7C,QAAA,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAG,CAAH,CAAX;AACD;AACF;AACF,GAPmBA,EAQpB,CAAC,GAAG,CAAC,OAAL,CARoBA,CAAtB;AAWAC,EAAAA,KAAAA,CAAAA,SAAAA,CAAU,YAAA;AACR,KAAC,YAAD,IAAiB,QAAQ,CAAC,gBAAT,CAA0B,OAA1B,EAAmC,aAAnC,CAAjB;AACA,KAAC,WAAD,IAAgB,QAAQ,CAAC,gBAAT,CAA0B,OAA1B,EAAmC,WAAnC,CAAhB;AACA,WAAO,YAAA;AACL,OAAC,YAAD,IAAiB,QAAQ,CAAC,mBAAT,CAA6B,OAA7B,EAAsC,aAAtC,CAAjB;AACA,OAAC,WAAD,IAAgB,QAAQ,CAAC,mBAAT,CAA6B,OAA7B,EAAsC,WAAtC,CAAhB;AACD,KAHD;AAID,GAPDA,EAOG,EAPHA;AASA,SAAO,GAAP;AACF","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\n\ninterface Props {\n  onTriggered: (e: Event) => void;\n  disableClick?: boolean;\n  disableKeys?: boolean;\n  allowAnyKey?: boolean;\n  triggerKeys?: string[];\n}\n\n/**\n * Hook used to detect clicks outside a component (or an escape key press). onTriggered function is triggered on `click` or escape `keyup` event.\n *\n */\nexport function useDetectClickOutside({\n  onTriggered,\n  disableClick,\n  disableKeys,\n  allowAnyKey,\n  triggerKeys,\n}: Props) {\n  const ref = useRef(null);\n\n  const keyListener = useCallback((e: KeyboardEvent) => {\n    if (allowAnyKey) {\n      onTriggered(e);\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered(e);\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered(e);\n      }\n    }\n  }, []);\n\n  const clickListener = useCallback(\n    (e: MouseEvent) => {\n      if (ref && ref.current) {\n        if (!(ref.current! as any).contains(e.target)) {\n          onTriggered?.(e);\n        }\n      }\n    },\n    [ref.current]\n  );\n\n  useEffect(() => {\n    !disableClick && document.addEventListener('click', clickListener);\n    !disableKeys && document.addEventListener('keyup', keyListener);\n    return () => {\n      !disableClick && document.removeEventListener('click', clickListener);\n      !disableKeys && document.removeEventListener('keyup', keyListener);\n    };\n  }, []);\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"script"}