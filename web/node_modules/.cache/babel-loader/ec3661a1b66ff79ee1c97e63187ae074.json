{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/paymentDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport cardValidator from \"card-validator\";\nimport moment from 'moment';\nimport { addNewCard, updateCard } from '../../../../redux/jobs/actions';\nimport { moengage, mixPanel } from '../../../../services/analyticsTools';\nimport { MoEConstants } from '../../../../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultValues = {\n  cardId: 'xxx',\n  number: '',\n  cardholderName: '',\n  date: '',\n  cvv: '',\n  fetched: false\n};\n\nconst PaymentDetails = props => {\n  _s();\n\n  const {\n    editItem\n  } = props;\n  const [stateData, setStateData] = useState(defaultValues);\n  const [isChange, setUpdateChange] = useState(false);\n  const [force, forceUpdate] = useState({});\n  const [errors, setErrors] = useState({\n    number: '',\n    cardholderName: '',\n    date: '',\n    cvv: '',\n    cardType: ''\n  });\n  useEffect(() => {\n    if (editItem) {\n      setStateData(editItem);\n    }\n  }, [editItem]);\n  useEffect(() => {\n    console.log({\n      isChange\n    });\n\n    if (Array.isArray(force)) {\n      forceUpdate({});\n    } else {\n      forceUpdate([]);\n    }\n  }, [isChange]);\n\n  const handleCheck = () => {\n    var _stateData$number, _stateData$date, _stateData$cvv;\n\n    if (!(stateData === null || stateData === void 0 ? void 0 : (_stateData$number = stateData.number) === null || _stateData$number === void 0 ? void 0 : _stateData$number.length) || !(stateData === null || stateData === void 0 ? void 0 : (_stateData$date = stateData.date) === null || _stateData$date === void 0 ? void 0 : _stateData$date.length) || !(stateData === null || stateData === void 0 ? void 0 : stateData.cardholderName.length) || !(stateData === null || stateData === void 0 ? void 0 : (_stateData$cvv = stateData.cvv) === null || _stateData$cvv === void 0 ? void 0 : _stateData$cvv.length)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleContinue = async () => {\n    var _stateData$date2;\n\n    let splitItem = [];\n\n    if (stateData === null || stateData === void 0 ? void 0 : (_stateData$date2 = stateData.date) === null || _stateData$date2 === void 0 ? void 0 : _stateData$date2.length) {\n      splitItem = stateData === null || stateData === void 0 ? void 0 : stateData.date.split('/');\n    }\n\n    let data = {\n      \"number\": stateData === null || stateData === void 0 ? void 0 : stateData.number,\n      \"exp_month\": splitItem[0],\n      \"exp_year\": `20${splitItem[1]}`,\n      \"cvc\": stateData === null || stateData === void 0 ? void 0 : stateData.cvv,\n      \"name\": stateData === null || stateData === void 0 ? void 0 : stateData.cardholderName\n    };\n\n    if (!(stateData === null || stateData === void 0 ? void 0 : stateData.fetched)) {\n      let result = await addNewCard(data);\n\n      if (result === null || result === void 0 ? void 0 : result.success) {\n        moengage.moE_SendEvent(MoEConstants.ADDED_PAYMENT_DETAILS, {\n          timeStamp: moengage.getCurrentTimeStamp()\n        });\n        mixPanel.mixP_SendEvent(MoEConstants.ADDED_PAYMENT_DETAILS, {\n          timeStamp: moengage.getCurrentTimeStamp()\n        });\n        props.backToScreen();\n      }\n    } else {\n      if (stateData === null || stateData === void 0 ? void 0 : stateData.cardId) {\n        data['cardId'] = stateData === null || stateData === void 0 ? void 0 : stateData.cardId;\n        delete data.cvc;\n        delete data.number;\n      }\n\n      let result = await updateCard(data);\n\n      if (result === null || result === void 0 ? void 0 : result.success) {\n        // props.setDetials(stateData)\n        props.backToScreen();\n      }\n    }\n  };\n\n  const checkIsValid = ({\n    name,\n    value\n  }) => {\n    if (name === 'name') {\n      if (!value.length) {\n        return 'Account Name is required';\n      } else {\n        if (value.length > 50) {\n          return 'Maximum 50 characters are allowed';\n        }\n      }\n    }\n\n    if (name === 'cardholderName') {\n      if (!value.length) {\n        return 'Cardholder Name is required';\n      } else {\n        if (value.length > 50) {\n          return 'Maximum 50 characters are allowed';\n        }\n      }\n    }\n\n    if (name === 'date') {\n      if (!value.length) {\n        return 'Expiration Date is required';\n      } else {\n        console.log({\n          check: checkValidExpiration(value),\n          value\n        });\n\n        if (!checkValidExpiration(value)) {\n          return `Please add a valid Expiration Date`;\n        }\n      }\n    }\n\n    if (name === 'number') {\n      console.log({\n        name,\n        value,\n        isValid: cardValidator.number(value).isValid\n      });\n\n      if (!value.length) {\n        return 'Card Number is required';\n      } else {\n        if (!cardValidator.number(value).isValid) {\n          return 'Please enter a valid Card Number';\n        }\n      }\n    }\n\n    if (name === 'cvv') {\n      if (!value.length) {\n        return 'CVV/CVC is required';\n      } else {\n        if ((value === null || value === void 0 ? void 0 : value.length) > 3) {\n          return 'Maximum 3 characters are allowed';\n        }\n      }\n    }\n\n    return '';\n  };\n\n  const setErrorsOnChange = ({\n    name,\n    value\n  }) => {\n    setErrors(prev => ({ ...prev,\n      [name]: checkIsValid({\n        name,\n        value\n      }) //value.length > 50 ? 'Maximum 50 characters are allowed.' : '',\n\n    }));\n  };\n\n  const checkValidExpiration = date => {\n    let currentDate = moment().format('MM/YY');\n\n    if (date.match('^(0[1-9]|1[0-2])\\/?([0-9]{2})$')) {\n      if (moment(date, 'MM/YY').isSameOrAfter(moment(currentDate, 'MM/YY'))) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  let isTrue = Object.values(stateData).includes('');\n  let isErrors = false;\n  let isError = handleCheck();\n  let errorValues = Object.values(errors);\n\n  if (errorValues === null || errorValues === void 0 ? void 0 : errorValues.length) {\n    let isHave = errorValues.find(item => item !== '');\n\n    if (isHave) {\n      isErrors = true;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex_row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_col_sm_8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relate\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back\",\n          onClick: () => {\n            props.backToScreen();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"xs_sub_title\",\n          children: props === null || props === void 0 ? void 0 : props.jobName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"edit_delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: \"Payment Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"commn_para\",\n        children: \"Enter your bank account details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form_label\",\n          children: 'Card Number'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text_field\",\n          children: (stateData === null || stateData === void 0 ? void 0 : stateData.fetched) ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Card Number\",\n            name: \"account_number\",\n            value: `XXXX XXXX XXXX ${stateData === null || stateData === void 0 ? void 0 : stateData.number}`,\n            onChange: e => {\n              setStateData(prev => ({ ...prev,\n                number: e.target.value\n              }));\n              setErrorsOnChange({\n                name: 'number',\n                value: e.target.value\n              });\n            },\n            style: {\n              border: '1px solid #dfe5ef',\n              padding: '14px 18px',\n              backgroundColor: '#dfe5ef70'\n            },\n            maxLength: 10,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Enter Card Number\",\n            name: \"account_number\",\n            value: stateData === null || stateData === void 0 ? void 0 : stateData.number,\n            onChange: e => {\n              setStateData(prev => ({ ...prev,\n                number: e.target.value\n              }));\n              setErrorsOnChange({\n                name: 'number',\n                value: e.target.value\n              });\n            },\n            maxLength: 10,\n            readOnly: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errors.number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form_label\",\n          children: 'Cardholder Name'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text_field\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Cardholder Name\",\n            name: \"cardholder_name\",\n            value: stateData === null || stateData === void 0 ? void 0 : stateData.cardholderName,\n            onChange: e => {\n              setStateData(prev => ({ ...prev,\n                cardholderName: e.target.value.trimLeft()\n              }));\n              setErrorsOnChange({\n                name: 'cardholderName',\n                value: e.target.value\n              });\n\n              if (stateData === null || stateData === void 0 ? void 0 : stateData.fetched) {\n                if ((editItem === null || editItem === void 0 ? void 0 : editItem.cardholderName) !== (stateData === null || stateData === void 0 ? void 0 : stateData.cardholderName)) {\n                  setUpdateChange(() => true);\n                } else {\n                  setUpdateChange(() => false);\n                }\n              }\n            } // maxLength={50}\n            ,\n            readOnly: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errors.cardholderName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form_label\",\n              children: 'Expiration Date'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text_field\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Enter Expiration Date\",\n                name: \"bsb_number\",\n                value: stateData === null || stateData === void 0 ? void 0 : stateData.date,\n                onChange: e => {\n                  setStateData(prev => ({ ...prev,\n                    date: e.target.value.trimLeft()\n                  }));\n                  setErrorsOnChange({\n                    name: 'date',\n                    value: e.target.value\n                  });\n\n                  if (stateData === null || stateData === void 0 ? void 0 : stateData.fetched) {\n                    if ((editItem === null || editItem === void 0 ? void 0 : editItem.date) !== (stateData === null || stateData === void 0 ? void 0 : stateData.date)) {\n                      setUpdateChange(() => true);\n                    } else {\n                      setUpdateChange(() => false);\n                    }\n                  }\n                },\n                maxLength: 7,\n                readOnly: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"error_msg\",\n              children: errors.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form_label\",\n              children: 'CVV/CVC'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text_field\",\n              children: (stateData === null || stateData === void 0 ? void 0 : stateData.fetched) ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Enter CVV/CVC\",\n                name: \"bsb_number\",\n                value: 'XXX',\n                onChange: e => {\n                  setStateData(prev => ({ ...prev,\n                    cvv: e.target.value\n                  }));\n                  setErrorsOnChange({\n                    name: 'cvv',\n                    value: e.target.value\n                  });\n                },\n                maxLength: 3,\n                style: {\n                  border: '1px solid #dfe5ef',\n                  padding: '14px 18px',\n                  backgroundColor: '#dfe5ef70'\n                },\n                readOnly: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 37\n              }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"Enter CVV/CVC\",\n                name: \"bsb_number\",\n                value: stateData === null || stateData === void 0 ? void 0 : stateData.cvv,\n                onChange: e => {\n                  setStateData(prev => ({ ...prev,\n                    cvv: e.target.value\n                  }));\n                  setErrorsOnChange({\n                    name: 'cvv',\n                    value: e.target.value\n                  });\n                },\n                maxLength: 3,\n                readOnly: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"error_msg\",\n              children: errors.cvv\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), (stateData === null || stateData === void 0 ? void 0 : stateData.fetched) ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleContinue();\n        },\n        className: `fill_btn full_btn btn-effect ${!isTrue && !isError && !isErrors && isChange ? '' : 'disable_btn'}`,\n        children: !(props === null || props === void 0 ? void 0 : props.hideExtra) ? 'Continue' : 'Update Card'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleContinue();\n        },\n        className: `fill_btn full_btn btn-effect ${!isTrue && !isError && !isErrors ? '' : 'disable_btn'}`,\n        children: !(props === null || props === void 0 ? void 0 : props.hideExtra) ? 'Continue' : 'Save Card'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PaymentDetails, \"zGvc/VGlTI463yXBc6QqL33G58E=\");\n\n_c = PaymentDetails;\nexport default PaymentDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentDetails\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/confirmAndPay/paymentDetails.tsx"],"names":["React","useEffect","useState","cardValidator","moment","addNewCard","updateCard","moengage","mixPanel","MoEConstants","defaultValues","cardId","number","cardholderName","date","cvv","fetched","PaymentDetails","props","editItem","stateData","setStateData","isChange","setUpdateChange","force","forceUpdate","errors","setErrors","cardType","console","log","Array","isArray","handleCheck","length","handleContinue","splitItem","split","data","result","success","moE_SendEvent","ADDED_PAYMENT_DETAILS","timeStamp","getCurrentTimeStamp","mixP_SendEvent","backToScreen","cvc","checkIsValid","name","value","check","checkValidExpiration","isValid","setErrorsOnChange","prev","currentDate","format","match","isSameOrAfter","isTrue","Object","values","includes","isErrors","isError","errorValues","isHave","find","item","jobName","e","target","border","padding","backgroundColor","trimLeft","hideExtra"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport cardValidator from \"card-validator\";\nimport moment from 'moment';\nimport { addNewCard, updateCard } from '../../../../redux/jobs/actions'\nimport { moengage, mixPanel } from '../../../../services/analyticsTools';\nimport { MoEConstants } from '../../../../utils/constants';\n\nconst defaultValues = {\n    cardId: 'xxx',\n    number: '',\n    cardholderName: '',\n    date: '',\n    cvv: '',\n    fetched: false\n}\n\nconst PaymentDetails = (props: any) => {\n    const { editItem } = props;\n    const [stateData, setStateData] = useState(defaultValues);\n    const [isChange, setUpdateChange] = useState(false);\n    const [force, forceUpdate] = useState({});\n    const [errors, setErrors] = useState({\n        number: '',\n        cardholderName: '',\n        date: '',\n        cvv: '',\n        cardType: '',\n    });\n\n    useEffect(() => {\n        if (editItem) {\n            setStateData(editItem);\n        }\n    }, [editItem])\n\n    useEffect(() => {\n        console.log({ isChange })\n        if (Array.isArray(force)) {\n            forceUpdate({})\n        } else {\n            forceUpdate([])\n        }\n    }, [isChange])\n\n    const handleCheck = () => {\n        if (\n            !stateData?.number?.length ||\n            !stateData?.date?.length ||\n            !stateData?.cardholderName.length ||\n            !stateData?.cvv?.length\n        ) {\n            return true\n        }\n\n        return false;\n    }\n\n    const handleContinue = async () => {\n        let splitItem: any = [];\n        if (stateData?.date?.length) {\n            splitItem = stateData?.date.split('/');\n        }\n\n        let data: any = {\n            \"number\": stateData?.number,\n            \"exp_month\": splitItem[0],\n            \"exp_year\": `20${splitItem[1]}`,\n            \"cvc\": stateData?.cvv,\n            \"name\": stateData?.cardholderName\n        }\n\n        if (!stateData?.fetched) {\n            let result = await addNewCard(data);\n            if (result?.success) {\n                moengage.moE_SendEvent(MoEConstants.ADDED_PAYMENT_DETAILS, { timeStamp: moengage.getCurrentTimeStamp() });\n                mixPanel.mixP_SendEvent(MoEConstants.ADDED_PAYMENT_DETAILS, { timeStamp: moengage.getCurrentTimeStamp() });\n                props.backToScreen();\n            }\n        } else {\n            if (stateData?.cardId) {\n                data['cardId'] = stateData?.cardId;\n                delete data.cvc;\n                delete data.number;\n            }\n            let result = await updateCard(data);\n            if (result?.success) {\n                // props.setDetials(stateData)\n                props.backToScreen();\n            }\n        }\n    }\n\n    const checkIsValid = ({ name, value }: any) => {\n        if (name === 'name') {\n            if (!value.length) {\n                return 'Account Name is required';\n            } else {\n                if (value.length > 50) {\n                    return 'Maximum 50 characters are allowed';\n                }\n            }\n        }\n\n        if (name === 'cardholderName') {\n            if (!value.length) {\n                return 'Cardholder Name is required';\n            } else {\n                if (value.length > 50) {\n                    return 'Maximum 50 characters are allowed';\n                }\n            }\n        }\n\n        if (name === 'date') {\n            if (!value.length) {\n                return 'Expiration Date is required';\n            } else {\n                console.log({\n                    check: checkValidExpiration(value),\n                    value\n                })\n                if (!checkValidExpiration(value)) {\n                    return `Please add a valid Expiration Date`;\n                }\n            }\n        }\n\n        if (name === 'number') {\n            console.log({\n                name,\n                value,\n                isValid: cardValidator.number(value).isValid\n            })\n            if (!value.length) {\n                return 'Card Number is required';\n            } else {\n                if (!cardValidator.number(value).isValid) {\n                    return 'Please enter a valid Card Number'\n                }\n            }\n        }\n\n        if (name === 'cvv') {\n            if (!value.length) {\n                return 'CVV/CVC is required';\n            } else {\n                if (value?.length > 3) {\n                    return 'Maximum 3 characters are allowed';\n                }\n            }\n        }\n\n        return ''\n\n    }\n\n    const setErrorsOnChange = ({ name, value }: any) => {\n        setErrors((prev: any) => ({\n            ...prev,\n            [name]: checkIsValid({ name, value }) //value.length > 50 ? 'Maximum 50 characters are allowed.' : '',\n        }));\n    }\n\n\n    const checkValidExpiration = (date: any) => {\n        let currentDate = moment().format('MM/YY');\n        if ((date).match('^(0[1-9]|1[0-2])\\/?([0-9]{2})$')) {\n            if (moment(date, 'MM/YY').isSameOrAfter(moment(currentDate, 'MM/YY'))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    let isTrue = Object.values(stateData).includes('');\n    let isErrors: any = false;\n    let isError = handleCheck();\n\n    let errorValues = Object.values(errors);\n    if (errorValues?.length) {\n        let isHave = errorValues.find((item: any) => item !== '');\n        if (isHave) {\n            isErrors = true;\n        }\n    }\n\n    return (\n        <div className=\"flex_row\">\n            <div className=\"flex_col_sm_8\">\n                <div className=\"relate\">\n                    <button className=\"back\" onClick={() => { props.backToScreen() }}></button>\n                    <span className=\"xs_sub_title\">{props?.jobName}</span>\n                    <>\n                        <div className=\"edit_delete\">\n                        </div>\n                    </>\n                </div>\n                <span className=\"sub_title\">Payment Details</span>\n                <p className=\"commn_para\">Enter your bank account details</p>\n\n                <div className=\"form_field\">\n                    <label className=\"form_label\">\n                        {'Card Number'}\n                    </label>\n                    <div className=\"text_field\">\n                        {stateData?.fetched ?\n                            <input\n                                type=\"text\"\n                                placeholder=\"Enter Card Number\"\n                                name=\"account_number\"\n                                value={`XXXX XXXX XXXX ${stateData?.number}`}\n                                onChange={(e: any) => {\n                                    setStateData((prev: any) => ({ ...prev, number: e.target.value }));\n                                    setErrorsOnChange({ name: 'number', value: e.target.value });\n                                }}\n                                style={{ border: '1px solid #dfe5ef', padding: '14px 18px', backgroundColor: '#dfe5ef70' }}\n                                maxLength={10}\n                                readOnly={true}\n                            />\n                            :\n                            <input\n                                type=\"number\"\n                                placeholder=\"Enter Card Number\"\n                                name=\"account_number\"\n                                value={stateData?.number}\n                                onChange={(e: any) => {\n                                    setStateData((prev: any) => ({ ...prev, number: e.target.value }));\n                                    setErrorsOnChange({ name: 'number', value: e.target.value });\n                                }}\n                                maxLength={10}\n                                readOnly={false}\n                            />\n                        }\n\n\n                    </div>\n                    <span className=\"error_msg\">{errors.number}</span>\n                </div>\n\n                <div className=\"form_field\">\n                    <label className=\"form_label\">\n                        {'Cardholder Name'}\n                    </label>\n                    <div className=\"text_field\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter Cardholder Name\"\n                            name=\"cardholder_name\"\n                            value={stateData?.cardholderName}\n                            onChange={(e: any) => {\n                                setStateData((prev: any) => ({ ...prev, cardholderName: (e.target.value).trimLeft() }));\n                                setErrorsOnChange({ name: 'cardholderName', value: e.target.value });\n                                if (stateData?.fetched) {\n                                    if (editItem?.cardholderName !== stateData?.cardholderName) {\n                                        setUpdateChange(() => true);\n                                    } else {\n                                        setUpdateChange(() => false);\n                                    }\n                                }\n                            }}\n                            // maxLength={50}\n                            readOnly={false}\n                        />\n                    </div>\n                    <span className=\"error_msg\">\n                        {errors.cardholderName}\n                    </span>\n                </div>\n\n                <div className=\"flex_row\">\n                    <div className=\"flex_col_sm_6\">\n                        <div className=\"form_field\">\n                            <label className=\"form_label\">\n                                {'Expiration Date'}\n                            </label>\n                            <div className=\"text_field\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Enter Expiration Date\"\n                                    name=\"bsb_number\"\n                                    value={stateData?.date}\n                                    onChange={(e: any) => {\n                                        setStateData((prev: any) => ({ ...prev, date: (e.target.value).trimLeft() }))\n                                        setErrorsOnChange({ name: 'date', value: e.target.value });\n                                        if (stateData?.fetched) {\n                                            if (editItem?.date !== stateData?.date) {\n                                                setUpdateChange(() => true);\n                                            } else {\n                                                setUpdateChange(() => false);\n                                            }\n                                        }\n                                    }}\n                                    maxLength={7}\n                                    readOnly={false}\n                                />\n                            </div>\n                            <span className=\"error_msg\">\n                                {errors.date}\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"flex_col_sm_6\">\n                        <div className=\"form_field\">\n                            <label className=\"form_label\">\n                                {'CVV/CVC'}\n                            </label>\n                            <div className=\"text_field\">\n                                {stateData?.fetched ?\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Enter CVV/CVC\"\n                                        name=\"bsb_number\"\n                                        value={'XXX'}\n                                        onChange={(e: any) => {\n                                            setStateData((prev: any) => ({ ...prev, cvv: e.target.value }));\n                                            setErrorsOnChange({ name: 'cvv', value: e.target.value });\n                                        }}\n                                        maxLength={3}\n                                        style={{ border: '1px solid #dfe5ef', padding: '14px 18px', backgroundColor: '#dfe5ef70' }}\n                                        readOnly={true}\n                                    />\n                                    :\n                                    <input\n                                        type=\"number\"\n                                        placeholder=\"Enter CVV/CVC\"\n                                        name=\"bsb_number\"\n                                        value={stateData?.cvv}\n                                        onChange={(e: any) => {\n                                            setStateData((prev: any) => ({ ...prev, cvv: e.target.value }));\n                                            setErrorsOnChange({ name: 'cvv', value: e.target.value });\n                                        }}\n                                        maxLength={3}\n                                        readOnly={false}\n                                    />\n                                }\n                            </div>\n                            <span className=\"error_msg\">{errors.cvv}</span>\n                        </div>\n                    </div>\n                </div>\n                {stateData?.fetched ? (\n                    <button\n                        onClick={() => { handleContinue() }}\n                        className={`fill_btn full_btn btn-effect ${!isTrue && !isError && !isErrors && isChange ? '' : 'disable_btn'}`}>\n                        {!props?.hideExtra ? 'Continue' : 'Update Card'}\n                    </button>\n                ) : (\n                    <button\n                        onClick={() => { handleContinue() }}\n                        className={`fill_btn full_btn btn-effect ${!isTrue && !isError && !isErrors ? '' : 'disable_btn'}`}>\n                        {!props?.hideExtra ? 'Continue' : 'Save Card'}\n                    </button>\n                )}\n            </div>\n        </div >\n    )\n}\n\nexport default PaymentDetails;"]},"metadata":{},"sourceType":"module"}