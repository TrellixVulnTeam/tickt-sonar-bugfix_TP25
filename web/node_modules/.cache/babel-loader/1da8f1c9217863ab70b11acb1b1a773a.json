{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/needApproval.tsx\";\nimport React, { Component } from 'react';\nimport approved from '../../../assets/images/approved.png';\nimport noDataFound from '../../../assets/images/no-search-data.png';\nimport jobTypePlaceholder from '../../../assets/images/job-type-placeholder.png';\nimport waiting from '../../../assets/images/exclamation.png';\nimport MarkMilestones from './markMilestones';\nimport { renderTime } from '../../../utils/common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NeedApproval extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.redirectToInfo = ({\n      jobId,\n      status\n    }) => {\n      let props = this.props;\n\n      if ((jobId === null || jobId === void 0 ? void 0 : jobId.length) && (status === null || status === void 0 ? void 0 : status.length)) {\n        // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&activeType=${props?.activeType || 'approval'}`)\n        let urlEncode = `?jobId=${jobId}&status=${status}&activeType=${(props === null || props === void 0 ? void 0 : props.activeType) || 'approval'}`;\n        this.props.history.push(`/job-detail?${urlEncode}`);\n      }\n    };\n\n    this.setToggle = () => this.setState({\n      isToggleApplicants: !this.state.isToggleApplicants\n    });\n\n    this.resetStateLocal = () => {\n      let activeType = this.props.activeType;\n      this.setState({\n        localState: false\n      }, () => {\n        this.props.setJobLabel(activeType);\n      });\n    };\n\n    this.state = {\n      isToggleApplicants: false,\n      selectedIndex: '',\n      localState: '',\n      isRender: false\n    };\n  }\n\n  componentDidUpdate() {\n    let nextProps = this.props;\n    let isRender = this.state.isRender;\n\n    if ((nextProps === null || nextProps === void 0 ? void 0 : nextProps.isLoading) === false) {\n      if (!isRender) {\n        this.setState({\n          isRender: true\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      setJobLabel,\n      dataItems,\n      applicantsList,\n      jobType,\n      isLoading\n    } = this.props;\n    let listData = dataItems;\n    let {\n      isToggleApplicants,\n      localState,\n      selectedIndex,\n      isRender\n    } = this.state;\n    console.log({\n      applicantsList,\n      isToggleApplicants\n    });\n\n    if (localState && selectedIndex !== null) {\n      return /*#__PURE__*/_jsxDEV(MarkMilestones, {\n        resetStateLocal: this.resetStateLocal,\n        selectedIndex: selectedIndex,\n        listData: listData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (!isRender) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: [jobType.charAt(0).toUpperCase() + jobType.slice(1), \" Jobs\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row tradies_row\",\n        children: (listData === null || listData === void 0 ? void 0 : listData.length) ? listData.map(({\n          amount,\n          durations,\n          jobId,\n          jobName,\n          fromDate,\n          toDate,\n          milestoneNumber,\n          specializationId,\n          specializationName,\n          locationName,\n          status,\n          timeLeft,\n          total,\n          totalmem,\n          totalMilestones,\n          tradieListData,\n          tradeName,\n          tradieId,\n          location,\n          tradeSelectedUrl,\n          tradieImage\n        }, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tradie_card\",\n            \"data-aos\": \"fade-in\",\n            \"data-aos-delay\": \"250\",\n            \"data-aos-duration\": \"1000\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => {\n                this.setState({\n                  localState: true,\n                  selectedIndex: index\n                }); // this.redirectToInfo({ jobId, status }) \n              },\n              className: \"more_detail circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user_wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                className: \"u_img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: tradeSelectedUrl || jobTypePlaceholder,\n                  alt: \"traide-img\",\n                  onError: e => {\n                    var _e$target, _e$target2;\n\n                    if (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.onerror) {\n                      e.target.onerror = null;\n                    }\n\n                    if (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.src) {\n                      e.target.src = jobTypePlaceholder;\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"details\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: tradeName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"commn_para\",\n                  children: jobName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job_info\",\n              children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon dollar\",\n                  children: amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: total\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"icon calendar\",\n                  children: renderTime(fromDate, toDate)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: timeLeft\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job_progress_wrap\",\n              id: \"scroll-progress-bar\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress_wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"completed-digit\",\n                  id: \"digit-progress\",\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: `Job Milestones ${milestoneNumber} `\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 49\n                  }, this), `of ${totalMilestones}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"approval_info\",\n                  children: [status === \"APPROVED\" && /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: approved,\n                    alt: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 75\n                  }, this), status === \"NEEDS APPROVAL\" && /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: waiting,\n                    alt: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 81\n                  }, this), status === 'NEED APPROVAL' && /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: waiting,\n                    alt: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 208,\n                    columnNumber: 80\n                  }, this), status]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"progress_bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"done_progress\",\n                    id: \"progress-bar\",\n                    type: \"range\",\n                    min: \"0\",\n                    value: milestoneNumber / totalMilestones * 100\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 41\n              }, this), (status === 'NEED APPROVAL' || status === \"NEEDS APPROVAL\") && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  this.setState({\n                    localState: true,\n                    selectedIndex: index\n                  });\n                },\n                className: \"fill_grey_btn full_btn btn-effect\",\n                children: 'Approve'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this)) : !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no_record  m-t-vh\",\n          children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n            className: \"no_img\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: noDataFound,\n              alt: \"data not found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: 'No Data Found'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default NeedApproval;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/needApproval.tsx"],"names":["React","Component","approved","noDataFound","jobTypePlaceholder","waiting","MarkMilestones","renderTime","NeedApproval","constructor","props","redirectToInfo","jobId","status","length","urlEncode","activeType","history","push","setToggle","setState","isToggleApplicants","state","resetStateLocal","localState","setJobLabel","selectedIndex","isRender","componentDidUpdate","nextProps","isLoading","render","dataItems","applicantsList","jobType","listData","console","log","charAt","toUpperCase","slice","map","amount","durations","jobName","fromDate","toDate","milestoneNumber","specializationId","specializationName","locationName","timeLeft","total","totalmem","totalMilestones","tradieListData","tradeName","tradieId","location","tradeSelectedUrl","tradieImage","index","e","target","onerror","src"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport dummy from '../../../assets/images/u_placeholder.jpg';\nimport approved from '../../../assets/images/approved.png';\nimport ApplicantsList from './applicantsList';\nimport { withRouter } from 'react-router-dom'\nimport noDataFound from '../../../assets/images/no-search-data.png';\nimport jobTypePlaceholder from '../../../assets/images/job-type-placeholder.png';\nimport waiting from '../../../assets/images/exclamation.png';\nimport moment from 'moment';\nimport MarkMilestones from './markMilestones';\n\nimport { renderTime } from '../../../utils/common'\n\ninterface Active {\n    amount: any,\n    durations: any,\n    jobId: any,\n    jobName: any,\n    fromDate: any,\n    toDate: any,\n    milestoneNumber: any,\n    specializationId: any,\n    specializationName: any,\n    status: any,\n    timeLeft: any,\n    total: any,\n    totalmem: any,\n    location: any,\n    locationName: any,\n    totalMilestones: any,\n    tradieListData: any,\n    tradeName: any,\n    tradieId: any,\n    tradeSelectedUrl: any,\n    tradieImage: any,\n\n}\ninterface State {\n    isToggleApplicants: boolean,\n    selectedIndex: any,\n    localState: any,\n    isRender: boolean\n}\n\ninterface Props {\n    setJobLabel: any,\n    dataItems: any,\n    applicantsList?: any,\n    jobType: any,\n    history?: any,\n    isLoading: any,\n    activeType: any,\n}\n\nclass NeedApproval extends Component<Props, State> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isToggleApplicants: false,\n            selectedIndex: '',\n            localState: '',\n            isRender: false\n        }\n    }\n\n    componentDidUpdate() {\n        let nextProps = this.props;\n        let isRender = this.state.isRender;\n        if (nextProps?.isLoading === false) {\n            if (!isRender) {\n                this.setState({ isRender: true });\n            }\n        }\n    }\n\n    redirectToInfo = ({ jobId, status }: any) => {\n        let props: any = this.props;\n        if (jobId?.length && status?.length) {\n            // let urlEncode: any = window.btoa(`?jobId=${jobId}&status=${status}&activeType=${props?.activeType || 'approval'}`)\n            let urlEncode: any = `?jobId=${jobId}&status=${status}&activeType=${props?.activeType || 'approval'}`\n            this.props.history.push(`/job-detail?${urlEncode}`);\n        }\n    }\n\n    setToggle = () => this.setState({ isToggleApplicants: !this.state.isToggleApplicants })\n\n    resetStateLocal = () => {\n        let activeType = this.props.activeType;\n        this.setState({\n            localState: false,\n        }, () => {\n            this.props.setJobLabel(activeType);\n        })\n    }\n\n    render() {\n        const { setJobLabel, dataItems, applicantsList, jobType, isLoading } = this.props;\n        let listData: any = dataItems\n        let { isToggleApplicants, localState, selectedIndex, isRender } = this.state;\n        console.log({ applicantsList, isToggleApplicants })\n\n        if (localState && selectedIndex !== null) {\n            return (\n                <MarkMilestones\n                    resetStateLocal={this.resetStateLocal}\n                    selectedIndex={selectedIndex}\n                    listData={listData}\n                />)\n        }\n\n\n        if (!isRender) {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <span className=\"sub_title\">{jobType.charAt(0).toUpperCase() + jobType.slice(1)} Jobs</span>\n                <div className=\"flex_row tradies_row\">\n                    {listData?.length ?\n                        listData.map(({\n                            amount,\n                            durations,\n                            jobId,\n                            jobName,\n                            fromDate,\n                            toDate,\n                            milestoneNumber,\n                            specializationId,\n                            specializationName,\n                            locationName,\n                            status,\n                            timeLeft,\n                            total,\n                            totalmem,\n                            totalMilestones,\n                            tradieListData,\n                            tradeName,\n                            tradieId,\n                            location,\n                            tradeSelectedUrl,\n                            tradieImage,\n                        }: Active, index: number) => (\n                            <div className=\"flex_col_sm_6\">\n                                <div className=\"tradie_card\" data-aos=\"fade-in\" data-aos-delay=\"250\" data-aos-duration=\"1000\">\n                                    <span\n                                        onClick={() => {\n                                            this.setState({\n                                                localState: true,\n                                                selectedIndex: index\n                                            })\n                                            // this.redirectToInfo({ jobId, status }) \n                                        }}\n                                        className=\"more_detail circle\">\n                                    </span>\n                                    <div className=\"user_wrap\">\n                                        <figure className=\"u_img\">\n                                            <img\n                                                src={tradeSelectedUrl || jobTypePlaceholder}\n                                                alt=\"traide-img\"\n                                                onError={(e: any) => {\n                                                    if (e?.target?.onerror) {\n                                                        e.target.onerror = null;\n                                                    }\n                                                    if (e?.target?.src) {\n                                                        e.target.src = jobTypePlaceholder;\n                                                    }\n                                                }}\n                                            />\n                                        </figure>\n                                        <div className=\"details\">\n                                            <span className=\"name\">{tradeName}</span>\n                                            <p className=\"commn_para\">{jobName}</p>\n                                        </div>\n                                    </div>\n                                    <div className=\"job_info\">\n                                        <ul>\n                                            <li className=\"icon dollar\">{amount}</li>\n                                            <li className=\"\">\n                                                <span>\n                                                    {total}\n                                                </span>\n                                            </li>\n                                            <li className=\"icon calendar\">\n                                                {renderTime(fromDate, toDate)}\n                                            </li>\n                                            <li className=\"\">\n                                                <span>\n                                                    {timeLeft}\n                                                </span>\n                                            </li>\n                                            {/* <li className=\"icon clock\">\n                                                \n                                            </li>\n                                            <li className=\"icon dollar\">{amount}</li>\n                                            <li className=\"icon location line-1\">{location}</li>\n                                            <li className=\"icon calendar\">{durations}</li> */}\n                                        </ul>\n                                    </div>\n                                    <div className=\"job_progress_wrap\" id=\"scroll-progress-bar\">\n                                        <div className=\"progress_wrapper\">\n                                            <span className=\"completed-digit\" id=\"digit-progress\">\n                                                <b>{`Job Milestones ${milestoneNumber} `}</b>{`of ${totalMilestones}`}\n                                            </span>\n                                            <span className=\"approval_info\">\n                                                {status === \"APPROVED\" && <img src={approved} alt=\"icon\" />}\n                                                {status === \"NEEDS APPROVAL\" && <img src={waiting} alt=\"icon\" />}\n                                                {status === 'NEED APPROVAL' && <img src={waiting} alt=\"icon\" />}\n                                                {status}\n                                            </span>\n                                            <span className=\"progress_bar\">\n                                                <input\n                                                    className=\"done_progress\"\n                                                    id=\"progress-bar\"\n                                                    type=\"range\"\n                                                    min=\"0\"\n                                                    value={milestoneNumber / totalMilestones * 100}\n                                                />\n                                            </span>\n                                        </div>\n                                        {(status === 'NEED APPROVAL' || status === \"NEEDS APPROVAL\") && (\n                                            <button\n                                                onClick={() => {\n                                                    this.setState({\n                                                        localState: true,\n                                                        selectedIndex: index\n                                                    })\n                                                }}\n                                                className=\"fill_grey_btn full_btn btn-effect\">\n                                                {'Approve'}\n                                            </button>\n                                        )}\n                                    </div>\n                                    {/* <div className=\"job_progress_wrap\" id=\"scroll-progress-bar\">\n                                        <div className=\"progress_wrapper\">\n                                            <span className=\"completed-digit\" id=\"digit-progress\">\n                                                <b>{`Job Milestones ${milestoneNumber} `}</b>{`of ${totalMilestones}`}\n                                            </span>\n                                            <span className=\"approval_info\">\n                                                {console.log({ status })}\n                                                {status === \"Approved\" && <img src={approved} alt=\"icon\" />}\n                                                {status === \"NEED APPROVAL\" && <img src={waiting} alt=\"icon\" />}\n                                                {status}\n                                            </span>\n                                            <div className=\"progress_bar\">\n                                                <input\n                                                    className=\"done_progress\"\n                                                    id=\"progress-bar\"\n                                                    type=\"range\"\n                                                    min=\"0\"\n                                                    value={milestoneNumber / totalMilestones * 100}\n                                                />\n                                                {status === \"NEEDS APPROVAL\" && (\n                                                    <button\n                                                        onClick={() => {\n                                                            this.setState({\n                                                                localState: true,\n                                                                selectedIndex: index\n                                                            })\n                                                        }}\n                                                        className=\"fill_grey_btn full_btn btn-effect\">\n                                                        {'Approve'}\n                                                    </button>\n                                                )}\n                                            </div>\n                                        </div>\n                                        {tradieId?.length ? (\n                                            <button\n                                                onClick={() => {\n                                                    this.setToggle();\n                                                    setJobLabel('applicantList', jobId, 1, specializationId);\n                                                }}\n                                                className=\"fill_grey_btn full_btn btn-effect\">\n                                                {'Applications'}\n                                            </button>\n                                        ) : null}\n                                    </div> */}\n\n                                </div>\n                            </div>\n                        )) : !isLoading && (\n                            <div className=\"no_record  m-t-vh\">\n                                <figure className=\"no_img\">\n                                    <img src={noDataFound} alt=\"data not found\" />\n                                </figure>\n                                <span>{'No Data Found'}</span>\n                            </div>\n                        )}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default NeedApproval;"]},"metadata":{},"sourceType":"module"}