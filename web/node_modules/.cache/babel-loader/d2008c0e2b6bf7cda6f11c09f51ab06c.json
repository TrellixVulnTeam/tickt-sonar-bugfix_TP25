{"ast":null,"code":"import NetworkOps from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport { setShowToast, setLoading } from '../common/actions';\nimport storageService from '../../utils/storageService';\nexport const quoteByJobId = async data => {\n  setLoading(true);\n  let url = '';\n  let isUserType = storageService.getItem('userType') === 1 ? true : false;\n  console.log({\n    data,\n    isUserType\n  });\n\n  if (isUserType) {\n    url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&tradieId=${data.tradieId}`;\n  } else {\n    var _data$tradieId;\n\n    if ((_data$tradieId = data.tradieId) === null || _data$tradieId === void 0 ? void 0 : _data$tradieId.length) {\n      url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&tradieId=${data.tradieId}`;\n    } else {\n      url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&sort=${data.sortBy}`;\n    }\n  }\n\n  const response = await NetworkOps.get(url);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response === null || response === void 0 ? void 0 : response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const addQuote = async data => {\n  setLoading(true);\n  const response = await NetworkOps.postToJson(`${Urls.quote}addQuote`, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const addItem = async data => {\n  setLoading(true);\n  const response = await NetworkOps.postToJson(`${Urls.quote}addItem`, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true,\n      data: response === null || response === void 0 ? void 0 : response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const deleteItem = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(`${Urls.quote}deleteItem`, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true,\n      data: response === null || response === void 0 ? void 0 : response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const updateItem = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(`${Urls.quote}updateItem`, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const getAcceptDeclineTradie = async data => {\n  const response = await NetworkOps.putToJson(Urls.acceptDeclineRequest, data);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response === null || response === void 0 ? void 0 : response.result,\n      msg: response.message\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const closeQuoteJob = async data => {\n  const response = await NetworkOps.putToJson(`${Urls.job}closeQuoteJob`, data);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true,\n      data: response === null || response === void 0 ? void 0 : response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n}; //PUT /job/closeQuoteJob","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/redux/quotes/actions.ts"],"names":["NetworkOps","Urls","setShowToast","setLoading","storageService","quoteByJobId","data","url","isUserType","getItem","console","log","quote","jobId","tradieId","length","sortBy","response","get","status_code","success","result","message","addQuote","postToJson","addItem","deleteItem","putToJson","updateItem","getAcceptDeclineTradie","acceptDeclineRequest","msg","closeQuoteJob","job"],"mappings":"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","sourcesContent":["import NetworkOps, { FetchResponse } from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport { setShowToast, setLoading } from '../common/actions';\nimport storageService from '../../utils/storageService';\n\n\nexport const quoteByJobId = async (data: any) => {\n    setLoading(true);\n    let url = '';\n    let isUserType = storageService.getItem('userType') === 1 ? true : false;\n    console.log({data, isUserType})\n    if (isUserType) {\n        url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&tradieId=${data.tradieId}`;\n    } else {\n        \n        if (data.tradieId?.length) {\n            url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&tradieId=${data.tradieId}`;\n        } else {\n            url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&sort=${data.sortBy}`\n        }\n    }\n    const response: FetchResponse = await NetworkOps.get(url);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, data: response?.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const addQuote = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.postToJson(`${Urls.quote}addQuote`, data);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const addItem = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.postToJson(`${Urls.quote}addItem`, data);\n    setLoading(false);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true, data: response?.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const deleteItem = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.putToJson(`${Urls.quote}deleteItem`, data);\n    setLoading(false);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true, data: response?.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const updateItem = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.putToJson(`${Urls.quote}updateItem`, data);\n    setLoading(false);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const getAcceptDeclineTradie = async (data: any) => {\n    const response: FetchResponse = await NetworkOps.putToJson(Urls.acceptDeclineRequest, data);\n    if (response.status_code === 200) {\n        return { success: true, data: response?.result, msg: response.message };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\n\nexport const closeQuoteJob = async (data: any) => {\n    const response: FetchResponse = await NetworkOps.putToJson(`${Urls.job}closeQuoteJob`, data);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true, data: response?.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\n\n//PUT /job/closeQuoteJob"]},"metadata":{},"sourceType":"module"}