{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/forgetPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createPassword } from '../../redux/auth/actions';\nimport CreatePassword from './components/createPassword';\nimport SuccessPage from './components/successPage';\nimport ResetPassword from './components/resetPassword';\nimport AuthParent from '../../common/auth/authParent';\nimport VerifyEmail from './components/EmailVerification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DATA = [{\n  title: 'Reset Password'\n}, {\n  title: 'Verify your email'\n}, {\n  title: 'Create password'\n}];\n\nconst ForgetPassword = props => {\n  _s();\n\n  const [steps, setSteps] = useState(1);\n  const [loginData, setLoginData] = useState({\n    mobileNumber: '',\n    email: ''\n  });\n\n  const updateSteps = (step, newData) => {\n    setSteps(step);\n\n    if (newData) {\n      setLoginData(prevData => ({ ...prevData,\n        ...newData\n      }));\n    }\n  };\n\n  const backButtonHandler = () => {\n    let minStep = 1;\n\n    if (steps === 1) {\n      var _props$history;\n\n      if (props.showModal) {\n        props.modalUpdateSteps(0);\n        return;\n      }\n\n      return props === null || props === void 0 ? void 0 : (_props$history = props.history) === null || _props$history === void 0 ? void 0 : _props$history.push('/login');\n    }\n\n    if (steps === 3) {\n      minStep = 2;\n    }\n\n    setSteps(steps - minStep);\n  };\n\n  const onResetPassword = async password => {\n    const data = { ...loginData,\n      ...password\n    };\n    console.log({\n      data\n    });\n    delete data.mobileNumber;\n    const res = await createPassword(data);\n\n    if (res.success) {\n      setSteps(4);\n    }\n  };\n\n  console.log({\n    loginData\n  });\n\n  const renderPages = () => {\n    switch (steps) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(ResetPassword, {\n          updateSteps: updateSteps,\n          history: props.history,\n          step: steps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 24\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(VerifyEmail, {\n          updateSteps: updateSteps,\n          history: props.history,\n          step: steps,\n          email: loginData.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 24\n        }, this);\n\n      case 3:\n        return /*#__PURE__*/_jsxDEV(CreatePassword, {\n          onResetPassword: onResetPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 24\n        }, this);\n\n      case 4:\n        return /*#__PURE__*/_jsxDEV(SuccessPage, {\n          history: props.history,\n          showModal: props.showModal,\n          setShowModal: props.setShowModal,\n          modalUpdateSteps: props.modalUpdateSteps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return null;\n    }\n  };\n\n  const header = DATA[steps - 1];\n  return header ? /*#__PURE__*/_jsxDEV(AuthParent, {\n    sliderType: \"login\",\n    backButtonHandler: backButtonHandler,\n    hideProgres: true,\n    header: header,\n    steps: steps,\n    history: props.history,\n    showModal: props.showModal,\n    setShowModal: props.setShowModal,\n    modalUpdateSteps: props.modalUpdateSteps,\n    children: renderPages()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this) : renderPages();\n};\n\n_s(ForgetPassword, \"Jon82el07lYN/7JWdIUU+8K2Sk4=\");\n\n_c = ForgetPassword;\nexport default ForgetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgetPassword\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/forgetPassword.tsx"],"names":["React","useState","createPassword","CreatePassword","SuccessPage","ResetPassword","AuthParent","VerifyEmail","DATA","title","ForgetPassword","props","steps","setSteps","loginData","setLoginData","mobileNumber","email","updateSteps","step","newData","prevData","backButtonHandler","minStep","showModal","modalUpdateSteps","history","push","onResetPassword","password","data","console","log","res","success","renderPages","setShowModal","header"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { createPassword } from '../../redux/auth/actions';\nimport CreatePassword from './components/createPassword';\nimport SuccessPage from './components/successPage';\nimport ResetPassword from './components/resetPassword';\nimport AuthParent from '../../common/auth/authParent';\nimport VerifyEmail from './components/EmailVerification';\n\ninterface Propstype {\n    history: any,\n    showModal?: boolean,\n    setShowModal: (data: any) => void,\n    updateSteps?: (data: any) => void,\n    modalUpdateSteps: (data: any) => void,\n}\n\nconst DATA = [\n    { title: 'Reset Password' },\n    { title: 'Verify your email' },\n    { title: 'Create password' },\n]\n\nconst ForgetPassword = (props: Propstype) => {\n    const [steps, setSteps] = useState(1);\n    const [loginData, setLoginData] = useState({\n        mobileNumber: '',\n        email:''\n    })\n\n    const updateSteps = (step: number, newData?: any) => {\n        setSteps(step);\n        if (newData) {\n            setLoginData((prevData: any) => ({ ...prevData, ...newData }))\n        }\n    }\n\n    const backButtonHandler = () => {\n        let minStep = 1;\n        if (steps === 1) {\n            if(props.showModal){\n                props.modalUpdateSteps(0);\n                return;\n            }\n            return props?.history?.push('/login')\n        }\n        if (steps === 3) {\n            minStep = 2\n        }\n        setSteps(steps - minStep)\n    }\n\n    const onResetPassword = async (password: any) => {\n        const data = { ...loginData, ...password }\n        console.log({data})\n        delete data.mobileNumber;\n        const res = await createPassword(data);\n        if (res.success) {\n            setSteps(4);\n        }\n    }\n    console.log({loginData})\n    const renderPages = () => {\n        switch (steps) {\n            case 1:\n                return <ResetPassword updateSteps={updateSteps} history={props.history} step={steps} />\n            case 2:\n                return <VerifyEmail updateSteps={updateSteps} history={props.history} step={steps} email={loginData.email} />\n            case 3:\n                return <CreatePassword onResetPassword={onResetPassword} />\n            case 4:\n                return <SuccessPage history={props.history} showModal={props.showModal} setShowModal={props.setShowModal} modalUpdateSteps={props.modalUpdateSteps} />\n            default: return null\n        }\n    }\n\n    const header = DATA[steps - 1];\n\n    return header ? (\n        <AuthParent sliderType='login' backButtonHandler={backButtonHandler} hideProgres header={header} steps={steps} history={props.history} showModal={props.showModal} setShowModal={props.setShowModal} modalUpdateSteps={props.modalUpdateSteps}>{renderPages()}</AuthParent>\n    ) : renderPages()\n}\n\nexport default ForgetPassword"]},"metadata":{},"sourceType":"module"}