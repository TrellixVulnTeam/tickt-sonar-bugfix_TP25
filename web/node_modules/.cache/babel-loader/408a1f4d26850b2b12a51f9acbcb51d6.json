{"ast":null,"code":"import*as actionTypes from'./constants';import{store}from'../../App';export var setLoading=function setLoading(isLoading){store.dispatch({type:actionTypes.SET_LOADING,payload:isLoading});};export var setSkeletonLoading=function setSkeletonLoading(isSkeletonLoading){store.dispatch({type:actionTypes.SET_SKELETON_LOADING,payload:isSkeletonLoading});};// showToast - argument remove if not needed\nexport var setShowToast=function setShowToast(showToast){var toastMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;var toastType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;store.dispatch({type:actionTypes.SHOW_HIDE_TOAST,showToast:showToast,toastType:toastType,toastMessage:toastMessage});};export var setShowNotification=function setShowNotification(showNotification){var data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;store.dispatch({type:actionTypes.SHOW_HIDE_NOTIFICATION,showNotification:showNotification,data:data});};","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/redux/common/actions.ts"],"names":["actionTypes","store","setLoading","isLoading","dispatch","type","SET_LOADING","payload","setSkeletonLoading","isSkeletonLoading","SET_SKELETON_LOADING","setShowToast","showToast","toastMessage","undefined","toastType","SHOW_HIDE_TOAST","setShowNotification","showNotification","data","SHOW_HIDE_NOTIFICATION"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,aAA7B,CACA,OAAQC,KAAR,KAAoB,WAApB,CAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,SAAD,CAAwB,CAC9CF,KAAK,CAACG,QAAN,CAAe,CAACC,IAAI,CAAEL,WAAW,CAACM,WAAnB,CAAgCC,OAAO,CAAEJ,SAAzC,CAAf,EACH,CAFM,CAIP,MAAO,IAAMK,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,iBAAD,CAAgC,CAC9DR,KAAK,CAACG,QAAN,CAAe,CAACC,IAAI,CAAEL,WAAW,CAACU,oBAAnB,CAAyCH,OAAO,CAAEE,iBAAlD,CAAf,EACH,CAFM,CAIP;AACA,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,CAAiH,IAA5FC,CAAAA,YAA4F,2DAAzDC,SAAyD,IAA9CC,CAAAA,SAA8C,2DAAdD,SAAc,CACzIb,KAAK,CAACG,QAAN,CAAe,CAACC,IAAI,CAAEL,WAAW,CAACgB,eAAnB,CAAoCJ,SAAS,CAATA,SAApC,CAA+CG,SAAS,CAATA,SAA/C,CAA0DF,YAAY,CAAZA,YAA1D,CAAf,EACH,CAFM,CAIP,MAAO,IAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,gBAAD,CAAsD,IAA1BC,CAAAA,IAA0B,2DAAdL,SAAc,CACrFb,KAAK,CAACG,QAAN,CAAe,CAACC,IAAI,CAAEL,WAAW,CAACoB,sBAAnB,CAA2CF,gBAAgB,CAAhBA,gBAA3C,CAA6DC,IAAI,CAAJA,IAA7D,CAAf,EACH,CAFM","sourcesContent":["import * as actionTypes from './constants';\nimport {store} from '../../App';\n\nexport const setLoading = (isLoading: boolean) => {\n    store.dispatch({type: actionTypes.SET_LOADING, payload: isLoading})\n};\n\nexport const setSkeletonLoading = (isSkeletonLoading: boolean) => {\n    store.dispatch({type: actionTypes.SET_SKELETON_LOADING, payload: isSkeletonLoading})\n};\n\n// showToast - argument remove if not needed\nexport const setShowToast = (showToast: boolean, toastMessage: string | undefined = undefined, toastType: string | undefined = undefined) => {\n    store.dispatch({type: actionTypes.SHOW_HIDE_TOAST, showToast, toastType, toastMessage})\n};\n\nexport const setShowNotification = (showNotification: boolean, data: any = undefined) => {\n    store.dispatch({type: actionTypes.SHOW_HIDE_NOTIFICATION, showNotification, data})\n};\n\n"]},"metadata":{},"sourceType":"module"}