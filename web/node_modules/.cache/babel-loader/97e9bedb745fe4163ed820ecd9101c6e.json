{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/bankingDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport storageService from '../../../utils/storageService';\nimport Modal from '@material-ui/core/Modal';\nimport DigitalIdVerification from './digitalIdVerification';\nimport cancel from \"../../../assets/images/ic-cancel.png\";\nimport verifiedIcon from '../../../assets/images/checked-2.png';\nimport { moengage, mixPanel } from '../../../services/analyticsTools';\nimport { MoEConstants } from '../../../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst digitalInfoPoints = ['Passport', 'Driver Licence (Driver\\'s license) - scans of front and back are required', 'Photo Card - scans of front and back are required', 'New South Wales Driving Instructor Licence - scans of front and back are required', 'Tasmanian Government Personal Information Card - scans of front and back are required', 'ImmiCard - scans of front and back are required', 'Proof of Age card - scans of front and back are required', 'Australian Defence Force (ADF) identification card (Military ID) - scans of front and back are required'];\n\nconst BankingDetails = ({\n  getBankDetails,\n  addBankDetails,\n  updateBankDetails,\n  bankDetails\n}) => {\n  _s();\n\n  var _data$account_name2, _bankDetails$account_;\n\n  const [data, setData] = useState({\n    accountVerified: false,\n    account_name: '',\n    account_number: '',\n    bsb_number: '',\n    stripeAccountId: ''\n  });\n  const [errors, setErrors] = useState({\n    account_name: '',\n    account_number: '',\n    bsb_number: ''\n  });\n  const [submitClicked, setSubmitClicked] = useState(false);\n  const [digitalIdInfo, setDigitalIdInfo] = useState(false);\n  const [idVerifClicked, setIdVerifClicked] = useState(false);\n  const errorLabel = {\n    'account_number': 'Account Number',\n    'account_name': 'Account Name',\n    'bsb_number': 'BSB Number'\n  };\n  useEffect(() => {\n    getBankDetails();\n  }, [getBankDetails]);\n  useEffect(() => {\n    setData(Object.keys(bankDetails).length ? bankDetails : {\n      accountVerified: false,\n      account_name: '',\n      account_number: '',\n      bsb_number: '',\n      stripeAccountId: ''\n    });\n  }, [bankDetails]);\n\n  const validate = (name, value) => {\n    if (value && !value.trimLeft()) {\n      return `${errorLabel[name]} is required`;\n    }\n\n    switch (name) {\n      case 'account_number':\n        return value.length > 10 ? 'Maximum 10 digits are allowed' : value.length < 6 ? 'Minimum 6 digits are required' : '';\n\n      case 'bsb_number':\n        return !/^\\d{3}-\\d{3}$/.test(value) ? 'Please enter valid BSB Number like 123-444' : '';\n    }\n\n    return '';\n  };\n\n  const handleChange = ({\n    target: {\n      name,\n      value\n    }\n  }) => {\n    setData(prevData => ({ ...prevData,\n      [name]: value === null || value === void 0 ? void 0 : value.trimLeft()\n    }));\n\n    if (submitClicked) {\n      setErrors(prevErrors => ({ ...prevErrors,\n        [name]: validate(name, value)\n      }));\n    }\n  };\n\n  const handleSave = () => {\n    var _data$account_name;\n\n    if (!submitClicked) {\n      setSubmitClicked(true);\n    }\n\n    const hasErrors = Object.keys(data).reduce((prevValue, name) => {\n      const error = validate(name, data[name]);\n      setErrors(prevErrors => ({ ...prevErrors,\n        [name]: error\n      }));\n      return prevValue || error;\n    }, '');\n    const updatedBankDetails = {\n      account_name: (_data$account_name = data.account_name) === null || _data$account_name === void 0 ? void 0 : _data$account_name.trim(),\n      account_number: data.account_number,\n      bsb_number: data.bsb_number\n    };\n\n    if (!hasErrors) {\n      if (bankDetails.userId) {\n        updateBankDetails({\n          userId: data.userId,\n          ...updatedBankDetails\n        });\n      } else {\n        addBankDetails(updatedBankDetails);\n        const mData = {\n          timeStamp: moengage.getCurrentTimeStamp()\n        };\n        moengage.moE_SendEvent(MoEConstants.ADDED_PAYMENT_DETAILS, mData);\n        mixPanel.mixP_SendEvent(MoEConstants.ADDED_PAYMENT_DETAILS, mData);\n      }\n    }\n  };\n\n  const userType = storageService.getItem('userType');\n  const updated = ((_data$account_name2 = data.account_name) === null || _data$account_name2 === void 0 ? void 0 : _data$account_name2.trim()) !== ((_bankDetails$account_ = bankDetails.account_name) === null || _bankDetails$account_ === void 0 ? void 0 : _bankDetails$account_.trim()) || data.account_number !== bankDetails.account_number || data.bsb_number !== bankDetails.bsb_number;\n  return idVerifClicked ? /*#__PURE__*/_jsxDEV(DigitalIdVerification, {\n    setIdVerifClicked: setIdVerifClicked,\n    stripeAccountId: data.stripeAccountId\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex_row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_col_sm_8\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: \"Payment details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"info_note\",\n        children: userType === 1 ? 'Enter your Bank account details' : 'Enter your card details'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form_label\",\n          children: \"Account Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text_field\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Account Name\",\n            name: \"account_name\",\n            value: data.account_name,\n            onChange: handleChange,\n            maxLength: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errors.account_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form_label\",\n          children: \"BSB Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text_field\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter BSB Number\",\n            name: \"bsb_number\",\n            value: data.bsb_number,\n            onChange: handleChange,\n            maxLength: 7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errors.bsb_number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form_label\",\n          children: \"Account Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text_field\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Enter Account Number\",\n            name: \"account_number\",\n            value: data.account_number,\n            onChange: handleChange,\n            maxLength: 10,\n            max: 9999999999\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errors.account_number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), data.account_name && data.account_number && data.bsb_number && data.stripeAccountId && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"fill_grey_btn full_btn btn-effect id_verified\",\n            onClick: () => {\n              if (data === null || data === void 0 ? void 0 : data.accountVerified) return;\n              setIdVerifClicked(true);\n            },\n            children: [(data === null || data === void 0 ? void 0 : data.accountVerified) && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: verifiedIcon,\n              alt: \"verified\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 43\n            }, this), `${(data === null || data === void 0 ? void 0 : data.accountVerified) ? 'ID Verified' : 'Add ID Verification'}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"show_label id_info\",\n          onClick: () => setDigitalIdInfo(true),\n          children: \"ID verification is required as part of Stripe ID verification process.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `fill_btn full_btn btn-effect${!updated ? ' disabled' : ''}`,\n        onClick: handleSave,\n        children: \"Save changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"custom_modal\",\n      open: digitalIdInfo,\n      onClose: () => setDigitalIdInfo(false),\n      \"aria-labelledby\": \"simple-modal-title\",\n      \"aria-describedby\": \"simple-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_wh profile_modal\",\n        \"data-aos\": \"zoom-in\",\n        \"data-aos-delay\": \"30\",\n        \"data-aos-duration\": \"1000\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"heading\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sub_title\",\n            children: \"ID verification\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close_btn\",\n            onClick: () => setDigitalIdInfo(false),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: cancel,\n              alt: \"cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner_wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"show_label\",\n            children: \"ID verification is required as part of Stripe ID verification process.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"show_label\",\n            children: \"Below is a spansting of documents that can accept as proof of identity, address, and entity.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"verificationid_list\",\n            children: digitalInfoPoints.map((info, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"show_label\",\n              children: info\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 55\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bottom_btn custom_btn center\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `fill_btn full_btn btn-effect`,\n              onClick: () => setDigitalIdInfo(false),\n              children: \"Ok\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 10\n  }, this);\n};\n\n_s(BankingDetails, \"qDwHgaYKA5KxrAzUD8Ww2QNvjT4=\");\n\n_c = BankingDetails;\nexport default BankingDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"BankingDetails\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/bankingDetails.tsx"],"names":["useEffect","useState","storageService","Modal","DigitalIdVerification","cancel","verifiedIcon","moengage","mixPanel","MoEConstants","digitalInfoPoints","BankingDetails","getBankDetails","addBankDetails","updateBankDetails","bankDetails","data","setData","accountVerified","account_name","account_number","bsb_number","stripeAccountId","errors","setErrors","submitClicked","setSubmitClicked","digitalIdInfo","setDigitalIdInfo","idVerifClicked","setIdVerifClicked","errorLabel","Object","keys","length","validate","name","value","trimLeft","test","handleChange","target","prevData","prevErrors","handleSave","hasErrors","reduce","prevValue","error","updatedBankDetails","trim","userId","mData","timeStamp","getCurrentTimeStamp","moE_SendEvent","ADDED_PAYMENT_DETAILS","mixP_SendEvent","userType","getItem","updated","map","info","index"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport storageService from '../../../utils/storageService';\nimport Modal from '@material-ui/core/Modal';\nimport DigitalIdVerification from './digitalIdVerification';\nimport cancel from \"../../../assets/images/ic-cancel.png\";\nimport verifiedIcon from '../../../assets/images/checked-2.png';\nimport { moengage, mixPanel } from '../../../services/analyticsTools';\nimport { MoEConstants } from '../../../utils/constants';\n\ninterface BankDetails {\n  userId: string;\n  account_name: string;\n  account_number: string;\n  bsb_number: string;\n  accountVerified: boolean;\n  stripeAccountId: string;\n}\n\ninterface Props {\n  getBankDetails: () => void,\n  addBankDetails: (data: any) => void,\n  updateBankDetails: (data: any) => void,\n  bankDetails: BankDetails,\n}\n\nconst digitalInfoPoints: Array<string> = [\n  'Passport',\n  'Driver Licence (Driver\\'s license) - scans of front and back are required',\n  'Photo Card - scans of front and back are required',\n  'New South Wales Driving Instructor Licence - scans of front and back are required',\n  'Tasmanian Government Personal Information Card - scans of front and back are required',\n  'ImmiCard - scans of front and back are required',\n  'Proof of Age card - scans of front and back are required',\n  'Australian Defence Force (ADF) identification card (Military ID) - scans of front and back are required'\n]\n\nconst BankingDetails = ({ getBankDetails, addBankDetails, updateBankDetails, bankDetails }: Props) => {\n  const [data, setData] = useState<any>({\n    accountVerified: false,\n    account_name: '',\n    account_number: '',\n    bsb_number: '',\n    stripeAccountId: ''\n  });\n  const [errors, setErrors] = useState({\n    account_name: '',\n    account_number: '',\n    bsb_number: '',\n  });\n  const [submitClicked, setSubmitClicked] = useState<boolean>(false);\n  const [digitalIdInfo, setDigitalIdInfo] = useState<boolean>(false);\n  const [idVerifClicked, setIdVerifClicked] = useState<boolean>(false);\n\n  const errorLabel = {\n    'account_number': 'Account Number',\n    'account_name': 'Account Name',\n    'bsb_number': 'BSB Number',\n  } as { [key: string]: string };\n\n  useEffect(() => {\n    getBankDetails();\n  }, [getBankDetails]);\n\n  useEffect(() => {\n    setData(Object.keys(bankDetails).length ? bankDetails : { accountVerified: false, account_name: '', account_number: '', bsb_number: '', stripeAccountId: '' });\n  }, [bankDetails]);\n\n  const validate = (name: string, value: string) => {\n    if (value && !value.trimLeft()) {\n      return `${errorLabel[name]} is required`;\n    }\n\n    switch (name) {\n      case 'account_number':\n        return value.length > 10 ? 'Maximum 10 digits are allowed' : value.length < 6 ? 'Minimum 6 digits are required' : '';\n      case 'bsb_number':\n        return !/^\\d{3}-\\d{3}$/.test(value) ? 'Please enter valid BSB Number like 123-444' : '';\n    }\n\n    return '';\n  }\n\n  const handleChange = ({ target: { name, value } }: any) => {\n    setData((prevData: any) => ({\n      ...prevData,\n      [name]: value?.trimLeft(),\n    }));\n\n    if (submitClicked) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [name]: validate(name, value),\n      }));\n    }\n  };\n\n  const handleSave = () => {\n    if (!submitClicked) {\n      setSubmitClicked(true);\n    }\n\n    const hasErrors = Object.keys(data).reduce((prevValue, name) => {\n      const error = validate(name, data[name]);\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [name]: error,\n      }));\n\n      return prevValue || error;\n    }, '');\n\n    const updatedBankDetails = {\n      account_name: data.account_name?.trim(),\n      account_number: data.account_number,\n      bsb_number: data.bsb_number,\n    };\n    if (!hasErrors) {\n      if (bankDetails.userId) {\n        updateBankDetails(\n          {\n            userId: data.userId,\n            ...updatedBankDetails,\n          },\n        );\n      } else {\n        addBankDetails(updatedBankDetails);\n        const mData = {\n          timeStamp: moengage.getCurrentTimeStamp(),\n        }\n        moengage.moE_SendEvent(MoEConstants.ADDED_PAYMENT_DETAILS, mData);\n        mixPanel.mixP_SendEvent(MoEConstants.ADDED_PAYMENT_DETAILS, mData);\n      }\n    }\n  };\n\n  const userType = storageService.getItem('userType');\n  const updated = data.account_name?.trim() !== bankDetails.account_name?.trim() || data.account_number !== bankDetails.account_number || data.bsb_number !== bankDetails.bsb_number;\n\n  return (\n    idVerifClicked ? (\n      <DigitalIdVerification\n        setIdVerifClicked={setIdVerifClicked}\n        stripeAccountId={data.stripeAccountId}\n      />\n    ) : (<div className=\"flex_row\">\n      <div className=\"flex_col_sm_8\">\n        <span className=\"sub_title\">Payment details</span>\n        <span className=\"info_note\">{userType === 1 ? 'Enter your Bank account details' : 'Enter your card details'}</span>\n        <div className=\"form_field\">\n          <label className=\"form_label\">Account Name</label>\n          <div className=\"text_field\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter Account Name\"\n              name=\"account_name\"\n              value={data.account_name}\n              onChange={handleChange}\n              maxLength={50}\n            />\n          </div>\n          <span className=\"error_msg\">{errors.account_name}</span>\n        </div>\n        <div className=\"form_field\">\n          <label className=\"form_label\">BSB Number</label>\n          <div className=\"text_field\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter BSB Number\"\n              name=\"bsb_number\"\n              value={data.bsb_number}\n              onChange={handleChange}\n              maxLength={7}\n            />\n          </div>\n          <span className=\"error_msg\">{errors.bsb_number}</span>\n        </div>\n        <div className=\"form_field\">\n          <label className=\"form_label\">Account Number</label>\n          <div className=\"text_field\">\n            <input\n              type=\"number\"\n              placeholder=\"Enter Account Number\"\n              name=\"account_number\"\n              value={data.account_number}\n              onChange={handleChange}\n              maxLength={10}\n              max={9999999999}\n            />\n          </div>\n          <span className=\"error_msg\">{errors.account_number}</span>\n        </div>\n\n        {data.account_name && data.account_number && data.bsb_number && data.stripeAccountId &&\n          <>\n            <div className=\"form_field\">\n              <button className=\"fill_grey_btn full_btn btn-effect id_verified\"\n                onClick={() => {\n                  if (data?.accountVerified) return;\n                  setIdVerifClicked(true);\n                }}\n              >\n                {data?.accountVerified && <img src={verifiedIcon} alt=\"verified\" />}\n                {`${data?.accountVerified ? 'ID Verified' : 'Add ID Verification'}`}\n              </button>\n            </div>\n            <span className=\"show_label id_info\" onClick={() => setDigitalIdInfo(true)}>ID verification is required as part of Stripe ID verification process.</span>\n          </>\n        }\n\n        <button className={`fill_btn full_btn btn-effect${!updated ? ' disabled' : ''}`} onClick={handleSave}>Save changes</button>\n      </div>\n\n      <Modal\n        className=\"custom_modal\"\n        open={digitalIdInfo}\n        onClose={() => setDigitalIdInfo(false)}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <div className=\"custom_wh profile_modal\" data-aos=\"zoom-in\" data-aos-delay=\"30\" data-aos-duration=\"1000\">\n          <div className=\"heading\">\n            <span className=\"sub_title\">ID verification</span>\n            <button className=\"close_btn\" onClick={() => setDigitalIdInfo(false)}>\n              <img src={cancel} alt=\"cancel\" />\n            </button>\n          </div>\n          <div className=\"inner_wrap\">\n            <span className=\"show_label\">ID verification is required as part of Stripe ID verification process.</span>\n            <span className=\"show_label\">Below is a spansting of documents that can accept as proof of identity, address, and entity.</span>\n            <ul className=\"verificationid_list\">\n              {digitalInfoPoints.map((info, index) => <li className=\"show_label\" key={index}>{info}</li>)}\n            </ul>\n            <div className=\"bottom_btn custom_btn center\">\n              <button\n                className={`fill_btn full_btn btn-effect`}\n                onClick={() => setDigitalIdInfo(false)}\n              >Ok</button>\n            </div>\n          </div>\n        </div>\n      </Modal>\n\n    </div>)\n  );\n}\n\nexport default BankingDetails;\n"]},"metadata":{},"sourceType":"module"}