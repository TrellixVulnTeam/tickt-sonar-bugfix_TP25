{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/uploadMedia.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport remove from \"../../../assets/images/icon-close-1.png\";\nimport addMedia from \"../../../assets/images/add-image.png\";\nimport docThumbnail from '../../../assets/images/add-document.png';\nimport { onFileUpload } from '../../../redux/auth/actions';\nimport { setLoading, setShowToast } from '../../../redux/common/actions'; //@ts-ignore\n\nimport FsLightbox from 'fslightbox-react'; //@ts-ignore\n\n//@ts-ignore\n// import genThumbnail from 'simple-thumbnail';\nimport { thumbnailExtract } from '../../../common/thumbnail'; // import Loader from \"react-loader-spinner\";\n// import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n// import { AsyncImage } from '../../../utils/common';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imageFormats = [\"jpeg\", \"jpg\", \"png\"];\nconst videoFormats = [\"mp4\", \"wmv\", \"avi\"];\nconst docTypes = [\"jpeg\", \"jpg\", \"png\", \"mp4\", \"wmv\", \"avi\", \"pdf\", \"doc\", \"docx\", \"msword\"];\nconst docformats = [\"pdf\", \"doc\", \"docx\", \"msword\"]; // 'https://appinventiv-development.s3.amazonaws.com/SampleVideo_1280x720_1mb.mp4'\n// 'https://appinventiv-development.s3.amazonaws.com/sample_jpg_file.jpg'\n\nconst UploadMedia = ({\n  jobName,\n  title,\n  para,\n  hasDescription,\n  data,\n  stepCompleted,\n  handleStepForward,\n  handleStepComplete,\n  handleStepBack\n}) => {\n  _s();\n\n  var _Object$values;\n\n  const [localFiles, setLocalFiles] = useState({});\n  const [update, forceUpdate] = useState({});\n  const [filesUrl, setFilesUrl] = useState([]);\n  const [description, setDescription] = useState('');\n  const [submitClicked, setSubmitClicked] = useState(false);\n  const [toggler, setToggler] = useState(false);\n  const [selectedSlide, setSelectSlide] = useState(1);\n  const [isItemsLoad, setLoadItems] = useState({});\n  const [renderAsyncLoad, setAsyncLoad] = useState(null);\n  useEffect(() => {\n    if (stepCompleted) {\n      setFilesUrl(data === null || data === void 0 ? void 0 : data.urls);\n      setSubmitClicked(true);\n    }\n  }, [stepCompleted, data]);\n  useEffect(() => {// filesUrl\n  }, []);\n\n  const randomDelay = (item, index) => new Promise(resolve => {\n    let split_item_format = item.split('.');\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n    let split_item_name = item.split('/');\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render = null;\n    let loadByIndex = {\n      [index]: true\n    };\n\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          id: `media_${index}`,\n          onClick: () => {\n            setItemToggle(index);\n          },\n          title: get_split_name,\n          src: item,\n          onLoad: () => {\n            loadByIndex[index] = false;\n            console.log('image_render', '--->', {\n              loadByIndex\n            });\n          },\n          alt: \"media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this);\n      }\n    }\n\n    if (!loadByIndex[index]) {\n      console.log('Hered!!!');\n      resolve(image_render);\n    }\n  });\n\n  const calc = async (item, index) => {\n    let result = await randomDelay(item, index);\n    console.log({\n      result\n    });\n    return result;\n  };\n\n  const asyncFunc = async () => {\n    const p = filesUrl.map((item, index) => calc(item.link, index));\n    const results = await Promise.all(p);\n    setAsyncLoad(results);\n  };\n\n  useEffect(() => {\n    asyncFunc();\n  }, [filesUrl]);\n\n  const checkErrors = () => {\n    if (!(filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length)) {\n      return true;\n    }\n\n    if (hasDescription && (!description.trim() || description.length > 250)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const removeFromItem = index => {\n    filesUrl.splice(index, 1);\n    setFilesUrl(filesUrl);\n    Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n  };\n\n  const onFileChange = async e => {\n    var _newFile$type, _newFile$type$split$;\n\n    const formData = new FormData();\n    const newFile = e.target.files[0];\n    var fileType = newFile === null || newFile === void 0 ? void 0 : (_newFile$type = newFile.type) === null || _newFile$type === void 0 ? void 0 : (_newFile$type$split$ = _newFile$type.split('/')[1]) === null || _newFile$type$split$ === void 0 ? void 0 : _newFile$type$split$.toLowerCase();\n\n    if (hasDescription && !imageFormats.includes(fileType)) {\n      setShowToast(true, \"The file must be in proper format.\");\n      return;\n    }\n\n    if ((filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) === 6) {\n      setShowToast(true, \"Max files upload limit is 6.\");\n      return;\n    }\n\n    let filesUrlClone = filesUrl;\n    let countVideoFormats = filesUrlClone.map(item => {\n      let split_items = item.link.split('.');\n      let format_split_items = split_items[(split_items === null || split_items === void 0 ? void 0 : split_items.length) - 1];\n\n      if (videoFormats.includes(format_split_items)) {\n        return format_split_items;\n      }\n    }).filter(item => item !== undefined);\n    var selectedFileSize = (newFile === null || newFile === void 0 ? void 0 : newFile.size) / 1024 / 1024; // size in mib\n\n    if (docTypes.indexOf(fileType) < 0 || selectedFileSize > 10) {\n      setShowToast(true, \"The file must be in proper format or size.\");\n      return;\n    }\n\n    if (imageFormats.includes(fileType) && selectedFileSize > 10) {\n      // image validations\n      setShowToast(true, \"The image file size must be below 10 MB.\");\n      return;\n    }\n\n    if (videoFormats.includes(fileType)) {\n      // video validations\n      if (selectedFileSize > 10) {\n        setShowToast(true, \"The video file size must be below 20 MB.\");\n        return;\n      }\n\n      if ((countVideoFormats === null || countVideoFormats === void 0 ? void 0 : countVideoFormats.length) > 1) {\n        setShowToast(true, \"Max video file upload limit is 2.\");\n        return;\n      }\n    }\n\n    formData.append('file', newFile);\n    setLoadItems({});\n    const res = await onFileUpload(formData);\n    setLoading(true);\n\n    if (res.success) {\n      let link = res.imgUrl;\n      let check_type = imageFormats.includes(fileType) ? 1 : videoFormats.includes(fileType) ? 2 : [\"doc\", \"docx\", \"msword\"].includes(fileType) ? 3 : 4;\n      setFilesUrl(prev => [...prev, {\n        \"mediaType\": check_type,\n        \"link\": link\n      }]);\n      setLoadItems(prev => ({\n        [filesUrl.length - 1]: false\n      }));\n      setLocalFiles(prev => ({ ...prev,\n        [filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length]: URL.createObjectURL(newFile)\n      }));\n    }\n  };\n\n  const setItemToggle = index => {\n    setToggler(prev => !prev);\n    setSelectSlide(index + 1);\n  };\n\n  const renderbyFileFormat = (item, index, base64) => {\n    let split_item_format = item.split('.');\n    let get_split_fromat = split_item_format[split_item_format.length - 1];\n    let split_item_name = item.split('/');\n    let get_split_name = split_item_name[split_item_name.length - 1];\n    let image_render = null;\n    let loadByIndex = {\n      [index]: true\n    }; // setLoading(true);\n\n    if (get_split_fromat) {\n      if (imageFormats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          id: `media_${index}`,\n          onClick: () => {\n            setItemToggle(index);\n          },\n          title: get_split_name,\n          src: item,\n          \"async-src\": item,\n          decoding: \"async\",\n          loading: \"lazy\",\n          onLoad: () => {\n            console.log('Loaded!');\n            loadByIndex[index] = false;\n            console.log('image_render', '--->', {\n              loadByIndex\n            });\n            setLoadItems(prev => ({\n              [index]: true\n            }));\n          },\n          alt: \"media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this);\n      }\n\n      if (videoFormats.includes(get_split_fromat)) {\n        // image_render = (\n        //     <img\n        //         id={`media_${index}`}\n        //         onClick={() => { setItemToggle(index) }}\n        //         title={get_split_name}\n        //         src={videoThumbnail}\n        //         async-src={item}\n        //         decoding=\"async\"\n        //         loading=\"lazy\"\n        //         alt=\"media\"\n        //         onLoad={() => {\n        //             loadByIndex[index] = false;\n        //         }}\n        //         style={{ padding: '17px' }}\n        //     />);\n        if (base64) {\n          image_render = /*#__PURE__*/_jsxDEV(\"video\", {\n            id: `media_${index}`,\n            crossOrigin: \"anonymous\",\n            src: item,\n            poster: base64,\n            controls: false,\n            onLoadedData: () => {\n              console.log('Loaded!');\n              setLoadItems(prev => ({\n                [index]: true\n              }));\n            },\n            onClick: () => {\n              setItemToggle(index);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 25\n          }, this);\n        } else {\n          image_render = /*#__PURE__*/_jsxDEV(\"video\", {\n            id: `media_${index}`,\n            crossOrigin: \"anonymous\",\n            src: item,\n            controls: false,\n            onLoadedData: () => {\n              console.log('Loaded!');\n              setLoadItems(prev => ({\n                [index]: true\n              }));\n            },\n            onClick: () => {\n              setItemToggle(index);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }, this);\n        }\n      }\n\n      if (docformats.includes(get_split_fromat)) {\n        image_render = /*#__PURE__*/_jsxDEV(\"img\", {\n          id: `media_${index}`,\n          title: get_split_name,\n          src: docThumbnail,\n          \"async-src\": item,\n          decoding: \"async\",\n          loading: \"lazy\",\n          onLoad: () => {\n            loadByIndex[index] = false;\n            console.log('Loaded!');\n            setLoadItems(prev => ({\n              [index]: true\n            }));\n          },\n          alt: \"media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this);\n      } // let checkRender: any = document.getElementById(`media_${index}`);\n      // if (checkRender?.complete) {\n      // console.log({image_render, index: loadByIndex[index] })\n\n\n      return /*#__PURE__*/_jsxDEV(\"figure\", {\n        className: \"img_video\",\n        children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: image_render && /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [image_render, /*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: () => {\n                removeFromItem(index);\n              },\n              src: remove,\n              alt: \"remove\",\n              className: \"remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this); // }\n    }\n  };\n\n  const renderFilteredItems = () => {\n    let sources = [];\n    let types = [];\n\n    if (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) {\n      filesUrl.forEach(item => {\n        if ((item === null || item === void 0 ? void 0 : item.mediaType) === 2) {\n          sources.push(item.link);\n          types.push('video');\n        }\n\n        if ((item === null || item === void 0 ? void 0 : item.mediaType) === 1) {\n          sources.push(item.link);\n          types.push('image');\n        }\n\n        if ((item === null || item === void 0 ? void 0 : item.mediaType) === 3) {\n          sources.push(docThumbnail);\n          types.push('image');\n        }\n      });\n    }\n\n    return {\n      sources,\n      types\n    };\n  };\n\n  const {\n    sources,\n    types\n  } = renderFilteredItems();\n  let IsRenderValues = null;\n\n  if ((_Object$values = Object.values(isItemsLoad)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) {\n    IsRenderValues = Array.isArray(Object.values(isItemsLoad)) && Object.values(isItemsLoad)[0] === true ? Object.values(isItemsLoad)[0] : false;\n  }\n\n  if (IsRenderValues === false) {\n    setLoading(true);\n  }\n\n  if (IsRenderValues === true) {\n    setLoading(false);\n  }\n\n  let checkErrors_ = checkErrors();\n  console.log({\n    IsRenderValues,\n    isItemsLoad,\n    check: checkErrors_\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app_wrapper${jobName ? ' padding_0' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `section_wrapper${jobName ? ' padding_0' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_container\",\n        children: [/*#__PURE__*/_jsxDEV(FsLightbox, {\n          toggler: toggler,\n          slide: selectedSlide,\n          sources: sources,\n          types: types\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"canvas-extractor\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `flex_col_sm_${jobName ? '7' : '6'}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relate\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    hasDescription ? handleStepBack() : handleStepForward(6);\n                  },\n                  className: \"back\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: jobName ? \"xs_sub_title\" : \"title\",\n                  children: jobName || 'Video upload or add photos'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 33\n              }, this), title && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"sub_title\",\n                children: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"commn_para\",\n                children: para || \"Record maximum 2 short videos or 6 doc files/images to demonstrate your job and any unique requirements.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 29\n            }, this), !jobName && !(filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) && !hasDescription ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex_col_sm_5 text-right\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: () => {\n                  handleStepForward(14);\n                },\n                className: \"link\",\n                children: 'Skip'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload_img_video\",\n              children: [(filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) ? filesUrl.map((item, index) => renderbyFileFormat(item === null || item === void 0 ? void 0 : item.link, index, item === null || item === void 0 ? void 0 : item.base64)) : null, (filesUrl === null || filesUrl === void 0 ? void 0 : filesUrl.length) < 6 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"upload_media\",\n                  htmlFor: \"upload_img_video\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: addMedia,\n                    alt: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 430,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: onFileChange,\n                  type: \"file\",\n                  accept: hasDescription ? \"image/png,image/jpg,image/jpeg\" : \"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\",\n                  style: {\n                    display: \"none\"\n                  },\n                  id: \"upload_img_video\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 37\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_8\",\n            children: [hasDescription && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_field\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form_label\",\n                children: \"Photo Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text_field\",\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  placeholder: \"The item has..\",\n                  value: description,\n                  onChange: ({\n                    target: {\n                      value\n                    }\n                  }) => setDescription(value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 41\n                }, this), description.length ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"char_count\",\n                  children: `character length : ${description.length} / 250`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 45\n                }, this) : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error_msg\",\n                children: submitClicked && !description.trim() ? 'Photo Description is required.' : description.length > 250 ? 'Maximum 250 characters are allowed.' : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_field\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setSubmitClicked(true);\n                  let filteredItems = [];\n                  let isRender = false;\n                  filesUrl.forEach((item, index) => {\n                    if ((item === null || item === void 0 ? void 0 : item.mediaType) === 2) {\n                      if (!(item === null || item === void 0 ? void 0 : item.base64)) {\n                        let base64 = thumbnailExtract({\n                          canvasId: '#canvas-extractor',\n                          videoId: `#media_${index}`\n                        });\n                        item['base64'] = base64;\n                      }\n                    }\n\n                    filteredItems.push(item);\n                  });\n\n                  if (!isRender) {\n                    setFilesUrl(filteredItems);\n                    handleStepComplete({\n                      urls: filteredItems,\n                      description: hasDescription ? description : undefined\n                    });\n                  }\n                },\n                className: `fill_btn full_btn btn-effect ${checkErrors_ && IsRenderValues == null ? 'disable_btn' : !checkErrors_ && !IsRenderValues ? 'disable_btn' : ''}`,\n                children: 'Submit'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UploadMedia, \"tFlEjvs+6tYSN31YiPEJdBq3MhU=\");\n\n_c = UploadMedia;\nexport default UploadMedia;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadMedia\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/uploadMedia.tsx"],"names":["React","useEffect","useState","remove","addMedia","docThumbnail","onFileUpload","setLoading","setShowToast","FsLightbox","thumbnailExtract","imageFormats","videoFormats","docTypes","docformats","UploadMedia","jobName","title","para","hasDescription","data","stepCompleted","handleStepForward","handleStepComplete","handleStepBack","localFiles","setLocalFiles","update","forceUpdate","filesUrl","setFilesUrl","description","setDescription","submitClicked","setSubmitClicked","toggler","setToggler","selectedSlide","setSelectSlide","isItemsLoad","setLoadItems","renderAsyncLoad","setAsyncLoad","urls","randomDelay","item","index","Promise","resolve","split_item_format","split","get_split_fromat","length","split_item_name","get_split_name","image_render","loadByIndex","includes","setItemToggle","console","log","calc","result","asyncFunc","p","map","link","results","all","checkErrors","trim","removeFromItem","splice","Array","isArray","onFileChange","e","formData","FormData","newFile","target","files","fileType","type","toLowerCase","filesUrlClone","countVideoFormats","split_items","format_split_items","filter","undefined","selectedFileSize","size","indexOf","append","res","success","imgUrl","check_type","prev","URL","createObjectURL","renderbyFileFormat","base64","renderFilteredItems","sources","types","forEach","mediaType","push","IsRenderValues","Object","values","checkErrors_","check","display","value","filteredItems","isRender","canvasId","videoId"],"mappings":"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","sourcesContent":["import React, { SyntheticEvent, useRef, useEffect, useState } from 'react';\nimport colorLogo from '../../../assets/images/ic-logo-yellow.png';\nimport menu from '../../../assets/images/menu-line-white.svg';\nimport bell from '../../../assets/images/ic-notification.png';\nimport dummy from '../../../assets/images/u_placeholder.jpg';\nimport remove from \"../../../assets/images/icon-close-1.png\";\nimport addMedia from \"../../../assets/images/add-image.png\";\nimport videoThumbnail from '../../../assets/images/add-video.png';\nimport docThumbnail from '../../../assets/images/add-document.png'\nimport { onFileUpload } from '../../../redux/auth/actions';\nimport { setLoading, setShowToast } from '../../../redux/common/actions';\n//@ts-ignore\nimport FsLightbox from 'fslightbox-react';\n//@ts-ignore\nimport Skeleton from 'react-loading-skeleton';\n\n//@ts-ignore\n// import genThumbnail from 'simple-thumbnail';\n\nimport { thumbnailExtract } from '../../../common/thumbnail';\n\n\n// import Loader from \"react-loader-spinner\";\n// import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n// import { AsyncImage } from '../../../utils/common';\n\ninterface Proptypes {\n    jobName?: string;\n    title?: string;\n    para?: string;\n    hasDescription?: boolean;\n    data: any;\n    stepCompleted: Boolean;\n    handleStepComplete: (data: any) => void;\n    handleStepForward: (data: any) => void;\n    handleStepBack: () => void;\n}\n\nconst imageFormats: Array<any> = [\"jpeg\", \"jpg\", \"png\"];\nconst videoFormats: Array<any> = [\"mp4\", \"wmv\", \"avi\"];\nconst docTypes: Array<any> = [\"jpeg\", \"jpg\", \"png\", \"mp4\", \"wmv\", \"avi\", \"pdf\", \"doc\", \"docx\", \"msword\"];\nconst docformats: Array<any> = [\"pdf\", \"doc\", \"docx\", \"msword\"];\n\n// 'https://appinventiv-development.s3.amazonaws.com/SampleVideo_1280x720_1mb.mp4'\n// 'https://appinventiv-development.s3.amazonaws.com/sample_jpg_file.jpg'\n\nconst UploadMedia = ({ jobName, title, para, hasDescription, data, stepCompleted, handleStepForward, handleStepComplete, handleStepBack }: Proptypes) => {\n    const [localFiles, setLocalFiles] = useState({});\n    const [update, forceUpdate] = useState({});\n    const [filesUrl, setFilesUrl] = useState([] as any);\n    const [description, setDescription] = useState('');\n    const [submitClicked, setSubmitClicked] = useState(false);\n    const [toggler, setToggler] = useState(false);\n    const [selectedSlide, setSelectSlide] = useState(1);\n    const [isItemsLoad, setLoadItems] = useState({});\n\n    const [renderAsyncLoad, setAsyncLoad] = useState<any>(null);\n\n    useEffect(() => {\n        if (stepCompleted) {\n            setFilesUrl(data?.urls);\n            setSubmitClicked(true);\n        }\n    }, [stepCompleted, data]);\n\n    useEffect(() => {\n        // filesUrl\n    }, []);\n\n    const randomDelay = (item: any, index: any) => new Promise(resolve => {\n\n        let split_item_format = item.split('.');\n        let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n        let split_item_name = item.split('/');\n        let get_split_name = split_item_name[split_item_name.length - 1];\n        let image_render: any = null;\n        let loadByIndex = { [index]: true };\n\n        if (get_split_fromat) {\n            if (imageFormats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        onClick={() => { setItemToggle(index) }}\n                        title={get_split_name}\n                        src={item}\n                        onLoad={() => {\n                            loadByIndex[index] = false;\n                            console.log('image_render', '--->', { loadByIndex })\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n        }\n\n        if (!loadByIndex[index]) {\n            console.log('Hered!!!')\n            resolve(image_render);\n        }\n    });\n\n\n    const calc = async (item: any, index: any) => {\n        let result = await randomDelay(item, index);\n        console.log({ result });\n        return result;\n    };\n\n    const asyncFunc = async () => {\n        const p = filesUrl.map((item: any, index: any) => calc(item.link, index));\n        const results = await Promise.all(p);\n        setAsyncLoad(results);\n    };\n\n    useEffect(() => {\n        asyncFunc();\n    }, [filesUrl])\n\n    const checkErrors = () => {\n        if (!filesUrl?.length) {\n            return true;\n        }\n\n        if (hasDescription && (!description.trim() || description.length > 250)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    const removeFromItem = (index: any) => {\n        filesUrl.splice(index, 1);\n        setFilesUrl(filesUrl);\n        Array.isArray(update) ? forceUpdate([]) : forceUpdate({});\n    }\n\n    const onFileChange = async (e: any) => {\n        const formData = new FormData();\n        const newFile = e.target.files[0];\n        var fileType = (newFile?.type?.split('/')[1])?.toLowerCase();\n\n        if (hasDescription && !imageFormats.includes(fileType)) {\n            setShowToast(true, \"The file must be in proper format.\");\n            return;\n        }\n\n        if (filesUrl?.length === 6) {\n            setShowToast(true, \"Max files upload limit is 6.\")\n            return;\n        }\n\n        let filesUrlClone: any = filesUrl;\n\n        let countVideoFormats = filesUrlClone.map((item: any) => {\n            let split_items = item.link.split('.');\n\n            let format_split_items = split_items[split_items?.length - 1];\n\n            if (videoFormats.includes(format_split_items)) {\n                return format_split_items;\n            }\n        }).filter((item: any) => item !== undefined);\n\n        var selectedFileSize = newFile?.size / 1024 / 1024; // size in mib\n\n        if (docTypes.indexOf(fileType) < 0 || (selectedFileSize > 10)) {\n            setShowToast(true, \"The file must be in proper format or size.\")\n            return;\n        }\n\n        if (imageFormats.includes(fileType) && selectedFileSize > 10) { // image validations\n            setShowToast(true, \"The image file size must be below 10 MB.\")\n            return;\n        }\n\n        if (videoFormats.includes(fileType)) { // video validations\n            if (selectedFileSize > 10) {\n                setShowToast(true, \"The video file size must be below 20 MB.\")\n                return;\n            }\n            if (countVideoFormats?.length > 1) {\n                setShowToast(true, \"Max video file upload limit is 2.\")\n                return;\n            }\n        }\n\n        formData.append('file', newFile);\n        setLoadItems({});\n        const res = await onFileUpload(formData);\n        setLoading(true);\n        if (res.success) {\n            let link: string = res.imgUrl;\n            let check_type: any = imageFormats.includes(fileType) ? 1 : videoFormats.includes(fileType) ? 2 : [\"doc\", \"docx\", \"msword\"].includes(fileType) ? 3 : 4\n            setFilesUrl((prev: Array<any>) => [...prev, {\n                \"mediaType\": check_type,\n                \"link\": link\n            }]);\n            setLoadItems((prev: any) => ({\n                [filesUrl.length - 1]: false\n            }))\n            setLocalFiles((prev: any) => ({ ...prev, [filesUrl?.length]: URL.createObjectURL(newFile) }));\n        }\n    }\n\n\n    const setItemToggle = (index: any) => {\n        setToggler((prev: boolean) => !prev);\n        setSelectSlide(index + 1);\n    }\n\n    const renderbyFileFormat = (item: any, index: any, base64?: any) => {\n        let split_item_format = item.split('.');\n        let get_split_fromat = split_item_format[split_item_format.length - 1];\n\n        let split_item_name = item.split('/');\n        let get_split_name = split_item_name[split_item_name.length - 1];\n        let image_render: any = null;\n        let loadByIndex = { [index]: true };\n        // setLoading(true);\n        if (get_split_fromat) {\n            if (imageFormats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        onClick={() => { setItemToggle(index) }}\n                        title={get_split_name}\n                        src={item}\n                        async-src={item}\n                        decoding=\"async\"\n                        loading=\"lazy\"\n                        onLoad={() => {\n                            console.log('Loaded!')\n                            loadByIndex[index] = false;\n                            console.log('image_render', '--->', { loadByIndex })\n                            setLoadItems((prev: any) => ({\n                                [index]: true\n                            }))\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n\n            if (videoFormats.includes(get_split_fromat)) {\n                // image_render = (\n                //     <img\n                //         id={`media_${index}`}\n                //         onClick={() => { setItemToggle(index) }}\n                //         title={get_split_name}\n                //         src={videoThumbnail}\n                //         async-src={item}\n                //         decoding=\"async\"\n                //         loading=\"lazy\"\n                //         alt=\"media\"\n                //         onLoad={() => {\n                //             loadByIndex[index] = false;\n                //         }}\n                //         style={{ padding: '17px' }}\n                //     />);\n\n                if (base64) {\n                    image_render = (\n                        <video\n                            id={`media_${index}`}\n                            crossOrigin=\"anonymous\"\n                            src={item}\n                            poster={base64}\n                            controls={false}\n                            onLoadedData={() => {\n                                console.log('Loaded!')\n                                setLoadItems((prev: any) => ({\n                                    [index]: true\n                                }))\n                            }}\n                            onClick={() => { setItemToggle(index) }} />\n                    )\n                } else {\n                    image_render = (\n                        <video id={`media_${index}`} crossOrigin=\"anonymous\"\n                            src={item}\n                            controls={false}\n                            onLoadedData={() => {\n                                console.log('Loaded!')\n                                setLoadItems((prev: any) => ({\n                                    [index]: true\n                                }))\n                            }}\n                            onClick={() => { setItemToggle(index) }} />\n                    )\n                }\n            }\n\n            if (docformats.includes(get_split_fromat)) {\n                image_render = (\n                    <img\n                        id={`media_${index}`}\n                        title={get_split_name}\n                        src={docThumbnail}\n                        async-src={item}\n                        decoding=\"async\"\n                        loading=\"lazy\"\n                        onLoad={() => {\n                            loadByIndex[index] = false;\n                            console.log('Loaded!')\n                            setLoadItems((prev: any) => ({\n                                [index]: true\n                            }))\n                        }}\n                        alt=\"media\"\n                    />)\n            }\n            // let checkRender: any = document.getElementById(`media_${index}`);\n            // if (checkRender?.complete) {\n            // console.log({image_render, index: loadByIndex[index] })\n            return (\n                <figure className=\"img_video\">\n                    <React.Fragment>\n                        {image_render && (\n                            <React.Fragment>\n                                {image_render}\n                                <img\n                                    onClick={() => { removeFromItem(index) }}\n                                    src={remove}\n                                    alt=\"remove\"\n                                    className=\"remove\"\n                                />\n                            </React.Fragment>\n                        )}\n                    </React.Fragment>\n                    {/* <span style={{ fontSize: '10px' }}>{get_split_name}</span> */}\n                </figure>\n            )\n            // }\n        }\n    }\n\n    const renderFilteredItems = () => {\n        let sources: any = [];\n        let types: any = [];\n\n        if (filesUrl?.length) {\n            filesUrl.forEach((item: any) => {\n                if (item?.mediaType === 2) {\n                    sources.push(item.link);\n                    types.push('video');\n                }\n                if (item?.mediaType === 1) {\n                    sources.push(item.link);\n                    types.push('image');\n                }\n                if (item?.mediaType === 3) {\n                    sources.push(docThumbnail);\n                    types.push('image');\n                }\n            })\n        }\n\n        return { sources, types };\n    }\n\n    const { sources, types } = renderFilteredItems();\n    let IsRenderValues = null;\n    if (Object.values(isItemsLoad)?.length) {\n        IsRenderValues = Array.isArray(Object.values(isItemsLoad)) && Object.values(isItemsLoad)[0] === true ? Object.values(isItemsLoad)[0] : false;\n    }\n\n    if(IsRenderValues === false){\n        setLoading(true);\n    }\n\n    if(IsRenderValues === true){\n        setLoading(false);\n    }\n\n    let checkErrors_: any = checkErrors();\n    console.log({ IsRenderValues, isItemsLoad, check: checkErrors_ })\n    return (\n        <div className={`app_wrapper${jobName ? ' padding_0' : ''}`}>\n            <div className={`section_wrapper${jobName ? ' padding_0' : ''}`}>\n                <div className=\"custom_container\">\n\n                    <FsLightbox\n                        toggler={toggler}\n                        slide={selectedSlide}\n                        sources={sources}\n                        types={types}\n                    />\n\n                    <canvas id=\"canvas-extractor\" style={{ display: 'none' }}></canvas>\n\n                    <div className=\"form_field\">\n                        <div className=\"flex_row\">\n                            <div className={`flex_col_sm_${jobName ? '7' : '6'}`}>\n                                <div className=\"relate\">\n                                    <button\n                                        onClick={() => { hasDescription ? handleStepBack() : handleStepForward(6) }}\n                                        className=\"back\"></button>\n                                    <span className={jobName ? \"xs_sub_title\" : \"title\"}>{jobName || 'Video upload or add photos'}</span>\n                                </div>\n                                {title && <span className=\"sub_title\">{title}</span>}\n                                <p className=\"commn_para\">\n                                    {para || \"Record maximum 2 short videos or 6 doc files/images to demonstrate your job and any unique requirements.\"}\n                                    {/* {para || 'Record a short video or add photos to demonstrate your job and any unique requirements.'} */}\n                                </p>\n                            </div>\n                            {!jobName && !filesUrl?.length && !hasDescription ? (\n                                <div className=\"flex_col_sm_5 text-right\">\n                                    <span\n                                        onClick={() => {\n                                            handleStepForward(14)\n                                        }}\n                                        className=\"link\">\n                                        {'Skip'}\n                                    </span>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                    <div className=\"flex_row\">\n                        <div className=\"flex_col_sm_12\">\n                            <div className=\"upload_img_video\">\n                                {/* {renderAsyncLoad ? renderAsyncLoad : null} */}\n                                {filesUrl?.length ?\n                                    filesUrl.map((item: any, index: number) => (renderbyFileFormat(item?.link, index, item?.base64)))\n                                    : null}\n\n                                {filesUrl?.length < 6 ? (\n                                    <React.Fragment>\n                                        <label className=\"upload_media\" htmlFor=\"upload_img_video\">\n                                            <img src={addMedia} alt=\"\" />\n                                        </label>\n                                        <input\n                                            onChange={onFileChange}\n                                            type=\"file\"\n                                            accept={hasDescription ? \"image/png,image/jpg,image/jpeg\" : \"image/png,image/jpg,image/jpeg,.pdf, .doc, video/mp4, video/wmv, video/avi\"}\n                                            style={{ display: \"none\" }}\n                                            id=\"upload_img_video\"\n                                        />\n                                    </React.Fragment>\n                                ) : null}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"flex_row\">\n                        <div className=\"flex_col_sm_8\">\n                            {hasDescription && (\n                                <div className=\"form_field\">\n                                    <label className=\"form_label\">Photo Description</label>\n                                    <div className=\"text_field\">\n                                        <textarea placeholder=\"The item has..\" value={description} onChange={({ target: { value } }: any) => setDescription(value)} />\n                                        {description.length ?\n                                            <span className=\"char_count\">\n                                                {`character length : ${description.length} / 250`}\n                                            </span>\n                                            : ''}\n                                    </div>\n                                    <span className=\"error_msg\">{submitClicked && !description.trim() ? 'Photo Description is required.' : description.length > 250 ? 'Maximum 250 characters are allowed.' : ''}</span>\n                                </div>\n                            )}\n                            <div className=\"form_field\">\n                                <button\n                                    onClick={() => {\n                                        setSubmitClicked(true);\n                                        let filteredItems: any = [];\n                                        let isRender: boolean = false;\n                                        filesUrl.forEach((item: any, index: any) => {\n                                            if (item?.mediaType === 2) {\n                                                if (!item?.base64) {\n                                                    let base64 = thumbnailExtract({\n                                                        canvasId: '#canvas-extractor',\n                                                        videoId: `#media_${index}`\n                                                    });\n                                                    item['base64'] = base64;\n                                                }\n                                            }\n                                            filteredItems.push(item);\n                                        });\n                                        if (!isRender) {\n                                            setFilesUrl(filteredItems);\n                                            handleStepComplete({\n                                                urls: filteredItems,\n                                                description: hasDescription ? description : undefined,\n                                            })\n                                        }\n                                    }}\n                                    className={`fill_btn full_btn btn-effect ${checkErrors_ && IsRenderValues == null ? 'disable_btn' : !checkErrors_ && !IsRenderValues ? 'disable_btn' : ''}`}>\n                                    {'Submit'}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default UploadMedia\n"]},"metadata":{},"sourceType":"module"}