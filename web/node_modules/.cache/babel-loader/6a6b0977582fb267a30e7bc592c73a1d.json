{"ast":null,"code":"import NetworkOps from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading, setSkeletonLoading } from '../common/actions'; // export const getJobType = () => ({ type: actionTypes.GET_JOB_TYPE})\n\nexport const getSearchJobList = searchJob => ({\n  type: actionTypes.GET_SEARCH_JOB_LIST,\n  searchJob\n});\nexport const getRecentSearchList = () => ({\n  type: actionTypes.GET_RECENT_SEARCH_LIST\n});\nexport const getRecentLocationList = () => ({\n  type: actionTypes.GET_RECENT_LOCATION_LIST\n});\nexport const getJobTypeList = () => ({\n  type: actionTypes.GET_JOB_TYPE_LIST\n});\nexport const getViewNearByJob = data => ({\n  type: actionTypes.GET_VIEW_NEARBY_JOBS,\n  data\n});\nexport const getJobWithJobTypeLatLong = jobData => ({\n  type: actionTypes.GET_JOB_WITH_JOB_TYPE_AND_LATLONG,\n  jobData\n});\nexport const postHomeSearchData = jobData => ({\n  type: actionTypes.POST_HOME_SEARCH_DATA,\n  jobData\n});\nexport const resetHomeSearchJobData = () => ({\n  type: actionTypes.RESET_HOME_SEARCH_DATA\n});\nexport const resetViewNearByJobData = () => ({\n  type: actionTypes.RESET_VIEW_NEARBY_JOBS\n});\nexport const getNotificationList = async (page, resetUnreadNotif) => {\n  const response = await NetworkOps.get(Urls.notification + `?page=${page}${resetUnreadNotif ? '&markRead=1' : ''}`);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const getHomeJobDetails = async data => {\n  let response;\n  console.log(data, \"34\");\n  setSkeletonLoading(true);\n\n  if (data.specializationId) {\n    response = await NetworkOps.get(Urls.homeJobDetails + `?jobId=${data.jobId}&tradeId=${data.tradeId}$&specializationId=${data.specializationId}`);\n  }\n\n  response = await NetworkOps.get(Urls.homeJobDetails + `?jobId=${data.jobId}&tradeId=${data.tradeId}$&specializationId=${data.specializationId}`);\n  setSkeletonLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const jobDetailsBuilder = async data => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.jobDetailsBuilder + `?jobId=${data.jobId}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const getHomeSaveJob = async data => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.homeSaveJob + `?jobId=${data.jobId}&tradeId=${data.tradeId}&specializationId=${data.specializationId}&isSave=${data.isSave}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const postHomeApplyJob = async data => {\n  setLoading(true);\n  const response = await NetworkOps.postToJson(Urls.homeApplyJob, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const deleteRecentSearch = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(Urls.deleteRecentSearch, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const getMilestoneList = async jobId => {\n  setLoading(true);\n  const response = await NetworkOps.get(`${Urls.milestoneListBuilder}?jobId=${jobId}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result,\n      status: response.status_code\n    };\n  }\n\n  return {\n    success: false,\n    data: response.result,\n    status: response.status_code\n  };\n};\nexport const getMilestoneDetails = async data => {\n  setLoading(true);\n  const response = await NetworkOps.get(`${Urls.milestoneDetails}?jobId=${data.jobId}&milestoneId=${data.milestoneId}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  return {\n    success: false,\n    data: response.result\n  };\n};\nexport const milestoneAcceptOrDecline = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(Urls.milestoneApproveDecline, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false,\n    data: response.result\n  };\n};\nexport const searchTradies = async data => {\n  const response = await NetworkOps.postToJson(Urls.homeSearch, data);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  return {\n    success: false,\n    data: response.result\n  };\n};\nexport const getPopularBuilder = async data => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.getPopularBuilder + `?long=${data.long}&lat=${data.lat}&page=${data.page}&perPage=${data.perPage}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      result: response.result\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const getMostViewedJobs = async data => {\n  setLoading(true); // const response: FetchResponse = await NetworkOps.get(Urls.getMostViewedJobs + `?long=${data.long}&lat=${data.lat}&page=${data.page}&perPage=${data.perPage}`);\n\n  const response = await NetworkOps.get(Urls.getMostViewedJobs + `?page=${data.page}&perPage=${data.perPage}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      result: response.result\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const getRecommendedJobs = async data => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.getRecommendedJobs + `?page=${data.page}&perPage=${data.perPage}&long=${data.long}&lat=${data.lat}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      result: response.result\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const getAdminNotificationData = async ({\n  admin_notification_id\n}) => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.getAdminNotificationData + `?admin_notification_id=${admin_notification_id}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      result: response.result\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const recallHeaderNotification = isRecall => ({\n  type: actionTypes.RECALL_HEADER_NOTIFICATION,\n  isRecall\n});","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/redux/homeSearch/actions.ts"],"names":["NetworkOps","Urls","actionTypes","setShowToast","setLoading","setSkeletonLoading","getSearchJobList","searchJob","type","GET_SEARCH_JOB_LIST","getRecentSearchList","GET_RECENT_SEARCH_LIST","getRecentLocationList","GET_RECENT_LOCATION_LIST","getJobTypeList","GET_JOB_TYPE_LIST","getViewNearByJob","data","GET_VIEW_NEARBY_JOBS","getJobWithJobTypeLatLong","jobData","GET_JOB_WITH_JOB_TYPE_AND_LATLONG","postHomeSearchData","POST_HOME_SEARCH_DATA","resetHomeSearchJobData","RESET_HOME_SEARCH_DATA","resetViewNearByJobData","RESET_VIEW_NEARBY_JOBS","getNotificationList","page","resetUnreadNotif","response","get","notification","status_code","success","getHomeJobDetails","console","log","specializationId","homeJobDetails","jobId","tradeId","result","jobDetailsBuilder","getHomeSaveJob","homeSaveJob","isSave","message","postHomeApplyJob","postToJson","homeApplyJob","deleteRecentSearch","putToJson","getMilestoneList","milestoneListBuilder","status","getMilestoneDetails","milestoneDetails","milestoneId","milestoneAcceptOrDecline","milestoneApproveDecline","searchTradies","homeSearch","getPopularBuilder","long","lat","perPage","getMostViewedJobs","getRecommendedJobs","getAdminNotificationData","admin_notification_id","recallHeaderNotification","isRecall","RECALL_HEADER_NOTIFICATION"],"mappings":"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","sourcesContent":["import NetworkOps, { FetchResponse } from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading, setSkeletonLoading } from '../common/actions';\n\n// export const getJobType = () => ({ type: actionTypes.GET_JOB_TYPE})\nexport const getSearchJobList = (searchJob: string) => ({ type: actionTypes.GET_SEARCH_JOB_LIST, searchJob });\n\nexport const getRecentSearchList = () => ({ type: actionTypes.GET_RECENT_SEARCH_LIST });\n\nexport const getRecentLocationList = () => ({ type: actionTypes.GET_RECENT_LOCATION_LIST });\n\nexport const getJobTypeList = () => ({ type: actionTypes.GET_JOB_TYPE_LIST });\n\nexport const getViewNearByJob = (data: object) => ({ type: actionTypes.GET_VIEW_NEARBY_JOBS, data });\n\nexport const getJobWithJobTypeLatLong = (jobData: object) => ({ type: actionTypes.GET_JOB_WITH_JOB_TYPE_AND_LATLONG, jobData });\n\nexport const postHomeSearchData = (jobData: object) => ({ type: actionTypes.POST_HOME_SEARCH_DATA, jobData });\n\nexport const resetHomeSearchJobData = () => ({ type: actionTypes.RESET_HOME_SEARCH_DATA });\n\nexport const resetViewNearByJobData = () => ({ type: actionTypes.RESET_VIEW_NEARBY_JOBS });\n\nexport const getNotificationList = async (page: number, resetUnreadNotif: boolean) => {\n    const response: FetchResponse = await NetworkOps.get(Urls.notification + `?page=${page}${resetUnreadNotif ? '&markRead=1' : ''}`);\n    if (response.status_code === 200) {\n        return { success: true, data: response };\n    }\n    return { success: false };\n}\n\nexport const getHomeJobDetails = async (data: any) => {\n    let response: FetchResponse;\n    console.log(data,\"34\")\n    setSkeletonLoading(true);\n    if (data.specializationId) {\n        response = await NetworkOps.get(Urls.homeJobDetails + `?jobId=${data.jobId}&tradeId=${data.tradeId}$&specializationId=${data.specializationId}`);\n    }\n     response = await NetworkOps.get(Urls.homeJobDetails + `?jobId=${data.jobId}&tradeId=${data.tradeId}$&specializationId=${data.specializationId}`);\n    setSkeletonLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, data: response.result };\n    }\n    return { success: false };\n}\n\nexport const jobDetailsBuilder = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.get(Urls.jobDetailsBuilder + `?jobId=${data.jobId}`);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, data: response.result };\n    }\n    return { success: false };\n}\n\nexport const getHomeSaveJob = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.get(Urls.homeSaveJob + `?jobId=${data.jobId}&tradeId=${data.tradeId}&specializationId=${data.specializationId}&isSave=${data.isSave}`);\n    setLoading(false);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const postHomeApplyJob = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.postToJson(Urls.homeApplyJob, data)\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, data: response };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const deleteRecentSearch = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.putToJson(Urls.deleteRecentSearch, data)\n    setLoading(false);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const getMilestoneList = async (jobId: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.get(`${Urls.milestoneListBuilder}?jobId=${jobId}`)\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, data: response.result, status: response.status_code };\n    }\n    return { success: false, data: response.result, status: response.status_code };\n}\n\nexport const getMilestoneDetails = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.get(`${Urls.milestoneDetails}?jobId=${data.jobId}&milestoneId=${data.milestoneId}`)\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, data: response.result };\n    }\n    return { success: false, data: response.result };\n}\n\nexport const milestoneAcceptOrDecline = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.putToJson(Urls.milestoneApproveDecline, data)\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, data: response.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false, data: response.result };\n}\n\n\nexport const searchTradies = async (data: any) => {\n\n    const response: FetchResponse = await NetworkOps.postToJson(Urls.homeSearch, data)\n    if (response.status_code === 200) {\n        return { success: true, data: response.result };\n    }\n    return { success: false, data: response.result };\n}\n\nexport const getPopularBuilder = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.get(Urls.getPopularBuilder + `?long=${data.long}&lat=${data.lat}&page=${data.page}&perPage=${data.perPage}`);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, result: response.result };\n    }\n    return { success: false };\n}\n\nexport const getMostViewedJobs = async (data: any) => {\n    setLoading(true);\n    // const response: FetchResponse = await NetworkOps.get(Urls.getMostViewedJobs + `?long=${data.long}&lat=${data.lat}&page=${data.page}&perPage=${data.perPage}`);\n    const response: FetchResponse = await NetworkOps.get(Urls.getMostViewedJobs + `?page=${data.page}&perPage=${data.perPage}`);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, result: response.result };\n    }\n    return { success: false };\n}\n\nexport const getRecommendedJobs = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.get(Urls.getRecommendedJobs + `?page=${data.page}&perPage=${data.perPage}&long=${data.long}&lat=${data.lat}`);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, result: response.result };\n    }\n    return { success: false };\n}\n\nexport const getAdminNotificationData = async ({ admin_notification_id }: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.get(Urls.getAdminNotificationData + `?admin_notification_id=${admin_notification_id}`);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, result: response.result };\n    }\n    return { success: false };\n}\n\nexport const recallHeaderNotification = (isRecall: boolean) => ({ type: actionTypes.RECALL_HEADER_NOTIFICATION, isRecall });"]},"metadata":{},"sourceType":"module"}