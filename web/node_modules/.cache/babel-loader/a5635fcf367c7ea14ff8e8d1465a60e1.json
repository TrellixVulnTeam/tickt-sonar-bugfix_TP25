{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/ListQuotes.tsx\";\nimport React, { Component } from 'react';\nimport dummy from '../../../../assets/images/u_placeholder.jpg';\nimport NumberFormat from 'react-number-format';\nimport { quoteByJobId } from '../../../../redux/quotes/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ListQuotes extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      toggle: true,\n      dataItems: []\n    };\n\n    this.preFetchForQuotes = () => {\n      var _props$history, _props$history$locati;\n\n      const props = this.props;\n      const params = new URLSearchParams(props === null || props === void 0 ? void 0 : (_props$history = props.history) === null || _props$history === void 0 ? void 0 : (_props$history$locati = _props$history.location) === null || _props$history$locati === void 0 ? void 0 : _props$history$locati.search);\n      const quotes_param = params.get('quotes');\n      const viewQuotesParam = params.get('viewQuotes');\n      const jobId = params.get('jobId');\n\n      if (jobId === null || jobId === void 0 ? void 0 : jobId.length) {\n        if (quotes_param === \"true\") {\n          this.fetchQuotesById(jobId, 1);\n        } else {\n          this.fetchQuotesById(jobId, 1);\n        }\n      }\n    };\n\n    this.fetchQuotesById = async (jobId, sortBy) => {\n      let result = await quoteByJobId({\n        jobId,\n        sortBy\n      });\n      console.log({\n        result\n      });\n\n      if (result === null || result === void 0 ? void 0 : result.success) {\n        var _result$data;\n\n        let data = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.resultData;\n\n        if (data) {\n          this.setState({\n            dataItems: data\n          });\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.preFetchForQuotes();\n  }\n\n  render() {\n    var _props$history2, _props$history2$locat;\n\n    const props = this.props;\n    const params = new URLSearchParams(props === null || props === void 0 ? void 0 : (_props$history2 = props.history) === null || _props$history2 === void 0 ? void 0 : (_props$history2$locat = _props$history2.location) === null || _props$history2$locat === void 0 ? void 0 : _props$history2$locat.search);\n    const activeType = params.get('active');\n    const jobId = params.get('jobId');\n    let {\n      dataItems,\n      toggle\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relate\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                if (activeType === \"open\") {\n                  this.props.history.replace(`/jobs?active=open`);\n                  this.props.setJobLabel('open');\n                }\n\n                if (activeType === \"applicant\") {\n                  this.props.history.replace(`/jobs?active=applicant`);\n                  this.props.setJobLabel('applicant');\n                }\n              },\n              className: \"back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '24px'\n              },\n              className: \"title\",\n              children: \"Quotes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.setState({\n              toggle: !this.state.toggle\n            }, () => {\n              this.preFetchForQuotes();\n            });\n          },\n          className: \"fill_grey_btn sort_btn\",\n          children: `${toggle ? 'Highest' : 'Lowest'} quote`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row tradies_row\",\n        children: dataItems.map(item => {\n          var _item$status;\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_6\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                minHeight: '180px'\n              },\n              className: \"tradie_card\",\n              \"data-aos\": \"fade-in\",\n              \"data-aos-delay\": \"250\",\n              \"data-aos-duration\": \"1000\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: () => {\n                  this.props.history.replace(`/jobs?active=${activeType}&viewQuotes=true&jobId=${jobId}&id=${item === null || item === void 0 ? void 0 : item._id}`);\n                  this.props.setJobLabel('quotes');\n                },\n                className: \"more_detail circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user_wrap\",\n                children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                  className: \"u_img\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: (item === null || item === void 0 ? void 0 : item.tradieImage) || dummy,\n                    alt: \"traide-img\",\n                    onError: e => {\n                      var _e$target, _e$target2;\n\n                      if (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.onerror) {\n                        e.target.onerror = null;\n                      }\n\n                      if (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.src) {\n                        e.target.src = dummy;\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: item === null || item === void 0 ? void 0 : item.tradieName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"commn_para\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"rating\",\n                      children: [(item === null || item === void 0 ? void 0 : item.rating) ? (item === null || item === void 0 ? void 0 : item.rating).toFixed(1) : '0', \" | \", (item === null || item === void 0 ? void 0 : item.reviewCount) || '0', \" reviews\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 140,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }, this), (item === null || item === void 0 ? void 0 : item.status) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form_field\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"job_status\",\n                  children: item === null || item === void 0 ? void 0 : (_item$status = item.status) === null || _item$status === void 0 ? void 0 : _item$status.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 78\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 50\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"fill_grey_btn full_btn btn-effect\",\n                onClick: () => {\n                  this.props.history.replace(`/jobs?active=${activeType}&viewQuotes=true&jobId=${jobId}&id=${item === null || item === void 0 ? void 0 : item._id}`);\n                  this.props.setJobLabel('quotes');\n                },\n                children: [`Total quote:`, /*#__PURE__*/_jsxDEV(NumberFormat, {\n                  value: !!(item === null || item === void 0 ? void 0 : item.totalQuoteAmount) ? item === null || item === void 0 ? void 0 : item.totalQuoteAmount : '0',\n                  displayType: 'text',\n                  prefix: '$',\n                  thousandSeparator: true,\n                  isNumericString: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 38\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ListQuotes;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/ListQuotes.tsx"],"names":["React","Component","dummy","NumberFormat","quoteByJobId","ListQuotes","state","toggle","dataItems","preFetchForQuotes","props","params","URLSearchParams","history","location","search","quotes_param","get","viewQuotesParam","jobId","length","fetchQuotesById","sortBy","result","console","log","success","data","resultData","setState","componentDidMount","render","activeType","replace","setJobLabel","fontSize","map","item","minHeight","_id","tradieImage","e","target","onerror","src","tradieName","rating","toFixed","reviewCount","status","toUpperCase","totalQuoteAmount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport dummy from '../../../../assets/images/u_placeholder.jpg';\nimport { withRouter } from 'react-router-dom'\nimport noDataFound from '../../../assets/images/no-search-data.png';\nimport moment from 'moment';\nimport { renderTime } from '../../../../utils/common';\nimport NumberFormat from 'react-number-format';\n\nimport {\n    getAcceptDeclineTradie,\n    quoteByJobId\n} from '../../../../redux/quotes/actions';\n\ntype State = {\n    toggle: boolean,\n    dataItems: any\n}\n\ntype Props = {\n    quotes_param: any,\n    history: any,\n    setJobLabel: any,\n    jobId: String\n}\n\nclass ListQuotes extends Component<Props, State> {\n    state: State = {\n        toggle: true,\n        dataItems: []\n    };\n\n\n    componentDidMount() {\n        this.preFetchForQuotes();\n    }\n\n    preFetchForQuotes = () => {\n        const props: any = this.props;\n        const params = new URLSearchParams(props?.history?.location?.search);\n        const quotes_param: any = params.get('quotes');\n        const viewQuotesParam: any = params.get('viewQuotes');\n        const jobId: any = params.get('jobId');\n        if (jobId?.length) {\n            if (quotes_param === \"true\") {\n                this.fetchQuotesById(jobId, 1)\n            } else {\n                this.fetchQuotesById(jobId, 1)\n            }\n        }\n    }\n\n    fetchQuotesById = async (jobId: String, sortBy: Number) => {\n        let result = await quoteByJobId({ jobId, sortBy });\n        console.log({ result });\n        if (result?.success) {\n            let data = result?.data?.resultData;\n            if (data) {\n                this.setState({ dataItems: data })\n            }\n        }\n    }\n\n\n    render() {\n        const props: any = this.props;\n        const params = new URLSearchParams(props?.history?.location?.search);\n        const activeType = params.get('active');\n        const jobId = params.get('jobId');\n        let { dataItems, toggle } = this.state;\n        return (\n            <React.Fragment>\n                <div className=\"flex_row\">\n                    <div className=\"flex_col_sm_5\">\n                        <div className=\"relate\">\n                            <button\n                                onClick={() => {\n                                    if (activeType === \"open\") {\n                                        this.props.history.replace(`/jobs?active=open`);\n                                        this.props.setJobLabel('open');\n                                    }\n\n                                    if (activeType === \"applicant\") {\n                                        this.props.history.replace(`/jobs?active=applicant`);\n                                        this.props.setJobLabel('applicant');\n                                    }\n                                }}\n                                className=\"back\"></button>\n                            <span style={{ fontSize: '24px' }} className=\"title\">Quotes</span>\n                        </div>\n                    </div>\n                </div>\n\n                <span className=\"sub_title\">\n                    <button\n                        onClick={() => {\n                            this.setState({ toggle: !this.state.toggle }, () => {\n                                this.preFetchForQuotes();\n                            })\n                        }}\n                        className=\"fill_grey_btn sort_btn\">\n                        {`${toggle ? 'Highest' : 'Lowest'} quote`}\n                    </button>\n                </span>\n\n                <div className=\"flex_row tradies_row\">\n                    {dataItems.map((item: any) => (\n                        <div className=\"flex_col_sm_6\">\n                            <div\n                                style={{ minHeight: '180px' }}\n                                className=\"tradie_card\"\n                                data-aos=\"fade-in\"\n                                data-aos-delay=\"250\"\n                                data-aos-duration=\"1000\"\n                            >\n                                <span\n                                    onClick={() => {\n                                        this.props.history.replace(`/jobs?active=${activeType}&viewQuotes=true&jobId=${jobId}&id=${item?._id}`);\n                                        this.props.setJobLabel('quotes');\n                                    }}\n                                    className=\"more_detail circle\">\n                                </span>\n                                <div className=\"user_wrap\">\n                                    <figure className=\"u_img\">\n                                        <img\n                                            src={item?.tradieImage || dummy}\n                                            alt=\"traide-img\"\n                                            onError={(e: any) => {\n                                                if (e?.target?.onerror) {\n                                                    e.target.onerror = null;\n                                                }\n                                                if (e?.target?.src) {\n                                                    e.target.src = dummy;\n                                                }\n                                            }}\n                                        />\n                                    </figure>\n                                    <div className=\"details\">\n                                        <span className=\"name\">{item?.tradieName}</span>\n                                        <p className=\"commn_para\">\n                                            <span className=\"rating\">{item?.rating ? (item?.rating).toFixed(1) : '0'} | {item?.reviewCount || '0'} reviews</span>\n                                        </p>\n                                    </div>\n                                </div>\n\n                                {item?.status && <div className=\"form_field\"><div className=\"job_status\" >{item?.status?.toUpperCase()}</div></div>}\n\n                                <button\n                                    className=\"fill_grey_btn full_btn btn-effect\"\n                                    onClick={() => {\n                                        this.props.history.replace(`/jobs?active=${activeType}&viewQuotes=true&jobId=${jobId}&id=${item?._id}`);\n                                        this.props.setJobLabel('quotes');\n                                    }}>\n                                    {`Total quote:`}\n                                    {<NumberFormat\n                                        value={!!item?.totalQuoteAmount ? item?.totalQuoteAmount : '0'}\n                                        displayType={'text'}\n                                        prefix={'$'}\n                                        thousandSeparator={true}\n                                        isNumericString={true}\n                                    />}\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default ListQuotes;"]},"metadata":{},"sourceType":"module"}