{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/components/banner.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ticktHomeImg from \"../../../../assets/images/tickt_home_screen\";\nimport BannerSearch from \"../../../shared/bannerSearch\"; // import BannerSearch from '../../tradieHome/components/bannerSearch/index';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Banner = props => {\n  _s();\n\n  const [positions, setPositions] = useState([]);\n\n  const preFetch = isTrue => {\n    var _positions_;\n\n    let position = props.position;\n    let positions_ = [];\n\n    if ((position === null || position === void 0 ? void 0 : position.long) && !(positions === null || positions === void 0 ? void 0 : positions.length)) {\n      let long = parseFloat(position === null || position === void 0 ? void 0 : position.long);\n      let lat = parseFloat(position === null || position === void 0 ? void 0 : position.lat);\n      positions_ = [long, lat];\n      setPositions(positions_);\n    }\n\n    if (isTrue && ((_positions_ = positions_) === null || _positions_ === void 0 ? void 0 : _positions_.length)) {\n      redirectToUrl(positions_);\n    }\n  };\n\n  const redirectToUrl = position => {\n    props.history.push({\n      pathname: `search-tradie-results`,\n      state: {\n        name: null,\n        tradeId: null,\n        specializations: null,\n        location: Object.keys(position).length ? {\n          coordinates: position\n        } : null,\n        calender: null,\n        address: null\n      }\n    });\n  };\n\n  useEffect(() => {\n    preFetch();\n  }, []);\n\n  const viewMoreClicked = () => {\n    if (positions === null || positions === void 0 ? void 0 : positions.length) {\n      redirectToUrl(positions);\n    } else {\n      preFetch(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home_banner\",\n    children: /*#__PURE__*/_jsxDEV(\"figure\", {\n      className: \"banner_img_img\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: ticktHomeImg,\n        alt: \"bannerimg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner_container\",\n        children: [/*#__PURE__*/_jsxDEV(BannerSearch, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"heading\",\n            children: \"Need a tradie?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"commn_para\",\n            children: \"Find the right person for the job now.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"fill_btn view-btn\" //  onClick={viewMoreClicked}\n            ,\n            onClick: () => props.history.push(\"/post-new-job\"),\n            children: \"Post a job!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Banner, \"3LkfiWGtBEM8hKuM1fZoE6OzM7U=\");\n\n_c = Banner;\nexport default Banner; /////////////////////////////////////////\n// import { useState, useEffect } from \"react\";\n// import { useLocation, useParams } from \"react-router-dom\";\n// import SearchFilters from \"./searchFilters\";\n// import noData from \"../../assets/images/no-search-data.png\";\n// import closeMap from \"../../assets/images/close-white.png\";\n// // import BannerSearch from '../shared/bannerSearch'\n// import BannerSearchProps from \"../shared/bannerSearchProps\";\n// import TradieBox from \"../shared/tradieBox\";\n// import moment from \"moment\";\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n// import { addListener } from \"process\";\n// import { moengage, mixPanel } from \"../../services/analyticsTools\";\n// import { MoEConstants } from \"../../utils/constants\";\n// import JobTypeList from \"../home/tradieHome/components/jobTypeList\";\n// const SearchResultTradie = (props: any) => {\n//   const location: any = useLocation();\n//   const [stateData, setStateData] = useState(location.state);\n//   const [specialiZationName, setSpecialiZationName] = useState<any>([]);\n//   const [isToggle, setToggleSearch] = useState(false);\n//   const [localInfo, setLocalInfo] = useState({}); // localInfo\n//   const [loading, setLoading] = useState(false);\n//   const [localData, setLocalData] = useState<any>([]);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [hasMore, setHasMore] = useState(true);\n//   const [sortByFilter, setSortByFilter] = useState<any>({\n//     sortByFilterClicked: false,\n//     tradeId: [],\n//     sortChanged: false,\n//     specializationId: [],\n//     specializationName: [],\n//     allSpecializationClicked: false,\n//   });\n//   const { homeSearchJobData } = props; // props here.\n//   useEffect(() => {\n//     props.getRecentSearchList();\n//     let data: any = {\n//       page: 1,\n//       isFiltered: false,\n//     };\n//     if (stateData?.tradeId) {\n//       data[\"tradeId\"] = stateData?.tradeId;\n//     }\n//     //debugger\n//     if (stateData?.specializations) {\n//       data[\"specializationId\"] = stateData?.specializations;\n//       data[\"specializationId\"] = specialiZationName;\n//     }\n//     // tradeId: stateData?.tradeId,\n//     // specializationId: stateData?.specializations,\n//     if (stateData?.location) {\n//       data[\"location\"] = stateData?.location;\n//     }\n//     if (props?.location?.state?.suggestionSelected) {\n//       data[\"address\"] = JSON.stringify(\n//         props?.location?.state?.suggestionSelected\n//       );\n//     }\n//     if (stateData?.calender?.startDate) {\n//       data[\"from_date\"] = moment(stateData?.calender?.startDate).format(\n//         \"YYYY-MM-DD\"\n//       );\n//     }\n//     if (stateData?.calender?.endDate) {\n//       data[\"to_date\"] = moment(stateData?.calender?.endDate).format(\n//         \"YYYY-MM-DD\"\n//       );\n//     }\n//     let spec_count: any = stateData?.specializations?.length;\n//     if (!data?.address || !data?.address?.length) {\n//       delete data?.address;\n//     }\n//     setLocalInfo({\n//       name: stateData?.name,\n//       // count: spec_count === 1 ? 0 : spec_count,\n//       count: 0,\n//       tradeId: data.tradeId,\n//       specializationId: data.specializationId,\n//       specializationName: data.specialiZationName,\n//       location: data.location,\n//       doingLocalChanges: false,\n//       suggestionSelected: stateData?.suggestionSelected,\n//     });\n//     if (data?.address) {\n//       return;\n//     }\n//     // if (!stateData?.suggestionSelected || (data?.location?.coordinates && Array.isArray(data?.location?.coordinates) && data?.location?.coordinates?.length)) {\n//     props.postHomeSearchData(data);\n//     const mData = {\n//       timeStamp: moengage.getCurrentTimeStamp(),\n//       category: props?.tradeListData.find(\n//         (i: any) => i._id === data?.tradeId[0]\n//       )?.trade_name,\n//       ...(data.address && {\n//         location: `${JSON.parse(data.address)?.mainText} ${\n//           JSON.parse(data.address)?.secondaryText\n//         }`,\n//       }),\n//       //'length of hire': '',\n//       ...(data?.from_date && { \"start date\": data?.from_date }),\n//       ...(data?.to_date && { \"end date\": data?.to_date }),\n//     };\n//     moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n//     mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n//     // }\n//   }, []);\n//   const getTitleInfo = (info: any) => {\n//     setLocalInfo(info);\n//   };\n//   const checkIfExist = (data: any) => {\n//     if (data && Array.isArray(data) && data?.length) {\n//       let element_id = data[0].tradieId;\n//       let response = localData.find(\n//         (item: any) => item.tradieId === element_id\n//       );\n//       if (response) {\n//         return true;\n//       }\n//       return false;\n//     }\n//     return false;\n//   };\n//   const filterChangeHandler = (id: any, name: string, newName?: string) => {\n//     if (name === \"jobTypes\") {\n//       if (sortByFilter.jobTypes[0] == id) {\n//         setSortByFilter((prevData: any) => ({ ...prevData, jobTypes: [] }));\n//       } else {\n//         setSortByFilter((prevData: any) => ({ ...prevData, jobTypes: [id] }));\n//       }\n//     } else if (name === \"specializationId\") {\n//       setSortByFilter((prevData: any) => {\n//         var newData: any = [];\n//         var newNameData: any = [];\n//         if (\n//           Array.isArray(prevData.specializationId) &&\n//           prevData?.specializationId?.length\n//         ) {\n//           newData = [...prevData.specializationId];\n//           newNameData = [...prevData.specializationName];\n//         }\n//         // if (\n//         //   Array.isArray(prevData.specializationName) &&\n//         //   prevData?.specializationName?.length\n//         // ) {\n//         //   newNameData = [...prevData.specializationName];\n//         // }\n//         if (sortByFilter.allSpecializationClicked) {\n//           newData = [];\n//           newNameData = [];\n//         }\n//         const itemIndex = newData.indexOf(id);\n//         const itemnameIndex = newData.indexOf(newName);\n//         if (newData.indexOf(id) < 0) {\n//           newData.push(id);\n//           newNameData.push(newName);\n//         } else {\n//           newData.splice(itemIndex, 1);\n//           newNameData.splice(itemIndex, 1);\n//         }\n//         // if (newData.indexOf(newName) < 0) {\n//         //   newNameData.push(newName);\n//         // } else {\n//         //   newNameData.splice(itemnameIndex, 1);\n//         // }\n//         setSpecialiZationName(newNameData);\n//         return {\n//           ...prevData,\n//           specializationId: newData,\n//           specializationName: newNameData,\n//           allSpecializationClicked: false,\n//         };\n//       });\n//     } else if (name == \"categories\") {\n//       if (sortByFilter.tradeId.length && sortByFilter.tradeId[0] == id) {\n//         setSortByFilter((prevData: any) => ({\n//           ...prevData,\n//           tradeId: [],\n//           specializationId: [],\n//           allSpecializationClicked: false,\n//         }));\n//       } else {\n//         setSortByFilter((prevData: any) => ({\n//           ...prevData,\n//           tradeId: [id],\n//           specializationId: [],\n//           specializationName: [],\n//           allSpecializationClicked: false,\n//         }));\n//       }\n//     } else if (name == \"All Clicked\") {\n//       if (sortByFilter.allSpecializationClicked) {\n//         setSpecialiZationName([]);\n//         setSortByFilter((prevData: any) => ({\n//           ...prevData,\n//           allSpecializationClicked: false,\n//           specializationId: [],\n//           specializationName: [],\n//         }));\n//       } else {\n//         const newSpecialization = id.map(({ _id }: { _id: string }) => {\n//           return _id;\n//         });\n//         setSortByFilter((prevData: any) => ({\n//           ...prevData,\n//           allSpecializationClicked: true,\n//           specializationId: newSpecialization,\n//         }));\n//       }\n//     } else if (name == \"Clear All\") {\n//       setSortByFilter((prevData: any) => ({\n//         ...prevData,\n//         allSpecializationClicked: false,\n//         jobTypes: [],\n//         specializationId: [],\n//         specializationName: [],\n//         tradeId: [],\n//       }));\n//     }\n//   };\n//   useEffect(() => {\n//     let newProps = homeSearchJobData;\n//     let propsPage = 1;\n//     let propsTradeId = \"\";\n//     let localTradeId = \"\";\n//     let local_info: any = localInfo;\n//     let local_info_tradeId = \"\";\n//     if (\n//       local_info?.tradeId &&\n//       Array.isArray(local_info?.tradeId) &&\n//       local_info?.tradeId?.length\n//     ) {\n//       local_info_tradeId = local_info?.tradeId[0];\n//     }\n//     if (!hasMore) {\n//       setHasMore((prev: any) => !prev);\n//     }\n//     if (\n//       homeSearchJobData &&\n//       Array.isArray(homeSearchJobData) &&\n//       homeSearchJobData?.length\n//     ) {\n//       propsTradeId = homeSearchJobData[0]?.tradeData[0]?.tradeId;\n//       propsPage = homeSearchJobData[0]?.page;\n//     }\n//     if (localData && Array.isArray(localData) && localData?.length) {\n//       localTradeId = localData[0]?.tradeData[0]?.tradeId;\n//     }\n//     let cp = currentPage * 10;\n//     if (!local_info_tradeId?.length && localTradeId?.length) {\n//       getTitleInfo({\n//         name: \"\",\n//         count: 0,\n//         tradeId: [],\n//         specializationId: [],\n//         location: null,\n//         doingLocalChanges: false,\n//         suggestionSelected: \"\",\n//       });\n//     }\n//     if (propsPage) {\n//       if (local_info_tradeId?.length && localTradeId?.length) {\n//         if (!propsTradeId?.length && local_info_tradeId === localTradeId) {\n//           return;\n//         }\n//       }\n//       if (propsPage === 1 && currentPage === 1) {\n//         setLocalData(newProps);\n//         setCurrentPage(propsPage);\n//       } else if (\n//         propsPage > 1 &&\n//         currentPage > 1 &&\n//         currentPage === propsPage\n//       ) {\n//         if (!checkIfExist(newProps)) {\n//           setLocalData((prev: any) => [...prev, ...newProps]);\n//         }\n//       } else if (propsPage === 1 && currentPage > 1) {\n//         setLocalData(newProps);\n//         setCurrentPage(propsPage);\n//       } else {\n//         if (\n//           !local_info_tradeId?.length &&\n//           localTradeId?.length &&\n//           propsTradeId?.length\n//         ) {\n//           if (localTradeId === propsTradeId) {\n//             setLocalData(newProps);\n//             setCurrentPage(propsPage);\n//           }\n//         }\n//       }\n//     }\n//   }, [homeSearchJobData]);\n//   const handleChangeToggle = (value: any) => {\n//     setToggleSearch(value);\n//   };\n//   // let homeSearchJobData: any = props.homeSearchJobData;\n//   let local_info: any = localInfo;\n//   let isLoading: any = props.isLoading;\n//   console.log(\n//     specialiZationName,\n//     \"bchdbchjdbcjdcbjdbcjdcbjdc=========================================\"\n//   );\n//   return (\n//     <div className=\"app_wrapper\">\n//       <div className={`top_search ${isToggle ? \"active\" : \"\"}`}>\n//         <BannerSearchProps\n//           {...props}\n//           tradeListData={props.tradeListData}\n//           showOnlyTradeName={props.history?.location?.state?.showOnlyTradeName}\n//           getTitleInfo={getTitleInfo}\n//           localInfo={localInfo}\n//           handleChangeToggle={handleChangeToggle}\n//         />\n//       </div>\n//       <div className=\"search_result\">\n//         <div className=\"section_wrapper\">\n//           <div className=\"custom_container\">\n//             <div className=\"flex_row mob_srch_option\">\n//               <div className=\"flex_col_sm_6\"></div>\n//               <div className=\"flex_col_sm_6 text-right\">\n//                 <button\n//                   onClick={() => {\n//                     setToggleSearch(true);\n//                   }}\n//                   className=\"fill_grey_btn btn-effect\"\n//                 >\n//                   Modify Search\n//                 </button>\n//               </div>\n//             </div>\n//             <div className=\"result_heading\">\n//               <div className=\"flex_row\">\n//                 <div className=\"flex_col_sm_8\">\n//                   <span className=\"title\">\n//                     {`${\n//                       specialiZationName\n//                         ? specialiZationName[0]\n//                         : local_info?.name || \"\"\n//                     } ${\n//                       local_info?.count > 1 ? `+${local_info?.count - 1}` : \"\"\n//                     }`}\n//                     <span className=\"count\">\n//                       {`${localData?.length || 0} result(s)`}\n//                     </span>\n//                   </span>\n//                   <SearchFilters\n//                     {...props}\n//                     localInfo={localInfo}\n//                     getTitleInfo={getTitleInfo}\n//                     filterChangeHandler={filterChangeHandler}\n//                     sortByFilter={sortByFilter}\n//                     setSortByFilter={setSortByFilter}\n//                   />\n//                 </div>\n//               </div>\n//             </div>\n//             <InfiniteScroll\n//               dataLength={localData?.length}\n//               next={() => {\n//                 if (localData?.length < currentPage * 10) {\n//                   // setHasMore(false);\n//                 } else {\n//                   let cp = currentPage + 1;\n//                   setCurrentPage((prev: any) => prev + 1);\n//                   let local_info: any = localInfo;\n//                   let data: any = {\n//                     page: cp,\n//                     isFiltered: false,\n//                   };\n//                   if (local_info?.location) {\n//                     data[\"location\"] = local_info?.location;\n//                   }\n//                   if (local_info?.tradeId?.length) {\n//                     data[\"tradeId\"] = local_info?.tradeId;\n//                   }\n//                   if (local_info?.specializationId?.length) {\n//                     data[\"specializationId\"] = local_info?.specializationId;\n//                   }\n//                   if (\n//                     props?.location?.state?.suggestionSelected &&\n//                     props?.location?.state?.suggestionSelected !== \"{}\"\n//                   ) {\n//                     data[\"address\"] = JSON.stringify(\n//                       props?.location?.state?.suggestionSelected\n//                     );\n//                   }\n//                   if (local_info?.from_date) {\n//                     data[\"from_date\"] = local_info?.from_date;\n//                   }\n//                   if (local_info?.to_date) {\n//                     data[\"to_date\"] = local_info?.to_date;\n//                   }\n//                   if (local_info?.sortBy > 0) {\n//                     data[\"sortBy\"] = local_info?.sortBy;\n//                   }\n//                   if (!data?.hasOwnProperty(\"specializationId\")) {\n//                     data[\"isFiltered\"] = true;\n//                   }\n//                   props.postHomeSearchData(data);\n//                 }\n//               }}\n//               hasMore={hasMore}\n//               loader={<></>}\n//               className=\"flex_row tradies_row\"\n//             >\n//               {localData?.length ? (\n//                 localData.map((item: any, index: number) => (\n//                   <TradieBox item={item} index={index} />\n//                 ))\n//               ) : !isLoading && !localData?.length ? (\n//                 <div className=\"no_record\">\n//                   <figure className=\"no_img\">\n//                     <img src={noData} alt=\"data not found\" />\n//                   </figure>\n//                   <span>{\"No Data Found\"}</span>\n//                 </div>\n//               ) : null}\n//             </InfiniteScroll>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default SearchResultTradie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/home/builderHome/components/banner.tsx"],"names":["React","useEffect","useState","ticktHomeImg","BannerSearch","Banner","props","positions","setPositions","preFetch","isTrue","position","positions_","long","length","parseFloat","lat","redirectToUrl","history","push","pathname","state","name","tradeId","specializations","location","Object","keys","coordinates","calender","address","viewMoreClicked"],"mappings":"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":["import React, { useEffect, useState } from \"react\";\nimport Searchicon from \"../../../../assets/images/main-search.png\";\nimport search from \"../../../../assets/images/ic-search.png\";\nimport cross from \"../../../../assets/images/close-black.png\";\nimport bannerimg from \"../../../../assets/images/home-banner.png\";\nimport ticktHomeImg from \"../../../../assets/images/tickt_home_screen\";\nimport close from \"../../../../assets/images/icon-close-1.png\";\nimport Location from \"../../../../assets/images/ic-location.png\";\nimport uc from \"../../../../assets/images/uc.png\";\nimport icgps from \"../../../../assets/images/ic-gps.png\";\nimport BannerSearch from \"../../../shared/bannerSearch\";\n// import BannerSearch from '../../tradieHome/components/bannerSearch/index';\n\nconst Banner = (props: any) => {\n  const [positions, setPositions] = useState<any>([]);\n\n  const preFetch = (isTrue?: boolean) => {\n    let position: any = props.position;\n    let positions_: any = [];\n    if (position?.long && !positions?.length) {\n      let long: any = parseFloat(position?.long);\n      let lat: any = parseFloat(position?.lat);\n      positions_ = [long, lat];\n      setPositions(positions_);\n    }\n    if (isTrue && positions_?.length) {\n      redirectToUrl(positions_);\n    }\n  };\n\n  const redirectToUrl = (position: any) => {\n    props.history.push({\n      pathname: `search-tradie-results`,\n      state: {\n        name: null,\n        tradeId: null,\n        specializations: null,\n        location: Object.keys(position).length\n          ? { coordinates: position }\n          : null,\n        calender: null,\n        address: null,\n      },\n    });\n  };\n\n  useEffect(() => {\n    preFetch();\n  }, []);\n\n  const viewMoreClicked = () => {\n    if (positions?.length) {\n      redirectToUrl(positions);\n    } else {\n      preFetch(true);\n    }\n  };\n\n  return (\n    <div className=\"home_banner\">\n      <figure className=\"banner_img_img\">\n        <img src={ticktHomeImg} alt=\"bannerimg\" />\n        <div className=\"banner_container\">\n          <BannerSearch {...props} />\n          <div className=\"text-center\">\n            <h1 className=\"heading\">Need a tradie?</h1>\n            <p className=\"commn_para\">Find the right person for the job now.</p>\n            <button\n              className=\"fill_btn view-btn\"\n              //  onClick={viewMoreClicked}\n              onClick={() => props.history.push(\"/post-new-job\")}\n            >\n              Post a job!\n            </button>\n          </div>\n        </div>\n      </figure>\n    </div>\n  );\n};\n\nexport default Banner;\n/////////////////////////////////////////\n// import { useState, useEffect } from \"react\";\n// import { useLocation, useParams } from \"react-router-dom\";\n// import SearchFilters from \"./searchFilters\";\n// import noData from \"../../assets/images/no-search-data.png\";\n// import closeMap from \"../../assets/images/close-white.png\";\n// // import BannerSearch from '../shared/bannerSearch'\n// import BannerSearchProps from \"../shared/bannerSearchProps\";\n// import TradieBox from \"../shared/tradieBox\";\n// import moment from \"moment\";\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n// import { addListener } from \"process\";\n// import { moengage, mixPanel } from \"../../services/analyticsTools\";\n// import { MoEConstants } from \"../../utils/constants\";\n// import JobTypeList from \"../home/tradieHome/components/jobTypeList\";\n\n// const SearchResultTradie = (props: any) => {\n//   const location: any = useLocation();\n\n//   const [stateData, setStateData] = useState(location.state);\n//   const [specialiZationName, setSpecialiZationName] = useState<any>([]);\n//   const [isToggle, setToggleSearch] = useState(false);\n//   const [localInfo, setLocalInfo] = useState({}); // localInfo\n//   const [loading, setLoading] = useState(false);\n//   const [localData, setLocalData] = useState<any>([]);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [hasMore, setHasMore] = useState(true);\n//   const [sortByFilter, setSortByFilter] = useState<any>({\n//     sortByFilterClicked: false,\n//     tradeId: [],\n//     sortChanged: false,\n//     specializationId: [],\n//     specializationName: [],\n//     allSpecializationClicked: false,\n//   });\n\n//   const { homeSearchJobData } = props; // props here.\n\n//   useEffect(() => {\n//     props.getRecentSearchList();\n\n//     let data: any = {\n//       page: 1,\n//       isFiltered: false,\n//     };\n\n//     if (stateData?.tradeId) {\n//       data[\"tradeId\"] = stateData?.tradeId;\n//     }\n\n//     //debugger\n\n//     if (stateData?.specializations) {\n//       data[\"specializationId\"] = stateData?.specializations;\n//       data[\"specializationId\"] = specialiZationName;\n//     }\n//     // tradeId: stateData?.tradeId,\n//     // specializationId: stateData?.specializations,\n\n//     if (stateData?.location) {\n//       data[\"location\"] = stateData?.location;\n//     }\n\n//     if (props?.location?.state?.suggestionSelected) {\n//       data[\"address\"] = JSON.stringify(\n//         props?.location?.state?.suggestionSelected\n//       );\n//     }\n\n//     if (stateData?.calender?.startDate) {\n//       data[\"from_date\"] = moment(stateData?.calender?.startDate).format(\n//         \"YYYY-MM-DD\"\n//       );\n//     }\n//     if (stateData?.calender?.endDate) {\n//       data[\"to_date\"] = moment(stateData?.calender?.endDate).format(\n//         \"YYYY-MM-DD\"\n//       );\n//     }\n//     let spec_count: any = stateData?.specializations?.length;\n\n//     if (!data?.address || !data?.address?.length) {\n//       delete data?.address;\n//     }\n\n//     setLocalInfo({\n//       name: stateData?.name,\n//       // count: spec_count === 1 ? 0 : spec_count,\n//       count: 0,\n//       tradeId: data.tradeId,\n//       specializationId: data.specializationId,\n//       specializationName: data.specialiZationName,\n//       location: data.location,\n//       doingLocalChanges: false,\n//       suggestionSelected: stateData?.suggestionSelected,\n//     });\n\n//     if (data?.address) {\n//       return;\n//     }\n\n//     // if (!stateData?.suggestionSelected || (data?.location?.coordinates && Array.isArray(data?.location?.coordinates) && data?.location?.coordinates?.length)) {\n//     props.postHomeSearchData(data);\n//     const mData = {\n//       timeStamp: moengage.getCurrentTimeStamp(),\n//       category: props?.tradeListData.find(\n//         (i: any) => i._id === data?.tradeId[0]\n//       )?.trade_name,\n//       ...(data.address && {\n//         location: `${JSON.parse(data.address)?.mainText} ${\n//           JSON.parse(data.address)?.secondaryText\n//         }`,\n//       }),\n//       //'length of hire': '',\n//       ...(data?.from_date && { \"start date\": data?.from_date }),\n//       ...(data?.to_date && { \"end date\": data?.to_date }),\n//     };\n//     moengage.moE_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n//     mixPanel.mixP_SendEvent(MoEConstants.SEARCHED_FOR_TRADIES, mData);\n//     // }\n//   }, []);\n\n//   const getTitleInfo = (info: any) => {\n//     setLocalInfo(info);\n//   };\n\n//   const checkIfExist = (data: any) => {\n//     if (data && Array.isArray(data) && data?.length) {\n//       let element_id = data[0].tradieId;\n//       let response = localData.find(\n//         (item: any) => item.tradieId === element_id\n//       );\n//       if (response) {\n//         return true;\n//       }\n//       return false;\n//     }\n//     return false;\n//   };\n//   const filterChangeHandler = (id: any, name: string, newName?: string) => {\n//     if (name === \"jobTypes\") {\n//       if (sortByFilter.jobTypes[0] == id) {\n//         setSortByFilter((prevData: any) => ({ ...prevData, jobTypes: [] }));\n//       } else {\n//         setSortByFilter((prevData: any) => ({ ...prevData, jobTypes: [id] }));\n//       }\n//     } else if (name === \"specializationId\") {\n//       setSortByFilter((prevData: any) => {\n//         var newData: any = [];\n//         var newNameData: any = [];\n//         if (\n//           Array.isArray(prevData.specializationId) &&\n//           prevData?.specializationId?.length\n//         ) {\n//           newData = [...prevData.specializationId];\n//           newNameData = [...prevData.specializationName];\n//         }\n\n//         // if (\n//         //   Array.isArray(prevData.specializationName) &&\n//         //   prevData?.specializationName?.length\n//         // ) {\n//         //   newNameData = [...prevData.specializationName];\n//         // }\n//         if (sortByFilter.allSpecializationClicked) {\n//           newData = [];\n//           newNameData = [];\n//         }\n//         const itemIndex = newData.indexOf(id);\n//         const itemnameIndex = newData.indexOf(newName);\n//         if (newData.indexOf(id) < 0) {\n//           newData.push(id);\n//           newNameData.push(newName);\n//         } else {\n//           newData.splice(itemIndex, 1);\n//           newNameData.splice(itemIndex, 1);\n//         }\n//         // if (newData.indexOf(newName) < 0) {\n//         //   newNameData.push(newName);\n//         // } else {\n//         //   newNameData.splice(itemnameIndex, 1);\n//         // }\n\n//         setSpecialiZationName(newNameData);\n//         return {\n//           ...prevData,\n//           specializationId: newData,\n//           specializationName: newNameData,\n//           allSpecializationClicked: false,\n//         };\n//       });\n//     } else if (name == \"categories\") {\n//       if (sortByFilter.tradeId.length && sortByFilter.tradeId[0] == id) {\n//         setSortByFilter((prevData: any) => ({\n//           ...prevData,\n//           tradeId: [],\n//           specializationId: [],\n//           allSpecializationClicked: false,\n//         }));\n//       } else {\n//         setSortByFilter((prevData: any) => ({\n//           ...prevData,\n//           tradeId: [id],\n//           specializationId: [],\n//           specializationName: [],\n//           allSpecializationClicked: false,\n//         }));\n//       }\n//     } else if (name == \"All Clicked\") {\n//       if (sortByFilter.allSpecializationClicked) {\n//         setSpecialiZationName([]);\n//         setSortByFilter((prevData: any) => ({\n//           ...prevData,\n//           allSpecializationClicked: false,\n//           specializationId: [],\n//           specializationName: [],\n//         }));\n//       } else {\n//         const newSpecialization = id.map(({ _id }: { _id: string }) => {\n//           return _id;\n//         });\n//         setSortByFilter((prevData: any) => ({\n//           ...prevData,\n//           allSpecializationClicked: true,\n//           specializationId: newSpecialization,\n//         }));\n//       }\n//     } else if (name == \"Clear All\") {\n//       setSortByFilter((prevData: any) => ({\n//         ...prevData,\n//         allSpecializationClicked: false,\n//         jobTypes: [],\n//         specializationId: [],\n//         specializationName: [],\n//         tradeId: [],\n//       }));\n//     }\n//   };\n//   useEffect(() => {\n//     let newProps = homeSearchJobData;\n//     let propsPage = 1;\n//     let propsTradeId = \"\";\n//     let localTradeId = \"\";\n//     let local_info: any = localInfo;\n//     let local_info_tradeId = \"\";\n//     if (\n//       local_info?.tradeId &&\n//       Array.isArray(local_info?.tradeId) &&\n//       local_info?.tradeId?.length\n//     ) {\n//       local_info_tradeId = local_info?.tradeId[0];\n//     }\n\n//     if (!hasMore) {\n//       setHasMore((prev: any) => !prev);\n//     }\n\n//     if (\n//       homeSearchJobData &&\n//       Array.isArray(homeSearchJobData) &&\n//       homeSearchJobData?.length\n//     ) {\n//       propsTradeId = homeSearchJobData[0]?.tradeData[0]?.tradeId;\n//       propsPage = homeSearchJobData[0]?.page;\n//     }\n\n//     if (localData && Array.isArray(localData) && localData?.length) {\n//       localTradeId = localData[0]?.tradeData[0]?.tradeId;\n//     }\n\n//     let cp = currentPage * 10;\n\n//     if (!local_info_tradeId?.length && localTradeId?.length) {\n//       getTitleInfo({\n//         name: \"\",\n//         count: 0,\n//         tradeId: [],\n//         specializationId: [],\n//         location: null,\n//         doingLocalChanges: false,\n//         suggestionSelected: \"\",\n//       });\n//     }\n\n//     if (propsPage) {\n//       if (local_info_tradeId?.length && localTradeId?.length) {\n//         if (!propsTradeId?.length && local_info_tradeId === localTradeId) {\n//           return;\n//         }\n//       }\n\n//       if (propsPage === 1 && currentPage === 1) {\n//         setLocalData(newProps);\n//         setCurrentPage(propsPage);\n//       } else if (\n//         propsPage > 1 &&\n//         currentPage > 1 &&\n//         currentPage === propsPage\n//       ) {\n//         if (!checkIfExist(newProps)) {\n//           setLocalData((prev: any) => [...prev, ...newProps]);\n//         }\n//       } else if (propsPage === 1 && currentPage > 1) {\n//         setLocalData(newProps);\n//         setCurrentPage(propsPage);\n//       } else {\n//         if (\n//           !local_info_tradeId?.length &&\n//           localTradeId?.length &&\n//           propsTradeId?.length\n//         ) {\n//           if (localTradeId === propsTradeId) {\n//             setLocalData(newProps);\n//             setCurrentPage(propsPage);\n//           }\n//         }\n//       }\n//     }\n//   }, [homeSearchJobData]);\n\n//   const handleChangeToggle = (value: any) => {\n//     setToggleSearch(value);\n//   };\n\n//   // let homeSearchJobData: any = props.homeSearchJobData;\n//   let local_info: any = localInfo;\n//   let isLoading: any = props.isLoading;\n//   console.log(\n//     specialiZationName,\n//     \"bchdbchjdbcjdcbjdbcjdcbjdc=========================================\"\n//   );\n//   return (\n//     <div className=\"app_wrapper\">\n//       <div className={`top_search ${isToggle ? \"active\" : \"\"}`}>\n//         <BannerSearchProps\n//           {...props}\n//           tradeListData={props.tradeListData}\n//           showOnlyTradeName={props.history?.location?.state?.showOnlyTradeName}\n//           getTitleInfo={getTitleInfo}\n//           localInfo={localInfo}\n//           handleChangeToggle={handleChangeToggle}\n//         />\n//       </div>\n//       <div className=\"search_result\">\n//         <div className=\"section_wrapper\">\n//           <div className=\"custom_container\">\n//             <div className=\"flex_row mob_srch_option\">\n//               <div className=\"flex_col_sm_6\"></div>\n//               <div className=\"flex_col_sm_6 text-right\">\n//                 <button\n//                   onClick={() => {\n//                     setToggleSearch(true);\n//                   }}\n//                   className=\"fill_grey_btn btn-effect\"\n//                 >\n//                   Modify Search\n//                 </button>\n//               </div>\n//             </div>\n\n//             <div className=\"result_heading\">\n//               <div className=\"flex_row\">\n//                 <div className=\"flex_col_sm_8\">\n//                   <span className=\"title\">\n//                     {`${\n//                       specialiZationName\n//                         ? specialiZationName[0]\n//                         : local_info?.name || \"\"\n//                     } ${\n//                       local_info?.count > 1 ? `+${local_info?.count - 1}` : \"\"\n//                     }`}\n//                     <span className=\"count\">\n//                       {`${localData?.length || 0} result(s)`}\n//                     </span>\n//                   </span>\n//                   <SearchFilters\n//                     {...props}\n//                     localInfo={localInfo}\n//                     getTitleInfo={getTitleInfo}\n//                     filterChangeHandler={filterChangeHandler}\n//                     sortByFilter={sortByFilter}\n//                     setSortByFilter={setSortByFilter}\n//                   />\n//                 </div>\n//               </div>\n//             </div>\n\n//             <InfiniteScroll\n//               dataLength={localData?.length}\n//               next={() => {\n//                 if (localData?.length < currentPage * 10) {\n//                   // setHasMore(false);\n//                 } else {\n//                   let cp = currentPage + 1;\n//                   setCurrentPage((prev: any) => prev + 1);\n//                   let local_info: any = localInfo;\n\n//                   let data: any = {\n//                     page: cp,\n//                     isFiltered: false,\n//                   };\n\n//                   if (local_info?.location) {\n//                     data[\"location\"] = local_info?.location;\n//                   }\n\n//                   if (local_info?.tradeId?.length) {\n//                     data[\"tradeId\"] = local_info?.tradeId;\n//                   }\n\n//                   if (local_info?.specializationId?.length) {\n//                     data[\"specializationId\"] = local_info?.specializationId;\n//                   }\n\n//                   if (\n//                     props?.location?.state?.suggestionSelected &&\n//                     props?.location?.state?.suggestionSelected !== \"{}\"\n//                   ) {\n//                     data[\"address\"] = JSON.stringify(\n//                       props?.location?.state?.suggestionSelected\n//                     );\n//                   }\n\n//                   if (local_info?.from_date) {\n//                     data[\"from_date\"] = local_info?.from_date;\n//                   }\n\n//                   if (local_info?.to_date) {\n//                     data[\"to_date\"] = local_info?.to_date;\n//                   }\n\n//                   if (local_info?.sortBy > 0) {\n//                     data[\"sortBy\"] = local_info?.sortBy;\n//                   }\n\n//                   if (!data?.hasOwnProperty(\"specializationId\")) {\n//                     data[\"isFiltered\"] = true;\n//                   }\n\n//                   props.postHomeSearchData(data);\n//                 }\n//               }}\n//               hasMore={hasMore}\n//               loader={<></>}\n//               className=\"flex_row tradies_row\"\n//             >\n//               {localData?.length ? (\n//                 localData.map((item: any, index: number) => (\n//                   <TradieBox item={item} index={index} />\n//                 ))\n//               ) : !isLoading && !localData?.length ? (\n//                 <div className=\"no_record\">\n//                   <figure className=\"no_img\">\n//                     <img src={noData} alt=\"data not found\" />\n//                   </figure>\n//                   <span>{\"No Data Found\"}</span>\n//                 </div>\n//               ) : null}\n//             </InfiniteScroll>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SearchResultTradie;\n"]},"metadata":{},"sourceType":"module"}