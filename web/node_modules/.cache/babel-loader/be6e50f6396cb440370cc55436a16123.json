{"ast":null,"code":"import * as actionTypes from './constants';\nconst initialState = {\n  isLoading: false,\n  isSkeletonLoading: false,\n  showToast: false,\n  toastType: undefined,\n  toastMessage: undefined,\n  showNotification: false,\n  notificationData: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    case actionTypes.SET_SKELETON_LOADING:\n      return { ...state,\n        isSkeletonLoading: action.payload\n      };\n\n    case actionTypes.SHOW_HIDE_TOAST:\n      return { ...state,\n        showToast: action.showToast,\n        toastType: action.toastType,\n        toastMessage: action.toastMessage\n      };\n\n    case actionTypes.SHOW_HIDE_NOTIFICATION:\n      return { ...state,\n        showNotification: action.showNotification,\n        notificationData: action.data\n      };\n\n    case actionTypes.UNREAD_MESSAGE_COUNT:\n      return { ...state,\n        unreadMessageCount: action.count\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/redux/common/reducers.ts"],"names":["actionTypes","initialState","isLoading","isSkeletonLoading","showToast","toastType","undefined","toastMessage","showNotification","notificationData","reducer","state","action","type","SET_LOADING","payload","SET_SKELETON_LOADING","SHOW_HIDE_TOAST","SHOW_HIDE_NOTIFICATION","data","UNREAD_MESSAGE_COUNT","unreadMessageCount","count"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,aAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,KADM;AAEjBC,EAAAA,iBAAiB,EAAE,KAFF;AAGjBC,EAAAA,SAAS,EAAE,KAHM;AAIjBC,EAAAA,SAAS,EAAEC,SAJM;AAKjBC,EAAAA,YAAY,EAAED,SALG;AAMjBE,EAAAA,gBAAgB,EAAE,KAND;AAOjBC,EAAAA,gBAAgB,EAAE;AAPD,CAArB;;AAUA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAuC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,WAAW,CAACc,WAAjB;AACI,aAAO,EACH,GAAGH,KADA;AAEHT,QAAAA,SAAS,EAAEU,MAAM,CAACG;AAFf,OAAP;;AAIJ,SAAKf,WAAW,CAACgB,oBAAjB;AACI,aAAO,EACH,GAAGL,KADA;AAEHR,QAAAA,iBAAiB,EAAES,MAAM,CAACG;AAFvB,OAAP;;AAIJ,SAAKf,WAAW,CAACiB,eAAjB;AACI,aAAO,EACH,GAAGN,KADA;AAEHP,QAAAA,SAAS,EAAEQ,MAAM,CAACR,SAFf;AAGHC,QAAAA,SAAS,EAAEO,MAAM,CAACP,SAHf;AAIHE,QAAAA,YAAY,EAAEK,MAAM,CAACL;AAJlB,OAAP;;AAMJ,SAAKP,WAAW,CAACkB,sBAAjB;AACI,aAAO,EACH,GAAGP,KADA;AAEHH,QAAAA,gBAAgB,EAAEI,MAAM,CAACJ,gBAFtB;AAGHC,QAAAA,gBAAgB,EAAEG,MAAM,CAACO;AAHtB,OAAP;;AAKJ,SAAKnB,WAAW,CAACoB,oBAAjB;AACI,aAAO,EACH,GAAGT,KADA;AAEHU,QAAAA,kBAAkB,EAAET,MAAM,CAACU;AAFxB,OAAP;;AAIJ;AAAS,aAAOX,KAAP;AA7Bb;AA+BH,CAhCD;;AAkCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from './constants';\n\nconst initialState = {\n    isLoading: false,\n    isSkeletonLoading: false,\n    showToast: false,\n    toastType: undefined,\n    toastMessage: undefined,\n    showNotification: false,\n    notificationData: null,\n}\n\nconst reducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case actionTypes.SET_LOADING:\n            return {\n                ...state,\n                isLoading: action.payload,\n            }\n        case actionTypes.SET_SKELETON_LOADING:\n            return {\n                ...state,\n                isSkeletonLoading: action.payload,\n            }\n        case actionTypes.SHOW_HIDE_TOAST:\n            return {\n                ...state,\n                showToast: action.showToast,\n                toastType: action.toastType,\n                toastMessage: action.toastMessage,\n            }\n        case actionTypes.SHOW_HIDE_NOTIFICATION:\n            return {\n                ...state,\n                showNotification: action.showNotification,\n                notificationData: action.data,\n            }\n        case actionTypes.UNREAD_MESSAGE_COUNT:\n            return {\n                ...state,\n                unreadMessageCount: action.count,\n            }\n        default: return state\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}