{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/resetPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { callForgotPassword } from '../../../redux/auth/actions';\nimport Constants from '../../../utils/constants';\nimport regex from '../../../utils/regex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResetPassword = props => {\n  _s();\n\n  const [errors, setErrors] = useState({});\n  const [email, setEmail] = useState('');\n\n  const changeHandler = e => {\n    let inputVal = e.target.value.replaceAll(' ', '');\n    setEmail(inputVal);\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!email) {\n      newErrors.email = Constants.errorStrings.emailEmpty;\n    } else {\n      const nameRegex = new RegExp(regex.email);\n\n      if (!nameRegex.test(email.replaceAll(' ', ''))) {\n        newErrors.email = Constants.errorStrings.emailErr;\n      }\n    }\n\n    setErrors(newErrors);\n    return !Object.keys(newErrors).length;\n  };\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    if (validateForm()) {\n      const data = {\n        email: email.replaceAll(' ', '')\n      };\n      const res = await callForgotPassword(data);\n\n      if (res.success) {\n        const email_ = email.replaceAll(' ', '');\n        props.updateSteps(props.step + 1, {\n          email: email_\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form_label\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text_field\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"detect_input\",\n            name: \"email\",\n            placeholder: \"Enter Email\",\n            value: email,\n            onChange: changeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), !!errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"show_label\",\n          children: \"Enter the email associated with your account and we will send a code to reset your password.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fill_btn btn-effect\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ResetPassword, \"gW/iN128rtXUNSNCWa/5T2J6AmQ=\");\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/forgetPassword/components/resetPassword.tsx"],"names":["React","useState","callForgotPassword","Constants","regex","ResetPassword","props","errors","setErrors","email","setEmail","changeHandler","e","inputVal","target","value","replaceAll","validateForm","newErrors","errorStrings","emailEmpty","nameRegex","RegExp","test","emailErr","Object","keys","length","onSubmit","preventDefault","data","res","success","email_","updateSteps","step"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { callForgotPassword } from '../../../redux/auth/actions';\nimport Constants from '../../../utils/constants';\nimport regex from '../../../utils/regex'\ninterface Propstype {\n    updateSteps: (num: number, data: any) => void\n    step: number\n    history?: any\n    emailAddress?: any,\n}\n\nconst ResetPassword = (props: Propstype) => {\n    const [errors, setErrors] = useState<any>({});\n    const [email, setEmail] = useState<any>('')\n\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputVal = e.target.value.replaceAll(' ', '');\n        setEmail(inputVal)\n    }\n\n    const validateForm = () => {\n        const newErrors: any = {};\n        if (!email) {\n            newErrors.email = Constants.errorStrings.emailEmpty;\n        } else {\n            const nameRegex = new RegExp(regex.email);\n            if (!nameRegex.test(email.replaceAll(' ', ''))) {\n                newErrors.email = Constants.errorStrings.emailErr\n            }\n        }\n        setErrors(newErrors);\n        return !Object.keys(newErrors).length;\n    }\n\n    const onSubmit = async (e: any) => {\n        e.preventDefault();\n        if (validateForm()) {\n            const data: any = {\n                email: email.replaceAll(' ', '')\n            }\n                const res: any = await callForgotPassword(data)\n                if (res.success) {\n                    const email_ = email.replaceAll(' ', '');\n                    props.updateSteps(props.step + 1, { email: email_ })\n                }\n        }\n    }\n\n    return (\n        <div className=\"form_wrapper\">\n            <form onSubmit={onSubmit}>\n                <div className=\"form_field\">\n                    <label className=\"form_label\">Email</label>\n                    <div className=\"text_field\">\n                        <input\n                            className=\"detect_input\"\n                            name=\"email\"\n                            placeholder=\"Enter Email\"\n                            value={email}\n                            onChange={changeHandler}\n                        />\n                    </div>\n                    {!!errors.email && <span className=\"error_msg\">{errors.email}</span>}\n                </div>\n\n                <div className=\"form_field\">\n                    <span className=\"show_label\">\n                        Enter the email associated with your account and we will send a code to reset your password.\n                    </span>\n                </div>\n                <div className=\"form_field\">\n                    <button className=\"fill_btn btn-effect\">Next</button>\n                </div>\n            </form>\n\n        </div>\n    )\n}\n\nexport default ResetPassword\n"]},"metadata":{},"sourceType":"module"}