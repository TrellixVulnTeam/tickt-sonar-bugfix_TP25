{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/common/toast.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setShowToast } from '../redux/common/actions';\nimport noInternet from '../assets/images/internet-connection-graphic.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TYPES = {\n  success: 'success',\n  error: 'failed',\n  warning: 'warning',\n  info: 'info'\n}; // handles the auto hiding of toast\n\nconst TOAST_TIMEOUT = 3000;\nconst checkConnection = window.navigator.onLine;\n\nconst Toast = props => {\n  _s();\n\n  const [isOnline, setNetwork] = useState(checkConnection);\n  useEffect(() => {\n    window.addEventListener(\"offline\", handleConnectionChange);\n    window.addEventListener(\"online\", handleConnectionChange);\n    return () => {\n      window.removeEventListener(\"offline\", handleConnectionChange);\n      window.removeEventListener(\"online\", handleConnectionChange);\n    };\n  }, []);\n  useEffect(() => {\n    setTimeout(() => hideToast(), TOAST_TIMEOUT);\n  }, [props.showToast]);\n  useEffect(() => {\n    if (isOnline) {\n      addRemoveClass(false);\n    }\n  }, [isOnline]);\n\n  const handleConnectionChange = () => {\n    const condition = navigator.onLine ? 'online' : 'offline';\n\n    if (condition === 'online') {\n      const webPing = setInterval(() => {\n        fetch('//google.com', {\n          mode: 'no-cors'\n        }).then(() => {\n          setNetwork(true);\n\n          (() => {\n            return clearInterval(webPing);\n          })();\n        }).catch(() => setNetwork(false));\n      }, 2000);\n      return;\n    }\n\n    return setNetwork(false);\n  };\n\n  const hideToast = () => {\n    setShowToast(false);\n  };\n\n  const addRemoveClass = if_add => {\n    var element = document.getElementsByTagName(\"BODY\")[0];\n\n    if (if_add) {\n      element.classList.add(\"hide_scroll\");\n    } else {\n      element.classList.remove(\"hide_scroll\");\n    }\n  };\n\n  const renderToast = () => {\n    return props.toastMessage;\n  };\n\n  console.log({\n    isOnline\n  });\n  return !!props.showToast ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `body-message active ${props.toastType}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapppr\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"commn_para\",\n        children: renderToast()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this) : !isOnline ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"offline_mode\",\n    children: [addRemoveClass(true), /*#__PURE__*/_jsxDEV(\"figure\", {\n      className: \"no_img\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: noInternet,\n        alt: \"no-internet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: 'No Internet Connection'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this) : null;\n};\n\n_s(Toast, \"ASNMz0cu/DBwTHPpw3BnA0DJfqA=\");\n\n_c = Toast;\nToast.defaultProps = {\n  toastType: TYPES.error,\n  toastMessage: 'Something Went Wrong'\n};\n\nconst mapStateToProps = state => {\n  return {\n    showToast: state.common.showToast,\n    toastType: state.common.toastType,\n    toastMessage: state.common.toastMessage\n  };\n};\n\nexport default connect(mapStateToProps)(Toast);\n\nvar _c;\n\n$RefreshReg$(_c, \"Toast\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/common/toast.tsx"],"names":["useState","useEffect","connect","setShowToast","noInternet","TYPES","success","error","warning","info","TOAST_TIMEOUT","checkConnection","window","navigator","onLine","Toast","props","isOnline","setNetwork","addEventListener","handleConnectionChange","removeEventListener","setTimeout","hideToast","showToast","addRemoveClass","condition","webPing","setInterval","fetch","mode","then","clearInterval","catch","if_add","element","document","getElementsByTagName","classList","add","remove","renderToast","toastMessage","console","log","toastType","defaultProps","mapStateToProps","state","common"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setShowToast } from '../redux/common/actions';\nimport noInternet from '../assets/images/internet-connection-graphic.png';\n\nexport const TYPES = {\n    success: 'success',\n    error: 'failed',\n    warning: 'warning',\n    info: 'info'\n}\n\n// handles the auto hiding of toast\nconst TOAST_TIMEOUT = 3000;\nconst checkConnection = window.navigator.onLine;\nconst Toast = (props: any) => {\n    const [isOnline, setNetwork] = useState(checkConnection);\n\n    useEffect(() => {\n        window.addEventListener(\"offline\", handleConnectionChange);\n        window.addEventListener(\"online\", handleConnectionChange);\n        return () => {\n            window.removeEventListener(\"offline\", handleConnectionChange);\n            window.removeEventListener(\"online\", handleConnectionChange);\n        };\n    }, []);\n\n    useEffect(() => {\n        setTimeout(() => hideToast(), TOAST_TIMEOUT);\n    }, [props.showToast]);\n\n    useEffect(() => {\n        if (isOnline) {\n            addRemoveClass(false);\n        }\n    }, [isOnline]);\n\n    const handleConnectionChange = () => {\n        const condition = navigator.onLine ? 'online' : 'offline';\n        if (condition === 'online') {\n            const webPing = setInterval(\n                () => {\n                    fetch('//google.com', {\n                        mode: 'no-cors',\n                    })\n                        .then(() => {\n                            setNetwork(true);\n                            (() => {\n                                return clearInterval(webPing)\n                            })();\n                        }).catch(() => setNetwork(false))\n                }, 2000);\n            return;\n        }\n        return setNetwork(false);\n    }\n\n    const hideToast = () => {\n        setShowToast(false);\n    }\n\n    const addRemoveClass = (if_add: boolean) => {\n        var element = document.getElementsByTagName(\"BODY\")[0];\n        if (if_add) {\n            element.classList.add(\"hide_scroll\");\n        } else {\n            element.classList.remove(\"hide_scroll\");\n        }\n    }\n\n    const renderToast = () => {\n        return props.toastMessage;\n    }\n    console.log({ isOnline });\n    return !!props.showToast ? (\n        <div className={`body-message active ${props.toastType}`}>\n            <div className=\"wrapppr\">\n                <p className=\"commn_para\">{renderToast()}</p>\n            </div>\n        </div>\n    ) : !isOnline ? (\n        <div className=\"offline_mode\">\n            {addRemoveClass(true)}\n            <figure className=\"no_img\">\n                <img src={noInternet} alt=\"no-internet\" />\n            </figure>\n            <div className=\"content\">\n                <h1>{'No Internet Connection'}</h1>\n            </div>\n        </div>\n    ) : null;\n}\n\nToast.defaultProps = {\n    toastType: TYPES.error,\n    toastMessage: 'Something Went Wrong'\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        showToast: state.common.showToast,\n        toastType: state.common.toastType,\n        toastMessage: state.common.toastMessage,\n    }\n}\n\nexport default connect(mapStateToProps)(Toast);"]},"metadata":{},"sourceType":"module"}