{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderInfo/builderPostedJobs.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport TradieJobInfoBox from '../../common/tradieJobInfoBox';\nimport { getBuildersJob } from '../../redux/jobs/actions';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport noData from '../../assets/images/no-search-data.png';\nimport storageService from '../../utils/storageService';\nimport { getAllPostedJob } from '../../redux/profile/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nconst BuilderPostedJobs = props => {\n  _s();\n\n  var _props$location;\n\n  const params = new URLSearchParams((_props$location = props.location) === null || _props$location === void 0 ? void 0 : _props$location.search);\n  const builderId = params.get('bId');\n  const totalJobsCount = Number(params.get('jobCount'));\n  const userType = storageService.getItem('userType');\n  const [buildersJob, setBuildersJob] = useState([]);\n  const [buildersJobPageNo, setBuildersJobPageNo] = useState(1);\n  const [hasMoreItems, setHasMoreItems] = useState(true);\n  useEffect(() => {\n    callJobList();\n  }, []);\n\n  const callJobList = async () => {\n    if (buildersJob.length >= totalJobsCount) {\n      setHasMoreItems(false);\n      return;\n    }\n\n    const data = {\n      builderId: builderId,\n      page: buildersJobPageNo\n    };\n    const res1 = userType === 1 ? await getBuildersJob(data) : await getAllPostedJob(data.page);\n\n    if (res1.success) {\n      var _res1$data;\n\n      const allJobs = [...buildersJob, ...res1.data];\n\n      if (((_res1$data = res1.data) === null || _res1$data === void 0 ? void 0 : _res1$data.length) < 10) {\n        setHasMoreItems(false);\n      }\n\n      setBuildersJob(allJobs);\n      setBuildersJobPageNo(buildersJobPageNo + 1);\n    }\n  };\n\n  const backButtonClicked = () => {\n    var _props$history;\n\n    (_props$history = props.history) === null || _props$history === void 0 ? void 0 : _props$history.goBack();\n  };\n\n  console.log(totalJobsCount, \"totalJobsCount\", buildersJob, \"buildersJob\", buildersJobPageNo, \"buildersJobPageNo\", hasMoreItems, \"hasMoreItems\");\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: buildersJob.length,\n    next: callJobList,\n    hasMore: hasMoreItems,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'app_wrapper',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section_wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relate\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"back\",\n              onClick: backButtonClicked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"title\",\n              children: `${totalJobsCount || 0} jobs`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row tradies_row\",\n            children: (buildersJob === null || buildersJob === void 0 ? void 0 : buildersJob.length) > 0 || props.isLoading ? buildersJob === null || buildersJob === void 0 ? void 0 : buildersJob.map(jobData => {\n              return /*#__PURE__*/_createElement(TradieJobInfoBox, {\n                item: jobData,\n                ...props,\n                key: jobData.jobId,\n                userType: storageService.getItem('userType'),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 44\n                }\n              });\n            }) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no_record\",\n              children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                className: \"no_img\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: noData,\n                  alt: \"data not found\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"No Data Found\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BuilderPostedJobs, \"HrJtWLDUSzojnPR9sZLuPawb8No=\");\n\n_c = BuilderPostedJobs;\n\nconst mapState = state => ({\n  isLoading: state.common.isLoading\n});\n\nexport default connect(mapState, null)(BuilderPostedJobs);\n\nvar _c;\n\n$RefreshReg$(_c, \"BuilderPostedJobs\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderInfo/builderPostedJobs.tsx"],"names":["useState","useEffect","connect","TradieJobInfoBox","getBuildersJob","InfiniteScroll","noData","storageService","getAllPostedJob","BuilderPostedJobs","props","params","URLSearchParams","location","search","builderId","get","totalJobsCount","Number","userType","getItem","buildersJob","setBuildersJob","buildersJobPageNo","setBuildersJobPageNo","hasMoreItems","setHasMoreItems","callJobList","length","data","page","res1","success","allJobs","backButtonClicked","history","goBack","console","log","isLoading","map","jobData","jobId","mapState","state","common"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport TradieJobInfoBox from '../../common/tradieJobInfoBox';\nimport { getBuildersJob } from '../../redux/jobs/actions';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport noData from '../../assets/images/no-search-data.png';\nimport storageService from '../../utils/storageService';\nimport { getAllPostedJob } from '../../redux/profile/actions';\n\ninterface PropsType {\n    location: any,\n    history: any,\n    isLoading: boolean,\n}\n\nconst BuilderPostedJobs = (props: PropsType) => {\n    const params = new URLSearchParams(props.location?.search);\n    const builderId: any = params.get('bId');\n    const totalJobsCount: any = Number(params.get('jobCount'));\n    const userType = storageService.getItem('userType');\n\n    const [buildersJob, setBuildersJob] = useState<Array<any>>([]);\n    const [buildersJobPageNo, setBuildersJobPageNo] = useState<number>(1);\n    const [hasMoreItems, setHasMoreItems] = useState<boolean>(true);\n\n    useEffect(() => {\n        callJobList();\n    }, []);\n\n    const callJobList = async () => {\n        if (buildersJob.length >= totalJobsCount) {\n            setHasMoreItems(false);\n            return;\n        }\n        const data = {\n            builderId: builderId,\n            page: buildersJobPageNo\n        }\n        const res1 = userType === 1 ? await getBuildersJob(data) : await getAllPostedJob(data.page);\n        if (res1.success) {\n            const allJobs = [...buildersJob, ...res1.data];\n            if (res1.data?.length < 10) {\n                setHasMoreItems(false);\n            }\n            setBuildersJob(allJobs);\n            setBuildersJobPageNo(buildersJobPageNo + 1);\n        }\n    }\n\n    const backButtonClicked = () => {\n        props.history?.goBack();\n    }\n    console.log(totalJobsCount, \"totalJobsCount\", buildersJob, \"buildersJob\", buildersJobPageNo, \"buildersJobPageNo\", hasMoreItems, \"hasMoreItems\")\n\n    return (\n        <InfiniteScroll\n            dataLength={buildersJob.length}\n            next={callJobList}\n            hasMore={hasMoreItems}\n            loader={<h4></h4>}\n        >\n            <div className={'app_wrapper'}>\n                <div className=\"section_wrapper\">\n                    <div className=\"custom_container\">\n                        <div className=\"relate\">\n                            <button className=\"back\" onClick={backButtonClicked}></button>\n                            <span className=\"title\">{`${totalJobsCount || 0} jobs`}</span>\n                        </div>\n                        <div className=\"flex_row tradies_row\">\n                            {(buildersJob?.length > 0 || props.isLoading) ?\n                                buildersJob?.map((jobData: any) => {\n                                    return <TradieJobInfoBox item={jobData} {...props} key={jobData.jobId} userType={storageService.getItem('userType')} />\n                                })\n                                :\n                                <div className=\"no_record\">\n                                    <figure className=\"no_img\">\n                                        <img src={noData} alt=\"data not found\" />\n                                    </figure>\n                                    <span>No Data Found</span>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </InfiniteScroll>\n    )\n}\n\nconst mapState = (state: any) => ({\n    isLoading: state.common.isLoading\n});\n\nexport default connect(mapState, null)(BuilderPostedJobs);\n"]},"metadata":{},"sourceType":"module"}