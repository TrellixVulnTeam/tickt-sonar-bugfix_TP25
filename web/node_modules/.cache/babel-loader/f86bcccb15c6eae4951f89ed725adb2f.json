{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/common/auth/socialAuth.tsx\";\nimport Constants from '../../utils/constants';\nimport gmail from '../../assets/images/ic-google.png';\nimport linkedin from '../../assets/images/ic-linkedin.png';\nimport { checkSocialId, getLinkedinProfile, socialSignupLogin } from '../../redux/auth/actions'; // @ts-ignore\n\nimport { GoogleLogin } from 'react-google-login'; // @ts-ignore\n\nimport { LinkedIn } from 'react-linkedin-login-oauth2'; // @ts-ignore\n//import AppleLogin from 'react-apple-login';\n\nimport { loginAnonymously } from '../../services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SocialAuth = props => {\n  const onFailure = error => {\n    console.log(error);\n  };\n\n  const googleResponse = async response => {\n    const res = await checkSocialId({\n      socialId: response.googleId,\n      email: response.profileObj.email\n    });\n\n    if (res.success) {\n      if (res.isProfileCompleted) {\n        var _response$profileObj, _response$profileObj2;\n\n        //in case of existing social account\n        let data = {\n          authType: \"login\",\n          email: (_response$profileObj = response.profileObj) === null || _response$profileObj === void 0 ? void 0 : _response$profileObj.email,\n          socialId: (_response$profileObj2 = response.profileObj) === null || _response$profileObj2 === void 0 ? void 0 : _response$profileObj2.googleId,\n          accountType: \"google\",\n          ...(props.userType && {\n            user_type: props.userType\n          })\n        };\n        const res = await socialSignupLogin(data);\n\n        if (res.success) {\n          loginAnonymously();\n\n          if (props.showModal) {\n            props.setShowModal(!props.showModal);\n          }\n\n          props.history.push('/');\n        }\n      } else {\n        //in case of new social account\n        props.onNewAccount(response.profileObj, 'google');\n      }\n    }\n  };\n\n  const linkedInResponse = async response => {\n    const resSocial = await getLinkedinProfile({\n      code: response.code,\n      redirect_uri: Constants.LinkedInAuth.REDIRECT_URI\n    });\n    const resCheckId = await checkSocialId({\n      socialId: resSocial.result.id,\n      email: resSocial.result.email\n    });\n\n    if (resCheckId.success) {\n      if (resCheckId.isProfileCompleted) {\n        var _resSocial$result, _resSocial$result2;\n\n        //in case of existing social account\n        let data = {\n          authType: \"login\",\n          email: (_resSocial$result = resSocial.result) === null || _resSocial$result === void 0 ? void 0 : _resSocial$result.email,\n          accountType: \"linkedIn\",\n          socialId: (_resSocial$result2 = resSocial.result) === null || _resSocial$result2 === void 0 ? void 0 : _resSocial$result2.id,\n          ...(props.userType && {\n            user_type: props.userType\n          })\n        };\n        const resAuth = await socialSignupLogin(data);\n        console.log('resAuth: ', resAuth);\n\n        if (resAuth.success) {\n          loginAnonymously(); // firebaseLogInWithEmailPassword(authData, loginRes);\n\n          if (props.showModal) {\n            props.setShowModal(!props.showModal);\n          }\n\n          props.history.push('/');\n        }\n      } else {\n        //in case of new social account\n        props.onNewAccount({\n          name: resSocial.result.firstName,\n          email: resSocial.result.email,\n          socialId: resSocial.result.id\n        }, 'linkedIn');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"continue_with\",\n    children: [/*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: Constants.SocialAuth.GOOGLE_CLIENT_ID,\n      onSuccess: googleResponse,\n      onFailure: onFailure,\n      render: renderProps => /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"hvr-ripple-out\",\n        onClick: renderProps.onClick,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gmail,\n          alt: \"google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LinkedIn, {\n      clientId: Constants.LinkedInAuth.CLIENT_ID,\n      onSuccess: linkedInResponse,\n      onFailure: onFailure,\n      scope: \"r_liteprofile r_emailaddress\",\n      state: \"gjhcbf355ESDE\",\n      redirectUri: Constants.LinkedInAuth.REDIRECT_URI,\n      renderElement: renderProps => /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"hvr-ripple-out\",\n        onClick: renderProps.onClick,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: linkedin,\n          alt: \"linkedin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 55\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SocialAuth;\nexport default SocialAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocialAuth\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/common/auth/socialAuth.tsx"],"names":["Constants","gmail","linkedin","checkSocialId","getLinkedinProfile","socialSignupLogin","GoogleLogin","LinkedIn","loginAnonymously","SocialAuth","props","onFailure","error","console","log","googleResponse","response","res","socialId","googleId","email","profileObj","success","isProfileCompleted","data","authType","accountType","userType","user_type","showModal","setShowModal","history","push","onNewAccount","linkedInResponse","resSocial","code","redirect_uri","LinkedInAuth","REDIRECT_URI","resCheckId","result","id","resAuth","name","firstName","GOOGLE_CLIENT_ID","renderProps","onClick","CLIENT_ID"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,iBAA5C,QAAqE,0BAArE,C,CACA;;AACA,SAASC,WAAT,QAA4B,oBAA5B,C,CACA;;AACA,SAASC,QAAT,QAAyB,6BAAzB,C,CACA;AACA;;AACA,SAASC,gBAAT,QAAiC,yBAAjC;;;AAWA,MAAMC,UAAU,GAAIC,KAAD,IAAsB;AAErC,QAAMC,SAAS,GAAIC,KAAD,IAAgB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAFD;;AAIA,QAAMG,cAAc,GAAG,MAAOC,QAAP,IAAyB;AAC5C,UAAMC,GAAG,GAAG,MAAMd,aAAa,CAAC;AAAEe,MAAAA,QAAQ,EAAEF,QAAQ,CAACG,QAArB;AAA+BC,MAAAA,KAAK,EAAEJ,QAAQ,CAACK,UAAT,CAAoBD;AAA1D,KAAD,CAA/B;;AACA,QAAIH,GAAG,CAACK,OAAR,EAAiB;AACb,UAAIL,GAAG,CAACM,kBAAR,EAA4B;AAAA;;AACxB;AACA,YAAIC,IAAS,GAAG;AACZC,UAAAA,QAAQ,EAAE,OADE;AAEZL,UAAAA,KAAK,0BAAEJ,QAAQ,CAACK,UAAX,yDAAE,qBAAqBD,KAFhB;AAGZF,UAAAA,QAAQ,2BAAEF,QAAQ,CAACK,UAAX,0DAAE,sBAAqBF,QAHnB;AAIZO,UAAAA,WAAW,EAAE,QAJD;AAKZ,cAAIhB,KAAK,CAACiB,QAAN,IAAkB;AAAEC,YAAAA,SAAS,EAAElB,KAAK,CAACiB;AAAnB,WAAtB;AALY,SAAhB;AAOA,cAAMV,GAAG,GAAG,MAAMZ,iBAAiB,CAACmB,IAAD,CAAnC;;AACA,YAAIP,GAAG,CAACK,OAAR,EAAiB;AACbd,UAAAA,gBAAgB;;AAChB,cAAIE,KAAK,CAACmB,SAAV,EAAqB;AACjBnB,YAAAA,KAAK,CAACoB,YAAN,CAAmB,CAACpB,KAAK,CAACmB,SAA1B;AACH;;AACDnB,UAAAA,KAAK,CAACqB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH;AACJ,OAjBD,MAiBO;AACH;AACAtB,QAAAA,KAAK,CAACuB,YAAN,CAAmBjB,QAAQ,CAACK,UAA5B,EAAwC,QAAxC;AACH;AACJ;AACJ,GAzBD;;AA2BA,QAAMa,gBAAgB,GAAG,MAAOlB,QAAP,IAAyB;AAC9C,UAAMmB,SAAS,GAAG,MAAM/B,kBAAkB,CAAC;AAAEgC,MAAAA,IAAI,EAAEpB,QAAQ,CAACoB,IAAjB;AAAuBC,MAAAA,YAAY,EAAErC,SAAS,CAACsC,YAAV,CAAuBC;AAA5D,KAAD,CAA1C;AACA,UAAMC,UAAU,GAAG,MAAMrC,aAAa,CAAC;AAAEe,MAAAA,QAAQ,EAAEiB,SAAS,CAACM,MAAV,CAAiBC,EAA7B;AAAiCtB,MAAAA,KAAK,EAAEe,SAAS,CAACM,MAAV,CAAiBrB;AAAzD,KAAD,CAAtC;;AACA,QAAIoB,UAAU,CAAClB,OAAf,EAAwB;AACpB,UAAIkB,UAAU,CAACjB,kBAAf,EAAmC;AAAA;;AAC/B;AACA,YAAIC,IAAS,GAAG;AACZC,UAAAA,QAAQ,EAAE,OADE;AAEZL,UAAAA,KAAK,uBAAEe,SAAS,CAACM,MAAZ,sDAAE,kBAAkBrB,KAFb;AAGZM,UAAAA,WAAW,EAAE,UAHD;AAIZR,UAAAA,QAAQ,wBAAEiB,SAAS,CAACM,MAAZ,uDAAE,mBAAkBC,EAJhB;AAKZ,cAAIhC,KAAK,CAACiB,QAAN,IAAkB;AAAEC,YAAAA,SAAS,EAAElB,KAAK,CAACiB;AAAnB,WAAtB;AALY,SAAhB;AAOA,cAAMgB,OAAO,GAAG,MAAMtC,iBAAiB,CAACmB,IAAD,CAAvC;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB6B,OAAzB;;AACA,YAAIA,OAAO,CAACrB,OAAZ,EAAqB;AACjBd,UAAAA,gBAAgB,GADC,CAEjB;;AACA,cAAIE,KAAK,CAACmB,SAAV,EAAqB;AACjBnB,YAAAA,KAAK,CAACoB,YAAN,CAAmB,CAACpB,KAAK,CAACmB,SAA1B;AACH;;AACDnB,UAAAA,KAAK,CAACqB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH;AACJ,OAnBD,MAmBO;AACH;AACAtB,QAAAA,KAAK,CAACuB,YAAN,CAAmB;AAAEW,UAAAA,IAAI,EAAET,SAAS,CAACM,MAAV,CAAiBI,SAAzB;AAAoCzB,UAAAA,KAAK,EAAEe,SAAS,CAACM,MAAV,CAAiBrB,KAA5D;AAAmEF,UAAAA,QAAQ,EAAEiB,SAAS,CAACM,MAAV,CAAiBC;AAA9F,SAAnB,EAAuH,UAAvH;AACH;AACJ;AACJ,GA5BD;;AA8BA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI,QAAC,WAAD;AACI,MAAA,QAAQ,EAAE1C,SAAS,CAACS,UAAV,CAAqBqC,gBADnC;AAEI,MAAA,SAAS,EAAE/B,cAFf;AAGI,MAAA,SAAS,EAAEJ,SAHf;AAII,MAAA,MAAM,EAAGoC,WAAD,iBAAuB;AAAG,QAAA,SAAS,EAAC,gBAAb;AAA8B,QAAA,OAAO,EAAEA,WAAW,CAACC,OAAnD;AAAA,+BAC3B;AAAK,UAAA,GAAG,EAAE/C,KAAV;AAAiB,UAAA,GAAG,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AAD2B;AAAA;AAAA;AAAA;AAAA;AAJnC;AAAA;AAAA;AAAA;AAAA,YADJ,eASI,QAAC,QAAD;AACI,MAAA,QAAQ,EAAED,SAAS,CAACsC,YAAV,CAAuBW,SADrC;AAEI,MAAA,SAAS,EAAEf,gBAFf;AAGI,MAAA,SAAS,EAAEvB,SAHf;AAII,MAAA,KAAK,EAAC,8BAJV;AAKI,MAAA,KAAK,EAAC,eALV;AAMI,MAAA,WAAW,EAAEX,SAAS,CAACsC,YAAV,CAAuBC,YANxC;AAOI,MAAA,aAAa,EAAGQ,WAAD,iBAAuB;AAAG,QAAA,SAAS,EAAC,gBAAb;AAA8B,QAAA,OAAO,EAAEA,WAAW,CAACC,OAAnD;AAAA,+BAClC;AAAK,UAAA,GAAG,EAAE9C,QAAV;AAAoB,UAAA,GAAG,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA;AADkC;AAAA;AAAA;AAAA;AAAA;AAP1C;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH,CAjGD;;KAAMO,U;AAmGN,eAAeA,UAAf","sourcesContent":["import Constants from '../../utils/constants';\nimport gmail from '../../assets/images/ic-google.png';\nimport linkedin from '../../assets/images/ic-linkedin.png';\nimport { checkSocialId, getLinkedinProfile, socialSignupLogin } from '../../redux/auth/actions';\n// @ts-ignore\nimport { GoogleLogin } from 'react-google-login';\n// @ts-ignore\nimport { LinkedIn } from 'react-linkedin-login-oauth2';\n// @ts-ignore\n//import AppleLogin from 'react-apple-login';\nimport { loginAnonymously } from '../../services/firebase';\n\ninterface Propstype {\n    onNewAccount: Function,\n    history: any,\n    userType?: number,\n    showModal?: boolean,\n    modalUpdateSteps: (data: any) => void,\n    setShowModal: (data: any) => void,\n}\n\nconst SocialAuth = (props: Propstype) => {\n\n    const onFailure = (error: any) => {\n        console.log(error);\n    };\n\n    const googleResponse = async (response: any) => {\n        const res = await checkSocialId({ socialId: response.googleId, email: response.profileObj.email })\n        if (res.success) {\n            if (res.isProfileCompleted) {\n                //in case of existing social account\n                let data: any = {\n                    authType: \"login\",\n                    email: response.profileObj?.email,\n                    socialId: response.profileObj?.googleId,\n                    accountType: \"google\",\n                    ...(props.userType && { user_type: props.userType })\n                }\n                const res = await socialSignupLogin(data)\n                if (res.success) {\n                    loginAnonymously();\n                    if (props.showModal) {\n                        props.setShowModal(!props.showModal);\n                    }\n                    props.history.push('/');\n                }\n            } else {\n                //in case of new social account\n                props.onNewAccount(response.profileObj, 'google');\n            }\n        }\n    };\n\n    const linkedInResponse = async (response: any) => {\n        const resSocial = await getLinkedinProfile({ code: response.code, redirect_uri: Constants.LinkedInAuth.REDIRECT_URI })\n        const resCheckId = await checkSocialId({ socialId: resSocial.result.id, email: resSocial.result.email })\n        if (resCheckId.success) {\n            if (resCheckId.isProfileCompleted) {\n                //in case of existing social account\n                let data: any = {\n                    authType: \"login\",\n                    email: resSocial.result?.email,\n                    accountType: \"linkedIn\",\n                    socialId: resSocial.result?.id,\n                    ...(props.userType && { user_type: props.userType })\n                }\n                const resAuth = await socialSignupLogin(data)\n                console.log('resAuth: ', resAuth);\n                if (resAuth.success) {\n                    loginAnonymously();\n                    // firebaseLogInWithEmailPassword(authData, loginRes);\n                    if (props.showModal) {\n                        props.setShowModal(!props.showModal);\n                    }\n                    props.history.push('/');\n                }\n            } else {\n                //in case of new social account\n                props.onNewAccount({ name: resSocial.result.firstName, email: resSocial.result.email, socialId: resSocial.result.id }, 'linkedIn');\n            }\n        }\n    }\n\n    return (\n        <div className=\"continue_with\">\n            <GoogleLogin\n                clientId={Constants.SocialAuth.GOOGLE_CLIENT_ID}\n                onSuccess={googleResponse}\n                onFailure={onFailure}\n                render={(renderProps: any) => (<a className=\"hvr-ripple-out\" onClick={renderProps.onClick}>\n                    <img src={gmail} alt=\"google\" />\n                </a>)}\n            />\n            <LinkedIn\n                clientId={Constants.LinkedInAuth.CLIENT_ID}\n                onSuccess={linkedInResponse}\n                onFailure={onFailure}\n                scope=\"r_liteprofile r_emailaddress\"\n                state=\"gjhcbf355ESDE\"\n                redirectUri={Constants.LinkedInAuth.REDIRECT_URI}\n                renderElement={(renderProps: any) => (<a className=\"hvr-ripple-out\" onClick={renderProps.onClick} >\n                    <img src={linkedin} alt=\"linkedin\" />\n                </a>\n                )}\n            />\n            {/* <AppleLogin\n                clientId=\"com.react.apple.login\"\n                redirectURI=\"https://redirectUrl.com\"\n            /> */}\n            {/* <a href=\"javascript:void(0)\" >\n                <img src={linkedin} alt=\"linkedin\" />\n            </a> */}\n            {/* <a href=\"javascript:void(0)\">\n                <img src={apple} alt=\"apple\" />\n            </a> */}\n        </div>\n    )\n}\n\nexport default SocialAuth\n"]},"metadata":{},"sourceType":"module"}