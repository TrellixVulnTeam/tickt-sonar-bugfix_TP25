{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/postJob.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport PostNewJob from \"./components/postNewJob\";\nimport JobType from \"./components/jobType\";\nimport AddLocation from \"./components/addLocation\";\nimport Payment from \"./components/payment\";\nimport ChooseTiming from \"./components/chooseTiming\";\nimport ChooseTimingMileStone from \"./components/chooseTimingMileStone\";\nimport AddMilestone from \"./components/addMilestone\";\nimport JobMilestones from \"./components/jobMilestones\";\nimport SaveTemplate from \"./components/saveTemplate\";\nimport TemplateSavedSuccess from \"./components/templateSavedSucess\";\nimport JobPostedSuccess from \"./components/jobPostedSuccess\";\nimport UploadMedia from \"./components/uploadMedia\";\nimport MileStoneTemplates from \"./components/milestoneTemplates\";\nimport JobDetails from \"./components/jobDetails\";\nimport EditMilestone from \"./components/editMileStone\";\nimport { callCategories, republishJob, getOpenJobDetails } from \"../../redux/jobs/actions\";\nimport moment from \"moment\";\nimport { setShowToast } from \"../../redux/common/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport templateImage from \"../../assets/images/job-posted-bg.jpg\";\nimport { randomColors as getRandomColors } from \"../../utils/common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostJob = props => {\n  _s();\n\n  const history = useHistory();\n  const {\n    callTradeList,\n    isLoading,\n    tradeListData,\n    updateMileStoneIndex,\n    updateMileStoneTimings,\n    updateDetailScreen,\n    editMilestoneTiming,\n    editDetailPage,\n    builderProfile,\n    editMilestoneId\n  } = props;\n  const [randomColors, setRandomColors] = useState();\n  const [categoriesData, setCategoriesData] = useState([]);\n  const [step, setStep] = useState(1);\n  const [stepsCompleted, setStepsCompleted] = useState([]);\n  const [data, setData] = useState({});\n  console.log(\"data: \", data);\n  const [editMileStone, setEditMileStone] = useState(0);\n  const [milestones, setMileStones] = useState([]);\n  const [forceupdate, setForceUpdate] = useState({});\n  const [jobId, setJobId] = useState(\"\");\n  const [jobUpdateParam, setJobUpdateParam] = useState(false);\n  const getCategories = useCallback(async () => {\n    const {\n      categories: categoriesData\n    } = await callCategories();\n    setCategoriesData(categoriesData);\n    let colors = getRandomColors();\n    setRandomColors(colors);\n  }, []);\n  useEffect(() => {\n    getCategories();\n    callTradeList();\n  }, [getCategories, callTradeList, milestones]);\n  const getJobDetails = useCallback(async (jobId, updateOpen) => {\n    let res = null;\n\n    if (updateOpen) {\n      res = await getOpenJobDetails(jobId);\n    } else {\n      res = await republishJob(jobId);\n    }\n\n    if (res.success) {\n      setData({ ...res.data,\n        specialization: res.data.specialization.map(({\n          specializationId\n        }) => specializationId),\n        categories: res.data.categories.map(({\n          categoryId\n        }) => categoryId),\n        job_type: res.data.job_type.map(({\n          jobTypeId\n        }) => jobTypeId),\n        amount: `${res.data.amount}`\n      });\n      setMileStones(res.data.milestones.map(({\n        milestone_name,\n        isPhotoevidence,\n        recommended_hours,\n        from_date,\n        to_date\n      }) => ({\n        milestone_name,\n        isPhotoevidence,\n        recommended_hours,\n        from_date: moment(new Date(from_date)).format(\"MM-DD-YYYY\"),\n        to_date: moment(new Date(to_date)).format(\"MM-DD-YYYY\")\n      })));\n      setStepsCompleted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n    }\n  }, []);\n  useEffect(() => {\n    var _history$location;\n\n    const params = new URLSearchParams((_history$location = history.location) === null || _history$location === void 0 ? void 0 : _history$location.search);\n    const jobId = params.get(\"jobId\") || \"\"; // this param is missing in the case of re-publish.\n\n    const update = params.get(\"update\") || \"\";\n\n    if (jobId && update !== \"true\") {\n      if (jobId) {\n        setJobId(jobId);\n        getJobDetails(jobId);\n      }\n    } else {\n      if (update == \"true\") {\n        setJobUpdateParam(true);\n        getJobDetails(jobId, true);\n      }\n    }\n  }, [getJobDetails, history.location]);\n\n  const clearParentStates = () => {\n    setData({});\n    setMileStones([]);\n    setStepsCompleted([]);\n  };\n\n  const handleStepComplete = stepData => {\n    setData(prevData => ({ ...prevData,\n      ...stepData\n    }));\n    setStepsCompleted(prevSteps => prevSteps.concat(step));\n    setStep(prevStep => prevStep + 1);\n  };\n\n  const handleStepJustUpdate = (stepData, goto) => {\n    setData(prevData => ({ ...prevData,\n      ...stepData\n    }));\n\n    if (goto === true) {\n      handleStepForward(14);\n    }\n\n    if (goto !== true && goto > 0) {\n      handleStepForward(goto);\n    }\n  };\n\n  const newMileStoneScreen = index => {\n    let milestone_clone = milestones;\n\n    if (!milestone_clone[index]) {\n      milestone_clone[index] = {};\n    }\n\n    setMileStones(milestone_clone);\n    Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n  };\n\n  const handleStepMileStone = (data, index) => {\n    let milestone_clone = milestones;\n    milestone_clone[index][\"milestone_name\"] = data.milestone_name;\n    milestone_clone[index][\"isPhotoevidence\"] = data.isPhotoevidence;\n    milestone_clone[index][\"recommended_hours\"] = data.recommended_hours;\n    setMileStones(milestone_clone);\n    Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n  };\n\n  const addTimeToMileStone = (time, index, skip) => {\n    const default_format = \"MM-DD-YYYY\";\n    let milestone_clone = milestones;\n    let checkIsValid = true;\n\n    if (!skip && (milestone_clone === null || milestone_clone === void 0 ? void 0 : milestone_clone.length)) {\n      let filter_milestone = milestone_clone.filter((item_mile, index_mile) => index_mile !== index);\n      let count_times = {};\n      if (filter_milestone === null || filter_milestone === void 0 ? void 0 : filter_milestone.length) filter_milestone.forEach(mile => {\n        let msw = moment(mile.from_date, default_format).isValid();\n        let mew = moment(mile.to_date, default_format).isValid();\n        let tsw = moment(time.from_date, default_format).isValid();\n        let tew = moment(time.to_date, default_format).isValid();\n        let mile_start = mile.from_date;\n        let mile_end = mile.to_date;\n        let time_start = time.from_date;\n        let time_end = time.to_date;\n\n        if (count_times[mile_start] == undefined) {\n          count_times[mile_start] = 1;\n        } else {\n          count_times[mile_start] = count_times[mile_start] + 1;\n        }\n\n        if (count_times[mile_end] == undefined) {\n          count_times[mile_end] = 1;\n        } else {\n          count_times[mile_end] = count_times[mile_end] + 1;\n        }\n\n        if (count_times[mile_start] === 4) {\n          console.log(\"Inside ---\", {\n            ms: mile_start == time_start\n          });\n\n          if (mile_start == time_start || mile_start == time_end) {\n            console.log(\"Inside - 1 ---\");\n            setShowToast(true, \"Selected start data is fully engage\");\n            return;\n          }\n        }\n\n        if (count_times[mile_end] === 4) {\n          if (mile_end == time_start || mile_end == time_end) {\n            setShowToast(true, \"Selected end data is fully engage\");\n            return;\n          }\n        }\n\n        if (msw && mew) {\n          if (tsw && tew) {// let checkIfSame = moment(time_start, default_format).isSame(moment(mile_start, default_format)) && moment(time_end, default_format).isSame(moment(mile_end, default_format));\n            // if (checkIfSame) {\n            //     checkIsValid = false;\n            // }\n            // if (!checkIfSame) {\n            //     if (\n            //         moment(time_start, default_format).isSameOrAfter(moment(mile_start, default_format)) &&\n            //         moment(time_start, default_format).isSameOrBefore(moment(mile_end, default_format))\n            //     ) {\n            //         checkIsValid = false;\n            //     }\n            //     if (\n            //         moment(time_end, default_format).isSameOrAfter(moment(mile_start, default_format)) &&\n            //         moment(time_end, default_format).isSameOrBefore(moment(mile_end, default_format))\n            //     ) {\n            //         checkIsValid = false;\n            //     }\n            // }\n          } //     if (!tew) {\n          //         // if (moment(time_start, default_format).isSameOrAfter(moment(mile_start, default_format)) && moment(time_start, default_format).isSameOrBefore(moment(mile_start, default_format))) {\n          //         //     checkIsValid = false;\n          //         // }\n\n        } // here conditions\n\n      });\n    }\n\n    if (!checkIsValid) {\n      setShowToast(true, \"Please add unique date\");\n      return;\n    }\n\n    milestone_clone[index][\"from_date\"] = time.from_date;\n    milestone_clone[index][\"to_date\"] = time.to_date;\n    setMileStones(milestone_clone);\n    Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n  };\n\n  const handleCombineMileStones = item => {\n    let milestone_clone = milestones;\n    let data_clone = data;\n    milestone_clone = item;\n    data_clone[\"milestones\"] = item;\n    setMileStones(milestone_clone);\n    setData(data_clone);\n  };\n\n  const removeMilestoneByIndex = index => {\n    let milestone_clone = milestones;\n    let data_clone = data;\n    milestone_clone.splice(index, 1);\n    data_clone[\"milestones\"] = milestone_clone;\n    setMileStones(milestone_clone);\n    setData(data_clone);\n    Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n  };\n\n  const handleStepBack = () => setStep(prevStep => prevStep - 1);\n\n  const handleStepForward = (step, edit_item) => {\n    console.log(\" in handleStepForward\");\n\n    if (!step) {\n      setStep(prevStep => prevStep + 1);\n      setEditMileStone(0);\n    } else {\n      if (edit_item) {\n        setStep(step);\n        setEditMileStone(edit_item);\n        Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n      }\n\n      setStep(step);\n    }\n  };\n\n  console.log({\n    data\n  });\n  let page;\n\n  switch (step) {\n    case 1:\n      page = /*#__PURE__*/_jsxDEV(PostNewJob, {\n        data: data,\n        jobUpdateParam: jobUpdateParam,\n        handleStepForward: handleStepForward,\n        handleStepJustUpdate: handleStepJustUpdate,\n        editDetailPage: editDetailPage,\n        stepCompleted: stepsCompleted.includes(1),\n        handleStepComplete: handleStepComplete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 2:\n      page = /*#__PURE__*/_jsxDEV(JobType, {\n        categories: tradeListData,\n        jobTypes: categoriesData,\n        handleStepJustUpdate: handleStepJustUpdate,\n        editDetailPage: editDetailPage,\n        data: data,\n        stepCompleted: stepsCompleted.includes(2),\n        handleStepComplete: handleStepComplete,\n        handleStepForward: handleStepForward,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 3:\n      page = /*#__PURE__*/_jsxDEV(AddLocation, {\n        data: data,\n        stepCompleted: stepsCompleted.includes(3),\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 4:\n      page = /*#__PURE__*/_jsxDEV(Payment, {\n        data: data,\n        stepCompleted: stepsCompleted.includes(4),\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 5:\n      page = /*#__PURE__*/_jsxDEV(ChooseTiming, {\n        data: data,\n        milestones: milestones,\n        stepCompleted: stepsCompleted.includes(5),\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 6:\n      page = /*#__PURE__*/_jsxDEV(JobMilestones, {\n        data: data,\n        milestones: milestones,\n        handleStepJustUpdate: handleStepJustUpdate,\n        editDetailPage: editDetailPage,\n        editMileStone: editMilestoneId,\n        editMilestoneTiming: editMilestoneTiming,\n        removeMilestoneByIndex: removeMilestoneByIndex,\n        handleStepForward: handleStepForward,\n        stepCompleted: stepsCompleted.includes(6),\n        handleCombineMileStones: handleCombineMileStones,\n        updateMileStoneIndex: updateMileStoneIndex,\n        newMileStoneScreen: newMileStoneScreen,\n        updateMileStoneTimings: updateMileStoneTimings,\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 7:\n      page = /*#__PURE__*/_jsxDEV(AddMilestone, {\n        data: data,\n        milestones: milestones,\n        newMileStoneScreen: newMileStoneScreen,\n        handleStepForward: handleStepForward,\n        stepCompleted: stepsCompleted.includes(7),\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack,\n        removeMilestoneByIndex: removeMilestoneByIndex,\n        updateMileStoneIndex: updateMileStoneIndex,\n        handleStepMileStone: handleStepMileStone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 8:\n      page = /*#__PURE__*/_jsxDEV(ChooseTimingMileStone, {\n        data: data,\n        randomColors: randomColors,\n        addTimeToMileStone: addTimeToMileStone,\n        editMileStone: editMilestoneId,\n        editMilestoneTiming: editMilestoneTiming,\n        updateMileStoneTimings: updateMileStoneTimings,\n        milestones: milestones,\n        handleStepMileStone: handleStepMileStone,\n        handleStepForward: handleStepForward,\n        stepCompleted: stepsCompleted.includes(8),\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 9:\n      page = /*#__PURE__*/_jsxDEV(MileStoneTemplates, { ...props,\n        data: data,\n        handleCombineMileStones: handleCombineMileStones,\n        stepCompleted: stepsCompleted.includes(9),\n        handleStepComplete: handleStepComplete,\n        handleStepForward: handleStepForward,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 10:\n      page = /*#__PURE__*/_jsxDEV(SaveTemplate, {\n        data: data,\n        milestones: milestones,\n        handleCombineMileStones: handleCombineMileStones,\n        stepCompleted: stepsCompleted.includes(10),\n        handleStepComplete: handleStepComplete,\n        handleStepForward: handleStepForward,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 11:\n      page = /*#__PURE__*/_jsxDEV(TemplateSavedSuccess, {\n        data: data,\n        handleStepForward: handleStepForward,\n        stepCompleted: stepsCompleted.includes(11),\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 12:\n      page = /*#__PURE__*/_jsxDEV(JobPostedSuccess, {\n        history: props.history,\n        data: data,\n        templateImage: templateImage,\n        editDetailPage: editDetailPage,\n        stepCompleted: stepsCompleted.includes(12),\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack,\n        handleStepForward: handleStepForward\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 13:\n      page = /*#__PURE__*/_jsxDEV(UploadMedia, {\n        data: data,\n        stepCompleted: stepsCompleted.includes(13),\n        handleStepComplete: handleStepComplete,\n        handleStepForward: handleStepForward,\n        handleStepBack: handleStepBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 14:\n      page = /*#__PURE__*/_jsxDEV(JobDetails, {\n        data: data,\n        milestones: milestones,\n        categories: tradeListData,\n        jobTypes: categoriesData,\n        builderProfile: builderProfile,\n        clearParentStates: clearParentStates,\n        stepCompleted: stepsCompleted.includes(14),\n        handleStepComplete: handleStepComplete,\n        handleStepForward: handleStepForward,\n        handleStepBack: handleStepBack,\n        updateDetailScreen: updateDetailScreen,\n        jobId: jobId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 15:\n      page = /*#__PURE__*/_jsxDEV(EditMilestone, {\n        data: data,\n        milestones: milestones,\n        editMileStone: editMilestoneId,\n        editMilestoneTiming: editMilestoneTiming,\n        addTimeToMileStone: addTimeToMileStone,\n        newMileStoneScreen: newMileStoneScreen,\n        handleStepForward: handleStepForward,\n        stepCompleted: stepsCompleted.includes(15),\n        handleStepComplete: handleStepComplete,\n        handleStepBack: handleStepBack,\n        handleStepMileStone: handleStepMileStone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this);\n      break;\n\n    default:\n      page = null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: page\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 554,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PostJob, \"CUGj1q3CH/Ew9EcerkubvRSqvYs=\", false, function () {\n  return [useHistory];\n});\n\n_c = PostJob;\nexport default PostJob;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostJob\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/postJob.tsx"],"names":["useCallback","useEffect","useState","PostNewJob","JobType","AddLocation","Payment","ChooseTiming","ChooseTimingMileStone","AddMilestone","JobMilestones","SaveTemplate","TemplateSavedSuccess","JobPostedSuccess","UploadMedia","MileStoneTemplates","JobDetails","EditMilestone","callCategories","republishJob","getOpenJobDetails","moment","setShowToast","useHistory","templateImage","randomColors","getRandomColors","PostJob","props","history","callTradeList","isLoading","tradeListData","updateMileStoneIndex","updateMileStoneTimings","updateDetailScreen","editMilestoneTiming","editDetailPage","builderProfile","editMilestoneId","setRandomColors","categoriesData","setCategoriesData","step","setStep","stepsCompleted","setStepsCompleted","data","setData","console","log","editMileStone","setEditMileStone","milestones","setMileStones","forceupdate","setForceUpdate","jobId","setJobId","jobUpdateParam","setJobUpdateParam","getCategories","categories","colors","getJobDetails","updateOpen","res","success","specialization","map","specializationId","categoryId","job_type","jobTypeId","amount","milestone_name","isPhotoevidence","recommended_hours","from_date","to_date","Date","format","params","URLSearchParams","location","search","get","update","clearParentStates","handleStepComplete","stepData","prevData","prevSteps","concat","prevStep","handleStepJustUpdate","goto","handleStepForward","newMileStoneScreen","index","milestone_clone","Array","isArray","handleStepMileStone","addTimeToMileStone","time","skip","default_format","checkIsValid","length","filter_milestone","filter","item_mile","index_mile","count_times","forEach","mile","msw","isValid","mew","tsw","tew","mile_start","mile_end","time_start","time_end","undefined","ms","handleCombineMileStones","item","data_clone","removeMilestoneByIndex","splice","handleStepBack","edit_item","page","includes"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SACEC,cADF,EAEEC,YAFF,EAGEC,iBAHF,QAIO,0BAJP;AAKA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,aAAP,MAA0B,uCAA1B;AAEA,SAASC,YAAY,IAAIC,eAAzB,QAAgD,oBAAhD;;;AAgBA,MAAMC,OAAO,GAAIC,KAAD,IAAsB;AAAA;;AACpC,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AAEA,QAAM;AACJO,IAAAA,aADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,oBAJI;AAKJC,IAAAA,sBALI;AAMJC,IAAAA,kBANI;AAOJC,IAAAA,mBAPI;AAQJC,IAAAA,cARI;AASJC,IAAAA,cATI;AAUJC,IAAAA;AAVI,MAWFX,KAXJ;AAaA,QAAM,CAACH,YAAD,EAAee,eAAf,IAAkCtC,QAAQ,EAAhD;AACA,QAAM,CAACuC,cAAD,EAAiBC,iBAAjB,IAAsCxC,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACyC,IAAD,EAAOC,OAAP,IAAkB1C,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAAC2C,cAAD,EAAiBC,iBAAjB,IAAsC5C,QAAQ,CAAgB,EAAhB,CAApD;AACA,QAAM,CAAC6C,IAAD,EAAOC,OAAP,IAAkB9C,QAAQ,CAAC,EAAD,CAAhC;AACA+C,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,IAAtB;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoClD,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACmD,UAAD,EAAaC,aAAb,IAA8BpD,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACqD,WAAD,EAAcC,cAAd,IAAgCtD,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACuD,KAAD,EAAQC,QAAR,IAAoBxD,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACyD,cAAD,EAAiBC,iBAAjB,IAAsC1D,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM2D,aAAa,GAAG7D,WAAW,CAAC,YAAY;AAC5C,UAAM;AAAE8D,MAAAA,UAAU,EAAErB;AAAd,QAAiC,MAAMvB,cAAc,EAA3D;AACAwB,IAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACA,QAAIsB,MAAM,GAAGrC,eAAe,EAA5B;AACAc,IAAAA,eAAe,CAACuB,MAAD,CAAf;AACD,GALgC,EAK9B,EAL8B,CAAjC;AAOA9D,EAAAA,SAAS,CAAC,MAAM;AACd4D,IAAAA,aAAa;AACb/B,IAAAA,aAAa;AACd,GAHQ,EAGN,CAAC+B,aAAD,EAAgB/B,aAAhB,EAA+BuB,UAA/B,CAHM,CAAT;AAKA,QAAMW,aAAa,GAAGhE,WAAW,CAC/B,OAAOyD,KAAP,EAAsBQ,UAAtB,KAA+C;AAC7C,QAAIC,GAAG,GAAG,IAAV;;AAEA,QAAID,UAAJ,EAAgB;AACdC,MAAAA,GAAG,GAAG,MAAM9C,iBAAiB,CAACqC,KAAD,CAA7B;AACD,KAFD,MAEO;AACLS,MAAAA,GAAG,GAAG,MAAM/C,YAAY,CAACsC,KAAD,CAAxB;AACD;;AAED,QAAIS,GAAG,CAACC,OAAR,EAAiB;AACfnB,MAAAA,OAAO,CAAC,EACN,GAAGkB,GAAG,CAACnB,IADD;AAENqB,QAAAA,cAAc,EAAEF,GAAG,CAACnB,IAAJ,CAASqB,cAAT,CAAwBC,GAAxB,CACd,CAAC;AAAEC,UAAAA;AAAF,SAAD,KACEA,gBAFY,CAFV;AAMNR,QAAAA,UAAU,EAAEI,GAAG,CAACnB,IAAJ,CAASe,UAAT,CAAoBO,GAApB,CACV,CAAC;AAAEE,UAAAA;AAAF,SAAD,KAA4CA,UADlC,CANN;AASNC,QAAAA,QAAQ,EAAEN,GAAG,CAACnB,IAAJ,CAASyB,QAAT,CAAkBH,GAAlB,CACR,CAAC;AAAEI,UAAAA;AAAF,SAAD,KAA0CA,SADlC,CATJ;AAYNC,QAAAA,MAAM,EAAG,GAAER,GAAG,CAACnB,IAAJ,CAAS2B,MAAO;AAZrB,OAAD,CAAP;AAcApB,MAAAA,aAAa,CACXY,GAAG,CAACnB,IAAJ,CAASM,UAAT,CAAoBgB,GAApB,CACE,CAAC;AACCM,QAAAA,cADD;AAECC,QAAAA,eAFD;AAGCC,QAAAA,iBAHD;AAICC,QAAAA,SAJD;AAKCC,QAAAA;AALD,OAAD,MAYO;AACLJ,QAAAA,cADK;AAELC,QAAAA,eAFK;AAGLC,QAAAA,iBAHK;AAILC,QAAAA,SAAS,EAAEzD,MAAM,CAAC,IAAI2D,IAAJ,CAASF,SAAT,CAAD,CAAN,CAA4BG,MAA5B,CAAmC,YAAnC,CAJN;AAKLF,QAAAA,OAAO,EAAE1D,MAAM,CAAC,IAAI2D,IAAJ,CAASD,OAAT,CAAD,CAAN,CAA0BE,MAA1B,CAAiC,YAAjC;AALJ,OAZP,CADF,CADW,CAAb;AAuBAnC,MAAAA,iBAAiB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD,CAAD,CAAjB;AACD;AACF,GAlD8B,EAmD/B,EAnD+B,CAAjC;AAsDA7C,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMiF,MAAM,GAAG,IAAIC,eAAJ,sBAAoBtD,OAAO,CAACuD,QAA5B,sDAAoB,kBAAkBC,MAAtC,CAAf;AACA,UAAM5B,KAAU,GAAGyB,MAAM,CAACI,GAAP,CAAW,OAAX,KAAuB,EAA1C,CAFc,CAGd;;AACA,UAAMC,MAAW,GAAGL,MAAM,CAACI,GAAP,CAAW,QAAX,KAAwB,EAA5C;;AAEA,QAAI7B,KAAK,IAAI8B,MAAM,KAAK,MAAxB,EAAgC;AAC9B,UAAI9B,KAAJ,EAAW;AACTC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACAO,QAAAA,aAAa,CAACP,KAAD,CAAb;AACD;AACF,KALD,MAKO;AACL,UAAI8B,MAAM,IAAI,MAAd,EAAsB;AACpB3B,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAI,QAAAA,aAAa,CAACP,KAAD,EAAQ,IAAR,CAAb;AACD;AACF;AACF,GAjBQ,EAiBN,CAACO,aAAD,EAAgBnC,OAAO,CAACuD,QAAxB,CAjBM,CAAT;;AAmBA,QAAMI,iBAAiB,GAAG,MAAM;AAC9BxC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAM,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAR,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,GAJD;;AAMA,QAAM2C,kBAAkB,GAAIC,QAAD,IAAmB;AAC5C1C,IAAAA,OAAO,CAAE2C,QAAD,KAAe,EACrB,GAAGA,QADkB;AAErB,SAAGD;AAFkB,KAAf,CAAD,CAAP;AAIA5C,IAAAA,iBAAiB,CAAE8C,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBlD,IAAjB,CAAhB,CAAjB;AACAC,IAAAA,OAAO,CAAEkD,QAAD,IAAcA,QAAQ,GAAG,CAA1B,CAAP;AACD,GAPD;;AASA,QAAMC,oBAAoB,GAAG,CAACL,QAAD,EAAgBM,IAAhB,KAA+B;AAC1DhD,IAAAA,OAAO,CAAE2C,QAAD,KAAe,EACrB,GAAGA,QADkB;AAErB,SAAGD;AAFkB,KAAf,CAAD,CAAP;;AAKA,QAAIM,IAAI,KAAK,IAAb,EAAmB;AACjBC,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD;;AAED,QAAID,IAAI,KAAK,IAAT,IAAiBA,IAAI,GAAG,CAA5B,EAA+B;AAC7BC,MAAAA,iBAAiB,CAACD,IAAD,CAAjB;AACD;AACF,GAbD;;AAeA,QAAME,kBAAkB,GAAIC,KAAD,IAAgB;AACzC,QAAIC,eAAoB,GAAG/C,UAA3B;;AACA,QAAI,CAAC+C,eAAe,CAACD,KAAD,CAApB,EAA6B;AAC3BC,MAAAA,eAAe,CAACD,KAAD,CAAf,GAAyB,EAAzB;AACD;;AACD7C,IAAAA,aAAa,CAAC8C,eAAD,CAAb;AACAC,IAAAA,KAAK,CAACC,OAAN,CAAc/C,WAAd,IAA6BC,cAAc,CAAC,EAAD,CAA3C,GAAkDA,cAAc,CAAC,EAAD,CAAhE;AACD,GAPD;;AASA,QAAM+C,mBAAmB,GAAG,CAACxD,IAAD,EAAYoD,KAAZ,KAA2B;AACrD,QAAIC,eAAoB,GAAG/C,UAA3B;AACA+C,IAAAA,eAAe,CAACD,KAAD,CAAf,CAAuB,gBAAvB,IAA2CpD,IAAI,CAAC4B,cAAhD;AACAyB,IAAAA,eAAe,CAACD,KAAD,CAAf,CAAuB,iBAAvB,IAA4CpD,IAAI,CAAC6B,eAAjD;AACAwB,IAAAA,eAAe,CAACD,KAAD,CAAf,CAAuB,mBAAvB,IAA8CpD,IAAI,CAAC8B,iBAAnD;AACAvB,IAAAA,aAAa,CAAC8C,eAAD,CAAb;AACAC,IAAAA,KAAK,CAACC,OAAN,CAAc/C,WAAd,IAA6BC,cAAc,CAAC,EAAD,CAA3C,GAAkDA,cAAc,CAAC,EAAD,CAAhE;AACD,GAPD;;AASA,QAAMgD,kBAAkB,GAAG,CAACC,IAAD,EAAYN,KAAZ,EAAwBO,IAAxB,KAAsC;AAC/D,UAAMC,cAAc,GAAG,YAAvB;AACA,QAAIP,eAAoB,GAAG/C,UAA3B;AACA,QAAIuD,YAAiB,GAAG,IAAxB;;AAEA,QAAI,CAACF,IAAD,KAASN,eAAT,aAASA,eAAT,uBAASA,eAAe,CAAES,MAA1B,CAAJ,EAAsC;AACpC,UAAIC,gBAAqB,GAAGV,eAAe,CAACW,MAAhB,CAC1B,CAACC,SAAD,EAAiBC,UAAjB,KAAqCA,UAAU,KAAKd,KAD1B,CAA5B;AAGA,UAAIe,WAAgB,GAAG,EAAvB;AACA,UAAIJ,gBAAJ,aAAIA,gBAAJ,uBAAIA,gBAAgB,CAAED,MAAtB,EACEC,gBAAgB,CAACK,OAAjB,CAA0BC,IAAD,IAAe;AACtC,YAAIC,GAAG,GAAGhG,MAAM,CAAC+F,IAAI,CAACtC,SAAN,EAAiB6B,cAAjB,CAAN,CAAuCW,OAAvC,EAAV;AACA,YAAIC,GAAG,GAAGlG,MAAM,CAAC+F,IAAI,CAACrC,OAAN,EAAe4B,cAAf,CAAN,CAAqCW,OAArC,EAAV;AAEA,YAAIE,GAAG,GAAGnG,MAAM,CAACoF,IAAI,CAAC3B,SAAN,EAAiB6B,cAAjB,CAAN,CAAuCW,OAAvC,EAAV;AACA,YAAIG,GAAG,GAAGpG,MAAM,CAACoF,IAAI,CAAC1B,OAAN,EAAe4B,cAAf,CAAN,CAAqCW,OAArC,EAAV;AAEA,YAAII,UAAU,GAAGN,IAAI,CAACtC,SAAtB;AACA,YAAI6C,QAAQ,GAAGP,IAAI,CAACrC,OAApB;AAEA,YAAI6C,UAAU,GAAGnB,IAAI,CAAC3B,SAAtB;AACA,YAAI+C,QAAQ,GAAGpB,IAAI,CAAC1B,OAApB;;AAEA,YAAImC,WAAW,CAACQ,UAAD,CAAX,IAA2BI,SAA/B,EAA0C;AACxCZ,UAAAA,WAAW,CAACQ,UAAD,CAAX,GAA0B,CAA1B;AACD,SAFD,MAEO;AACLR,UAAAA,WAAW,CAACQ,UAAD,CAAX,GAA0BR,WAAW,CAACQ,UAAD,CAAX,GAA0B,CAApD;AACD;;AAED,YAAIR,WAAW,CAACS,QAAD,CAAX,IAAyBG,SAA7B,EAAwC;AACtCZ,UAAAA,WAAW,CAACS,QAAD,CAAX,GAAwB,CAAxB;AACD,SAFD,MAEO;AACLT,UAAAA,WAAW,CAACS,QAAD,CAAX,GAAwBT,WAAW,CAACS,QAAD,CAAX,GAAwB,CAAhD;AACD;;AAED,YAAIT,WAAW,CAACQ,UAAD,CAAX,KAA4B,CAAhC,EAAmC;AACjCzE,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B;AACxB6E,YAAAA,EAAE,EAAEL,UAAU,IAAIE;AADM,WAA1B;;AAGA,cAAIF,UAAU,IAAIE,UAAd,IAA4BF,UAAU,IAAIG,QAA9C,EAAwD;AACtD5E,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA5B,YAAAA,YAAY,CAAC,IAAD,EAAO,qCAAP,CAAZ;AACA;AACD;AACF;;AAED,YAAI4F,WAAW,CAACS,QAAD,CAAX,KAA0B,CAA9B,EAAiC;AAC/B,cAAIA,QAAQ,IAAIC,UAAZ,IAA0BD,QAAQ,IAAIE,QAA1C,EAAoD;AAClDvG,YAAAA,YAAY,CAAC,IAAD,EAAO,mCAAP,CAAZ;AACA;AACD;AACF;;AAED,YAAI+F,GAAG,IAAIE,GAAX,EAAgB;AACd,cAAIC,GAAG,IAAIC,GAAX,EAAgB,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,WApBa,CAsBd;AACA;AACA;AACA;;AACD,SArEqC,CAsEtC;;AACD,OAvED;AAwEH;;AAED,QAAI,CAACb,YAAL,EAAmB;AACjBtF,MAAAA,YAAY,CAAC,IAAD,EAAO,wBAAP,CAAZ;AACA;AACD;;AAED8E,IAAAA,eAAe,CAACD,KAAD,CAAf,CAAuB,WAAvB,IAAsCM,IAAI,CAAC3B,SAA3C;AACAsB,IAAAA,eAAe,CAACD,KAAD,CAAf,CAAuB,SAAvB,IAAoCM,IAAI,CAAC1B,OAAzC;AACAzB,IAAAA,aAAa,CAAC8C,eAAD,CAAb;AACAC,IAAAA,KAAK,CAACC,OAAN,CAAc/C,WAAd,IAA6BC,cAAc,CAAC,EAAD,CAA3C,GAAkDA,cAAc,CAAC,EAAD,CAAhE;AACD,GA9FD;;AAgGA,QAAMwE,uBAAuB,GAAIC,IAAD,IAAe;AAC7C,QAAI7B,eAAoB,GAAG/C,UAA3B;AACA,QAAI6E,UAAe,GAAGnF,IAAtB;AACAqD,IAAAA,eAAe,GAAG6B,IAAlB;AACAC,IAAAA,UAAU,CAAC,YAAD,CAAV,GAA2BD,IAA3B;AACA3E,IAAAA,aAAa,CAAC8C,eAAD,CAAb;AACApD,IAAAA,OAAO,CAACkF,UAAD,CAAP;AACD,GAPD;;AASA,QAAMC,sBAAsB,GAAIhC,KAAD,IAAgB;AAC7C,QAAIC,eAAoB,GAAG/C,UAA3B;AACA,QAAI6E,UAAe,GAAGnF,IAAtB;AACAqD,IAAAA,eAAe,CAACgC,MAAhB,CAAuBjC,KAAvB,EAA8B,CAA9B;AACA+B,IAAAA,UAAU,CAAC,YAAD,CAAV,GAA2B9B,eAA3B;AACA9C,IAAAA,aAAa,CAAC8C,eAAD,CAAb;AACApD,IAAAA,OAAO,CAACkF,UAAD,CAAP;AACA7B,IAAAA,KAAK,CAACC,OAAN,CAAc/C,WAAd,IAA6BC,cAAc,CAAC,EAAD,CAA3C,GAAkDA,cAAc,CAAC,EAAD,CAAhE;AACD,GARD;;AAUA,QAAM6E,cAAc,GAAG,MAAMzF,OAAO,CAAEkD,QAAD,IAAcA,QAAQ,GAAG,CAA1B,CAApC;;AACA,QAAMG,iBAAiB,GAAG,CAACtD,IAAD,EAAY2F,SAAZ,KAAmC;AAC3DrF,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,QAAI,CAACP,IAAL,EAAW;AACTC,MAAAA,OAAO,CAAEkD,QAAD,IAAcA,QAAQ,GAAG,CAA1B,CAAP;AACA1C,MAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACD,KAHD,MAGO;AACL,UAAIkF,SAAJ,EAAe;AACb1F,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAS,QAAAA,gBAAgB,CAACkF,SAAD,CAAhB;AACAjC,QAAAA,KAAK,CAACC,OAAN,CAAc/C,WAAd,IAA6BC,cAAc,CAAC,EAAD,CAA3C,GAAkDA,cAAc,CAAC,EAAD,CAAhE;AACD;;AACDZ,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD;AACF,GAbD;;AAcAM,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ;AACA,MAAIwF,IAAJ;;AACA,UAAQ5F,IAAR;AACE,SAAK,CAAL;AACE4F,MAAAA,IAAI,gBACF,QAAC,UAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,cAAc,EAAEY,cAFlB;AAGE,QAAA,iBAAiB,EAAEsC,iBAHrB;AAIE,QAAA,oBAAoB,EAAEF,oBAJxB;AAKE,QAAA,cAAc,EAAE1D,cALlB;AAME,QAAA,aAAa,EAAEQ,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CANjB;AAOE,QAAA,kBAAkB,EAAE/C;AAPtB;AAAA;AAAA;AAAA;AAAA,cADF;AAWA;;AACF,SAAK,CAAL;AACE8C,MAAAA,IAAI,gBACF,QAAC,OAAD;AACE,QAAA,UAAU,EAAEvG,aADd;AAEE,QAAA,QAAQ,EAAES,cAFZ;AAGE,QAAA,oBAAoB,EAAEsD,oBAHxB;AAIE,QAAA,cAAc,EAAE1D,cAJlB;AAKE,QAAA,IAAI,EAAEU,IALR;AAME,QAAA,aAAa,EAAEF,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CANjB;AAOE,QAAA,kBAAkB,EAAE/C,kBAPtB;AAQE,QAAA,iBAAiB,EAAEQ,iBARrB;AASE,QAAA,cAAc,EAAEoC;AATlB;AAAA;AAAA;AAAA;AAAA,cADF;AAaA;;AACF,SAAK,CAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,WAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,aAAa,EAAEF,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CAFjB;AAGE,QAAA,kBAAkB,EAAE/C,kBAHtB;AAIE,QAAA,cAAc,EAAE4C;AAJlB;AAAA;AAAA;AAAA;AAAA,cADF;AAQA;;AACF,SAAK,CAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,OAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,aAAa,EAAEF,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CAFjB;AAGE,QAAA,kBAAkB,EAAE/C,kBAHtB;AAIE,QAAA,cAAc,EAAE4C;AAJlB;AAAA;AAAA;AAAA;AAAA,cADF;AAQA;;AACF,SAAK,CAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,YAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,UAAU,EAAEM,UAFd;AAGE,QAAA,aAAa,EAAER,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CAHjB;AAIE,QAAA,kBAAkB,EAAE/C,kBAJtB;AAKE,QAAA,cAAc,EAAE4C;AALlB;AAAA;AAAA;AAAA;AAAA,cADF;AASA;;AACF,SAAK,CAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,aAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,UAAU,EAAEM,UAFd;AAGE,QAAA,oBAAoB,EAAE0C,oBAHxB;AAIE,QAAA,cAAc,EAAE1D,cAJlB;AAKE,QAAA,aAAa,EAAEE,eALjB;AAME,QAAA,mBAAmB,EAAEH,mBANvB;AAOE,QAAA,sBAAsB,EAAE+F,sBAP1B;AAQE,QAAA,iBAAiB,EAAElC,iBARrB;AASE,QAAA,aAAa,EAAEpD,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CATjB;AAUE,QAAA,uBAAuB,EAAER,uBAV3B;AAWE,QAAA,oBAAoB,EAAE/F,oBAXxB;AAYE,QAAA,kBAAkB,EAAEiE,kBAZtB;AAaE,QAAA,sBAAsB,EAAEhE,sBAb1B;AAcE,QAAA,kBAAkB,EAAEuD,kBAdtB;AAeE,QAAA,cAAc,EAAE4C;AAflB;AAAA;AAAA;AAAA;AAAA,cADF;AAmBA;;AACF,SAAK,CAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,YAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,UAAU,EAAEM,UAFd;AAGE,QAAA,kBAAkB,EAAE6C,kBAHtB;AAIE,QAAA,iBAAiB,EAAED,iBAJrB;AAKE,QAAA,aAAa,EAAEpD,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CALjB;AAME,QAAA,kBAAkB,EAAE/C,kBANtB;AAOE,QAAA,cAAc,EAAE4C,cAPlB;AAQE,QAAA,sBAAsB,EAAEF,sBAR1B;AASE,QAAA,oBAAoB,EAAElG,oBATxB;AAUE,QAAA,mBAAmB,EAAEsE;AAVvB;AAAA;AAAA;AAAA;AAAA,cADF;AAcA;;AACF,SAAK,CAAL;AACEgC,MAAAA,IAAI,gBACF,QAAC,qBAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,YAAY,EAAEtB,YAFhB;AAGE,QAAA,kBAAkB,EAAE+E,kBAHtB;AAIE,QAAA,aAAa,EAAEjE,eAJjB;AAKE,QAAA,mBAAmB,EAAEH,mBALvB;AAME,QAAA,sBAAsB,EAAEF,sBAN1B;AAOE,QAAA,UAAU,EAAEmB,UAPd;AAQE,QAAA,mBAAmB,EAAEkD,mBARvB;AASE,QAAA,iBAAiB,EAAEN,iBATrB;AAUE,QAAA,aAAa,EAAEpD,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CAVjB;AAWE,QAAA,kBAAkB,EAAE/C,kBAXtB;AAYE,QAAA,cAAc,EAAE4C;AAZlB;AAAA;AAAA;AAAA;AAAA,cADF;AAgBA;;AACF,SAAK,CAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,kBAAD,OACM3G,KADN;AAEE,QAAA,IAAI,EAAEmB,IAFR;AAGE,QAAA,uBAAuB,EAAEiF,uBAH3B;AAIE,QAAA,aAAa,EAAEnF,cAAc,CAAC2F,QAAf,CAAwB,CAAxB,CAJjB;AAKE,QAAA,kBAAkB,EAAE/C,kBALtB;AAME,QAAA,iBAAiB,EAAEQ,iBANrB;AAOE,QAAA,cAAc,EAAEoC;AAPlB;AAAA;AAAA;AAAA;AAAA,cADF;AAWA;;AACF,SAAK,EAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,YAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,UAAU,EAAEM,UAFd;AAGE,QAAA,uBAAuB,EAAE2E,uBAH3B;AAIE,QAAA,aAAa,EAAEnF,cAAc,CAAC2F,QAAf,CAAwB,EAAxB,CAJjB;AAKE,QAAA,kBAAkB,EAAE/C,kBALtB;AAME,QAAA,iBAAiB,EAAEQ,iBANrB;AAOE,QAAA,cAAc,EAAEoC;AAPlB;AAAA;AAAA;AAAA;AAAA,cADF;AAWA;;AACF,SAAK,EAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,oBAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,iBAAiB,EAAEkD,iBAFrB;AAGE,QAAA,aAAa,EAAEpD,cAAc,CAAC2F,QAAf,CAAwB,EAAxB,CAHjB;AAIE,QAAA,kBAAkB,EAAE/C,kBAJtB;AAKE,QAAA,cAAc,EAAE4C;AALlB;AAAA;AAAA;AAAA;AAAA,cADF;AASA;;AACF,SAAK,EAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,gBAAD;AACE,QAAA,OAAO,EAAE3G,KAAK,CAACC,OADjB;AAEE,QAAA,IAAI,EAAEkB,IAFR;AAGE,QAAA,aAAa,EAAEvB,aAHjB;AAIE,QAAA,cAAc,EAAEa,cAJlB;AAKE,QAAA,aAAa,EAAEQ,cAAc,CAAC2F,QAAf,CAAwB,EAAxB,CALjB;AAME,QAAA,kBAAkB,EAAE/C,kBANtB;AAOE,QAAA,cAAc,EAAE4C,cAPlB;AAQE,QAAA,iBAAiB,EAAEpC;AARrB;AAAA;AAAA;AAAA;AAAA,cADF;AAYA;;AACF,SAAK,EAAL;AACEsC,MAAAA,IAAI,gBACF,QAAC,WAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,aAAa,EAAEF,cAAc,CAAC2F,QAAf,CAAwB,EAAxB,CAFjB;AAGE,QAAA,kBAAkB,EAAE/C,kBAHtB;AAIE,QAAA,iBAAiB,EAAEQ,iBAJrB;AAKE,QAAA,cAAc,EAAEoC;AALlB;AAAA;AAAA;AAAA;AAAA,cADF;AASA;;AACF,SAAK,EAAL;AACEE,MAAAA,IAAI,gBACF,QAAC,UAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,UAAU,EAAEM,UAFd;AAGE,QAAA,UAAU,EAAErB,aAHd;AAIE,QAAA,QAAQ,EAAES,cAJZ;AAKE,QAAA,cAAc,EAAEH,cALlB;AAME,QAAA,iBAAiB,EAAEkD,iBANrB;AAOE,QAAA,aAAa,EAAE3C,cAAc,CAAC2F,QAAf,CAAwB,EAAxB,CAPjB;AAQE,QAAA,kBAAkB,EAAE/C,kBARtB;AASE,QAAA,iBAAiB,EAAEQ,iBATrB;AAUE,QAAA,cAAc,EAAEoC,cAVlB;AAWE,QAAA,kBAAkB,EAAElG,kBAXtB;AAYE,QAAA,KAAK,EAAEsB;AAZT;AAAA;AAAA;AAAA;AAAA,cADF;AAgBA;;AACF,SAAK,EAAL;AACE8E,MAAAA,IAAI,gBACF,QAAC,aAAD;AACE,QAAA,IAAI,EAAExF,IADR;AAEE,QAAA,UAAU,EAAEM,UAFd;AAGE,QAAA,aAAa,EAAEd,eAHjB;AAIE,QAAA,mBAAmB,EAAEH,mBAJvB;AAKE,QAAA,kBAAkB,EAAEoE,kBALtB;AAME,QAAA,kBAAkB,EAAEN,kBANtB;AAOE,QAAA,iBAAiB,EAAED,iBAPrB;AAQE,QAAA,aAAa,EAAEpD,cAAc,CAAC2F,QAAf,CAAwB,EAAxB,CARjB;AASE,QAAA,kBAAkB,EAAE/C,kBATtB;AAUE,QAAA,cAAc,EAAE4C,cAVlB;AAWE,QAAA,mBAAmB,EAAE9B;AAXvB;AAAA;AAAA;AAAA;AAAA,cADF;AAeA;;AACF;AACEgC,MAAAA,IAAI,GAAG,IAAP;AArNJ;;AAwNA,sBAAO;AAAA,cAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA/fD;;GAAM5G,O;UACYJ,U;;;KADZI,O;AAigBN,eAAeA,OAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport PostNewJob from \"./components/postNewJob\";\nimport JobType from \"./components/jobType\";\nimport AddLocation from \"./components/addLocation\";\nimport Payment from \"./components/payment\";\nimport ChooseTiming from \"./components/chooseTiming\";\nimport ChooseTimingMileStone from \"./components/chooseTimingMileStone\";\nimport AddMilestone from \"./components/addMilestone\";\nimport JobMilestones from \"./components/jobMilestones\";\nimport SaveTemplate from \"./components/saveTemplate\";\nimport TemplateSavedSuccess from \"./components/templateSavedSucess\";\nimport JobPostedSuccess from \"./components/jobPostedSuccess\";\nimport UploadMedia from \"./components/uploadMedia\";\nimport MileStoneTemplates from \"./components/milestoneTemplates\";\nimport JobDetails from \"./components/jobDetails\";\nimport EditMilestone from \"./components/editMileStone\";\nimport {\n  callCategories,\n  republishJob,\n  getOpenJobDetails,\n} from \"../../redux/jobs/actions\";\nimport moment from \"moment\";\nimport { setShowToast } from \"../../redux/common/actions\";\nimport { useHistory } from \"react-router-dom\";\n\nimport templateImage from \"../../assets/images/job-posted-bg.jpg\";\n\nimport { randomColors as getRandomColors } from \"../../utils/common\";\n\ninterface Proptypes {\n  callTradeList: () => void;\n  tradeListData: Array<any>;\n  editMilestoneId: any;\n  editMilestoneTiming: any;\n  editDetailPage: any;\n  isLoading: any;\n  history: any;\n  builderProfile: any;\n  updateMileStoneIndex: (data: any) => void;\n  updateMileStoneTimings: (data: any) => void;\n  updateDetailScreen: (data: any) => void;\n}\n\nconst PostJob = (props: Proptypes) => {\n  const history = useHistory();\n\n  const {\n    callTradeList,\n    isLoading,\n    tradeListData,\n    updateMileStoneIndex,\n    updateMileStoneTimings,\n    updateDetailScreen,\n    editMilestoneTiming,\n    editDetailPage,\n    builderProfile,\n    editMilestoneId,\n  } = props;\n\n  const [randomColors, setRandomColors] = useState();\n  const [categoriesData, setCategoriesData] = useState([]);\n  const [step, setStep] = useState(1);\n  const [stepsCompleted, setStepsCompleted] = useState<Array<number>>([]);\n  const [data, setData] = useState({});\n  console.log(\"data: \", data);\n  const [editMileStone, setEditMileStone] = useState(0 as number);\n  const [milestones, setMileStones] = useState([]);\n  const [forceupdate, setForceUpdate] = useState({});\n  const [jobId, setJobId] = useState(\"\");\n\n  const [jobUpdateParam, setJobUpdateParam] = useState(false);\n\n  const getCategories = useCallback(async () => {\n    const { categories: categoriesData } = await callCategories();\n    setCategoriesData(categoriesData);\n    let colors = getRandomColors();\n    setRandomColors(colors);\n  }, []);\n\n  useEffect(() => {\n    getCategories();\n    callTradeList();\n  }, [getCategories, callTradeList, milestones]);\n\n  const getJobDetails = useCallback(\n    async (jobId: string, updateOpen?: boolean) => {\n      let res = null;\n\n      if (updateOpen) {\n        res = await getOpenJobDetails(jobId);\n      } else {\n        res = await republishJob(jobId);\n      }\n\n      if (res.success) {\n        setData({\n          ...res.data,\n          specialization: res.data.specialization.map(\n            ({ specializationId }: { specializationId: string }) =>\n              specializationId\n          ),\n          categories: res.data.categories.map(\n            ({ categoryId }: { categoryId: string }) => categoryId\n          ),\n          job_type: res.data.job_type.map(\n            ({ jobTypeId }: { jobTypeId: string }) => jobTypeId\n          ),\n          amount: `${res.data.amount}`,\n        });\n        setMileStones(\n          res.data.milestones.map(\n            ({\n              milestone_name,\n              isPhotoevidence,\n              recommended_hours,\n              from_date,\n              to_date,\n            }: {\n              milestone_name: string;\n              isPhotoevidence: boolean;\n              recommended_hours: string;\n              from_date: string;\n              to_date: string;\n            }) => ({\n              milestone_name,\n              isPhotoevidence,\n              recommended_hours,\n              from_date: moment(new Date(from_date)).format(\"MM-DD-YYYY\"),\n              to_date: moment(new Date(to_date)).format(\"MM-DD-YYYY\"),\n            })\n          )\n        );\n        setStepsCompleted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    const params = new URLSearchParams(history.location?.search);\n    const jobId: any = params.get(\"jobId\") || \"\";\n    // this param is missing in the case of re-publish.\n    const update: any = params.get(\"update\") || \"\";\n\n    if (jobId && update !== \"true\") {\n      if (jobId) {\n        setJobId(jobId);\n        getJobDetails(jobId);\n      }\n    } else {\n      if (update == \"true\") {\n        setJobUpdateParam(true);\n        getJobDetails(jobId, true);\n      }\n    }\n  }, [getJobDetails, history.location]);\n\n  const clearParentStates = () => {\n    setData({});\n    setMileStones([]);\n    setStepsCompleted([]);\n  };\n\n  const handleStepComplete = (stepData: any) => {\n    setData((prevData) => ({\n      ...prevData,\n      ...stepData,\n    }));\n    setStepsCompleted((prevSteps) => prevSteps.concat(step));\n    setStep((prevStep) => prevStep + 1);\n  };\n\n  const handleStepJustUpdate = (stepData: any, goto?: any) => {\n    setData((prevData) => ({\n      ...prevData,\n      ...stepData,\n    }));\n\n    if (goto === true) {\n      handleStepForward(14);\n    }\n\n    if (goto !== true && goto > 0) {\n      handleStepForward(goto);\n    }\n  };\n\n  const newMileStoneScreen = (index: any) => {\n    let milestone_clone: any = milestones;\n    if (!milestone_clone[index]) {\n      milestone_clone[index] = {};\n    }\n    setMileStones(milestone_clone);\n    Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n  };\n\n  const handleStepMileStone = (data: any, index: any) => {\n    let milestone_clone: any = milestones;\n    milestone_clone[index][\"milestone_name\"] = data.milestone_name;\n    milestone_clone[index][\"isPhotoevidence\"] = data.isPhotoevidence;\n    milestone_clone[index][\"recommended_hours\"] = data.recommended_hours;\n    setMileStones(milestone_clone);\n    Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n  };\n\n  const addTimeToMileStone = (time: any, index: any, skip: any) => {\n    const default_format = \"MM-DD-YYYY\";\n    let milestone_clone: any = milestones;\n    let checkIsValid: any = true;\n\n    if (!skip && milestone_clone?.length) {\n      let filter_milestone: any = milestone_clone.filter(\n        (item_mile: any, index_mile: any) => index_mile !== index\n      );\n      let count_times: any = {};\n      if (filter_milestone?.length)\n        filter_milestone.forEach((mile: any) => {\n          let msw = moment(mile.from_date, default_format).isValid();\n          let mew = moment(mile.to_date, default_format).isValid();\n\n          let tsw = moment(time.from_date, default_format).isValid();\n          let tew = moment(time.to_date, default_format).isValid();\n\n          let mile_start = mile.from_date;\n          let mile_end = mile.to_date;\n\n          let time_start = time.from_date;\n          let time_end = time.to_date;\n\n          if (count_times[mile_start] == undefined) {\n            count_times[mile_start] = 1;\n          } else {\n            count_times[mile_start] = count_times[mile_start] + 1;\n          }\n\n          if (count_times[mile_end] == undefined) {\n            count_times[mile_end] = 1;\n          } else {\n            count_times[mile_end] = count_times[mile_end] + 1;\n          }\n\n          if (count_times[mile_start] === 4) {\n            console.log(\"Inside ---\", {\n              ms: mile_start == time_start,\n            });\n            if (mile_start == time_start || mile_start == time_end) {\n              console.log(\"Inside - 1 ---\");\n              setShowToast(true, \"Selected start data is fully engage\");\n              return;\n            }\n          }\n\n          if (count_times[mile_end] === 4) {\n            if (mile_end == time_start || mile_end == time_end) {\n              setShowToast(true, \"Selected end data is fully engage\");\n              return;\n            }\n          }\n\n          if (msw && mew) {\n            if (tsw && tew) {\n              // let checkIfSame = moment(time_start, default_format).isSame(moment(mile_start, default_format)) && moment(time_end, default_format).isSame(moment(mile_end, default_format));\n              // if (checkIfSame) {\n              //     checkIsValid = false;\n              // }\n              // if (!checkIfSame) {\n              //     if (\n              //         moment(time_start, default_format).isSameOrAfter(moment(mile_start, default_format)) &&\n              //         moment(time_start, default_format).isSameOrBefore(moment(mile_end, default_format))\n              //     ) {\n              //         checkIsValid = false;\n              //     }\n              //     if (\n              //         moment(time_end, default_format).isSameOrAfter(moment(mile_start, default_format)) &&\n              //         moment(time_end, default_format).isSameOrBefore(moment(mile_end, default_format))\n              //     ) {\n              //         checkIsValid = false;\n              //     }\n              // }\n            }\n\n            //     if (!tew) {\n            //         // if (moment(time_start, default_format).isSameOrAfter(moment(mile_start, default_format)) && moment(time_start, default_format).isSameOrBefore(moment(mile_start, default_format))) {\n            //         //     checkIsValid = false;\n            //         // }\n          }\n          // here conditions\n        });\n    }\n\n    if (!checkIsValid) {\n      setShowToast(true, \"Please add unique date\");\n      return;\n    }\n\n    milestone_clone[index][\"from_date\"] = time.from_date;\n    milestone_clone[index][\"to_date\"] = time.to_date;\n    setMileStones(milestone_clone);\n    Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n  };\n\n  const handleCombineMileStones = (item: any) => {\n    let milestone_clone: any = milestones;\n    let data_clone: any = data;\n    milestone_clone = item;\n    data_clone[\"milestones\"] = item;\n    setMileStones(milestone_clone);\n    setData(data_clone);\n  };\n\n  const removeMilestoneByIndex = (index: any) => {\n    let milestone_clone: any = milestones;\n    let data_clone: any = data;\n    milestone_clone.splice(index, 1);\n    data_clone[\"milestones\"] = milestone_clone;\n    setMileStones(milestone_clone);\n    setData(data_clone);\n    Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n  };\n\n  const handleStepBack = () => setStep((prevStep) => prevStep - 1);\n  const handleStepForward = (step: any, edit_item?: number) => {\n    console.log(\" in handleStepForward\");\n    if (!step) {\n      setStep((prevStep) => prevStep + 1);\n      setEditMileStone(0);\n    } else {\n      if (edit_item) {\n        setStep(step);\n        setEditMileStone(edit_item);\n        Array.isArray(forceupdate) ? setForceUpdate({}) : setForceUpdate([]);\n      }\n      setStep(step);\n    }\n  };\n  console.log({ data });\n  let page;\n  switch (step) {\n    case 1:\n      page = (\n        <PostNewJob\n          data={data}\n          jobUpdateParam={jobUpdateParam}\n          handleStepForward={handleStepForward}\n          handleStepJustUpdate={handleStepJustUpdate}\n          editDetailPage={editDetailPage}\n          stepCompleted={stepsCompleted.includes(1)}\n          handleStepComplete={handleStepComplete}\n        />\n      );\n      break;\n    case 2:\n      page = (\n        <JobType\n          categories={tradeListData}\n          jobTypes={categoriesData}\n          handleStepJustUpdate={handleStepJustUpdate}\n          editDetailPage={editDetailPage}\n          data={data}\n          stepCompleted={stepsCompleted.includes(2)}\n          handleStepComplete={handleStepComplete}\n          handleStepForward={handleStepForward}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 3:\n      page = (\n        <AddLocation\n          data={data}\n          stepCompleted={stepsCompleted.includes(3)}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 4:\n      page = (\n        <Payment\n          data={data}\n          stepCompleted={stepsCompleted.includes(4)}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 5:\n      page = (\n        <ChooseTiming\n          data={data}\n          milestones={milestones}\n          stepCompleted={stepsCompleted.includes(5)}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 6:\n      page = (\n        <JobMilestones\n          data={data}\n          milestones={milestones}\n          handleStepJustUpdate={handleStepJustUpdate}\n          editDetailPage={editDetailPage}\n          editMileStone={editMilestoneId}\n          editMilestoneTiming={editMilestoneTiming}\n          removeMilestoneByIndex={removeMilestoneByIndex}\n          handleStepForward={handleStepForward}\n          stepCompleted={stepsCompleted.includes(6)}\n          handleCombineMileStones={handleCombineMileStones}\n          updateMileStoneIndex={updateMileStoneIndex}\n          newMileStoneScreen={newMileStoneScreen}\n          updateMileStoneTimings={updateMileStoneTimings}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 7:\n      page = (\n        <AddMilestone\n          data={data}\n          milestones={milestones}\n          newMileStoneScreen={newMileStoneScreen}\n          handleStepForward={handleStepForward}\n          stepCompleted={stepsCompleted.includes(7)}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n          removeMilestoneByIndex={removeMilestoneByIndex}\n          updateMileStoneIndex={updateMileStoneIndex}\n          handleStepMileStone={handleStepMileStone}\n        />\n      );\n      break;\n    case 8:\n      page = (\n        <ChooseTimingMileStone\n          data={data}\n          randomColors={randomColors}\n          addTimeToMileStone={addTimeToMileStone}\n          editMileStone={editMilestoneId}\n          editMilestoneTiming={editMilestoneTiming}\n          updateMileStoneTimings={updateMileStoneTimings}\n          milestones={milestones}\n          handleStepMileStone={handleStepMileStone}\n          handleStepForward={handleStepForward}\n          stepCompleted={stepsCompleted.includes(8)}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 9:\n      page = (\n        <MileStoneTemplates\n          {...props}\n          data={data}\n          handleCombineMileStones={handleCombineMileStones}\n          stepCompleted={stepsCompleted.includes(9)}\n          handleStepComplete={handleStepComplete}\n          handleStepForward={handleStepForward}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 10:\n      page = (\n        <SaveTemplate\n          data={data}\n          milestones={milestones}\n          handleCombineMileStones={handleCombineMileStones}\n          stepCompleted={stepsCompleted.includes(10)}\n          handleStepComplete={handleStepComplete}\n          handleStepForward={handleStepForward}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 11:\n      page = (\n        <TemplateSavedSuccess\n          data={data}\n          handleStepForward={handleStepForward}\n          stepCompleted={stepsCompleted.includes(11)}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 12:\n      page = (\n        <JobPostedSuccess\n          history={props.history}\n          data={data}\n          templateImage={templateImage}\n          editDetailPage={editDetailPage}\n          stepCompleted={stepsCompleted.includes(12)}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n          handleStepForward={handleStepForward}\n        />\n      );\n      break;\n    case 13:\n      page = (\n        <UploadMedia\n          data={data}\n          stepCompleted={stepsCompleted.includes(13)}\n          handleStepComplete={handleStepComplete}\n          handleStepForward={handleStepForward}\n          handleStepBack={handleStepBack}\n        />\n      );\n      break;\n    case 14:\n      page = (\n        <JobDetails\n          data={data}\n          milestones={milestones}\n          categories={tradeListData}\n          jobTypes={categoriesData}\n          builderProfile={builderProfile}\n          clearParentStates={clearParentStates}\n          stepCompleted={stepsCompleted.includes(14)}\n          handleStepComplete={handleStepComplete}\n          handleStepForward={handleStepForward}\n          handleStepBack={handleStepBack}\n          updateDetailScreen={updateDetailScreen}\n          jobId={jobId}\n        />\n      );\n      break;\n    case 15:\n      page = (\n        <EditMilestone\n          data={data}\n          milestones={milestones}\n          editMileStone={editMilestoneId}\n          editMilestoneTiming={editMilestoneTiming}\n          addTimeToMileStone={addTimeToMileStone}\n          newMileStoneScreen={newMileStoneScreen}\n          handleStepForward={handleStepForward}\n          stepCompleted={stepsCompleted.includes(15)}\n          handleStepComplete={handleStepComplete}\n          handleStepBack={handleStepBack}\n          handleStepMileStone={handleStepMileStone}\n        />\n      );\n      break;\n    default:\n      page = null;\n  }\n\n  return <div>{page}</div>;\n};\n\nexport default PostJob;\n"]},"metadata":{},"sourceType":"module"}