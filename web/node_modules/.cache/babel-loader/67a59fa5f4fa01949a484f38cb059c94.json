{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/postNewJob.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Constants from \"../../../utils/constants\";\nimport { useLocation } from \"react-router-dom\"; //@ts-ignore\n\n//@ts-ignore\nimport \"quill/dist/quill.snow.css\"; // Add css for snow theme\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostNewJob = ({\n  data,\n  jobUpdateParam,\n  editDetailPage,\n  stepCompleted,\n  handleStepJustUpdate,\n  handleStepForward,\n  handleStepComplete\n}) => {\n  _s();\n\n  const {\n    errorStrings\n  } = Constants;\n  const [basicDetails, setBasicDetails] = useState({\n    jobName: \"\",\n    job_description: \"\"\n  });\n  const [errors, setErrors] = useState({\n    jobName: \"\",\n    job_description: \"\"\n  });\n  const [continueClicked, setContinueClicked] = useState(false);\n  const {\n    jobName,\n    job_description\n  } = basicDetails;\n  let location = useLocation();\n  let jobId = null;\n  let update = null;\n\n  if (location.search) {\n    let urlParams = new URLSearchParams(location.search);\n    jobId = urlParams.get(\"jobId\");\n    update = urlParams.get(\"update\");\n  }\n\n  useEffect(() => {\n    if (stepCompleted) {\n      setBasicDetails({\n        jobName: data === null || data === void 0 ? void 0 : data.jobName,\n        job_description: data === null || data === void 0 ? void 0 : data.job_description\n      });\n    }\n  }, [stepCompleted, data]); // for error messages\n\n  const label = {\n    jobName: \"Job Name\",\n    job_description: \"Job Details\"\n  }; // const isEmpty = (name: string, value: string) => !value ? errorStrings.pleaseEnter + label[name] : '';\n\n  const isInvalid = (name, value) => {\n    switch (name) {\n      case \"jobName\":\n        return !value.length ? `${label[name]} is required.` : value.length > 100 ? \"Maximum 100 characters are allowed.\" : \"\";\n\n      case \"job_description\":\n        return \"\";\n    }\n  }; // return isEmpty(name, value);\n\n\n  const capitalize = str => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  const handleChange = ({\n    target: {\n      value,\n      name\n    }\n  }) => {\n    let valueElem = value.trimLeft();\n    let alphaNumericPunctuation = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 1234567890~!@#$%^&*()_+=-`{}|[]:;<>?,./\";\n\n    if (name === \"jobName\" || name === \"job_description\") {\n      if (name === \"jobName\") {\n        valueElem = valueElem.replace(/alphaNumericPunctuation/g, \"\");\n      }\n\n      valueElem = capitalize(valueElem); //.charAt(0).toUpperCase() + valueElem.substring(1);\n    } // if (stepCompleted || continueClicked) {\n\n\n    setErrors(prevErrors => ({ ...prevErrors,\n      [name]: isInvalid(name, valueElem)\n    })); // }\n\n    setBasicDetails(prevDetails => ({ ...prevDetails,\n      [name]: valueElem\n    }));\n  };\n\n  const handleContinue = () => {\n    let hasErrors;\n\n    if (!continueClicked) {\n      setContinueClicked(true);\n      hasErrors = Object.keys(basicDetails).reduce((prevError, name) => {\n        const hasError = !!isInvalid(name, basicDetails[name]);\n        setErrors(prevErrors => ({ ...prevErrors,\n          [name]: isInvalid(name, basicDetails[name])\n        }));\n        return hasError || prevError;\n      }, false);\n    }\n\n    if (!hasErrors) {\n      if (editDetailPage === null || editDetailPage === void 0 ? void 0 : editDetailPage.currentScreen) {\n        handleStepJustUpdate(basicDetails, true);\n      } else {\n        handleStepComplete(basicDetails);\n      }\n    } else {\n      setContinueClicked(false);\n    }\n  };\n\n  const checkErrors = () => {\n    let error_1 = isInvalid(\"jobName\", basicDetails[\"jobName\"]);\n    let error_2 = isInvalid(\"job_description\", basicDetails[\"job_description\"]);\n\n    if (!(error_1 === null || error_1 === void 0 ? void 0 : error_1.length)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  console.log({\n    jobUpdateParam,\n    jobId\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section_wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex_col_sm_5\",\n              children: (editDetailPage === null || editDetailPage === void 0 ? void 0 : editDetailPage.currentScreen) ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"relate\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"back\",\n                    onClick: () => {\n                      handleStepForward(14);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"title\",\n                    children: !jobUpdateParam && jobId ? \"Republish a job\" : update ? \"Update job\" : \"Post new job\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"commn_para\",\n                  children: \"Write the job name and try to describe all details for better comprehension.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"title\",\n                  children: !jobUpdateParam && jobId ? \"Republish a job\" : update ? \"Update job\" : \"Post new job\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"commn_para\",\n                  children: \"Write the job name and try to describe all details for better comprehension.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_5\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_field\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"xs_sub_title\",\n                children: \"Job\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_field\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form_label\",\n                children: \"Job Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text_field\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Enter Job Name\",\n                  name: \"jobName\",\n                  value: jobName,\n                  onChange: handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error_msg\",\n                children: errors.jobName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_field\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form_label\",\n                children: \"Job Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text_field\",\n                children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  placeholder: \"Please give a general description of your job.\",\n                  name: \"job_description\",\n                  value: job_description,\n                  onChange: handleChange,\n                  onBlur: () => {\n                    if (job_description === null || job_description === void 0 ? void 0 : job_description.length) {\n                      let stringItem = job_description;\n\n                      if (job_description) {\n                        stringItem = job_description.split(\". \").join(\". \");\n                      }\n\n                      stringItem = stringItem.split(\".\").map(capitalize).join(\".\");\n                      stringItem = stringItem.split(\". \").map(capitalize).join(\". \");\n                      setBasicDetails(prev => ({ ...prev,\n                        job_description: stringItem\n                      }));\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error_msg\",\n                children: errors.job_description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form_field\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `fill_btn full_btn btn-effect ${checkErrors() ? \"disable_btn\" : \"\"}`,\n                onClick: handleContinue,\n                children: \"Continue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostNewJob, \"PN1sACN/J9ZmMzsMVDlFRIiteos=\", false, function () {\n  return [useLocation];\n});\n\n_c = PostNewJob;\nexport default PostNewJob;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostNewJob\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/postNewJob.tsx"],"names":["React","useEffect","useState","Constants","useLocation","PostNewJob","data","jobUpdateParam","editDetailPage","stepCompleted","handleStepJustUpdate","handleStepForward","handleStepComplete","errorStrings","basicDetails","setBasicDetails","jobName","job_description","errors","setErrors","continueClicked","setContinueClicked","location","jobId","update","search","urlParams","URLSearchParams","get","label","isInvalid","name","value","length","capitalize","str","charAt","toUpperCase","slice","handleChange","target","valueElem","trimLeft","alphaNumericPunctuation","replace","prevErrors","prevDetails","handleContinue","hasErrors","Object","keys","reduce","prevError","hasError","currentScreen","checkErrors","error_1","error_2","console","log","stringItem","split","join","map","prev"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Constants from \"../../../utils/constants\";\nimport { useLocation } from \"react-router-dom\";\n//@ts-ignore\nimport _ from \"lodash\";\n//@ts-ignore\nimport \"quill/dist/quill.snow.css\"; // Add css for snow theme\n\ninterface Proptypes {\n  data: any;\n  jobUpdateParam?: any;\n  editDetailPage: any;\n  stepCompleted: Boolean;\n  handleStepComplete: (data: any) => void;\n  handleStepJustUpdate: (data: any, goto: any) => void;\n  handleStepForward: (data: any) => void;\n}\n\nconst PostNewJob = ({\n  data,\n  jobUpdateParam,\n  editDetailPage,\n  stepCompleted,\n  handleStepJustUpdate,\n  handleStepForward,\n  handleStepComplete,\n}: Proptypes) => {\n  const { errorStrings } = Constants;\n\n  const [basicDetails, setBasicDetails] = useState<{ [index: string]: string }>(\n    { jobName: \"\", job_description: \"\" }\n  );\n  const [errors, setErrors] = useState({ jobName: \"\", job_description: \"\" });\n  const [continueClicked, setContinueClicked] = useState(false);\n  const { jobName, job_description } = basicDetails;\n\n  let location = useLocation();\n  let jobId: any = null;\n  let update: any = null;\n  if (location.search) {\n    let urlParams = new URLSearchParams(location.search);\n    jobId = urlParams.get(\"jobId\");\n    update = urlParams.get(\"update\");\n  }\n\n  useEffect(() => {\n    if (stepCompleted) {\n      setBasicDetails({\n        jobName: data?.jobName,\n        job_description: data?.job_description,\n      });\n    }\n  }, [stepCompleted, data]);\n\n  // for error messages\n  const label: { [index: string]: string } = {\n    jobName: \"Job Name\",\n    job_description: \"Job Details\",\n  };\n\n  // const isEmpty = (name: string, value: string) => !value ? errorStrings.pleaseEnter + label[name] : '';\n  const isInvalid = (name: string, value: string) => {\n    switch (name) {\n      case \"jobName\":\n        return !value.length\n          ? `${label[name]} is required.`\n          : value.length > 100\n          ? \"Maximum 100 characters are allowed.\"\n          : \"\";\n      case \"job_description\":\n        return \"\";\n    }\n  };\n  // return isEmpty(name, value);\n  const capitalize = (str: any) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  const handleChange = ({\n    target: { value, name },\n  }: {\n    target: { value: string; name: string };\n  }) => {\n    let valueElem: any = value.trimLeft();\n    let alphaNumericPunctuation =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 1234567890~!@#$%^&*()_+=-`{}|[]:;<>?,./\";\n    if (name === \"jobName\" || name === \"job_description\") {\n      if (name === \"jobName\") {\n        valueElem = valueElem.replace(/alphaNumericPunctuation/g, \"\");\n      }\n      valueElem = capitalize(valueElem); //.charAt(0).toUpperCase() + valueElem.substring(1);\n    }\n\n    // if (stepCompleted || continueClicked) {\n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [name]: isInvalid(name, valueElem),\n    }));\n    // }\n\n    setBasicDetails((prevDetails) => ({\n      ...prevDetails,\n      [name]: valueElem,\n    }));\n  };\n\n  const handleContinue = () => {\n    let hasErrors;\n\n    if (!continueClicked) {\n      setContinueClicked(true);\n\n      hasErrors = Object.keys(basicDetails).reduce((prevError, name) => {\n        const hasError = !!isInvalid(name, basicDetails[name]);\n\n        setErrors((prevErrors) => ({\n          ...prevErrors,\n          [name]: isInvalid(name, basicDetails[name]),\n        }));\n\n        return hasError || prevError;\n      }, false);\n    }\n\n    if (!hasErrors) {\n      if (editDetailPage?.currentScreen) {\n        handleStepJustUpdate(basicDetails, true);\n      } else {\n        handleStepComplete(basicDetails);\n      }\n    } else {\n      setContinueClicked(false);\n    }\n  };\n\n  const checkErrors = () => {\n    let error_1 = isInvalid(\"jobName\", basicDetails[\"jobName\"]);\n    let error_2 = isInvalid(\"job_description\", basicDetails[\"job_description\"]);\n    if (!error_1?.length) {\n      return false;\n    }\n    return true;\n  };\n\n  console.log({ jobUpdateParam, jobId });\n  return (\n    <div className=\"app_wrapper\">\n      <div className=\"section_wrapper\">\n        <div className=\"custom_container\">\n          <div className=\"form_field\">\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_5\">\n                {editDetailPage?.currentScreen ? (\n                  <React.Fragment>\n                    <div className=\"relate\">\n                      <button\n                        className=\"back\"\n                        onClick={() => {\n                          handleStepForward(14);\n                        }}\n                      ></button>\n                      <span className=\"title\">\n                        {!jobUpdateParam && jobId\n                          ? \"Republish a job\"\n                          : update\n                          ? \"Update job\"\n                          : \"Post new job\"}\n                      </span>\n                    </div>\n                    <p className=\"commn_para\">\n                      Write the job name and try to describe all details for\n                      better comprehension.\n                    </p>\n                  </React.Fragment>\n                ) : (\n                  <React.Fragment>\n                    <span className=\"title\">\n                      {!jobUpdateParam && jobId\n                        ? \"Republish a job\"\n                        : update\n                        ? \"Update job\"\n                        : \"Post new job\"}\n                    </span>\n                    <p className=\"commn_para\">\n                      Write the job name and try to describe all details for\n                      better comprehension.\n                    </p>\n                  </React.Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_5\">\n              <div className=\"form_field\">\n                <span className=\"xs_sub_title\">Job</span>\n              </div>\n              <div className=\"form_field\">\n                <label className=\"form_label\">Job Name</label>\n                <div className=\"text_field\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter Job Name\"\n                    name=\"jobName\"\n                    value={jobName}\n                    onChange={handleChange}\n                  />\n                </div>\n                <span className=\"error_msg\">{errors.jobName}</span>\n              </div>\n              <div className=\"form_field\">\n                <label className=\"form_label\">Job Description</label>\n                <div className=\"text_field\">\n                  <textarea\n                    placeholder=\"Please give a general description of your job.\"\n                    name=\"job_description\"\n                    value={job_description}\n                    onChange={handleChange}\n                    onBlur={() => {\n                      if (job_description?.length) {\n                        let stringItem = job_description;\n                        if (job_description) {\n                          stringItem = job_description.split(\". \").join(\". \");\n                        }\n                        stringItem = stringItem\n                          .split(\".\")\n                          .map(capitalize)\n                          .join(\".\");\n                        stringItem = stringItem\n                          .split(\". \")\n                          .map(capitalize)\n                          .join(\". \");\n                        setBasicDetails((prev: any) => ({\n                          ...prev,\n                          job_description: stringItem,\n                        }));\n                      }\n                    }}\n                  />\n                  {/* {job_description.length ?\n                    <span className=\"char_count\">\n                      {`character length : ${job_description.length} / 250`}\n                    </span>\n                    : ''} */}\n                </div>\n                <span className=\"error_msg\">{errors.job_description}</span>\n              </div>\n              <div className=\"form_field\">\n                <button\n                  className={`fill_btn full_btn btn-effect ${\n                    checkErrors() ? \"disable_btn\" : \"\"\n                  }`}\n                  onClick={handleContinue}\n                >\n                  {\"Continue\"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostNewJob;\n"]},"metadata":{},"sourceType":"module"}