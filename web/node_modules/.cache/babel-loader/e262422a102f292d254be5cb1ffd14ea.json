{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/addEditMilestone.tsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport ChooseTimings from './chooseTimings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// for error messages\nconst label = {\n  milestone_name: 'Milestone Name',\n  from_date: 'From Date',\n  recommended_hours: 'Recommended Hours'\n};\nconst pattern = \"^([0-9][0-9]?[0-9]?[0-9]?[0-9]):[0-9][0-9]$\";\n\nclass AddEditMilestone extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.checkIsDateValid = (milestones, time) => {// const { editMileStone, editMilestoneTiming } = this.props;\n      // let checkIsValid: any = true;\n      // let isSkip: any = true;\n      // let filterMilestone: any = [];\n      // if (milestones.length > 1) {\n      //     filterMilestone = milestones.filter((mile_item: any, index: any) => index !== editMileStone);\n      //     filterMilestone.forEach((mile: any) => {\n      //         let validStart = moment(mile.from_date).isValid();\n      //         let validEnd = moment(mile.to_date).isValid();\n      //         let validStartInput = moment(time.from_date).isValid();\n      //         let validEndInput = moment(time.to_date).isValid();\n      //         if (validStart && validEnd) {\n      //             if (validStartInput && validEndInput) {\n      //                 if (moment(time.from_date).isSameOrAfter(mile.from_date) && (moment(time.to_date).isSameOrBefore(mile.to_date) ||\n      //                     moment(time.to_date).isSameOrAfter(mile.from_date))\n      //                 ) {\n      //                     checkIsValid = false;\n      //                     isSkip = false;\n      //                 }\n      //             }\n      //             if (validStartInput && !validEndInput) {\n      //                 if (\n      //                     moment(time.from_date).isSameOrAfter(mile.from_date) &&\n      //                     moment(time.from_date).isSameOrBefore(mile.to_date)) {\n      //                     checkIsValid = false;\n      //                     isSkip = false;\n      //                 }\n      //             }\n      //         }\n      //         if (validStart && validStartInput && !validEnd) {\n      //             if (moment(time.from_date).isSame(mile.from_date) || moment(time.to_date).isSame(mile.from_date)) {\n      //                 checkIsValid = false;\n      //                 isSkip = false;\n      //             }\n      //         }\n      //         if (validEnd && validEndInput) {\n      //             if (moment(time.to_date).isSame(mile.to_date)) {\n      //                 checkIsValid = false;\n      //                 isSkip = false;\n      //             }\n      //         }\n      //     });\n      // }\n      // return { checkIsValid, skip: isSkip };\n    };\n\n    this.handleChange = (name, value) => {\n      let error_clone = this.state.errors;\n\n      if (name === \"milestone_name\") {\n        value = value.trimLeft().replace(/[^a-zA-Z|0-9 ]/g, \"\");\n      }\n\n      if (name === \"recommended_hours\") {\n        value = value.trimLeft();\n      }\n\n      if (['milestone_name', 'from_date', 'recommended_hours'].includes(name)) {\n        error_clone[name] = this.isInvalid(name, value);\n      }\n\n      this.setState({ ...this.state,\n        [name]: value,\n        errors: error_clone\n      });\n    };\n\n    this.handleContinue = () => {\n      var _props$items;\n\n      let props = this.props;\n      let {\n        milestone_name,\n        isPhotoevidence,\n        from_date,\n        to_date,\n        recommended_hours,\n        order\n      } = this.state;\n      this.props.backToScreen({\n        index: props === null || props === void 0 ? void 0 : props.index,\n        data: {\n          milestone_name,\n          isPhotoevidence,\n          from_date,\n          to_date,\n          recommended_hours,\n          order: order === -1 ? (props === null || props === void 0 ? void 0 : (_props$items = props.items) === null || _props$items === void 0 ? void 0 : _props$items.length) + 1 : order\n        }\n      });\n    };\n\n    this.setItems = () => {// const { milestones, handleStepMileStone, newMileStoneScreen, editMileStone } = this.props;\n      // let { milestone_name, from_date, to_date, isPhotoevidence, recommended_hours, errors } = this.state;\n      // let milestone_index = editMileStone;\n      // handleStepMileStone({\n      //     \"milestone_name\": milestone_name,\n      //     \"isPhotoevidence\": isPhotoevidence,\n      //     \"from_date\": from_date, // milestones[milestone_index]?.from_date || '',\n      //     \"to_date\": to_date, //milestones[milestone_index]?.to_date || '',\n      //     \"recommended_hours\": recommended_hours\n      // }, milestone_index);\n    };\n\n    this.checkHoursVal = (value, lable, name) => {\n      if (value === null || value === void 0 ? void 0 : value.length) {\n        if (value.match(pattern) !== null) {\n          let splitItem = value.split(':')[1];\n          let IntItem = +splitItem;\n          let conditionItem = IntItem % 5 === 0;\n\n          if (!conditionItem) {\n            return 'Time should be in mutiples of 5 like 10:05, 10:10';\n          }\n        } else {\n          return 'Please enter a valid pattern like : 10:05';\n        }\n      } else {\n        return `${label[name]} is required.`;\n      } // if (value?.length) {\n      //     if (value.match(pattern) !== null) {\n      //         return '';\n      //     } else {\n      //         return 'Please enter a valid pattern like : 04:03'\n      //     }\n      // }\n      // return `${label[name]} is required.`\n\n    };\n\n    this.isInvalid = (name, value) => {\n      switch (name) {\n        case 'milestone_name':\n          return !(value === null || value === void 0 ? void 0 : value.length) ? `${label[name]} is required.` : (value === null || value === void 0 ? void 0 : value.length) > 50 ? 'Maximum 50 characters are allowed.' : '';\n\n        case 'from_date':\n          return !(value === null || value === void 0 ? void 0 : value.length) ? `${label[name]} is required.` : '';\n\n        case 'recommended_hours':\n          return this.checkHoursVal(value, label, name);\n      }\n    };\n\n    this.checkErrors = () => {\n      let {\n        from_date,\n        isPhotoevidence,\n        milestone_name,\n        recommended_hours,\n        to_date,\n        order\n      } = this.state;\n      let error_1 = this.isInvalid('milestone_name', milestone_name);\n      let error_2 = this.isInvalid('from_date', from_date);\n      let error_3 = this.isInvalid('recommended_hours', recommended_hours);\n      let errorItems = {};\n      errorItems['milestone_name'] = error_1;\n      errorItems['from_date'] = error_2;\n      errorItems['recommended_hours'] = error_3;\n\n      if (!(error_1 === null || error_1 === void 0 ? void 0 : error_1.length) && !(error_2 === null || error_2 === void 0 ? void 0 : error_2.length) && !(error_3 === null || error_3 === void 0 ? void 0 : error_3.length)) {\n        return false;\n      } // let filteredMiles = [];\n      // if (milestones?.length && Array.isArray(milestones)) {\n      //     filteredMiles = milestones.filter((item: any) => {\n      //         if (item?.milestone_name) {\n      //             return item;\n      //         }\n      //     });\n      // }\n      // let milestone_index = filteredMiles.length ? filteredMiles.length - 1 : 0;\n      // let from_date = filteredMiles[milestone_index]?.from_date || '';\n      // let { milestone_name, recommended_hours, errors: { pattern_error } } = this.state;\n      // if (milestone_name?.length) {\n      //     let errorItems: any = {};\n      //     let error_1 = this.isInvalid('milestone_name', milestone_name);\n      //     let error_2 = this.isInvalid('from_date', from_date);\n      //     let error_3 = this.isInvalid('recommended_hours', recommended_hours);\n      //     errorItems['milestone_name'] = error_1;\n      //     errorItems['from_date'] = error_2;\n      //     errorItems['recommended_hours'] = error_3;\n      //     if (milestone_name?.length) {\n      //         errorItems['milestone_name'] = error_1;\n      //     }\n      //     if (recommended_hours?.length && error_3?.length) {\n      //         errorItems['recommended_hours'] = error_3;\n      //     }\n      //     if (JSON.stringify(this.state.errors) !== JSON.stringify(errorItems)) {\n      //         this.setState({ errors: errorItems })\n      //     }\n      //     if (!error_1?.length && !error_2?.length && !error_3?.length && !pattern_error?.length) {\n      //         return false;\n      //     }\n      // }\n\n\n      return true;\n    };\n\n    this.renderTimeWithCustomFormat = (fromDate, toDate, format, formatSet) => {\n      if (moment(fromDate, format).isValid() && !moment(toDate, format).isValid()) {\n        return `${moment(fromDate, format).format('DD MMM')}`;\n      }\n\n      if (moment(fromDate, format).isValid() && moment(toDate, format).isValid()) {\n        let yearEnd = moment().endOf(\"year\").toISOString();\n        let monthEnd = moment(fromDate, format).endOf(\"month\").toISOString();\n        let item = moment(toDate, format).diff(moment(fromDate, format), 'months', true);\n        let item_year = moment(toDate, format).diff(moment(fromDate, format), 'years', true);\n        let monthDiff = parseInt(item.toString());\n        let yearDiff = parseInt(item_year.toString());\n\n        if (yearDiff > 0 || moment(toDate, format).isAfter(yearEnd) || moment(toDate, format).isAfter(yearEnd)) {\n          return `${moment(fromDate, format).format(formatSet[1])} - ${moment(toDate, format).format(formatSet[1])}`;\n        }\n\n        if (monthDiff > 0 || moment(toDate, format).isAfter(monthEnd)) {\n          return `${moment(fromDate, format).format(formatSet[0])} - ${moment(toDate, format).format(formatSet[0])}`;\n        }\n\n        return `${moment(fromDate, format).format(formatSet[0])} - ${moment(toDate, format).format(formatSet[0])}`;\n      }\n\n      return 'Choose';\n    };\n\n    this.toggleCalenderTime = data => {\n      console.log({\n        data\n      }, '----------------------------------------------------------------------->');\n      this.setState({\n        toggleAddTimings: false,\n        from_date: data && moment(data === null || data === void 0 ? void 0 : data.startDate).isValid() ? moment(data === null || data === void 0 ? void 0 : data.startDate).format('MM-DD-YYYY') : '',\n        to_date: data && moment(data === null || data === void 0 ? void 0 : data.endDate).isValid() ? moment(data === null || data === void 0 ? void 0 : data.endDate).format('MM-DD-YYYY') : ''\n      });\n    };\n\n    this.state = {\n      milestone_name: '',\n      isPhotoevidence: false,\n      from_date: '',\n      to_date: '',\n      recommended_hours: '',\n      order: -1,\n      errors: {\n        milestone_name: '',\n        from_date: '',\n        recommended_hours: '',\n        pattern_error: ''\n      },\n      toggleAddTimings: false\n    };\n  }\n\n  componentDidMount() {\n    let props = this.props;\n    let props_item = props === null || props === void 0 ? void 0 : props.item;\n    this.setState({\n      from_date: props_item === null || props_item === void 0 ? void 0 : props_item.from_date,\n      isPhotoevidence: props_item === null || props_item === void 0 ? void 0 : props_item.isPhotoevidence,\n      milestone_name: props_item === null || props_item === void 0 ? void 0 : props_item.milestone_name,\n      recommended_hours: props_item === null || props_item === void 0 ? void 0 : props_item.recommended_hours,\n      to_date: props_item === null || props_item === void 0 ? void 0 : props_item.to_date,\n      order: props_item === null || props_item === void 0 ? void 0 : props_item.order\n    }); // const { editMileStone, milestones, editMilestoneTiming } = this.props;\n    // let item = milestones[editMileStone];\n    // if (item && Object.keys(item).length) {\n    //     let { milestone_name, isPhotoevidence, from_date, to_date, recommended_hours } = item;\n    //     let isValid: any = null;\n    //     let isSkip: any = null;\n    //     if (editMilestoneTiming && Object.keys(editMilestoneTiming).length) {\n    //         const { checkIsValid, skip } = this.checkIsDateValid(milestones, editMilestoneTiming);\n    //         isValid = checkIsValid;\n    //         isSkip = skip;\n    //         if (isValid) {\n    //             if ('from_date' in editMilestoneTiming) {\n    //                 from_date = editMilestoneTiming?.from_date;\n    //             }\n    //             if ('to_date' in editMilestoneTiming) {\n    //                 to_date = editMilestoneTiming?.to_date;\n    //             }\n    //         }\n    //     }\n    //     this.setState({\n    //         from_date: from_date,\n    //         isPhotoevidence: isPhotoevidence === undefined ? false : isPhotoevidence,\n    //         milestone_name: milestone_name,\n    //         recommended_hours: recommended_hours,\n    //         to_date: to_date,\n    //     }, () => {\n    //         if (isValid !== null) {\n    //             this.props.addTimeToMileStone(\n    //                 { from_date, to_date },\n    //                 editMileStone,\n    //                 isSkip\n    //             )\n    //         }\n    //     })\n    // }\n  }\n\n  render() {\n    // const { handleStepForward, handleStepBack, milestones, editMileStone } = this.props;\n    let {\n      milestone_name,\n      isPhotoevidence,\n      recommended_hours,\n      from_date,\n      to_date,\n      errors\n    } = this.state;\n    let from_date_format = from_date;\n    let to_date_format = to_date;\n    let props = this.props;\n    let check_errors = this.checkErrors();\n    let props_item = props === null || props === void 0 ? void 0 : props.item;\n    let props_items = props === null || props === void 0 ? void 0 : props.items;\n    let props_index = props === null || props === void 0 ? void 0 : props.index;\n\n    if (this.state.toggleAddTimings) {\n      return /*#__PURE__*/_jsxDEV(ChooseTimings, {\n        toggleCalenderTime: this.toggleCalenderTime,\n        items: props_items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_field\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_8\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relate\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"back\",\n                style: {\n                  zIndex: 999\n                },\n                onClick: () => {\n                  props.backToScreen(); // handleStepForward(6) \n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"title\",\n                children: `${props_item == null ? `Milestone ${(props_items === null || props_items === void 0 ? void 0 : props_items.length) + 1}` : `Edit Milestone ${props_index + 1}`}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_7\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form_label\",\n              children: \"Milestone name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text_field\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Enter Milestone name\",\n                onChange: e => {\n                  this.handleChange('milestone_name', e.target.value);\n                },\n                value: milestone_name,\n                name: \"milestone_name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"error_msg\",\n              children: errors === null || errors === void 0 ? void 0 : errors.milestone_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_field\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"checkbox_wrap agree_check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: () => {\n                  this.handleChange('isPhotoevidence', !isPhotoevidence);\n                },\n                checked: isPhotoevidence,\n                className: \"filter-type filled-in\",\n                type: \"checkbox\",\n                id: \"milestone1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"milestone1\",\n                children: 'Photo evidence required'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_field\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"f_spacebw\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form_label\",\n                children: \"Duration of milestone\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  // handleStepForward(8) \n                  this.setState({\n                    toggleAddTimings: true\n                  });\n                },\n                className: \"fill_btn fill_grey_btn choose_btn\",\n                children: this.renderTimeWithCustomFormat(from_date_format, to_date_format, 'MM-DD-YYYY', ['MMM DD', 'MMM DD YYYY'])\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form_label\",\n              children: \"Recommended hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text_field\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => {\n                  this.setState({\n                    recommended_hours: e.target.value.trimLeft()\n                  }, () => {\n                    let rh_value = this.state.recommended_hours;\n                    let error_item = this.state.errors; // \"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$\";\n\n                    if (!(rh_value === null || rh_value === void 0 ? void 0 : rh_value.length) || rh_value.match(pattern) !== null) {\n                      error_item['pattern_error'] = '';\n                      let splitItem = rh_value.split(':')[1];\n                      let IntItem = +splitItem;\n                      let conditionItem = IntItem % 5 === 0;\n\n                      if (!conditionItem) {\n                        error_item['pattern_error'] = 'Time should be in mutiples of 5 like 10:05, 10:10';\n                      }\n                    } else {\n                      error_item['pattern_error'] = 'Please enter a valid pattern like : 10:05';\n                    }\n\n                    this.setState({\n                      errors: error_item\n                    });\n                  });\n                } // onChange={(e) => { this.handleChange('recommended_hours', e.target.value) }}\n                ,\n                value: recommended_hours,\n                autoComplete: \"off\",\n                type: \"text\",\n                placeholder: \"Enter Recommended hours\",\n                name: \"recommended_hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"error_msg\",\n              children: errors.recommended_hours\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"error_msg\",\n              children: errors.pattern_error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form_field\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.handleContinue // className=\"fill_btn full_btn\">\n              ,\n              className: `fill_btn full_btn btn-effect ${check_errors ? 'disable_btn' : ''}`,\n              children: 'Continue'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AddEditMilestone;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/tradieEditProfile/components/milestones/addEditMilestone.tsx"],"names":["React","Component","moment","ChooseTimings","label","milestone_name","from_date","recommended_hours","pattern","AddEditMilestone","constructor","props","checkIsDateValid","milestones","time","handleChange","name","value","error_clone","state","errors","trimLeft","replace","includes","isInvalid","setState","handleContinue","isPhotoevidence","to_date","order","backToScreen","index","data","items","length","setItems","checkHoursVal","lable","match","splitItem","split","IntItem","conditionItem","checkErrors","error_1","error_2","error_3","errorItems","renderTimeWithCustomFormat","fromDate","toDate","format","formatSet","isValid","yearEnd","endOf","toISOString","monthEnd","item","diff","item_year","monthDiff","parseInt","toString","yearDiff","isAfter","toggleCalenderTime","console","log","toggleAddTimings","startDate","endDate","pattern_error","componentDidMount","props_item","render","from_date_format","to_date_format","check_errors","props_items","props_index","zIndex","e","target","rh_value","error_item"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport moment from 'moment';\nimport AddMilestone from '../../../postJob/components/addMilestone copy';\nimport ChooseTimings from './chooseTimings';\n\ninterface Props {\n    // data: any;\n    // stepCompleted: Boolean;\n    // editMileStone: any;\n    // editMilestoneTiming: any;\n    // handleStepComplete: (data: any) => void;\n    // addTimeToMileStone: (data: any, index: any, skip?: any) => void;\n    // handleStepForward: (data: any) => void;\n    // newMileStoneScreen: (data: any) => void;\n    // handleStepMileStone: (data: any, index: any) => void;\n    // handleStepBack: () => void;\n    // milestones: any;\n    item: any;\n    items: any;\n    index: any;\n    backToScreen: (data?: any,) => void;\n}\n\ninterface State {\n    milestone_name: string,\n    isPhotoevidence: boolean,\n    from_date: string,\n    to_date: string,\n    recommended_hours: any\n    errors: any;\n    order: number;\n    toggleAddTimings: boolean,\n}\n\n// for error messages\nconst label: { [index: string]: string } = {\n    milestone_name: 'Milestone Name',\n    from_date: 'From Date',\n    recommended_hours: 'Recommended Hours',\n}\n\nconst pattern = \"^([0-9][0-9]?[0-9]?[0-9]?[0-9]):[0-9][0-9]$\";\nclass AddEditMilestone extends Component<Props, State> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            milestone_name: '',\n            isPhotoevidence: false,\n            from_date: '',\n            to_date: '',\n            recommended_hours: '',\n            order: -1,\n            errors: {\n                milestone_name: '',\n                from_date: '',\n                recommended_hours: '',\n                pattern_error: ''\n            },\n            toggleAddTimings: false\n        }\n    }\n\n    checkIsDateValid = (milestones: any, time: any) => {\n        // const { editMileStone, editMilestoneTiming } = this.props;\n        // let checkIsValid: any = true;\n        // let isSkip: any = true;\n\n        // let filterMilestone: any = [];\n\n        // if (milestones.length > 1) {\n        //     filterMilestone = milestones.filter((mile_item: any, index: any) => index !== editMileStone);\n        //     filterMilestone.forEach((mile: any) => {\n        //         let validStart = moment(mile.from_date).isValid();\n        //         let validEnd = moment(mile.to_date).isValid();\n\n        //         let validStartInput = moment(time.from_date).isValid();\n        //         let validEndInput = moment(time.to_date).isValid();\n\n        //         if (validStart && validEnd) {\n        //             if (validStartInput && validEndInput) {\n        //                 if (moment(time.from_date).isSameOrAfter(mile.from_date) && (moment(time.to_date).isSameOrBefore(mile.to_date) ||\n        //                     moment(time.to_date).isSameOrAfter(mile.from_date))\n        //                 ) {\n        //                     checkIsValid = false;\n        //                     isSkip = false;\n        //                 }\n        //             }\n\n        //             if (validStartInput && !validEndInput) {\n        //                 if (\n        //                     moment(time.from_date).isSameOrAfter(mile.from_date) &&\n        //                     moment(time.from_date).isSameOrBefore(mile.to_date)) {\n        //                     checkIsValid = false;\n        //                     isSkip = false;\n        //                 }\n        //             }\n        //         }\n\n        //         if (validStart && validStartInput && !validEnd) {\n        //             if (moment(time.from_date).isSame(mile.from_date) || moment(time.to_date).isSame(mile.from_date)) {\n        //                 checkIsValid = false;\n        //                 isSkip = false;\n        //             }\n        //         }\n\n        //         if (validEnd && validEndInput) {\n        //             if (moment(time.to_date).isSame(mile.to_date)) {\n        //                 checkIsValid = false;\n        //                 isSkip = false;\n        //             }\n        //         }\n\n        //     });\n        // }\n        // return { checkIsValid, skip: isSkip };\n    }\n\n    componentDidMount() {\n        let props = this.props;\n        let props_item: any = props?.item;\n\n        this.setState({\n            from_date: props_item?.from_date,\n            isPhotoevidence: props_item?.isPhotoevidence,\n            milestone_name: props_item?.milestone_name,\n            recommended_hours: props_item?.recommended_hours,\n            to_date: props_item?.to_date,\n            order: props_item?.order,\n        })\n\n\n        // const { editMileStone, milestones, editMilestoneTiming } = this.props;\n        // let item = milestones[editMileStone];\n\n        // if (item && Object.keys(item).length) {\n        //     let { milestone_name, isPhotoevidence, from_date, to_date, recommended_hours } = item;\n\n        //     let isValid: any = null;\n        //     let isSkip: any = null;\n\n        //     if (editMilestoneTiming && Object.keys(editMilestoneTiming).length) {\n        //         const { checkIsValid, skip } = this.checkIsDateValid(milestones, editMilestoneTiming);\n        //         isValid = checkIsValid;\n        //         isSkip = skip;\n\n        //         if (isValid) {\n        //             if ('from_date' in editMilestoneTiming) {\n        //                 from_date = editMilestoneTiming?.from_date;\n        //             }\n        //             if ('to_date' in editMilestoneTiming) {\n        //                 to_date = editMilestoneTiming?.to_date;\n        //             }\n        //         }\n        //     }\n\n        //     this.setState({\n        //         from_date: from_date,\n        //         isPhotoevidence: isPhotoevidence === undefined ? false : isPhotoevidence,\n        //         milestone_name: milestone_name,\n        //         recommended_hours: recommended_hours,\n        //         to_date: to_date,\n        //     }, () => {\n        //         if (isValid !== null) {\n        //             this.props.addTimeToMileStone(\n        //                 { from_date, to_date },\n        //                 editMileStone,\n        //                 isSkip\n        //             )\n        //         }\n        //     })\n        // }\n    }\n\n    handleChange = (name: string, value: any) => {\n        let error_clone: any = this.state.errors;\n\n\n        if (name === \"milestone_name\") {\n            value = (value).trimLeft().replace(/[^a-zA-Z|0-9 ]/g, \"\")\n        }\n\n        if (name === \"recommended_hours\") {\n            value = (value).trimLeft();\n        }\n\n\n        if (['milestone_name', 'from_date', 'recommended_hours'].includes(name)) {\n            error_clone[name] = this.isInvalid(name, value)\n        }\n        this.setState({ ...this.state, [name]: value, errors: error_clone });\n    }\n\n    handleContinue = () => {\n        let props = this.props;\n\n        let {\n            milestone_name,\n            isPhotoevidence,\n            from_date,\n            to_date,\n            recommended_hours,\n            order\n        } = this.state;\n\n        this.props.backToScreen({\n            index: props?.index,\n            data: {\n                milestone_name,\n                isPhotoevidence,\n                from_date,\n                to_date,\n                recommended_hours,\n                order: order === -1 ? props?.items?.length + 1 : order\n            }\n        })\n    }\n\n\n    setItems = () => {\n        // const { milestones, handleStepMileStone, newMileStoneScreen, editMileStone } = this.props;\n        // let { milestone_name, from_date, to_date, isPhotoevidence, recommended_hours, errors } = this.state;\n        // let milestone_index = editMileStone;\n        // handleStepMileStone({\n        //     \"milestone_name\": milestone_name,\n        //     \"isPhotoevidence\": isPhotoevidence,\n        //     \"from_date\": from_date, // milestones[milestone_index]?.from_date || '',\n        //     \"to_date\": to_date, //milestones[milestone_index]?.to_date || '',\n        //     \"recommended_hours\": recommended_hours\n        // }, milestone_index);\n    }\n\n\n    checkHoursVal = (value: any, lable: any, name: any) => {\n        if (value?.length) {\n            if (value.match(pattern) !== null) {\n                let splitItem = value.split(':')[1];\n                let IntItem = +splitItem;\n                let conditionItem = IntItem % 5 === 0;\n\n                if (!conditionItem) {\n                    return 'Time should be in mutiples of 5 like 10:05, 10:10';\n                }\n            } else {\n                return 'Please enter a valid pattern like : 10:05';\n            }\n        } else {\n            return `${label[name]} is required.`\n        }\n\n        // if (value?.length) {\n        //     if (value.match(pattern) !== null) {\n        //         return '';\n        //     } else {\n        //         return 'Please enter a valid pattern like : 04:03'\n        //     }\n        // }\n        // return `${label[name]} is required.`\n    }\n\n    isInvalid = (name: string, value: string) => {\n        switch (name) {\n            case 'milestone_name':\n                return !value?.length ? `${label[name]} is required.` : value?.length > 50 ? 'Maximum 50 characters are allowed.' : '';\n            case 'from_date':\n                return !value?.length ? `${label[name]} is required.` : '';\n            case 'recommended_hours':\n                return this.checkHoursVal(value, label, name);\n        }\n    }\n\n    checkErrors = () => {\n        let {\n            from_date,\n            isPhotoevidence,\n            milestone_name,\n            recommended_hours,\n            to_date,\n            order\n        } = this.state;\n\n\n        let error_1 = this.isInvalid('milestone_name', milestone_name);\n        let error_2 = this.isInvalid('from_date', from_date);\n        let error_3 = this.isInvalid('recommended_hours', recommended_hours);\n\n        let errorItems: any = {};\n        errorItems['milestone_name'] = error_1;\n        errorItems['from_date'] = error_2;\n        errorItems['recommended_hours'] = error_3;\n\n        if (!error_1?.length && !error_2?.length && !error_3?.length) {\n            return false;\n        }\n\n        // let filteredMiles = [];\n        // if (milestones?.length && Array.isArray(milestones)) {\n        //     filteredMiles = milestones.filter((item: any) => {\n        //         if (item?.milestone_name) {\n        //             return item;\n        //         }\n        //     });\n        // }\n\n        // let milestone_index = filteredMiles.length ? filteredMiles.length - 1 : 0;\n        // let from_date = filteredMiles[milestone_index]?.from_date || '';\n        // let { milestone_name, recommended_hours, errors: { pattern_error } } = this.state;\n        // if (milestone_name?.length) {\n        //     let errorItems: any = {};\n        //     let error_1 = this.isInvalid('milestone_name', milestone_name);\n        //     let error_2 = this.isInvalid('from_date', from_date);\n        //     let error_3 = this.isInvalid('recommended_hours', recommended_hours);\n        //     errorItems['milestone_name'] = error_1;\n        //     errorItems['from_date'] = error_2;\n        //     errorItems['recommended_hours'] = error_3;\n\n        //     if (milestone_name?.length) {\n        //         errorItems['milestone_name'] = error_1;\n        //     }\n\n        //     if (recommended_hours?.length && error_3?.length) {\n        //         errorItems['recommended_hours'] = error_3;\n        //     }\n\n        //     if (JSON.stringify(this.state.errors) !== JSON.stringify(errorItems)) {\n        //         this.setState({ errors: errorItems })\n        //     }\n\n        //     if (!error_1?.length && !error_2?.length && !error_3?.length && !pattern_error?.length) {\n        //         return false;\n        //     }\n        // }\n        return true;\n    }\n\n    renderTimeWithCustomFormat = (fromDate: any, toDate: any, format: any, formatSet?: any) => {\n\n        if (moment(fromDate, format).isValid() && !moment(toDate, format).isValid()) {\n            return `${moment(fromDate, format).format('DD MMM')}`\n        }\n\n        if (moment(fromDate, format).isValid() && moment(toDate, format).isValid()) {\n            let yearEnd = moment().endOf(\"year\").toISOString();\n            let monthEnd = moment(fromDate, format).endOf(\"month\").toISOString();\n\n            let item: any = moment(toDate, format).diff(moment(fromDate, format), 'months', true);\n            let item_year: any = moment(toDate, format).diff(moment(fromDate, format), 'years', true);\n\n            let monthDiff = parseInt(item.toString());\n            let yearDiff = parseInt(item_year.toString());\n\n            if (yearDiff > 0 || moment(toDate, format).isAfter(yearEnd) || moment(toDate, format).isAfter(yearEnd)) {\n                return `${moment(fromDate, format).format(formatSet[1])} - ${moment(toDate, format).format(formatSet[1])}`\n            }\n            if (monthDiff > 0 || moment(toDate, format).isAfter(monthEnd)) {\n                return `${moment(fromDate, format).format(formatSet[0])} - ${moment(toDate, format).format(formatSet[0])}`\n            }\n            return `${moment(fromDate, format).format(formatSet[0])} - ${moment(toDate, format).format(formatSet[0])}`\n        }\n\n        return 'Choose';\n    }\n\n    toggleCalenderTime = (data?: any) => {\n        console.log({data},'----------------------------------------------------------------------->')\n        this.setState({\n            toggleAddTimings: false,\n            from_date: data && moment(data?.startDate).isValid() ? moment(data?.startDate).format('MM-DD-YYYY') : '',\n            to_date: data && moment(data?.endDate).isValid() ? moment(data?.endDate).format('MM-DD-YYYY') : '',\n        })\n    }\n\n    render() {\n        // const { handleStepForward, handleStepBack, milestones, editMileStone } = this.props;\n        let { milestone_name, isPhotoevidence, recommended_hours, from_date, to_date, errors } = this.state;\n        let from_date_format = from_date;\n        let to_date_format = to_date;\n        let props = this.props;\n        let check_errors = this.checkErrors();\n\n        let props_item = props?.item;\n        let props_items = props?.items;\n        let props_index = props?.index;\n\n        if (this.state.toggleAddTimings) {\n            return (\n                <ChooseTimings\n                    toggleCalenderTime={this.toggleCalenderTime}\n                    items={props_items}\n                />\n            )\n        }\n\n        return (\n            <div className=\"custom_container\">\n                <div className=\"form_field\">\n                    <div className=\"flex_row\">\n                        <div className=\"flex_col_sm_8\">\n                            <div className=\"relate\">\n                                <button\n                                    className=\"back\"\n                                    style={{ zIndex: 999 }}\n                                    onClick={() => {\n                                        props.backToScreen();\n                                        // handleStepForward(6) \n                                    }}>\n                                </button>\n                                <span className=\"title\">\n                                    {`${props_item == null ? `Milestone ${props_items?.length + 1}` : `Edit Milestone ${props_index + 1}`}`}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"flex_row\">\n                    <div className=\"flex_col_sm_7\">\n                        <div className=\"form_field\">\n                            <label className=\"form_label\">Milestone name</label>\n                            <div className=\"text_field\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Enter Milestone name\"\n                                    onChange={(e) => { this.handleChange('milestone_name', e.target.value) }}\n                                    value={milestone_name}\n                                    name=\"milestone_name\" />\n                            </div>\n                            <span className=\"error_msg\">{errors?.milestone_name}</span>\n                        </div>\n                        <div className=\"form_field\">\n\n                            <div className=\"checkbox_wrap agree_check\">\n                                <input\n                                    onChange={() => { this.handleChange('isPhotoevidence', !isPhotoevidence) }}\n                                    checked={isPhotoevidence}\n                                    className=\"filter-type filled-in\"\n                                    type=\"checkbox\"\n                                    id=\"milestone1\" />\n                                <label htmlFor=\"milestone1\">\n                                    {'Photo evidence required'}\n                                </label>\n                            </div>\n                        </div>\n                        <div className=\"form_field\">\n                            <div className=\"f_spacebw\">\n                                <label className=\"form_label\">Duration of milestone</label>\n                                <button\n                                    onClick={() => {\n                                        // handleStepForward(8) \n                                        this.setState({\n                                            toggleAddTimings: true\n                                        })\n                                    }}\n                                    className=\"fill_btn fill_grey_btn choose_btn\">\n                                    {this.renderTimeWithCustomFormat(\n                                        from_date_format,\n                                        to_date_format,\n                                        'MM-DD-YYYY',\n                                        ['MMM DD', 'MMM DD YYYY']\n                                    )}\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"form_field\">\n                            <label className=\"form_label\">Recommended hours</label>\n                            <div className=\"text_field\">\n                                <input\n                                    onChange={(e) => {\n                                        this.setState({ recommended_hours: (e.target.value).trimLeft() }, () => {\n                                            let rh_value = this.state.recommended_hours;\n                                            let error_item = this.state.errors;\n\n                                            // \"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$\";\n\n                                            if (!rh_value?.length || rh_value.match(pattern) !== null) {\n                                                error_item['pattern_error'] = '';\n                                                let splitItem = rh_value.split(':')[1];\n                                                let IntItem = +splitItem;\n                                                let conditionItem = IntItem % 5 === 0;\n                                                if (!conditionItem) {\n                                                    error_item['pattern_error'] = 'Time should be in mutiples of 5 like 10:05, 10:10';\n                                                }\n                                            } else {\n                                                error_item['pattern_error'] = 'Please enter a valid pattern like : 10:05';\n                                            }\n                                            this.setState({ errors: error_item });\n                                        });\n                                    }}\n                                    // onChange={(e) => { this.handleChange('recommended_hours', e.target.value) }}\n                                    value={recommended_hours}\n                                    autoComplete=\"off\"\n                                    type=\"text\"\n                                    placeholder=\"Enter Recommended hours\"\n                                    name=\"recommended_hours\" />\n                            </div>\n                            <span className=\"error_msg\">{errors.recommended_hours}</span>\n                            <span className=\"error_msg\">{errors.pattern_error}</span>\n                        </div>\n\n                        <div className=\"form_field\">\n                            <button\n                                onClick={this.handleContinue}\n                                // className=\"fill_btn full_btn\">\n                                className={`fill_btn full_btn btn-effect ${check_errors ? 'disable_btn' : ''}`}>\n                                {'Continue'}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddEditMilestone;"]},"metadata":{},"sourceType":"module"}