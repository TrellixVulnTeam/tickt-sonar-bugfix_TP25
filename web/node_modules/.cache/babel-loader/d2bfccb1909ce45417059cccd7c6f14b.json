{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/applicantsList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport TradieBox from '../../shared/tradieBox';\nimport Menu from '@material-ui/core/Menu';\nimport cancel from \"../../../assets/images/ic-cancel.png\";\nimport noDataFound from '../../../assets/images/no-search-data.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ApplicantsList = props => {\n  _s();\n\n  const {\n    items,\n    jobid,\n    specializationId,\n    setJobLabel,\n    isLoading,\n    activeType\n  } = props;\n  const [isRender, setRender] = useState(false);\n  const [sortBySorting, setSortBySorting] = useState({\n    sortBySorting: false,\n    sortBy: 1\n  });\n  const [filterAnchorEl, setFilterAnchorEl] = useState(null);\n  const [sortingAnchorEl, setSortingAnchorEl] = useState(null);\n\n  const sortBySortingClick = event => {\n    setSortingAnchorEl(event.currentTarget);\n    setSortBySorting(prevData => ({ ...prevData,\n      sortBySorting: true\n    }));\n  };\n\n  const sortBySortingClose = () => {\n    setSortingAnchorEl(null);\n    setSortBySorting(prevData => ({ ...prevData,\n      sortBySorting: false\n    }));\n  };\n\n  const sortByButtonClicked = num => {\n    setSortBySorting(prevData => ({ ...prevData,\n      sortBy: num\n    }));\n    sortBySortingClose();\n    setJobLabel('applicantList', jobid, num);\n  };\n\n  useEffect(() => {\n    if (isLoading === false) {\n      setRender(true);\n    }\n  }, [isLoading]);\n\n  if (!isRender) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_row center_flex\",\n      children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relate\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"xs_sub_title\",\n              children: 'New applicants'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"back\",\n              onClick: () => {\n                setJobLabel(activeType);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_6 text-right\",\n          children: [activeType === 'applicant' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sortBySortingClick,\n            className: \"fill_grey_btn sort_btn\",\n            children: 'Sort by'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Menu // id=\"simple-menu\"\n          , {\n            className: \"fsp_modal range sort\",\n            anchorEl: sortingAnchorEl,\n            keepMounted: true,\n            open: Boolean(sortingAnchorEl),\n            onClose: sortBySortingClose,\n            transformOrigin: {\n              vertical: 'top',\n              horizontal: 'right'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close_btn\",\n              onClick: sortBySortingClose,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: cancel,\n                alt: \"cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sub_title\",\n              children: \"Sort by\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio_wrap agree_check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"filter-type filled-in\",\n                type: \"radio\",\n                id: \"highestRated\",\n                value: \"Highest rated\",\n                checked: sortBySorting.sortBy === 1,\n                onChange: () => sortByButtonClicked(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"highestRated\",\n                children: \"Highest rated\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio_wrap agree_check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"filter-type filled-in\",\n                type: \"radio\",\n                id: \"closest\",\n                value: \"Closest to me\",\n                checked: sortBySorting.sortBy === 2,\n                onChange: () => sortByButtonClicked(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"closest\",\n                children: \"Closest to me\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio_wrap agree_check\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"filter-type filled-in\",\n                type: \"radio\",\n                id: \"mostJob\",\n                value: \"Most jobs completed\",\n                checked: sortBySorting.sortBy === 3,\n                onChange: () => sortByButtonClicked(3)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"mostJob\",\n                children: \"Most jobs completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex_row applicants_row\",\n      children: [console.log({\n        items\n      }, '------------>'), (items === null || items === void 0 ? void 0 : items.length) ? items.map((item, index) => /*#__PURE__*/_jsxDEV(TradieBox, {\n        item: item,\n        index: index,\n        specializationId: specializationId,\n        jobId: jobid,\n        hideInvite: item.status === 'CANCELLED JOB',\n        showStatus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }, this)) : !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no_record m-t-vh\",\n        children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n          className: \"no_img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: noDataFound,\n            alt: \"data not found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: 'No Data Found'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ApplicantsList, \"WIXR6B3XlNzeQ/1l4FppmP50Hms=\");\n\n_c = ApplicantsList;\nexport default ApplicantsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApplicantsList\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/applicantsList.tsx"],"names":["React","useState","useEffect","TradieBox","Menu","cancel","noDataFound","ApplicantsList","props","items","jobid","specializationId","setJobLabel","isLoading","activeType","isRender","setRender","sortBySorting","setSortBySorting","sortBy","filterAnchorEl","setFilterAnchorEl","sortingAnchorEl","setSortingAnchorEl","sortBySortingClick","event","currentTarget","prevData","sortBySortingClose","sortByButtonClicked","num","Boolean","vertical","horizontal","console","log","length","map","item","index","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport TradieBox from '../../shared/tradieBox';\nimport Menu from '@material-ui/core/Menu';\nimport cancel from \"../../../assets/images/ic-cancel.png\";\nimport noDataFound from '../../../assets/images/no-search-data.png';\ninterface Props {\n    items: any,\n    jobid: any,\n    setJobLabel: any,\n    activeType: any,\n    history: any,\n    specializationId: any,\n    isLoading: any,\n}\n\nconst ApplicantsList = (props: Props) => {\n    const { items, jobid, specializationId, setJobLabel, isLoading, activeType } = props;\n    const [isRender, setRender] = useState(false);\n    const [sortBySorting, setSortBySorting] = useState<any>({\n        sortBySorting: false,\n        sortBy: 1\n    });\n    const [filterAnchorEl, setFilterAnchorEl] = useState(null);\n    const [sortingAnchorEl, setSortingAnchorEl] = useState(null);\n\n    const sortBySortingClick = (event: any) => {\n        setSortingAnchorEl(event.currentTarget);\n        setSortBySorting((prevData: any) => ({ ...prevData, sortBySorting: true }))\n    };\n\n    const sortBySortingClose = () => {\n        setSortingAnchorEl(null);\n        setSortBySorting((prevData: any) => ({ ...prevData, sortBySorting: false }))\n    };\n\n\n    const sortByButtonClicked = (num: number) => {\n        setSortBySorting((prevData: any) => ({ ...prevData, sortBy: num }));\n        sortBySortingClose();\n        setJobLabel('applicantList', jobid, num)\n    }\n\n    useEffect(() => {\n        if (isLoading === false) {\n            setRender(true);\n        }\n    }, [isLoading]);\n\n\n    if (!isRender) {\n        return null;\n    }\n\n    return (\n        <>\n            <div className=\"flex_row center_flex\">\n                <React.Fragment>\n                    <div className=\"flex_col_sm_6\">\n                        <div className=\"relate\">\n                            <span className=\"xs_sub_title\">\n                                {'New applicants'}\n                            </span>\n                            <button\n                                className=\"back\"\n                                onClick={() => { setJobLabel(activeType) }}\n                            >\n                            </button>\n                        </div>\n                    </div>\n\n                    <div className=\"flex_col_sm_6 text-right\">\n                        {activeType === 'applicant' &&\n                            <button onClick={sortBySortingClick} className=\"fill_grey_btn sort_btn\">\n                                {'Sort by'}\n                            </button>\n                        }\n\n                        <Menu\n                            // id=\"simple-menu\"\n                            className=\"fsp_modal range sort\"\n                            anchorEl={sortingAnchorEl}\n                            keepMounted\n                            open={Boolean(sortingAnchorEl)}\n                            onClose={sortBySortingClose}\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                        >\n                            <span className=\"close_btn\" onClick={sortBySortingClose}>\n                                <img src={cancel} alt=\"cancel\" />\n                            </span>\n                            <span className=\"sub_title\">Sort by</span>\n                            <div className=\"radio_wrap agree_check\">\n                                <input\n                                    className=\"filter-type filled-in\"\n                                    type=\"radio\"\n                                    id=\"highestRated\"\n                                    value=\"Highest rated\"\n                                    checked={sortBySorting.sortBy === 1}\n                                    onChange={() => sortByButtonClicked(1)} />\n                                <label htmlFor=\"highestRated\">Highest rated</label>\n                            </div>\n                            <div className=\"radio_wrap agree_check\">\n                                <input\n                                    className=\"filter-type filled-in\"\n                                    type=\"radio\"\n                                    id=\"closest\"\n                                    value=\"Closest to me\"\n                                    checked={sortBySorting.sortBy === 2}\n                                    onChange={() => sortByButtonClicked(2)}\n                                />\n                                <label htmlFor=\"closest\">Closest to me</label>\n                            </div>\n                            <div className=\"radio_wrap agree_check\">\n                                <input\n                                    className=\"filter-type filled-in\"\n                                    type=\"radio\"\n                                    id=\"mostJob\"\n                                    value=\"Most jobs completed\"\n                                    checked={sortBySorting.sortBy === 3}\n                                    onChange={() => sortByButtonClicked(3)}\n                                />\n                                <label htmlFor=\"mostJob\">Most jobs completed</label>\n                            </div>\n                        </Menu>\n                    </div>\n                </React.Fragment>\n            </div>\n\n            <div className=\"flex_row applicants_row\">\n                {console.log({ items }, '------------>')}\n                {items?.length ?\n                    items.map((item: any, index: any) => (\n                        <TradieBox\n                            item={item}\n                            index={index}\n                            specializationId={specializationId}\n                            jobId={jobid}\n                            hideInvite={item.status === 'CANCELLED JOB'}\n                            showStatus\n                        />\n                    ))\n                    :\n                    !isLoading && (\n                        <div className=\"no_record m-t-vh\">\n                            <figure className=\"no_img\">\n                                <img src={noDataFound} alt=\"data not found\" />\n                            </figure>\n                            <span>{'No Data Found'}</span>\n                        </div>\n                    )}\n            </div>\n        </>\n    )\n}\n\nexport default ApplicantsList;\n"]},"metadata":{},"sourceType":"module"}