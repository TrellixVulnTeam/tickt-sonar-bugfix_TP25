{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobType.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Constants from '../../../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nconst JobType = ({\n  categories: categoriesData,\n  jobTypes,\n  data,\n  stepCompleted,\n  editDetailPage,\n  handleStepForward,\n  handleStepJustUpdate,\n  handleStepComplete,\n  handleStepBack\n}) => {\n  _s();\n\n  const {\n    errorStrings\n  } = Constants;\n  const [jobTypeDetails, setJobTypeDetails] = useState({\n    categories: [],\n    job_type: [],\n    specialization: []\n  });\n  const [errors, setErrors] = useState({\n    job_type: '',\n    categories: '',\n    specialization: ''\n  });\n  const [continueClicked, setContinueClicked] = useState(false);\n  const [selectedAll, setSelectedAll] = useState(false);\n  const specializations = [];\n  const categoriesHTML = [];\n  const {\n    job_type,\n    categories,\n    specialization\n  } = jobTypeDetails;\n  categoriesData.forEach(({\n    _id,\n    trade_name,\n    selected_url,\n    specialisations\n  }) => {\n    if (categories.includes(_id)) {\n      specializations.push(...specialisations);\n    }\n\n    categoriesHTML.push( /*#__PURE__*/_jsxDEV(\"li\", {\n      className: categories.includes(_id) ? 'active' : undefined,\n      onClick: () => {\n        handleChange(_id, 'categories');\n        setSelectedAll(true);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selected_url,\n          alt: \"cat-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name\",\n        children: trade_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, _id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this));\n  });\n  useEffect(() => {\n    if (stepCompleted) {\n      let checkSelected = false;\n\n      if (categoriesData === null || categoriesData === void 0 ? void 0 : categoriesData.length) {\n        var _preSelectedSpec, _data$specialization, _preSelectedSpec2, _data$specialization2;\n\n        let preSelectedSpec = [];\n        preSelectedSpec = categoriesData.find(item => item._id === data.categories[0]).specialisations;\n\n        if (((_preSelectedSpec = preSelectedSpec) === null || _preSelectedSpec === void 0 ? void 0 : _preSelectedSpec.length) === ((_data$specialization = data.specialization) === null || _data$specialization === void 0 ? void 0 : _data$specialization.length)) {\n          checkSelected = true;\n        }\n\n        if (((_preSelectedSpec2 = preSelectedSpec) === null || _preSelectedSpec2 === void 0 ? void 0 : _preSelectedSpec2.length) && !((_data$specialization2 = data.specialization) === null || _data$specialization2 === void 0 ? void 0 : _data$specialization2.length)) {\n          checkSelected = true;\n        }\n      }\n\n      setJobTypeDetails({\n        categories: data.categories,\n        job_type: data.job_type,\n        specialization: checkSelected ? [] : data.specialization\n      });\n      console.log({\n        checkSelected\n      });\n      setSelectedAll(checkSelected);\n    }\n  }, [stepCompleted, data]); // for error messages\n\n  const label = {\n    job_type: 'Job Type',\n    categories: 'Categories',\n    specialization: 'Specialization'\n  };\n\n  const isEmpty = (name, value) => !value.length ? `${label[name]} is required.` : '';\n\n  const isInvalid = (name, value) => {\n    switch (name) {\n      case 'job_type':\n        return isEmpty(name, value);\n\n      case 'categories':\n        return isEmpty(name, value);\n\n      case 'specialization':\n        return isEmpty(name, value);\n    }\n  }; // update errors and jobDetails\n\n\n  const updateDetails = (value, name) => {\n    if (stepCompleted || continueClicked) {\n      setErrors(prevErrors => ({ ...prevErrors,\n        [name]: isInvalid(name, value)\n      }));\n    }\n\n    setJobTypeDetails(prevDetails => ({ ...prevDetails,\n      [name]: value\n    }));\n  }; // function callable on handle change\n\n\n  const handleChange = (value, name) => {\n    if (jobTypeDetails[name].includes(value)) {\n      updateDetails(jobTypeDetails[name].filter(val => val !== value), name); // when category is deselected, remove it's specialization\n\n      if (name === 'categories') {\n        var _categoriesData$find$;\n\n        const specializationsToBeRemoved = ((_categoriesData$find$ = categoriesData.find(({\n          _id\n        }) => _id === value).specialisations) === null || _categoriesData$find$ === void 0 ? void 0 : _categoriesData$find$.map(({\n          _id\n        }) => _id)) || [];\n        let itemsSpec = jobTypeDetails.specialization.filter(value => !specializationsToBeRemoved.includes(value));\n        updateDetails(itemsSpec, 'specialization');\n        updateDetails([], 'categories');\n      }\n    } else {\n      if (name !== \"specialization\") {\n        jobTypeDetails[name] = [value];\n        updateDetails(jobTypeDetails[name], name); // updateDetails([], 'specialization');\n      } else {\n        updateDetails(jobTypeDetails[name].concat([value]), name);\n      }\n    }\n  };\n\n  const handleContinue = () => {\n    let hasErrors;\n\n    if (selectedAll) {\n      setJobTypeDetails(prev => ({ ...prev,\n        'specialization': specializations.map(item => item._id)\n      }));\n    }\n\n    console.log({\n      jobTypeDetails\n    }, '-->');\n\n    if (!continueClicked) {\n      setContinueClicked(true);\n      hasErrors = Object.keys(jobTypeDetails).reduce((prevError, name) => {\n        let hasError = !!isInvalid(name, jobTypeDetails[name]);\n\n        if (name === 'specialization' && hasError) {\n          hasError = false;\n        }\n\n        setErrors(prevErrors => ({ ...prevErrors,\n          [name]: isInvalid(name, jobTypeDetails[name])\n        }));\n        return hasError || prevError;\n      }, false);\n    }\n\n    if (!hasErrors) {\n      var _jobTypeDetails$speci;\n\n      let dataItems = jobTypeDetails;\n\n      if ((jobTypeDetails === null || jobTypeDetails === void 0 ? void 0 : (_jobTypeDetails$speci = jobTypeDetails.specialization) === null || _jobTypeDetails$speci === void 0 ? void 0 : _jobTypeDetails$speci.length) === 0) {\n        if (selectedAll) {\n          dataItems['specialization'] = specializations.map(item => item._id);\n        }\n      }\n\n      if (editDetailPage === null || editDetailPage === void 0 ? void 0 : editDetailPage.currentScreen) {\n        handleStepJustUpdate(dataItems, true);\n      } else {\n        handleStepComplete(dataItems);\n      }\n    } else {\n      setContinueClicked(false);\n    }\n  }; // const checkErrors = () => {\n  //   if (!errors.job_type.length && !errors.specialization.length && !errors.categories.length) {\n  //     return false\n  //   }\n  //   return true;\n  // }\n\n\n  const checkErrors = () => {\n    let error_1 = isInvalid('categories', jobTypeDetails['categories']);\n    let error_2 = isInvalid('job_type', jobTypeDetails['job_type']);\n    let error_3 = isInvalid('specialization', jobTypeDetails['specialization']);\n\n    if (!(error_1 === null || error_1 === void 0 ? void 0 : error_1.length) && !(error_2 === null || error_2 === void 0 ? void 0 : error_2.length) && (!(error_3 === null || error_3 === void 0 ? void 0 : error_3.length) || selectedAll && (specializations === null || specializations === void 0 ? void 0 : specializations.length))) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section_wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex_col_sm_5\",\n              children: [(editDetailPage === null || editDetailPage === void 0 ? void 0 : editDetailPage.currentScreen) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relate\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"back\",\n                  onClick: () => {\n                    handleStepForward(14);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"title\",\n                  children: \"Job type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relate\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"back\",\n                  onClick: handleStepBack\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"title\",\n                  children: \"Job type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"commn_para\",\n                children: \"Select the category and the specialisations required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"xs_sub_title\",\n            children: \"Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select_sphere\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            children: categoriesHTML\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error_msg\",\n            children: errors.categories\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"xs_sub_title\",\n            children: \"Job Types\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"job_categories\",\n          children: jobTypes && Array.isArray(jobTypes) ? jobTypes.map(({\n            _id,\n            name,\n            image\n          }) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `draw${job_type.includes(_id) ? ' active' : ''}`,\n            onClick: () => handleChange(_id, 'job_type'),\n            children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n              className: \"type_icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: image,\n                alt: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"name\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this)]\n          }, _id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 17\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error_msg\",\n          children: errors.job_type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"xs_sub_title\",\n            children: 'Specialisation'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_6\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tags_wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [console.log({\n                  selectedAll,\n                  specializations\n                }), (specializations === null || specializations === void 0 ? void 0 : specializations.length) > 0 && /*#__PURE__*/_jsxDEV(\"li\", {\n                  onClick: () => {\n                    if (!selectedAll) {\n                      setSelectedAll(true);\n                    }\n\n                    updateDetails([], 'specialization');\n                  },\n                  className: selectedAll ? 'selected' : '',\n                  children: 'All'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 21\n                }, this), specializations.map(({\n                  _id,\n                  name\n                }) => {\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: specialization.includes(_id) && !selectedAll ? 'selected' : undefined,\n                    onClick: () => {\n                      handleChange(_id, 'specialization');\n\n                      if (selectedAll) {\n                        setSelectedAll(false);\n                      }\n                    },\n                    children: name\n                  }, _id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 23\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error_msg\",\n                children: !selectedAll ? errors.specialization : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_field\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `fill_btn full_btn btn-effect ${checkErrors() ? 'disable_btn' : ''}`,\n            onClick: () => {\n              if (selectedAll) {\n                // setJobTypeDetails((prev: any) => ({ ...prev, 'specialization': specializations.map((item: any) => item._id) }))\n                updateDetails(specializations.map(item => item._id), 'specialization');\n              }\n\n              handleContinue();\n            },\n            children: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JobType, \"GclcKEhnDrryoQRcAAq4ZYlkfcs=\");\n\n_c = JobType;\nexport default JobType;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobType\");","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/postJob/components/jobType.tsx"],"names":["useEffect","useState","Constants","JobType","categories","categoriesData","jobTypes","data","stepCompleted","editDetailPage","handleStepForward","handleStepJustUpdate","handleStepComplete","handleStepBack","errorStrings","jobTypeDetails","setJobTypeDetails","job_type","specialization","errors","setErrors","continueClicked","setContinueClicked","selectedAll","setSelectedAll","specializations","categoriesHTML","forEach","_id","trade_name","selected_url","specialisations","includes","push","undefined","handleChange","checkSelected","length","preSelectedSpec","find","item","console","log","label","isEmpty","name","value","isInvalid","updateDetails","prevErrors","prevDetails","filter","val","specializationsToBeRemoved","map","itemsSpec","concat","handleContinue","hasErrors","prev","Object","keys","reduce","prevError","hasError","dataItems","currentScreen","checkErrors","error_1","error_2","error_3","Array","isArray","image"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport Constants from '../../../utils/constants';\n\ninterface Proptypes {\n  categories: any;\n  jobTypes: any;\n  data: any;\n  editDetailPage: any;\n  stepCompleted: Boolean;\n  handleStepComplete: (data: any) => void;\n  handleStepBack: () => void;\n  handleStepForward: (data: any) => void;\n  handleStepJustUpdate: (data: any, goto: any) => void;\n};\n\nconst JobType = ({ categories: categoriesData, jobTypes, data, stepCompleted, editDetailPage, handleStepForward, handleStepJustUpdate, handleStepComplete, handleStepBack }: Proptypes) => {\n  const { errorStrings } = Constants;\n\n  const [jobTypeDetails, setJobTypeDetails] = useState<{ [index: string]: string[] }>({ categories: [], job_type: [], specialization: [] });\n  const [errors, setErrors] = useState({ job_type: '', categories: '', specialization: '' });\n  const [continueClicked, setContinueClicked] = useState(false);\n  const [selectedAll, setSelectedAll] = useState(false);\n\n\n\n\n  const specializations: Array<{ _id: string, name: string }> = [];\n  const categoriesHTML: JSX.Element[] = [];\n\n\n  const { job_type, categories, specialization } = jobTypeDetails;\n\n  categoriesData.forEach(({ _id, trade_name, selected_url, specialisations }: { _id: string, trade_name: string, selected_url: string, specialisations: [] }) => {\n    if (categories.includes(_id)) {\n      specializations.push(...specialisations);\n    }\n\n    categoriesHTML.push(\n      <li\n        key={_id}\n        className={categories.includes(_id) ? 'active' : undefined}\n        onClick={() => {\n          handleChange(_id, 'categories')\n          setSelectedAll(true);\n        }}>\n        <figure>\n          <img\n            src={selected_url}\n            alt=\"cat-icon\"\n          />\n        </figure>\n        <span className=\"name\">{trade_name}</span>\n      </li>\n    );\n  });\n\n  useEffect(() => {\n    if (stepCompleted) {\n      let checkSelected = false;\n\n      if (categoriesData?.length) {\n        let preSelectedSpec = [];\n        preSelectedSpec = categoriesData.find((item: any) => item._id === data.categories[0]).specialisations;\n\n        if (preSelectedSpec?.length === data.specialization?.length) {\n          checkSelected = true;\n        }\n\n        if (preSelectedSpec?.length && !data.specialization?.length) {\n          checkSelected = true;\n        }\n      }\n\n      setJobTypeDetails({\n        categories: data.categories,\n        job_type: data.job_type,\n        specialization: checkSelected ? [] : data.specialization\n      });\n\n      console.log({ checkSelected })\n      setSelectedAll(checkSelected)\n    }\n  }, [stepCompleted, data]);\n\n  // for error messages\n  const label: { [index: string]: string } = {\n    job_type: 'Job Type',\n    categories: 'Categories',\n    specialization: 'Specialization',\n  }\n\n  const isEmpty = (name: string, value: string[]) => !value.length ? `${label[name]} is required.` : '';\n\n  const isInvalid = (name: string, value: string[]) => {\n    switch (name) {\n      case 'job_type':\n        return isEmpty(name, value);\n      case 'categories':\n        return isEmpty(name, value);\n      case 'specialization':\n        return isEmpty(name, value);\n    }\n  }\n\n  // update errors and jobDetails\n  const updateDetails = (value: string[], name: string) => {\n    if (stepCompleted || continueClicked) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [name]: isInvalid(name, value),\n      }));\n    }\n\n    setJobTypeDetails((prevDetails) => ({\n      ...prevDetails,\n      [name]: value,\n    }));\n  };\n\n  // function callable on handle change\n  const handleChange = (value: string, name: string) => {\n\n    if (jobTypeDetails[name].includes(value)) {\n      updateDetails(jobTypeDetails[name].filter((val) => val !== value), name);\n\n      // when category is deselected, remove it's specialization\n      if (name === 'categories') {\n        const specializationsToBeRemoved = categoriesData.find(({ _id }: { _id: string }) => _id === value).specialisations?.map(({ _id }: { _id: string }) => _id) || [];\n        let itemsSpec = jobTypeDetails.specialization.filter((value) => !specializationsToBeRemoved.includes(value));\n        updateDetails(itemsSpec, 'specialization');\n        updateDetails([], 'categories');\n      }\n    } else {\n      if (name !== \"specialization\") {\n        jobTypeDetails[name] = [value]\n        updateDetails(jobTypeDetails[name], name);\n        // updateDetails([], 'specialization');\n      } else {\n        updateDetails(jobTypeDetails[name].concat([value]), name);\n      }\n    }\n  };\n\n  const handleContinue = () => {\n    let hasErrors;\n\n    if (selectedAll) {\n      setJobTypeDetails((prev: any) => ({ ...prev, 'specialization': specializations.map((item: any) => item._id) }))\n    }\n    console.log({ jobTypeDetails }, '-->')\n    if (!continueClicked) {\n      setContinueClicked(true);\n\n      hasErrors = Object.keys(jobTypeDetails).reduce((prevError, name) => {\n        let hasError = !!isInvalid(name, jobTypeDetails[name]);\n\n        if (name === 'specialization' && hasError) {\n          hasError = false;\n        }\n\n        setErrors((prevErrors) => ({\n          ...prevErrors,\n          [name]: isInvalid(name, jobTypeDetails[name]),\n        }));\n\n        return hasError || prevError;\n      }, false);\n    }\n\n    if (!hasErrors) {\n      let dataItems = jobTypeDetails;\n\n      if (jobTypeDetails?.specialization?.length === 0) {\n        if (selectedAll) {\n          dataItems['specialization'] = specializations.map((item: any) => item._id);\n        }\n      }\n\n      if (editDetailPage?.currentScreen) {\n        handleStepJustUpdate(dataItems, true)\n      } else {\n        handleStepComplete(dataItems);\n      }\n    } else {\n      setContinueClicked(false);\n    }\n  };\n\n\n  // const checkErrors = () => {\n  //   if (!errors.job_type.length && !errors.specialization.length && !errors.categories.length) {\n  //     return false\n  //   }\n  //   return true;\n  // }\n\n  const checkErrors = () => {\n    let error_1 = isInvalid('categories', jobTypeDetails['categories']);\n    let error_2 = isInvalid('job_type', jobTypeDetails['job_type']);\n    let error_3 = isInvalid('specialization', jobTypeDetails['specialization']);\n    if (!error_1?.length && !error_2?.length && (!error_3?.length || (selectedAll && specializations?.length))) {\n      return false;\n    }\n    return true;\n  }\n\n  return (\n    <div className=\"app_wrapper\">\n      <div className=\"section_wrapper\">\n        <div className=\"custom_container\">\n          <div className=\"form_field\">\n            <div className=\"flex_row\">\n              <div className=\"flex_col_sm_5\">\n\n                {editDetailPage?.currentScreen ? (\n                  <div className=\"relate\">\n                    <button className=\"back\" onClick={() => { handleStepForward(14) }}></button>\n                    <span className=\"title\">Job type</span>\n                  </div>\n                ) : (\n                  <div className=\"relate\">\n                    <button className=\"back\" onClick={handleStepBack}></button>\n                    <span className=\"title\">Job type</span>\n                  </div>\n                )}\n\n                <p className=\"commn_para\">Select the category and the specialisations required</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"form_field\">\n            <span className=\"xs_sub_title\">Categories</span>\n          </div>\n          <div className=\"select_sphere\">\n            <ul>\n              {categoriesHTML}\n            </ul>\n            <span className=\"error_msg\">{errors.categories}</span>\n          </div>\n          <div className=\"form_field\">\n            <span className=\"xs_sub_title\">Job Types</span>\n          </div>\n          <ul className=\"job_categories\">\n            {jobTypes && Array.isArray(jobTypes) ?\n              jobTypes.map(({ _id, name, image }: { _id: string, name: string, image: string }) => (\n                <li\n                  key={_id}\n                  className={`draw${job_type.includes(_id) ? ' active' : ''}`}\n                  onClick={() => handleChange(_id, 'job_type')}\n                >\n                  <figure className=\"type_icon\">\n                    <img\n                      src={image}\n                      alt=\"icon\"\n                    />\n                  </figure>\n                  <span className=\"name\">{name}</span>\n                </li>\n              )) : null}\n          </ul>\n          <span className=\"error_msg\">{errors.job_type}</span>\n          <div className=\"form_field\">\n            <span className=\"xs_sub_title\">\n              {'Specialisation'}\n            </span>\n          </div>\n          <div className=\"flex_row\">\n            <div className=\"flex_col_sm_6\">\n              <div className=\"tags_wrap\">\n                <ul>\n                  {console.log({ selectedAll, specializations })}\n                  {specializations?.length > 0 && (\n                    <li\n                      onClick={() => {\n                        if (!selectedAll) {\n                          setSelectedAll(true);\n                        }\n                        updateDetails([], 'specialization')\n                      }}\n                      className={selectedAll ? 'selected' : ''}>\n                      {'All'}\n                    </li>\n                  )}\n                  {specializations.map(({ _id, name }: { _id: string, name: string }) => {\n                    return (\n                      <li\n                        key={_id}\n                        className={specialization.includes(_id) && !selectedAll ? 'selected' : undefined}\n                        onClick={() => {\n                          handleChange(_id, 'specialization');\n                          if (selectedAll) {\n                            setSelectedAll(false);\n                          }\n                        }}\n                      >\n                        {name}\n                      </li>\n                    )\n                  })}\n                </ul>\n                <span className=\"error_msg\">\n                  {!selectedAll ? errors.specialization : ''}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"form_field\">\n            <button\n              className={`fill_btn full_btn btn-effect ${checkErrors() ? 'disable_btn' : ''}`}\n              onClick={() => {\n\n                if (selectedAll) {\n                  // setJobTypeDetails((prev: any) => ({ ...prev, 'specialization': specializations.map((item: any) => item._id) }))\n                  updateDetails(specializations.map((item: any) => item._id), 'specialization');\n                }\n\n                handleContinue();\n              }}>Continue</button>\n          </div>\n        </div>\n      </div>\n\n    </div >\n  )\n}\n\nexport default JobType\n"]},"metadata":{},"sourceType":"module"}