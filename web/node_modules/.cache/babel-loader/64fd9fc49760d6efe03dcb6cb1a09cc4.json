{"ast":null,"code":"import NetworkOps from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading } from '../common/actions';\nimport storageService from '../../utils/storageService';\nexport const callTradieProfileData = () => ({\n  type: actionTypes.GET_TRADIE_PROFILE_DATA\n});\nexport const getTradieProfileView = () => ({\n  type: actionTypes.GET_TRADIE_PROFILE_VIEW\n});\nexport const getBuilderProfileView = () => ({\n  type: actionTypes.GET_BUILDER_PROFILE_VIEW\n});\nexport const getTradieBasicDetails = () => ({\n  type: actionTypes.GET_TRADIE_BASIC_DETAILS\n});\nexport const cleanTradieBasicDetails = () => ({\n  type: actionTypes.CLEAN_TRADIE_BASIC_DETAILS\n});\nexport const cleanTradieProfileViewData = () => ({\n  type: actionTypes.CLEAN_TRADIE_PROFILE_VIEW_DATA\n});\nexport const tradieUpdateProfileDetails = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieUpdateProfileDetails : Urls.builderUpdateProfileDetails, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true\n    };\n  }\n\n  return {\n    success: false\n  };\n};\nexport const tradieUpdateBasicDetails = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieEditBasicDetails : Urls.builderEditBasicDetails, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const tradieAddPortfolioJob = async data => {\n  setLoading(true);\n  const response = await NetworkOps.postToJson(storageService.getItem('userType') === 1 ? Urls.tradieAddPortfolioJob : Urls.builderAddPortfolioJob, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const tradieUpdatePortfolioJob = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieUpdatePortfolioJob : Urls.builderUpdatePortfolioJob, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const tradieChangeEmail = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieChangeEmail : Urls.builderChangeEmail, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const verifyEmailOtp = async data => {\n  const response = await NetworkOps.putToJson(Urls.verifyEmailOtp, data);\n\n  if (response.status_code === 200) {\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const tradieDeletePortfolioJob = async portfolioId => {\n  setLoading(true);\n  const response = await NetworkOps.delete((storageService.getItem('userType') === 1 ? Urls.tradieDeletePortfolioJob : Urls.builderDeletePortfolioJob) + `?portfolioId=${portfolioId}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const getBankDetails = () => ({\n  type: actionTypes.GET_BANK_DETAILS_START\n});\nexport const addBankDetails = data => ({\n  type: actionTypes.ADD_BANK_DETAILS_START,\n  data\n});\nexport const updateBankDetails = data => ({\n  type: actionTypes.UPDATE_BANK_DETAILS_START,\n  data\n});\nexport const removeBankDetails = () => ({\n  type: actionTypes.REMOVE_BANK_DETAILS_START\n});\nexport const getSettings = () => ({\n  type: actionTypes.GET_SETTINGS\n});\nexport const updateSettings = (settings, newSettings) => ({\n  type: actionTypes.UPDATE_SETTINGS,\n  settings,\n  newSettings\n});\nexport const getTradieProfile = data => ({\n  type: actionTypes.GET_TRADIE_PROFILE,\n  data\n});\nexport const getProfileBuilder = () => ({\n  type: actionTypes.GET_PROFILE_BUILDER\n});\nexport const getPaymentHistory = (page, search, init) => ({\n  type: actionTypes.GET_PAYMENT_HISTORY,\n  page,\n  search,\n  init\n});\nexport const getPaymentDetails = jobId => ({\n  type: actionTypes.GET_PAYMENT_DETAILS,\n  jobId\n});\nexport const tradieUpdatePassword = async data => {\n  setLoading(true);\n  const response = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieChangePassword : Urls.builderChangePassword, data);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const getAllPostedJob = async page => {\n  setLoading(true);\n  const response = await NetworkOps.get(Urls.getAllPostedJobs + `?&page=${page}`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false\n  };\n};\nexport const getSavedJobList = page => ({\n  type: actionTypes.GET_SAVED_JOBS,\n  page\n});\nexport const clearSavedJobList = () => ({\n  type: actionTypes.SET_SAVED_JOBS,\n  payload: []\n});\nexport const getPrivacyPolicy = async () => {\n  const userType = storageService.getItem('userType');\n  setLoading(true);\n  const response = await NetworkOps.get(`${Urls.profile}${userType === 1 ? 'tradie/' : 'builder/'}privacyPolicy?type=web`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false,\n    data: ''\n  };\n};\nexport const getTnc = async () => {\n  const userType = storageService.getItem('userType');\n  setLoading(true);\n  const response = await NetworkOps.get(`${Urls.profile}${userType === 1 ? 'tradie/' : 'builder/'}tnc?type=web`);\n  setLoading(false);\n\n  if (response.status_code === 200) {\n    return {\n      success: true,\n      data: response.result\n    };\n  }\n\n  setShowToast(true, response.message);\n  return {\n    success: false,\n    data: ''\n  };\n};","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/redux/profile/actions.ts"],"names":["NetworkOps","Urls","actionTypes","setShowToast","setLoading","storageService","callTradieProfileData","type","GET_TRADIE_PROFILE_DATA","getTradieProfileView","GET_TRADIE_PROFILE_VIEW","getBuilderProfileView","GET_BUILDER_PROFILE_VIEW","getTradieBasicDetails","GET_TRADIE_BASIC_DETAILS","cleanTradieBasicDetails","CLEAN_TRADIE_BASIC_DETAILS","cleanTradieProfileViewData","CLEAN_TRADIE_PROFILE_VIEW_DATA","tradieUpdateProfileDetails","data","response","putToJson","getItem","builderUpdateProfileDetails","status_code","message","success","tradieUpdateBasicDetails","tradieEditBasicDetails","builderEditBasicDetails","tradieAddPortfolioJob","postToJson","builderAddPortfolioJob","result","tradieUpdatePortfolioJob","builderUpdatePortfolioJob","tradieChangeEmail","builderChangeEmail","verifyEmailOtp","tradieDeletePortfolioJob","portfolioId","delete","builderDeletePortfolioJob","getBankDetails","GET_BANK_DETAILS_START","addBankDetails","ADD_BANK_DETAILS_START","updateBankDetails","UPDATE_BANK_DETAILS_START","removeBankDetails","REMOVE_BANK_DETAILS_START","getSettings","GET_SETTINGS","updateSettings","settings","newSettings","UPDATE_SETTINGS","getTradieProfile","GET_TRADIE_PROFILE","getProfileBuilder","GET_PROFILE_BUILDER","getPaymentHistory","page","search","init","GET_PAYMENT_HISTORY","getPaymentDetails","jobId","GET_PAYMENT_DETAILS","tradieUpdatePassword","tradieChangePassword","builderChangePassword","getAllPostedJob","get","getAllPostedJobs","getSavedJobList","GET_SAVED_JOBS","clearSavedJobList","SET_SAVED_JOBS","payload","getPrivacyPolicy","userType","profile","getTnc"],"mappings":"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","sourcesContent":["import NetworkOps, { FetchResponse } from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading } from '../common/actions';\nimport storageService from '../../utils/storageService';\n\n\nexport const callTradieProfileData = () => ({ type: actionTypes.GET_TRADIE_PROFILE_DATA });\n\nexport const getTradieProfileView = () => ({ type: actionTypes.GET_TRADIE_PROFILE_VIEW });\n\nexport const getBuilderProfileView = () => ({ type: actionTypes.GET_BUILDER_PROFILE_VIEW });\n\nexport const getTradieBasicDetails = () => ({ type: actionTypes.GET_TRADIE_BASIC_DETAILS });\n\nexport const cleanTradieBasicDetails = () => ({ type: actionTypes.CLEAN_TRADIE_BASIC_DETAILS });\n\nexport const cleanTradieProfileViewData = () => ({ type: actionTypes.CLEAN_TRADIE_PROFILE_VIEW_DATA });\n\nexport const tradieUpdateProfileDetails = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieUpdateProfileDetails : Urls.builderUpdateProfileDetails, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return { success: true };\n  }\n  return { success: false };\n}\n\nexport const tradieUpdateBasicDetails = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieEditBasicDetails : Urls.builderEditBasicDetails, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n}\n\nexport const tradieAddPortfolioJob = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.postToJson(storageService.getItem('userType') === 1 ? Urls.tradieAddPortfolioJob : Urls.builderAddPortfolioJob, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return { success: true, data: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n}\n\nexport const tradieUpdatePortfolioJob = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieUpdatePortfolioJob : Urls.builderUpdatePortfolioJob, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n}\n\nexport const tradieChangeEmail = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieChangeEmail : Urls.builderChangeEmail, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n}\n\nexport const verifyEmailOtp = async (data: object) => {\n  const response: FetchResponse = await NetworkOps.putToJson(Urls.verifyEmailOtp, data);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false }\n};\n\nexport const tradieDeletePortfolioJob = async (portfolioId: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.delete((storageService.getItem('userType') === 1 ? Urls.tradieDeletePortfolioJob : Urls.builderDeletePortfolioJob) +  `?portfolioId=${portfolioId}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    setShowToast(true, response.message);\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n}\n\nexport const getBankDetails = () => ({\n  type: actionTypes.GET_BANK_DETAILS_START,\n});\n\nexport const addBankDetails = (data: any) => ({\n  type: actionTypes.ADD_BANK_DETAILS_START,\n  data,\n});\n\nexport const updateBankDetails = (data: any) => ({\n  type: actionTypes.UPDATE_BANK_DETAILS_START,\n  data,\n});\n\nexport const removeBankDetails = () => ({\n  type: actionTypes.REMOVE_BANK_DETAILS_START,\n});\n\nexport const getSettings = () => ({\n  type: actionTypes.GET_SETTINGS,\n});\n\nexport const updateSettings = (settings: any, newSettings: any) => ({\n  type: actionTypes.UPDATE_SETTINGS,\n  settings,\n  newSettings,\n});\n\nexport const getTradieProfile = (data: any) => ({ type: actionTypes.GET_TRADIE_PROFILE, data });\nexport const getProfileBuilder = () => ({ type: actionTypes.GET_PROFILE_BUILDER });\n\nexport const getPaymentHistory = (page: number, search: string, init: boolean) => ({ type: actionTypes.GET_PAYMENT_HISTORY, page, search, init });\nexport const getPaymentDetails = (jobId: string) => ({ type: actionTypes.GET_PAYMENT_DETAILS, jobId });\n\nexport const tradieUpdatePassword = async (data: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.putToJson(storageService.getItem('userType') === 1 ? Urls.tradieChangePassword : Urls.builderChangePassword, data);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n}\n\nexport const getAllPostedJob = async (page: any) => {\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(Urls.getAllPostedJobs + `?&page=${page}`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, data: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false };\n}\n\nexport const getSavedJobList = (page: number) => ({\n  type: actionTypes.GET_SAVED_JOBS,\n  page,\n});\n\nexport const clearSavedJobList = () => ({\n  type: actionTypes.SET_SAVED_JOBS,\n  payload: [],\n});\n\nexport const getPrivacyPolicy = async () => {\n  const userType = storageService.getItem('userType');\n\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(`${Urls.profile}${userType === 1 ? 'tradie/' : 'builder/'}privacyPolicy?type=web`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, data: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false, data: '' };\n}\n\nexport const getTnc = async () => {\n  const userType = storageService.getItem('userType');\n\n  setLoading(true);\n  const response: FetchResponse = await NetworkOps.get(`${Urls.profile}${userType === 1 ? 'tradie/' : 'builder/'}tnc?type=web`);\n  setLoading(false);\n  if (response.status_code === 200) {\n    return { success: true, data: response.result };\n  }\n  setShowToast(true, response.message);\n  return { success: false, data: '' };\n}\n"]},"metadata":{},"sourceType":"module"}