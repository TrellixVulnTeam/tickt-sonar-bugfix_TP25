{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/ListQuotes.tsx\";\nimport React, { Component } from \"react\";\nimport dummy from \"../../../../assets/images/u_placeholder.jpg\";\nimport NumberFormat from \"react-number-format\";\nimport { quoteByJobId } from \"../../../../redux/quotes/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ListQuotes extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      toggle: true,\n      dataItems: []\n    };\n\n    this.preFetchForQuotes = () => {\n      var _props$history, _props$history$locati;\n\n      const props = this.props;\n      const params = new URLSearchParams(props === null || props === void 0 ? void 0 : (_props$history = props.history) === null || _props$history === void 0 ? void 0 : (_props$history$locati = _props$history.location) === null || _props$history$locati === void 0 ? void 0 : _props$history$locati.search);\n      const jobId = params.get(\"jobId\");\n\n      if (jobId === null || jobId === void 0 ? void 0 : jobId.length) {\n        this.fetchQuotesById(jobId, 1);\n      }\n    };\n\n    this.fetchQuotesById = async (jobId, sortBy) => {\n      let result = await quoteByJobId({\n        jobId,\n        sortBy\n      });\n      console.log({\n        result\n      });\n\n      if (result === null || result === void 0 ? void 0 : result.success) {\n        var _result$data;\n\n        let data = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.resultData;\n\n        if (data) {\n          this.setState({\n            dataItems: data\n          });\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.preFetchForQuotes();\n  }\n\n  render() {\n    var _props$history2, _props$history2$locat;\n\n    const props = this.props;\n    const params = new URLSearchParams(props === null || props === void 0 ? void 0 : (_props$history2 = props.history) === null || _props$history2 === void 0 ? void 0 : (_props$history2$locat = _props$history2.location) === null || _props$history2$locat === void 0 ? void 0 : _props$history2$locat.search);\n    const activeType = params.get(\"active\");\n    const jobId = params.get(\"jobId\");\n    let {\n      dataItems,\n      toggle\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex_col_sm_5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relate\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                if (activeType === \"open\") {\n                  this.props.history.replace(`/jobs?active=open`);\n                  this.props.setJobLabel(\"open\");\n                }\n\n                if (activeType === \"applicant\") {\n                  this.props.history.replace(`/jobs?active=applicant`);\n                  this.props.setJobLabel(\"applicant\");\n                }\n              },\n              className: \"back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: \"24px\"\n              },\n              className: \"title\",\n              children: \"Quotes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sub_title\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.setState({\n              toggle: !this.state.toggle\n            }, () => {\n              this.preFetchForQuotes();\n            });\n          },\n          className: \"fill_grey_btn sort_btn\",\n          children: `${toggle ? \"Highest\" : \"Lowest\"} quote`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex_row tradies_row\",\n        children: dataItems.map(item => {\n          var _item$status;\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex_col_sm_6\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                minHeight: \"180px\"\n              },\n              className: \"tradie_card\",\n              \"data-aos\": \"fade-in\",\n              \"data-aos-delay\": \"250\",\n              \"data-aos-duration\": \"1000\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: () => {\n                  this.props.history.replace(`/jobs?active=${activeType}&viewQuotes=true&jobId=${jobId}&id=${item === null || item === void 0 ? void 0 : item._id}`);\n                  this.props.setJobLabel(\"quotes\");\n                },\n                className: \"more_detail circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user_wrap\",\n                children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n                  className: \"u_img\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: (item === null || item === void 0 ? void 0 : item.tradieImage) || dummy,\n                    alt: \"traide-img\",\n                    onError: e => {\n                      var _e$target, _e$target2;\n\n                      if (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.onerror) {\n                        e.target.onerror = null;\n                      }\n\n                      if (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.src) {\n                        e.target.src = dummy;\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: item === null || item === void 0 ? void 0 : item.tradieName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"commn_para\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"rating\",\n                      children: [(item === null || item === void 0 ? void 0 : item.rating) ? (item === null || item === void 0 ? void 0 : item.rating).toFixed(1) : \"0\", \" |\", \" \", (item === null || item === void 0 ? void 0 : item.reviewCount) || \"0\", \" reviews\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 131,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this), (item === null || item === void 0 ? void 0 : item.status) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form_field\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"job_status\",\n                  children: item === null || item === void 0 ? void 0 : (_item$status = item.status) === null || _item$status === void 0 ? void 0 : _item$status.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"fill_grey_btn full_btn btn-effect\",\n                onClick: () => {\n                  this.props.history.replace(`/jobs?active=${activeType}&viewQuotes=true&jobId=${jobId}&id=${item === null || item === void 0 ? void 0 : item._id}`);\n                  this.props.setJobLabel(\"quotes\");\n                },\n                children: [`Total quote:`, /*#__PURE__*/_jsxDEV(NumberFormat, {\n                  value: !!(item === null || item === void 0 ? void 0 : item.totalQuoteAmount) ? item === null || item === void 0 ? void 0 : item.totalQuoteAmount : \"0\",\n                  displayType: \"text\",\n                  prefix: \"$\",\n                  thousandSeparator: true,\n                  isNumericString: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ListQuotes;","map":{"version":3,"sources":["/home/appinventiv/Documents/Project/tickt/web/src/pages/builderJobDasboard/components/quoteJobs/ListQuotes.tsx"],"names":["React","Component","dummy","NumberFormat","quoteByJobId","ListQuotes","state","toggle","dataItems","preFetchForQuotes","props","params","URLSearchParams","history","location","search","jobId","get","length","fetchQuotesById","sortBy","result","console","log","success","data","resultData","setState","componentDidMount","render","activeType","replace","setJobLabel","fontSize","map","item","minHeight","_id","tradieImage","e","target","onerror","src","tradieName","rating","toFixed","reviewCount","status","toUpperCase","totalQuoteAmount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport dummy from \"../../../../assets/images/u_placeholder.jpg\";\nimport NumberFormat from \"react-number-format\";\n\nimport { quoteByJobId } from \"../../../../redux/quotes/actions\";\n\ntype State = {\n  toggle: boolean;\n  dataItems: any;\n};\n\ntype Props = {\n  quotes_param: any;\n  history: any;\n  setJobLabel: any;\n  jobId: string;\n};\n\nclass ListQuotes extends Component<Props, State> {\n  state: State = {\n    toggle: true,\n    dataItems: [],\n  };\n\n  componentDidMount() {\n    this.preFetchForQuotes();\n  }\n\n  preFetchForQuotes = () => {\n    const props: any = this.props;\n    const params = new URLSearchParams(props?.history?.location?.search);\n    const jobId: any = params.get(\"jobId\");\n    if (jobId?.length) {\n      this.fetchQuotesById(jobId, 1);\n    }\n  };\n\n  fetchQuotesById = async (jobId: string, sortBy: number) => {\n    let result = await quoteByJobId({ jobId, sortBy });\n    console.log({ result });\n    if (result?.success) {\n      let data = result?.data?.resultData;\n      if (data) {\n        this.setState({ dataItems: data });\n      }\n    }\n  };\n\n  render() {\n    const props: any = this.props;\n    const params = new URLSearchParams(props?.history?.location?.search);\n    const activeType = params.get(\"active\");\n    const jobId = params.get(\"jobId\");\n    let { dataItems, toggle } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"flex_row\">\n          <div className=\"flex_col_sm_5\">\n            <div className=\"relate\">\n              <button\n                onClick={() => {\n                  if (activeType === \"open\") {\n                    this.props.history.replace(`/jobs?active=open`);\n                    this.props.setJobLabel(\"open\");\n                  }\n\n                  if (activeType === \"applicant\") {\n                    this.props.history.replace(`/jobs?active=applicant`);\n                    this.props.setJobLabel(\"applicant\");\n                  }\n                }}\n                className=\"back\"\n              ></button>\n              <span style={{ fontSize: \"24px\" }} className=\"title\">\n                Quotes\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <span className=\"sub_title\">\n          <button\n            onClick={() => {\n              this.setState({ toggle: !this.state.toggle }, () => {\n                this.preFetchForQuotes();\n              });\n            }}\n            className=\"fill_grey_btn sort_btn\"\n          >\n            {`${toggle ? \"Highest\" : \"Lowest\"} quote`}\n          </button>\n        </span>\n\n        <div className=\"flex_row tradies_row\">\n          {dataItems.map((item: any) => (\n            <div className=\"flex_col_sm_6\">\n              <div\n                style={{ minHeight: \"180px\" }}\n                className=\"tradie_card\"\n                data-aos=\"fade-in\"\n                data-aos-delay=\"250\"\n                data-aos-duration=\"1000\"\n              >\n                <span\n                  onClick={() => {\n                    this.props.history.replace(\n                      `/jobs?active=${activeType}&viewQuotes=true&jobId=${jobId}&id=${item?._id}`\n                    );\n                    this.props.setJobLabel(\"quotes\");\n                  }}\n                  className=\"more_detail circle\"\n                ></span>\n                <div className=\"user_wrap\">\n                  <figure className=\"u_img\">\n                    <img\n                      src={item?.tradieImage || dummy}\n                      alt=\"traide-img\"\n                      onError={(e: any) => {\n                        if (e?.target?.onerror) {\n                          e.target.onerror = null;\n                        }\n                        if (e?.target?.src) {\n                          e.target.src = dummy;\n                        }\n                      }}\n                    />\n                  </figure>\n                  <div className=\"details\">\n                    <span className=\"name\">{item?.tradieName}</span>\n                    <p className=\"commn_para\">\n                      <span className=\"rating\">\n                        {item?.rating ? (item?.rating).toFixed(1) : \"0\"} |{\" \"}\n                        {item?.reviewCount || \"0\"} reviews\n                      </span>\n                    </p>\n                  </div>\n                </div>\n\n                {item?.status && (\n                  <div className=\"form_field\">\n                    <div className=\"job_status\">\n                      {item?.status?.toUpperCase()}\n                    </div>\n                  </div>\n                )}\n\n                <button\n                  className=\"fill_grey_btn full_btn btn-effect\"\n                  onClick={() => {\n                    this.props.history.replace(\n                      `/jobs?active=${activeType}&viewQuotes=true&jobId=${jobId}&id=${item?._id}`\n                    );\n                    this.props.setJobLabel(\"quotes\");\n                  }}\n                >\n                  {`Total quote:`}\n                  {\n                    <NumberFormat\n                      value={\n                        !!item?.totalQuoteAmount ? item?.totalQuoteAmount : \"0\"\n                      }\n                      displayType={\"text\"}\n                      prefix={\"$\"}\n                      thousandSeparator={true}\n                      isNumericString={true}\n                    />\n                  }\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ListQuotes;\n"]},"metadata":{},"sourceType":"module"}